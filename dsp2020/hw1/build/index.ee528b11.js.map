{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@tensorflow/tfjs-core/dist/environment.js","./node_modules/process/browser.js","./node_modules/@tensorflow/tfjs-core/dist/global_util.js","./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","./node_modules/@tensorflow/tfjs-core/dist/util.js","./node_modules/@tensorflow/tfjs-core/dist/profiler.js","./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","./node_modules/@tensorflow/tfjs-core/dist/tensor.js","./node_modules/@tensorflow/tfjs-core/dist/types.js","./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","./node_modules/@tensorflow/tfjs-core/dist/engine.js","./node_modules/@tensorflow/tfjs-core/dist/tape.js","./node_modules/@tensorflow/tfjs-core/dist/device_util.js","./node_modules/@tensorflow/tfjs-core/dist/flags.js","./node_modules/base64-js/index.js","./node_modules/ieee754/index.js","./node_modules/buffer/index.js","./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js","./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js","./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js","./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js","./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js","./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","./node_modules/@tensorflow/tfjs-core/dist/ops/print.js","./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","./node_modules/@tensorflow/tfjs-core/dist/io/progress.js","./node_modules/@tensorflow/tfjs-core/dist/io/http.js","./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js","./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js","./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js","./node_modules/@tensorflow/tfjs-core/dist/serialization.js","./node_modules/@tensorflow/tfjs-core/dist/globals.js","./node_modules/@tensorflow/tfjs-core/dist/ops/add.js","./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","./node_modules/@tensorflow/tfjs-core/dist/ops/div.js","./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js","./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js","./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/all.js","./node_modules/@tensorflow/tfjs-core/dist/ops/any.js","./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js","./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js","./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js","./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js","./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js","./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js","./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js","./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js","./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js","./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js","./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js","./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js","./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/where.js","./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js","./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js","./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js","./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js","./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js","./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js","./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js","./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js","./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js","./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js","./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js","./node_modules/@tensorflow/tfjs-core/dist/ops/less.js","./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js","./node_modules/@tensorflow/tfjs-core/dist/ops/log.js","./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js","./node_modules/@tensorflow/tfjs-core/dist/gradients.js","./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js","./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js","./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js","./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js","./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js","./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","./node_modules/@tensorflow/tfjs-core/dist/ops/min.js","./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js","./node_modules/@tensorflow/tfjs-core/dist/ops/square.js","./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js","./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js","./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js","./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/real.js","./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js","./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js","./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js","./node_modules/seedrandom/lib/alea.js","./node_modules/seedrandom/lib/xor128.js","./node_modules/seedrandom/lib/xorwow.js","./node_modules/seedrandom/lib/xorshift7.js","./node_modules/seedrandom/lib/xor4096.js","./node_modules/seedrandom/lib/tychei.js","./node_modules/seedrandom/seedrandom.js","./node_modules/seedrandom/index.js","./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js","./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/range.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/round.js","./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js","./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js","./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js","./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js","./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js","./node_modules/@tensorflow/tfjs-core/dist/ops/split.js","./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","./node_modules/@tensorflow/tfjs-core/dist/ops/step.js","./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js","./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js","./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js","./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js","./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js","./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js","./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js","./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js","./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js","./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js","./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js","./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js","./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js","./node_modules/@tensorflow/tfjs-core/dist/backends/array_util.js","./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js","./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js","./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js","./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js","./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js","./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js","./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js","./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js","./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js","./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js","./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js","./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js","./node_modules/@tensorflow/tfjs-core/dist/browser_util.js","./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js","./node_modules/@tensorflow/tfjs-core/dist/train.js","./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js","./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js","./node_modules/@tensorflow/tfjs-core/dist/log.js","./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js","./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js","./node_modules/@tensorflow/tfjs-core/dist/backends/split_shared.js","./node_modules/@tensorflow/tfjs-core/dist/backends/tile_impl.js","./node_modules/@tensorflow/tfjs-core/dist/backends/topk_impl.js","./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_backprop.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_backprop.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Div_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_backprop.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js","./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_backprop.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js","./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Negate_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/SelectV2_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js","./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js","./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js","./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js","./node_modules/@tensorflow/tfjs-layers/dist/errors.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/constraints.js","./node_modules/@tensorflow/tfjs-layers/dist/keras_format/common.js","./node_modules/@tensorflow/tfjs-layers/dist/common.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js","./node_modules/@tensorflow/tfjs-layers/dist/keras_format/initializer_config.js","./node_modules/@tensorflow/tfjs-layers/dist/initializers.js","./node_modules/@tensorflow/tfjs-layers/dist/backend/state.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/variables.js","./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js","./node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js","./node_modules/@tensorflow/tfjs-layers/dist/logs.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js","./node_modules/@tensorflow/tfjs-layers/dist/losses.js","./node_modules/@tensorflow/tfjs-layers/dist/metrics.js","./node_modules/@tensorflow/tfjs-layers/dist/user_defined_metadata.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/layer_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js","./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js","./node_modules/@tensorflow/tfjs-layers/dist/models.js","./node_modules/@tensorflow/tfjs-layers/dist/activations.js","./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js","./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_recurrent.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js","./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js","./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js","./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js","./node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js","./node_modules/@tensorflow/tfjs-data/dist/util/deep_clone.js","./node_modules/@tensorflow/tfjs-data/dist/util/ring_buffer.js","./node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js","./node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js","./node_modules/@tensorflow/tfjs-data/dist/dataset.js","./node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cos.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2D.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropFilter.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropInput.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/kernel_utils.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Div_impl.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Div.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FlipLeftRight.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax_impl.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV4.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV5.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/PadV2.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RotateWithOffset.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SpaceToBatchND.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Square.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","./node_modules/@tensorflow/tfjs-backend-cpu/dist/register_all_kernels.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/cumsum_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Div_impl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js","./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js","./dsp2020/hw1/dev/src/index.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            console.warn(`Platform ${this.platformName} has already been set. ` +\n                `Overwriting the platform with ${platform}.`);\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because the\n        // environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (flagValue instanceof Promise) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    value = value.toLowerCase();\n    if (value === 'true' || value === 'false') {\n        return value === 'true';\n    }\n    else if (`${+value}` === value) {\n        return +value;\n    }\n    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n//# sourceMappingURL=environment.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace;\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace() {\n    if (globalNameSpace == null) {\n        // tslint:disable-next-line:no-any\n        let ns;\n        if (typeof (window) !== 'undefined') {\n            ns = window;\n        }\n        else if (typeof (global) !== 'undefined') {\n            ns = global;\n        }\n        else if (typeof (process) !== 'undefined') {\n            ns = process;\n        }\n        else if (typeof (self) !== 'undefined') {\n            ns = self;\n        }\n        else {\n            throw new Error('Could not find a global object');\n        }\n        globalNameSpace = ns;\n    }\n    return globalNameSpace;\n}\n// tslint:disable-next-line:no-any\nfunction getGlobalMap() {\n    const ns = getGlobalNamespace();\n    if (ns._tfGlobals == null) {\n        ns._tfGlobals = new Map();\n    }\n    return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal(key, init) {\n    const globalMap = getGlobalMap();\n    if (globalMap.has(key)) {\n        return globalMap.get(key);\n    }\n    else {\n        const singleton = init();\n        globalMap.set(key, singleton);\n        return globalMap.get(key);\n    }\n}\n//# sourceMappingURL=global_util.js.map","export const Abs = 'Abs';\nexport const Acos = 'Acos';\nexport const Acosh = 'Acosh';\nexport const Add = 'Add';\nexport const AddN = 'AddN';\nexport const All = 'All';\nexport const Any = 'Any';\nexport const ArgMax = 'ArgMax';\nexport const ArgMin = 'ArgMin';\nexport const Asin = 'Asin';\nexport const Asinh = 'Asinh';\nexport const Atan = 'Atan';\nexport const Atanh = 'Atanh';\nexport const Atan2 = 'Atan2';\nexport const AvgPool = 'AvgPool';\nexport const AvgPoolBackprop = 'AvgPoolBackprop';\nexport const AvgPool3D = 'AvgPool3D';\nexport const AvgPool3DBackprop = 'AvgPool3DBackprop';\nexport const BatchMatMul = 'BatchMatMul';\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport const BroadcastTo = 'BroadcastTo';\nexport const Cast = 'Cast';\nexport const Ceil = 'Ceil';\nexport const ClipByValue = 'ClipByValue';\nexport const Complex = 'Complex';\nexport const Concat = 'Concat';\nexport const Conv2D = 'Conv2D';\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport const Conv3D = 'Conv3D';\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport const Cos = 'Cos';\nexport const Cosh = 'Cosh';\nexport const Cumsum = 'Cumsum';\nexport const CropAndResize = 'CropAndResize';\nexport const DepthToSpace = 'DepthToSpace';\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';\nexport const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';\nexport const Diag = 'Diag';\nexport const Dilation2D = 'Dilation2D';\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport const Div = 'Div';\nexport const Elu = 'Elu';\nexport const EluGrad = 'EluGrad';\nexport const Erf = 'Erf';\nexport const Equal = 'Equal';\nexport const Exp = 'Exp';\nexport const Expm1 = 'Expm1';\nexport const FFT = 'FFT';\nexport const Fill = 'Fill';\nexport const FlipLeftRight = 'FlipLeftRight';\nexport const Floor = 'Floor';\nexport const FloorDiv = 'FloorDiv';\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport const GatherV2 = 'GatherV2';\nexport const GatherNd = 'GatherNd';\nexport const Greater = 'Greater';\nexport const GreaterEqual = 'GreaterEqual';\nexport const Identity = 'Identity';\nexport const IFFT = 'IFFT';\nexport const Imag = 'Imag';\nexport const IsFinite = 'IsFinite';\nexport const IsInf = 'IsInf';\nexport const IsNan = 'IsNan';\nexport const Less = 'Less';\nexport const LessEqual = 'LessEqual';\nexport const LinSpace = 'LinSpace';\nexport const Log = 'Log';\nexport const Log1p = 'Log1p';\nexport const LogicalAnd = 'LogicalAnd';\nexport const LogicalNot = 'LogicalNot';\nexport const LogicalOr = 'LogicalOr';\nexport const LogSoftmax = 'LogSoftmax';\nexport const LRN = 'LRN';\nexport const LRNBackprop = 'LRNBackprop';\nexport const Max = 'Max';\nexport const Maximum = 'Maximum';\nexport const MaxPool = 'MaxPool';\nexport const MaxPoolBackprop = 'MaxPoolBackprop';\nexport const MaxPool3D = 'MaxPool3D';\nexport const MaxPool3DBackprop = 'MaxPool3DBackprop';\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport const Mean = 'Mean';\nexport const Min = 'Min';\nexport const Minimum = 'Minimum';\nexport const Mod = 'Mod';\nexport const Multiply = 'Multiply';\nexport const Negate = 'Negate';\nexport const NotEqual = 'NotEqual';\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport const OnesLike = 'OnesLike';\nexport const OneHot = 'OneHot';\nexport const PadV2 = 'PadV2';\nexport const Pool = 'Pool';\nexport const Pow = 'Pow';\nexport const Prelu = 'Prelu';\nexport const Prod = 'Prod';\nexport const Range = 'Range';\nexport const Real = 'Real';\nexport const Reciprocal = 'Reciprocal';\nexport const Relu = 'Relu';\nexport const Reshape = 'Reshape';\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport const ResizeBilinear = 'ResizeBilinear';\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport const Relu6 = 'Relu6';\nexport const Reverse = 'Reverse';\nexport const Round = 'Round';\nexport const Rsqrt = 'Rsqrt';\nexport const ScatterNd = 'ScatterNd';\nexport const SelectV2 = 'SelectV2';\nexport const Selu = 'Selu';\nexport const Slice = 'Slice';\nexport const Sin = 'Sin';\nexport const Sinh = 'Sinh';\nexport const Sign = 'Sign';\nexport const Sigmoid = 'Sigmoid';\nexport const Softplus = 'Softplus';\nexport const Sqrt = 'Sqrt';\nexport const Sum = 'Sum';\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport const SplitV = 'SplitV';\nexport const Softmax = 'Softmax';\nexport const SquaredDifference = 'SquaredDifference';\nexport const Square = 'Square';\nexport const Sub = 'Sub';\nexport const SparseToDense = 'SparseToDense';\nexport const StridedSlice = 'StridedSlice';\nexport const Tan = 'Tan';\nexport const Tanh = 'Tanh';\nexport const Tile = 'Tile';\nexport const TopK = 'TopK';\nexport const Transpose = 'Transpose';\nexport const Unpack = 'Unpack';\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport const ZerosLike = 'ZerosLike';\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport const FromPixels = 'FromPixels';\nexport const RotateWithOffset = 'RotateWithOffset';\nexport const _FusedMatMul = '_FusedMatMul';\nexport const FusedConv2D = 'FusedConv2D';\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\n//# sourceMappingURL=kernel_names.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        console.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            console.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n//# sourceMappingURL=kernel_registry.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let temp = 0;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nfunction createNestedArray(offset, shape, a) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0];\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}.`);\n    }\n    return createNestedArray(0, shape, a);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n//# sourceMappingURL=util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        const timer = this.backendTimer.time(holdResultWrapperFn);\n        for (let i = 0; i < outputs.length; i++) {\n            const output = outputs[i];\n            // Dangling promise here because we don't want to propagate up\n            // asynchronicity.\n            output.data().then(tensorVals => {\n                checkComputationForErrors(tensorVals, output.dtype, kernelName);\n            });\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n//# sourceMappingURL=profiler.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n    const strides = computeStrides(shape);\n    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n    const rank = shape.length;\n    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n    const lines = ['Tensor'];\n    if (verbose) {\n        lines.push(`  dtype: ${dtype}`);\n        lines.push(`  rank: ${rank}`);\n        lines.push(`  shape: [${shape}]`);\n        lines.push(`  values:`);\n    }\n    lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n    return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n    const n = sizeFromShape(shape);\n    const numCols = strides[strides.length - 1];\n    const padPerCol = new Array(numCols).fill(0);\n    const rank = shape.length;\n    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n    if (rank > 1) {\n        for (let row = 0; row < n / numCols; row++) {\n            const offset = row * numCols;\n            for (let j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n    let valStr;\n    if (Array.isArray(val)) {\n        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n    }\n    else if (isString(val)) {\n        valStr = `'${val}'`;\n    }\n    else if (dtype === 'bool') {\n        valStr = boolNumToString(val);\n    }\n    else {\n        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n    }\n    return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n    return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n    const storagePerElement = dtype === 'complex64' ? 2 : 1;\n    const size = shape[0];\n    const rank = shape.length;\n    if (rank === 0) {\n        if (dtype === 'complex64') {\n            const complexTuple = createComplexTuples(vals);\n            return [valToString(complexTuple[0], 0, dtype)];\n        }\n        if (dtype === 'bool') {\n            return [boolNumToString(vals[0])];\n        }\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n            let firstVals = Array.from(vals.slice(0, firstValsSize));\n            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n            if (dtype === 'complex64') {\n                firstVals = createComplexTuples(firstVals);\n                lastVals = createComplexTuples(lastVals);\n            }\n            return [\n                '[' +\n                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                        .join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :\n            Array.from(vals);\n        return [\n            '[' +\n                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                    .join(', ') +\n                ']'\n        ];\n    }\n    // The array is rank 2 or more.\n    const subshape = shape.slice(1);\n    const substrides = strides.slice(1);\n    const stride = strides[0] * storagePerElement;\n    const lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n        }\n        lines.push('...');\n        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    else {\n        for (let i = 0; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    const sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + lines[0] + sep;\n    for (let i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    let newLineSep = ',\\n';\n    for (let i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\nfunction createComplexTuples(vals) {\n    const complexTuples = [];\n    for (let i = 0; i < vals.length; i += 2) {\n        complexTuples.push([vals[i], vals[i + 1]]);\n    }\n    return complexTuples;\n}\n//# sourceMappingURL=tensor_format.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals);\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync());\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n//# sourceMappingURL=tensor.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Rank;\n(function (Rank) {\n    Rank[\"R0\"] = \"R0\";\n    Rank[\"R1\"] = \"R1\";\n    Rank[\"R2\"] = \"R2\";\n    Rank[\"R3\"] = \"R3\";\n    Rank[\"R4\"] = \"R4\";\n    Rank[\"R5\"] = \"R5\";\n    Rank[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\n    UpcastInt32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\n    UpcastBoolAndMap[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\n    UpcastFloat32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function (UpcastComplex64AndMap) {\n    UpcastComplex64AndMap[\"float32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"int32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"bool\"] = \"complex64\";\n    UpcastComplex64AndMap[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nconst upcastTypeMap = {\n    'float32': UpcastFloat32AndMap,\n    'int32': UpcastInt32AndMap,\n    'bool': UpcastBoolAndMap,\n    'complex64': UpcastComplex64AndMap\n};\nexport function upcastType(typeA, typeB) {\n    if (typeA === 'string' || typeB === 'string') {\n        if (typeA === 'string' && typeB === 'string') {\n            return 'string';\n        }\n        throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n    }\n    return upcastTypeMap[typeA][typeB];\n}\n/** Returns the output type after summation. */\nexport function sumOutType(type) {\n    return upcastType(type, 'int32');\n}\n//# sourceMappingURL=types.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n//# sourceMappingURL=tensor_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            console.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            // Test if the factory returns a promise.\n            if (Promise.resolve(backend) === backend) {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    console.warn(`Initialization of backend ${backendName} failed`);\n                    console.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            console.warn(`Initialization of backend ${backendName} failed`);\n            console.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     *\n     * This method will go away once all kernels are modularized since we won't\n     * need to turn off the tape inside runKernel().\n     */\n    clone(x) {\n        const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null /* grad */, Cast, attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {\n        const forwardFunc = null;\n        const backwardsFunc = null;\n        // Call runKernel as a stop-gap until we modularize all kernels.\n        // Once we modularize all kernels, we will remove the existing\n        // `runKernelFunc`.\n        return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * @deprecated Use `runKernel` for newly added kernels. Keep using this method\n     *     only for kernels that are not yet fully modularized.\n     */\n    runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        if (kernelName == null) {\n            kernelName =\n                this.state.activeScope != null ? this.state.activeScope.name : '';\n        }\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        const kernel = getKernel(kernelName, this.backendName);\n        let out;\n        if (kernel != null) {\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map(({ dataId, shape, dtype }) => this.makeTensorFromDataId(dataId, shape, dtype));\n                // Save the inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (isTapeOn) {\n                    let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    if (tensorsToSave == null) {\n                        // Fallback for ops that call runKernelFunc and pass in\n                        // inputsToSave and outputsToSave. Currently this is the set of ops\n                        // with kernel support in the WASM backend. Once those ops and\n                        // respective gradients are modularised we can remove this path.\n                        if (outputsToSave == null) {\n                            outputsToSave = [];\n                        }\n                        const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);\n                        tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);\n                    }\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        // Stop recording to a tape when running a kernel.\n        let kernelProfile;\n        this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * Returns undefined if their is no registered gradient for this kernel in the\n     * gradient registry.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // TODO(yassogba) throw exception here once all runkernelFunc calls with\n        // inputsToSave/outputsToSave are removed\n        return null;\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.incRef(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.incRef(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    incRef(a, backend) {\n        const refCount = this.state.tensorInfo.has(a.dataId) ?\n            this.state.tensorInfo.get(a.dataId).refCount :\n            0;\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        if (refCount === 0) {\n            this.state.numDataBuffers++;\n            // Bytes for complex numbers are counted by their components. Bytes for\n            // string tensors are counted when writing values.\n            let bytes = 0;\n            if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n                bytes = a.size * util.bytesPerElement(a.dtype);\n            }\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes,\n                refCount: 0\n            });\n            this.state.numBytes += bytes;\n        }\n        this.state.tensorInfo.get(a.dataId).refCount++;\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        const refCount = info.refCount;\n        if (refCount <= 1) {\n            // Don't count bytes for complex numbers as they are counted by their\n            // components.\n            if (a.dtype !== 'complex64') {\n                this.state.numBytes -= info.bytes;\n            }\n            this.state.numDataBuffers--;\n            info.backend.disposeData(a.dataId);\n            this.state.tensorInfo.delete(a.dataId);\n        }\n        else {\n            this.state.tensorInfo.get(a.dataId).refCount--;\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            return this.runKernelFunc((_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            }, inputMap, (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.add(a, b);\n        save([a, b]);\n        return res;\n    }, inputs, null /* gradient */, Add);\n}\n//# sourceMappingURL=engine.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(tape, xs, y) {\n    // Forward pass to compute all the nodes and Tensors that are transitively a\n    // function of x.\n    const tensorsFromX = {};\n    const nodesFromX = {};\n    for (let i = 0; i < xs.length; i++) {\n        tensorsFromX[xs[i].id] = true;\n    }\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        for (const inputName in nodeInputs) {\n            const input = nodeInputs[inputName];\n            let anyInputFromX = false;\n            for (let j = 0; j < xs.length; j++) {\n                if (tensorsFromX[input.id]) {\n                    node.outputs.forEach(output => tensorsFromX[output.id] = true);\n                    anyInputFromX = true;\n                    nodesFromX[node.id] = true;\n                    break;\n                }\n            }\n            if (anyInputFromX) {\n                break;\n            }\n        }\n    }\n    // Backward pass to find all of the nodes and Tensors that lead to y.\n    const tensorsLeadToY = {};\n    tensorsLeadToY[y.id] = true;\n    const nodesToY = {};\n    for (let i = tape.length - 1; i >= 0; i--) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        // If any of the outputs lead to y, mark all of the inputs as leading to y.\n        for (let j = 0; j < node.outputs.length; j++) {\n            if (tensorsLeadToY[node.outputs[j].id]) {\n                for (const inputName in nodeInputs) {\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\n                    nodesToY[node.id] = true;\n                }\n                break;\n            }\n        }\n    }\n    // Return the paths that come from x and lead to y.\n    const filteredTape = [];\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\n            // Prune the inputs from the node that aren't a function of x.\n            const prunedInputs = {};\n            for (const inputName in node.inputs) {\n                const nodeInput = node.inputs[inputName];\n                if (tensorsFromX[nodeInput.id]) {\n                    prunedInputs[inputName] = nodeInput;\n                }\n            }\n            // Copy the node and overwrite inputsAndArgs to the pruned version.\n            const prunedNode = Object.assign({}, node);\n            prunedNode.inputs = prunedInputs;\n            prunedNode.outputs = node.outputs;\n            filteredTape.push(prunedNode);\n        }\n    }\n    return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n    // Walk the tape backward and keep a map of Tensor to its gradient.\n    for (let i = filteredTape.length - 1; i >= 0; i--) {\n        const node = filteredTape[i];\n        const dys = [];\n        node.outputs.forEach(o => {\n            const gradTensor = tensorAccumulatedGradientMap[o.id];\n            if (gradTensor != null) {\n                dys.push(gradTensor);\n            }\n            else {\n                // This particular output is not in the back-propagation subgraph, so it\n                // does not affect the final output, thus we put null for its dy.\n                dys.push(null);\n            }\n        });\n        if (node.gradient == null) {\n            throw new Error(`Cannot compute gradient: gradient function not found ` +\n                `for ${node.kernelName}.`);\n        }\n        // Backprop dy through this node and accumulate gradients over the inputs.\n        const inputGradients = node.gradient(dys);\n        for (const inputName in node.inputs) {\n            if (!(inputName in inputGradients)) {\n                throw new Error(`Cannot backprop through input ${inputName}. ` +\n                    `Available gradients found: ${Object.keys(inputGradients)}.`);\n            }\n            // Call the gradient function.\n            const dx = tidy(() => inputGradients[inputName]());\n            if (dx.dtype !== 'float32') {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n            }\n            const x = node.inputs[inputName];\n            if (!util.arraysEqual(dx.shape, x.shape)) {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `'${inputName}' has shape '${dx.shape}', which does not match ` +\n                    `the shape of the input '${x.shape}'`);\n            }\n            if (tensorAccumulatedGradientMap[x.id] == null) {\n                tensorAccumulatedGradientMap[x.id] = dx;\n            }\n            else {\n                const curGradient = tensorAccumulatedGradientMap[x.id];\n                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n                curGradient.dispose();\n            }\n        }\n    }\n}\n//# sourceMappingURL=tape.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined() {\n    return typeof navigator !== 'undefined' && navigator != null;\n}\nexport function isMobile() {\n    if (_isNavigatorDefined()) {\n        // tslint:disable-next-line:no-any\n        const a = navigator.userAgent || navigator.vendor || window.opera;\n        // tslint:disable-next-line:max-line-length\n        return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n                .test(a.substr(0, 4));\n    }\n    return false;\n}\nexport function isBrowser() {\n    return (typeof window !== 'undefined' && window.document != null) ||\n        //@ts-ignore\n        (typeof WorkerGlobalScope !== 'undefined');\n}\n//# sourceMappingURL=device_util.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n//# sourceMappingURL=flags.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('nodejs.util.inspect.custom')\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { Tensor } from './tensor';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nexport function inferShape(val, dtype) {\n    let firstElem = val;\n    if (isTypedArray(val)) {\n        return dtype === 'string' ? [] : [val.length];\n    }\n    if (!Array.isArray(val)) {\n        return []; // Scalar.\n    }\n    const shape = [];\n    while (Array.isArray(firstElem) ||\n        isTypedArray(firstElem) && dtype !== 'string') {\n        shape.push(firstElem.length);\n        firstElem = firstElem[0];\n    }\n    if (Array.isArray(val) &&\n        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n        deepAssertShapeConsistency(val, shape, []);\n    }\n    return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n    indices = indices || [];\n    if (!(Array.isArray(val)) && !isTypedArray(val)) {\n        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n        return;\n    }\n    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n        `but is an array of ${val.length} elements`);\n    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n        `elements, but has ${val.length} elements`);\n    const subShape = shape.slice(1);\n    for (let i = 0; i < val.length; ++i) {\n        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n    }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n    if (expectedDtype == null) {\n        return;\n    }\n    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n        expectedDtype === 'numeric' && actualDType === 'string') {\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +\n            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n    }\n}\nexport function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {\n    if (x instanceof Tensor) {\n        assertDtype(parseAsDtype, x.dtype, argName, functionName);\n        return x;\n    }\n    let inferredDtype = inferDtype(x);\n    // If the user expects a bool/int/float, use that info to update the\n    // inferredDtype when it is not a string.\n    if (inferredDtype !== 'string' &&\n        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n        inferredDtype = parseAsDtype;\n    }\n    assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n    if ((x == null) ||\n        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n            typeof x !== 'boolean' && typeof x !== 'string')) {\n        const type = x == null ? 'null' : x.constructor.name;\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +\n            `Tensor or TensorLike, but got '${type}'`);\n    }\n    const inferredShape = inferShape(x, inferredDtype);\n    if (!isTypedArray(x) && !Array.isArray(x)) {\n        x = [x];\n    }\n    const skipTypedArray = true;\n    const values = inferredDtype !== 'string' ?\n        toTypedArray(x, inferredDtype) :\n        flatten(x, [], skipTypedArray);\n    return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {\n    if (!Array.isArray(arg)) {\n        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +\n            '`Tensor[]` or `TensorLike[]`');\n    }\n    const tensors = arg;\n    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName), parseAsDtype);\n}\n//# sourceMappingURL=tensor_util_env.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n    const keys = Object.keys(f);\n    if (keys.length !== 1) {\n        throw new Error(`Please provide an object with a single key ` +\n            `(operation name) mapping to a function. Got an object with ` +\n            `${keys.length} keys.`);\n    }\n    let opName = keys[0];\n    const fn = f[opName];\n    // Strip the underscore from the end of the function name.\n    if (opName.endsWith('_')) {\n        opName = opName.substring(0, opName.length - 1);\n    }\n    // add an __op suffix to distinguish ops from kernels in tf.profile\n    opName = opName + OP_SCOPE_SUFFIX;\n    // tslint:disable-next-line:no-any\n    const f2 = (...args) => {\n        ENGINE.startScope(opName);\n        try {\n            const result = fn(...args);\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            ENGINE.endScope(result);\n            return result;\n        }\n        catch (ex) {\n            ENGINE.endScope(null);\n            throw ex;\n        }\n    };\n    Object.defineProperty(f2, 'name', { value: opName, configurable: true });\n    // tslint:disable-next-line:no-any\n    return f2;\n}\n//# sourceMappingURL=operation.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Complex } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction complex_(real, imag) {\n    const $real = convertToTensor(real, 'real', 'complex');\n    const $imag = convertToTensor(imag, 'imag', 'complex');\n    util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n        `must match in call to tf.complex().`);\n    const forward = (backend) => {\n        return backend.complex($real, $imag);\n    };\n    const inputs = { real: $real, imag: $imag };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Complex);\n}\nexport const complex = op({ complex_ });\n//# sourceMappingURL=complex.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray } from '../util';\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(values, shape, inferredShape, dtype) {\n    if (dtype == null) {\n        dtype = inferDtype(values);\n    }\n    if (dtype === 'complex64') {\n        throw new Error(`Cannot construct a complex64 tensor directly. ` +\n            `Please use tf.complex(real, imag).`);\n    }\n    if (!isTypedArray(values) && !Array.isArray(values) &&\n        typeof values !== 'number' && typeof values !== 'boolean' &&\n        typeof values !== 'string') {\n        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +\n            'an array of numbers/booleans/strings, or a TypedArray');\n    }\n    if (shape != null) {\n        assertNonNegativeIntegerDimensions(shape);\n        const providedSize = sizeFromShape(shape);\n        const inferredSize = sizeFromShape(inferredShape);\n        assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n        for (let i = 0; i < inferredShape.length; ++i) {\n            const inferred = inferredShape[i];\n            const flatDimsDontMatch = i === inferredShape.length - 1 ?\n                inferred !== sizeFromShape(shape.slice(i)) :\n                true;\n            assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +\n                `(${inferredShape}) does not match the provided ` +\n                `shape (${shape}). `);\n        }\n    }\n    if (!isTypedArray(values) && !Array.isArray(values)) {\n        values = [values];\n    }\n    shape = shape || inferredShape;\n    values = dtype !== 'string' ?\n        toTypedArray(values, dtype) :\n        flatten(values, [], true);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n//# sourceMappingURL=tensor_ops_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor(values, shape, dtype) {\n    const inferredShape = inferShape(values, dtype);\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=tensor.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const out = {};\n    let float16Decode;\n    let offset = 0;\n    for (const spec of specs) {\n        const name = spec.name;\n        const dtype = spec.dtype;\n        const shape = spec.shape;\n        const size = sizeFromShape(shape);\n        let values;\n        if ('quantization' in spec) {\n            const quantization = spec.quantization;\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                if (!('min' in quantization && 'scale' in quantization)) {\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                        `doesn't have corresponding metadata min and scale.`);\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                if (dtype !== 'float32') {\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                        `which only supports weights of type float32 not ${dtype}.`);\n                }\n            }\n            else {\n                throw new Error(`Weight ${spec.name} has unknown ` +\n                    `quantization dtype ${quantization.dtype}. ` +\n                    `Supported quantization dtypes are: ` +\n                    `'uint8', 'uint16', and 'float16'.`);\n            }\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n            const quantizedArray = (quantization.dtype === 'uint8') ?\n                new Uint8Array(byteBuffer) :\n                new Uint16Array(byteBuffer);\n            if (dtype === 'float32') {\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                    values = new Float32Array(quantizedArray.length);\n                    for (let i = 0; i < quantizedArray.length; i++) {\n                        const v = quantizedArray[i];\n                        values[i] = v * quantization.scale + quantization.min;\n                    }\n                }\n                else if (quantization.dtype === 'float16') {\n                    if (float16Decode === undefined) {\n                        float16Decode = getFloat16Decoder();\n                    }\n                    values = float16Decode(quantizedArray);\n                }\n                else {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type float32.`);\n                }\n            }\n            else if (dtype === 'int32') {\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type int32.`);\n                }\n                values = new Int32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\n                }\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * quantizationSizeFactor;\n        }\n        else if (dtype === 'string') {\n            const size = sizeFromShape(spec.shape);\n            values = [];\n            for (let i = 0; i < size; i++) {\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n                offset += NUM_BYTES_STRING_LENGTH;\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n                values.push(bytes);\n                offset += byteLength;\n            }\n        }\n        else {\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n            if (dtype === 'float32') {\n                values = new Float32Array(byteBuffer);\n            }\n            else if (dtype === 'int32') {\n                values = new Int32Array(byteBuffer);\n            }\n            else if (dtype === 'bool') {\n                values = new Uint8Array(byteBuffer);\n            }\n            else if (dtype === 'complex64') {\n                values = new Float32Array(byteBuffer);\n                const real = new Float32Array(values.length / 2);\n                const image = new Float32Array(values.length / 2);\n                for (let i = 0; i < real.length; i++) {\n                    real[i] = values[i * 2];\n                    image[i] = values[i * 2 + 1];\n                }\n                const realTensor = tensor(real, shape, 'float32');\n                const imageTensor = tensor(image, shape, 'float32');\n                out[name] = complex(realTensor, imageTensor);\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * dtypeFactor;\n        }\n        if (dtype !== 'complex64') {\n            out[name] = tensor(values, shape, dtype);\n        }\n    }\n    return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str);\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n    if (buffers.length === 1) {\n        return buffers[0];\n    }\n    let totalByteLength = 0;\n    buffers.forEach((buffer) => {\n        totalByteLength += buffer.byteLength;\n    });\n    const temp = new Uint8Array(totalByteLength);\n    let offset = 0;\n    buffers.forEach((buffer) => {\n        temp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n    return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n//# sourceMappingURL=io_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n    constructor() {\n        this.saveRouters = [];\n        this.loadRouters = [];\n    }\n    static getInstance() {\n        if (IORouterRegistry.instance == null) {\n            IORouterRegistry.instance = new IORouterRegistry();\n        }\n        return IORouterRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerSaveRouter(saveRouter) {\n        IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n    }\n    /**\n     * Register a load-handler router.\n     *\n     * @param loadRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `load` method defined or `null`.\n     */\n    static registerLoadRouter(loadRouter) {\n        IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n    }\n    /**\n     * Look up IOHandler for saving, given a URL-like string.\n     *\n     * @param url\n     * @returns If only one match is found, an instance of IOHandler with the\n     * `save` method defined. If no match is found, `null`.\n     * @throws Error, if more than one match is found.\n     */\n    static getSaveHandlers(url) {\n        return IORouterRegistry.getHandlers(url, 'save');\n    }\n    /**\n     * Look up IOHandler for loading, given a URL-like string.\n     *\n     * @param url\n     * @param loadOptions Optional, custom load options.\n     * @returns All valid handlers for `url`, given the currently registered\n     *   handler routers.\n     */\n    static getLoadHandlers(url, loadOptions) {\n        return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n    }\n    static getHandlers(url, handlerType, loadOptions) {\n        const validHandlers = [];\n        const routers = handlerType === 'load' ?\n            IORouterRegistry.getInstance().loadRouters :\n            IORouterRegistry.getInstance().saveRouters;\n        routers.forEach(router => {\n            const handler = router(url, loadOptions);\n            if (handler !== null) {\n                validHandlers.push(handler);\n            }\n        });\n        return validHandlers;\n    }\n}\nexport const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);\n//# sourceMappingURL=router_registry.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        const putModelRequest = modelStore.put({\n                            modelPath: this.modelPath,\n                            modelArtifacts,\n                            modelArtifactsInfo\n                        });\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n//# sourceMappingURL=indexed_db.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy,\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata\n                }));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                this.LS.removeItem(this.keys.info);\n                this.LS.removeItem(this.keys.topology);\n                this.LS.removeItem(this.keys.weightSpecs);\n                this.LS.removeItem(this.keys.weightData);\n                this.LS.removeItem(this.keys.modelMetadata);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata['format'];\n            out.generatedBy = metadata['generatedBy'];\n            out.convertedBy = metadata['convertedBy'];\n            out.userDefinedMetadata = metadata['userDefinedMetadata'];\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        this.LS.removeItem(keys.info);\n        this.LS.removeItem(keys.topology);\n        this.LS.removeItem(keys.weightSpecs);\n        this.LS.removeItem(keys.weightData);\n        return info;\n    }\n}\n//# sourceMappingURL=local_storage.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n    constructor() {\n        this.managers = {};\n    }\n    static getInstance() {\n        if (ModelStoreManagerRegistry.instance == null) {\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n        }\n        return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerManager(scheme, manager) {\n        assert(scheme != null, () => 'scheme must not be undefined or null.');\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n        }\n        assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n        const registry = ModelStoreManagerRegistry.getInstance();\n        assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n        registry.managers[scheme] = manager;\n    }\n    static getManager(scheme) {\n        const manager = this.getInstance().managers[scheme];\n        if (manager == null) {\n            throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n        }\n        return manager;\n    }\n    static getSchemes() {\n        return Object.keys(this.getInstance().managers);\n    }\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n        throw new Error(`The url string provided does not contain a scheme. ` +\n            `Supported schemes are: ` +\n            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n    }\n    return {\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\n        path: url.split(URL_SCHEME_SUFFIX)[1],\n    };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n    assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n    const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n    assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n    assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `load handlers for source URL ${sourceURL}.`);\n    const loadHandler = loadHandlers[0];\n    const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n    assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +\n        `URL ${destURL}.`);\n    assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `save handlers for destination URL ${destURL}.`);\n    const saveHandler = saveHandlers[0];\n    const sourceScheme = parseURL(sourceURL).scheme;\n    const sourcePath = parseURL(sourceURL).path;\n    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n    const modelArtifacts = await loadHandler.load();\n    // If moving within the same storage medium, remove the old model as soon as\n    // the loading is done. Without doing this, it is possible that the combined\n    // size of the two models will cause the cloning to fail.\n    if (deleteSource && sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    const saveResult = await saveHandler.save(modelArtifacts);\n    // If moving between mediums, the deletion is done after the save succeeds.\n    // This guards against the case in which saving to the destination medium\n    // fails.\n    if (deleteSource && !sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels() {\n    const schemes = ModelStoreManagerRegistry.getSchemes();\n    const out = {};\n    for (const scheme of schemes) {\n        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n        for (const path in schemeOut) {\n            const url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n        }\n    }\n    return out;\n}\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url) {\n    const schemeAndPath = parseURL(url);\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n    return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(sourceURL, destURL) {\n    const deleteSource = false;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(sourceURL, destURL) {\n    const deleteSource = true;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };\n//# sourceMappingURL=model_management.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n    fetch(path, init) {\n        return fetch(path, init);\n    }\n    now() {\n        return performance.now();\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n        }\n        if (this.textEncoder == null) {\n            this.textEncoder = new TextEncoder();\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        return new TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_BROWSER')) {\n    env().setPlatform('browser', new PlatformBrowser());\n    // Register LocalStorage IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n    }\n    catch (err) {\n    }\n    // Register IndexedDB IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n    }\n    catch (err) {\n    }\n}\n//# sourceMappingURL=platform_browser.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n    // tslint:disable-next-line:no-require-imports\n    importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n    systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n    systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n    return systemFetch;\n}\nexport class PlatformNode {\n    constructor() {\n        // tslint:disable-next-line:no-require-imports\n        this.util = require('util');\n        // According to the spec, the built-in encoder can do only UTF-8 encoding.\n        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n        this.textEncoder = new this.util.TextEncoder();\n    }\n    fetch(path, requestInits) {\n        if (env().global.fetch != null) {\n            return env().global.fetch(path, requestInits);\n        }\n        if (systemFetch == null) {\n            systemFetch = getNodeFetch.importFetch();\n        }\n        return systemFetch(path, requestInits);\n    }\n    now() {\n        const time = process.hrtime();\n        return time[0] * 1000 + time[1] / 1000000;\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        if (bytes.length === 0) {\n            return '';\n        }\n        return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_NODE')) {\n    env().setPlatform('node', new PlatformNode());\n}\n//# sourceMappingURL=platform_node.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport * as util from '../util';\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer(shape, dtype = 'float32', values) {\n    dtype = dtype || 'float32';\n    util.assertNonNegativeIntegerDimensions(shape);\n    return new TensorBuffer(shape, dtype, values);\n}\n//# sourceMappingURL=buffer.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cast } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_(x, dtype) {\n    const $x = convertToTensor(x, 'x', 'cast');\n    // Sanity checks.\n    if (!util.isValidDtype(dtype)) {\n        throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n    }\n    if (dtype === 'string' && $x.dtype !== 'string' ||\n        dtype !== 'string' && $x.dtype === 'string') {\n        throw new Error('Only strings can be casted to strings');\n    }\n    const inputs = { x: $x };\n    const attrs = { dtype };\n    return ENGINE.runKernelFunc(backend => backend.cast($x, dtype), inputs, null /* grad */, Cast, attrs);\n}\nexport const cast = op({ cast_ });\n//# sourceMappingURL=cast.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Identity } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction clone_(x) {\n    const $x = convertToTensor(x, 'x', 'clone', null);\n    const forward = () => ENGINE.makeTensorFromDataId($x.dataId, $x.shape, $x.dtype);\n    const inputs = { x: $x };\n    // Note this op is called tf.identity in python. Hence the kernel name used\n    // here.\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Identity);\n}\nexport const clone = op({ clone_ });\n//# sourceMappingURL=clone.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code for tfjs-core\n// Set up Engine and ENV\nimport { getOrMakeEngine } from './engine';\ngetOrMakeEngine();\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n// Set up OpHandler\nimport { buffer } from './ops/buffer';\nimport { cast } from './ops/cast';\nimport { clone } from './ops/clone';\nimport { print } from './ops/print';\nimport { setOpHandler } from './tensor';\nconst opHandler = {\n    buffer,\n    cast,\n    clone,\n    print\n};\nsetOpHandler(opHandler);\n//# sourceMappingURL=base_side_effects.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function print(x, verbose = false) {\n    console.log(x.toString(verbose));\n}\n//# sourceMappingURL=print.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest\n            };\n            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                this.jsonAnchor;\n            jsonAnchor.download = this.modelTopologyFileName;\n            jsonAnchor.href = modelTopologyAndWeightManifestURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.files = files;\n    }\n    async load() {\n        const jsonFile = this.files[0];\n        const weightFiles = this.files.slice(1);\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                if (weightFiles.length === 0) {\n                    resolve({ modelTopology });\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                let pathToFile;\n                try {\n                    pathToFile =\n                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                }\n                catch (err) {\n                    reject(err);\n                    return;\n                }\n                const weightSpecs = [];\n                const paths = [];\n                const perFileBuffers = [];\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                    });\n                    weightSpecs.push(...weightsGroup.weights);\n                });\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        const weightFileReader = new FileReader();\n                        weightFileReader.onload = (event) => {\n                            // tslint:disable-next-line:no-any\n                            const weightData = event.target.result;\n                            const index = paths.indexOf(path);\n                            perFileBuffers[index] = weightData;\n                            if (perFileBuffers.indexOf(null) === -1) {\n                                resolve({\n                                    modelTopology,\n                                    weightSpecs,\n                                    weightData: concatenateArrayBuffers(perFileBuffers),\n                                    format: modelJSON.format,\n                                    generatedBy: modelJSON.generatedBy,\n                                    convertedBy: modelJSON.convertedBy,\n                                    userDefinedMetadata: modelJSON.userDefinedMetadata\n                                });\n                            }\n                        };\n                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                });\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(jsonFile);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest, files) {\n        const basenames = [];\n        const fileNames = files.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${files.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=browser_files.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n    checkPromises(promises);\n    startFraction = startFraction == null ? 0 : startFraction;\n    endFraction = endFraction == null ? 1 : endFraction;\n    checkFraction(startFraction, endFraction);\n    let resolvedPromise = 0;\n    const registerMonitor = (promise) => {\n        promise.then(value => {\n            const fraction = startFraction +\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\n            // pass fraction as parameter to callback function.\n            onProgress(fraction);\n            return value;\n        });\n        return promise;\n    };\n    function checkPromises(promises) {\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n    }\n    function checkFraction(startFraction, endFraction) {\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n    }\n    return Promise.all(promises.map(registerMonitor));\n}\n//# sourceMappingURL=progress.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = {\n            modelTopology: modelArtifacts.modelTopology,\n            format: modelArtifacts.format,\n            generatedBy: modelArtifacts.generatedBy,\n            convertedBy: modelArtifacts.convertedBy,\n            userDefinedMetadata: modelArtifacts.userDefinedMetadata,\n            weightsManifest\n        };\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelConfig;\n        try {\n            modelConfig = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        const modelTopology = modelConfig.modelTopology;\n        const weightsManifest = modelConfig.weightsManifest;\n        const generatedBy = modelConfig.generatedBy;\n        const convertedBy = modelConfig.convertedBy;\n        const format = modelConfig.format;\n        const userDefinedMetadata = modelConfig.userDefinedMetadata;\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        let weightSpecs;\n        let weightData;\n        if (weightsManifest != null) {\n            const results = await this.loadWeights(weightsManifest);\n            [weightSpecs, weightData] = results;\n        }\n        return {\n            modelTopology,\n            weightSpecs,\n            weightData,\n            userDefinedMetadata,\n            generatedBy,\n            convertedBy,\n            format\n        };\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n        }\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n//# sourceMappingURL=http.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n//# sourceMappingURL=weights_loader.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reshape } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction reshape_(x, shape) {\n    const $x = convertToTensor(x, 'x', 'reshape', null);\n    shape = util.inferFromImplicitShape(shape, $x.size);\n    util.assert($x.size === util.sizeFromShape(shape), () => 'new shape and old shape must have the same number of elements.');\n    const inputs = { x: $x };\n    const attrs = { shape };\n    const forward = (backend, save) => {\n        save([$x]);\n        return backend.reshape($x, shape);\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Reshape, attrs);\n}\nexport const reshape = op({ reshape_ });\n//# sourceMappingURL=reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n    let $a = convertToTensor(a, 'a', 'matMul');\n    let $b = convertToTensor(b, 'b', 'matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in matMul: inputs must have the same rank of at least 2, ` +\n        `got ranks ${$a.rank} and ${$b.rank}.`);\n    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in matMul: outer dimensions (${outerDimsA}) and (` +\n        `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} must match.`);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n    const a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n    const forward = (backend, save) => {\n        save([a3D, b3D]);\n        return backend.batchMatMul(a3D, b3D, transposeA, transposeB);\n    };\n    const inputs = { a: a3D, b: b3D };\n    const attrs = { transposeA, transposeB };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, BatchMatMul, attrs);\n    return reshape(res, outShape);\n}\nexport const matMul = op({ matMul_ });\n//# sourceMappingURL=mat_mul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\n    if (depth < 2) {\n        throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n    }\n    const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n    const outShape = [...$indices.shape, depth];\n    const forward = (backend, save) => {\n        save([$indices]);\n        return reshape(backend.oneHot(reshape($indices, [$indices.size]), depth, onValue, offValue), outShape);\n    };\n    const inputs = { indices: $indices };\n    const attrs = { depth, onValue, offValue };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OneHot, attrs);\n}\nexport const oneHot = op({ oneHot_ });\n//# sourceMappingURL=one_hot.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm) {\n    const $x = convertToTensor(x, 'x', 'transpose');\n    if (perm == null) {\n        perm = $x.shape.map((s, i) => i).reverse();\n    }\n    util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of perm ${perm}.`);\n    perm.forEach(axis => {\n        util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n    });\n    if ($x.rank <= 1) {\n        return $x.clone();\n    }\n    const inputs = { x: $x };\n    const attrs = { perm };\n    return ENGINE.runKernelFunc(backend => backend.transpose($x, perm), inputs, null /* gradient */, Transpose, attrs);\n}\nexport const transpose = op({ transpose_ });\n//# sourceMappingURL=transpose.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { matMul } from './mat_mul';\nimport { oneHot } from './one_hot';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function confusionMatrix_(labels, predictions, numClasses) {\n    const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n    const $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');\n    util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` +\n        `but got ${numClasses}`);\n    util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n    util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` +\n        `but got ${$predictions.rank}`);\n    util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` +\n        `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n        `Labels and predictions should have the same number of elements.`);\n    util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` +\n        `${numClasses}`);\n    // TODO(cais): In the future, if oneHot supports tensors inputs for\n    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n    const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses);\n    const oneHotPredictions = oneHot(cast($predictions, 'int32'), numClasses);\n    const oneHotLabelsT = transpose(oneHotLabels);\n    return cast(matMul(oneHotLabelsT, oneHotPredictions), 'int32');\n}\nexport const confusionMatrix = op({ confusionMatrix_ });\n//# sourceMappingURL=confusion_matrix.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(pixels, numChannels = 3) {\n    // Sanity checks.\n    if (numChannels > 4) {\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n    }\n    if (pixels == null) {\n        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n    }\n    let isPixelData = false;\n    let isImageData = false;\n    let isVideo = false;\n    let isImage = false;\n    let isCanvasLike = false;\n    if (pixels.data instanceof Uint8Array) {\n        isPixelData = true;\n    }\n    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n        isImageData = true;\n    }\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement) {\n        isVideo = true;\n    }\n    else if (typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement) {\n        isImage = true;\n        // tslint:disable-next-line: no-any\n    }\n    else if (pixels.getContext != null) {\n        isCanvasLike = true;\n    }\n    else {\n        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +\n            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n            `in browser, or OffscreenCanvas, ImageData in webworker` +\n            ` or {data: Uint32Array, width: number, height: number}, ` +\n            `but was ${pixels.constructor.name}`);\n    }\n    if (isVideo) {\n        const HAVE_CURRENT_DATA_READY_STATE = 2;\n        if (isVideo &&\n            pixels.readyState <\n                HAVE_CURRENT_DATA_READY_STATE) {\n            throw new Error('The video element has not loaded data yet. Please wait for ' +\n                '`loadeddata` event on the <video> element.');\n        }\n    }\n    // If the current backend has 'FromPixels' registered, it has a more\n    // efficient way of handling pixel uploads, so we call that.\n    const kernel = getKernel(FromPixels, ENGINE.backendName);\n    if (kernel != null) {\n        const inputs = { pixels };\n        const attrs = { numChannels };\n        return ENGINE.runKernel(FromPixels, inputs, attrs);\n    }\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    let vals;\n    if (isCanvasLike) {\n        vals =\n            // tslint:disable-next-line:no-any\n            pixels.getContext('2d').getImageData(0, 0, width, height).data;\n    }\n    else if (isImageData || isPixelData) {\n        vals = pixels.data;\n    }\n    else if (isImage || isVideo) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n    }\n    let values;\n    if (numChannels === 4) {\n        values = new Int32Array(vals);\n    }\n    else {\n        const numPixels = width * height;\n        values = new Int32Array(numPixels * numChannels);\n        for (let i = 0; i < numPixels; i++) {\n            for (let channel = 0; channel < numChannels; ++channel) {\n                values[i * numChannels + channel] = vals[i * 4 + channel];\n            }\n        }\n    }\n    const outShape = [height, width, numChannels];\n    return tensor3d(values, outShape, 'int32');\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(img, canvas) {\n    let $img = convertToTensor(img, 'img', 'toPixels');\n    if (!(img instanceof Tensor)) {\n        // Assume int32 if user passed a native array.\n        const originalImgTensor = $img;\n        $img = cast(originalImgTensor, 'int32');\n        originalImgTensor.dispose();\n    }\n    if ($img.rank !== 2 && $img.rank !== 3) {\n        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n    }\n    const [height, width] = $img.shape.slice(0, 2);\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\n    if (depth > 4 || depth === 2) {\n        throw new Error(`toPixels only supports depth of size ` +\n            `1, 3 or 4 but got ${depth}`);\n    }\n    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +\n            ` Please use float32 or int32 tensors.`);\n    }\n    const data = await $img.data();\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\n    const bytes = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < height * width; ++i) {\n        const rgba = [0, 0, 0, 255];\n        for (let d = 0; d < depth; d++) {\n            const value = data[i * depth + d];\n            if ($img.dtype === 'float32') {\n                if (value < 0 || value > 1) {\n                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +\n                        `range [0 - 1] but encountered ${value}.`);\n                }\n            }\n            else if ($img.dtype === 'int32') {\n                if (value < 0 || value > 255) {\n                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +\n                        `range [0 - 255] but encountered ${value}.`);\n                }\n            }\n            if (depth === 1) {\n                rgba[0] = value * multiplier;\n                rgba[1] = value * multiplier;\n                rgba[2] = value * multiplier;\n            }\n            else {\n                rgba[d] = value * multiplier;\n            }\n        }\n        const j = i * 4;\n        bytes[j + 0] = Math.round(rgba[0]);\n        bytes[j + 1] = Math.round(rgba[1]);\n        bytes[j + 2] = Math.round(rgba[2]);\n        bytes[j + 3] = Math.round(rgba[3]);\n    }\n    if (canvas != null) {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        const imageData = new ImageData(bytes, width, height);\n        ctx.putImageData(imageData, 0, 0);\n    }\n    if ($img !== img) {\n        $img.dispose();\n    }\n    return bytes;\n}\nexport const fromPixels = op({ fromPixels_ });\n//# sourceMappingURL=browser.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 3) {\n        throw new Error('tensor3d() requires shape to have three numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n        throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor3d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=tensor3d.js.map","import { computeStrides } from '../util';\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor, indices) {\n    if (tensor.rank < 1) {\n        throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +\n            ` but the rank was ${tensor.rank}.`);\n    }\n    if (indices.rank < 1) {\n        throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indices.rank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error('tf.gatherND() expects the indices to be int32 type,' +\n            ` but the dtype was ${indices.dtype}.`);\n    }\n    if (indices.shape[indices.rank - 1] > tensor.rank) {\n        throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +\n            `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);\n    }\n    if (tensor.size === 0) {\n        throw new Error('Requested more than 0 entries, but input is empty.' +\n            ` Input shape: ${tensor.shape}.`);\n    }\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    // The result shape is\n    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n    let nResult = 1;\n    for (let i = 0; i < indicesShape.length - 1; ++i) {\n        nResult *= indicesShape[i];\n    }\n    const inputShape = tensor.shape;\n    const resultShape = indicesShape.slice();\n    resultShape.pop();\n    let sliceSize = 1;\n    for (let i = sliceRank; i < tensor.rank; ++i) {\n        sliceSize *= inputShape[i];\n        resultShape.push(inputShape[i]);\n    }\n    const strides = [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n        1].slice(0, sliceRank);\n    return [resultShape, nResult, sliceSize, strides];\n}\n//# sourceMappingURL=gather_nd_util.js.map","import { computeStrides, sizeFromShape } from '../util';\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(shape, indices, updates) {\n    const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n    const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n    const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n        `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n        `, indices.shape: ${indices.shape}, shape: ${shape}` +\n        `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n    if (updates.rank < batchDim) {\n        throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n    }\n    if (shape.length < sliceDim + (updates.rank - batchDim)) {\n        throw new Error(shapeError +\n            ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n    }\n    if (updates.rank !== batchDim + shape.length - sliceDim) {\n        throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n    }\n    for (let d = 0; d < batchDim; ++d) {\n        if (updates.shape[d] !== indices.shape[d]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);\n        }\n    }\n    for (let d = 0; d < updates.rank - batchDim; ++d) {\n        if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);\n        }\n    }\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(updates, indices, shape) {\n    if (indices.rank < 1) {\n        throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indices.rank}.`);\n    }\n    if (updates.rank < 1) {\n        throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +\n            ` but the rank was ${updates.rank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);\n    }\n    if (shape.length < 1) {\n        throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);\n    }\n    if (shape.length === 0) {\n        if (indices.size === 0) {\n            throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);\n        }\n        if (updates.size === 0) {\n            throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);\n        }\n    }\n    validateUpdateShape(shape, indices, updates);\n}\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(updates, indices, shape) {\n    // Calculate the number of dimensions in indices\n    const indicesRank = indices.shape.length;\n    const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n    // Calculate the number of elements that make up each slice of our updated\n    // tensor. This allows us to work with flattened tensors and copy over whole\n    // slices at a time.\n    const totalNd = shape.length;\n    let sliceSize = 1;\n    for (let i = sliceRank; i < totalNd; ++i) {\n        sliceSize *= shape[i];\n    }\n    const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n    const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n    const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n    const outputSize = sizeFromShape(shape);\n    return { sliceRank, numUpdates, sliceSize, strides, outputSize };\n}\n//# sourceMappingURL=scatter_nd_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsValid(input, begin, size) {\n    util.assert(input.rank === begin.length, () => `Error in slice${input.rank}D: Length of begin ${begin} must ` +\n        `match the rank of the array (${input.rank}).`);\n    util.assert(input.rank === size.length, () => `Error in slice${input.rank}D: Length of size ${size} must ` +\n        `match the rank of the array (${input.rank}).`);\n    for (let i = 0; i < input.rank; ++i) {\n        util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${input.rank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);\n    }\n}\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask) {\n    const axes = [];\n    let axis = 0;\n    while (mask > 0) {\n        if (mask & 1) {\n            axes.push(axis);\n        }\n        mask /= 2;\n        axis++;\n    }\n    return axes;\n}\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(begin, end, strides) {\n    const size = [];\n    for (let axis = 0; axis < begin.length; axis++) {\n        size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n    }\n    return size;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {\n    const newStrides = [...strides];\n    for (let i = newStrides.length; i < inputShape.length; i++) {\n        newStrides.push(1);\n    }\n    for (let i = 0; i < numElidedAxes; i++) {\n        if (i === 0) {\n            newStrides[ellipsisInsertionIndex] = 1;\n        }\n        else {\n            newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);\n            newStrides.pop();\n        }\n    }\n    return newStrides;\n}\nfunction unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {\n    if (normalizedAxis <= ellipsisInsertionIndex) {\n        return normalizedAxis;\n    }\n    return normalizedAxis - (numElidedAxes - 1);\n}\nfunction getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {\n    const elidedAxes = [];\n    for (let i = 0; i < numElidedAxes; i++) {\n        elidedAxes.push(ellipsisInsertionIndex + i);\n    }\n    return elidedAxes;\n}\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {\n    const inputRank = inputShape.length;\n    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);\n    if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n        const fullIndex = ellipsisAxes[0];\n        // The ellipsis applies to the masked index as well as any dimensions\n        // that are interpolated.\n        const numElidedAxes = numInterpolatedAxes + 1;\n        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);\n        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);\n        normalizedStrides =\n            stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n    }\n    else {\n        for (let axis = 0; axis < inputRank; axis++) {\n            normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);\n            normalizedEnd[axis] =\n                stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n            normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n        }\n    }\n    return {\n        begin: normalizedBegin,\n        end: normalizedEnd,\n        strides: normalizedStrides\n    };\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = 0;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalBegin[originalAxis];\n            if (beginMask & 1 << originalAxis) {\n                originalValue = 0;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    return newIndices;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalEnd[originalAxis];\n            if (endMask & 1 << originalAxis) {\n                originalValue = Number.MAX_SAFE_INTEGER;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    for (let i = 0; i < newIndices.length; i++) {\n        // Handle negative indices\n        const axisSize = inputShape[i];\n        if (newIndices[i] < 0) {\n            newIndices[i] += axisSize;\n        }\n        newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n    }\n    return newIndices;\n}\nexport function stridesForAxis(strides, axis, ellipsisMask) {\n    let stride = strides[axis];\n    if (ellipsisMask & (1 << axis) || stride == null) {\n        stride = 1;\n    }\n    return stride;\n}\nexport function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let start = startIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or the begin index is not set\n    // for the axis.\n    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n        if (stride > 0) {\n            // Forward iteration - use the first element. These values will get\n            // clamped below (Note: We could have set them to 0 and axis_size-1, but\n            // use lowest() and max() to maintain symmetry with StopForAxis())\n            start = Number.MIN_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the last element.\n            start = Number.MAX_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (start < 0) {\n        start += axisSize;\n    }\n    // Clamping\n    start = util.clamp(0, start, axisSize - 1);\n    return start;\n}\nexport function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let stop = stopIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or if the stop index is not\n    // set for this axis.\n    if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n        if (stride > 0) {\n            // Forward iteration - use the last element. These values will get\n            // clamped below\n            stop = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the first element.\n            stop = Number.MIN_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (stop < 0) {\n        stop += axisSize;\n    }\n    // Clamping\n    // Because the end index points one past the last element, we need slightly\n    // different clamping ranges depending on the direction.\n    if (stride > 0) {\n        // Forward iteration\n        stop = util.clamp(0, stop, axisSize);\n    }\n    else {\n        // Backward iteration\n        stop = util.clamp(-1, stop, axisSize - 1);\n    }\n    return stop;\n}\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(shape, begin, size) {\n    // Index of the first axis that has size > 1.\n    let firstNonOneAxis = size.length;\n    for (let i = 0; i < size.length; i++) {\n        if (size[i] > 1) {\n            firstNonOneAxis = i;\n            break;\n        }\n    }\n    for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n        if (begin[i] > 0 || size[i] !== shape[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function computeFlatOffset(begin, strides) {\n    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n    for (let i = 0; i < begin.length - 1; i++) {\n        flatOffset += begin[i] * strides[i];\n    }\n    return flatOffset;\n}\nexport function parseSliceParams(x, begin, size) {\n    // The following logic allows for more ergonomic calls.\n    let begin_;\n    if (typeof begin === 'number') {\n        begin_ = [begin, ...new Array(x.rank - 1).fill(0)];\n    }\n    else if (begin.length < x.rank) {\n        begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));\n    }\n    else {\n        begin_ = begin.slice();\n    }\n    begin_.forEach(d => {\n        util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');\n    });\n    let size_;\n    if (size == null) {\n        size_ = new Array(x.rank).fill(-1);\n    }\n    else if (typeof size === 'number') {\n        size_ = [size, ...new Array(x.rank - 1).fill(-1)];\n    }\n    else if (size.length < x.rank) {\n        size_ = size.concat(new Array(x.rank - size.length).fill(-1));\n    }\n    else {\n        size_ = size;\n    }\n    size_ = size_.map((d, i) => {\n        if (d >= 0) {\n            return d;\n        }\n        else {\n            util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` +\n                `${d} for the slice() size at index ${i}.`);\n            return x.shape[i] - begin_[i];\n        }\n    });\n    return [begin_, size_];\n}\n//# sourceMappingURL=slice_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from './util';\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport class Serializable {\n    /**\n     * Return the class name for this class to use in serialization contexts.\n     *\n     * Generally speaking this will be the same thing that constructor.name\n     * would have returned.  However, the class name needs to be robust\n     * against minification for serialization/deserialization to work properly.\n     *\n     * There's also places such as initializers.VarianceScaling, where\n     * implementation details between different languages led to different\n     * class hierarchies and a non-leaf node is used for serialization purposes.\n     */\n    getClassName() {\n        return this.constructor\n            .className;\n    }\n    /**\n     * Creates an instance of T from a ConfigDict.\n     *\n     * This works for most descendants of serializable.  A few need to\n     * provide special handling.\n     * @param cls A Constructor for the class to instantiate.\n     * @param config The Configuration for the object.\n     */\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n    constructor() {\n        this.classNameMap = {};\n    }\n    /**\n     * Returns the singleton instance of the map.\n     */\n    static getMap() {\n        if (SerializationMap.instance == null) {\n            SerializationMap.instance = new SerializationMap();\n        }\n        return SerializationMap.instance;\n    }\n    /**\n     * Registers the class as serializable.\n     */\n    static register(cls) {\n        SerializationMap.getMap().classNameMap[cls.className] =\n            [cls, cls.fromConfig];\n    }\n}\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example:\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n *\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass(cls) {\n    assert(cls.className != null, () => `Class being registered does not have the static className ` +\n        `property defined.`);\n    assert(typeof cls.className === 'string', () => `className is required to be a string, but got type ` +\n        typeof cls.className);\n    assert(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` +\n        `which is disallowed.`);\n    SerializationMap.register(cls);\n}\n//# sourceMappingURL=serialization.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { setDeprecationWarningFn } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableProdMode() {\n    env().set('PROD', true);\n}\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableDebugMode() {\n    env().set('DEBUG', true);\n}\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings() {\n    env().set('DEPRECATION_WARNINGS_ENABLED', false);\n    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg) {\n    if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n        console.warn(msg + ' You can disable deprecation warnings with ' +\n            'tf.disableDeprecationWarnings().');\n    }\n}\nsetDeprecationWarningFn(deprecationWarn);\n/**\n * Dispose all variables kept in backend engine.\n *\n * @doc {heading: 'Environment'}\n */\nexport function disposeVariables() {\n    ENGINE.disposeVariables();\n}\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n *\n * @doc {heading: 'Environment'}\n */\nexport function engine() {\n    return ENGINE;\n}\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function memory() {\n    return ENGINE.memory();\n}\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n *\n * @doc {heading: 'Performance', subheading: 'Profile'}\n */\nexport function profile(f) {\n    return ENGINE.profile(f);\n}\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function tidy(nameOrFn, fn) {\n    return ENGINE.tidy(nameOrFn, fn);\n}\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function dispose(container) {\n    const tensors = getTensorsInContainer(container);\n    tensors.forEach(tensor => tensor.dispose());\n}\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function keep(result) {\n    return ENGINE.keep(result);\n}\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\n * WebGL backend and the query timer extension is not available, this will\n * return an error object.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nexport function time(f) {\n    return ENGINE.time(f);\n}\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n *\n * @doc {heading: 'Backends'}\n */\nexport function setBackend(backendName) {\n    return ENGINE.setBackend(backendName);\n}\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n *\n * @doc {heading: 'Backends'}\n */\nexport function ready() {\n    return ENGINE.ready();\n}\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n *\n * @doc {heading: 'Backends'}\n */\nexport function getBackend() {\n    return ENGINE.backendName;\n}\n/**\n * Removes a backend and the registered factory.\n *\n * @doc {heading: 'Backends'}\n */\nexport function removeBackend(name) {\n    ENGINE.removeBackend(name);\n}\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name) {\n    return ENGINE.findBackend(name);\n}\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name) {\n    return ENGINE.findBackendFactory(name);\n}\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n *\n * @doc {heading: 'Backends'}\n */\nexport function registerBackend(name, factory, priority = 1) {\n    return ENGINE.registerBackend(name, factory, priority);\n}\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case, you should call\n * 'await tf.ready()' before running other code.\n *\n * @doc {heading: 'Backends'}\n */\nexport function backend() {\n    return ENGINE.backend;\n}\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName, platform) {\n    env().setPlatform(platformName, platform);\n}\n//# sourceMappingURL=globals.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Add } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction add_(a, b) {\n    let $a = convertToTensor(a, 'a', 'add');\n    let $b = convertToTensor(b, 'b', 'add');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.add($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Add);\n}\nexport const add = op({ add_ });\n//# sourceMappingURL=add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FloorDiv } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction floorDiv_(a, b) {\n    let $a = convertToTensor(a, 'a', 'floorDiv');\n    let $b = convertToTensor(b, 'b', 'floorDiv');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.floorDiv($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, FloorDiv);\n}\nexport const floorDiv = op({ floorDiv_ });\n//# sourceMappingURL=floorDiv.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Div } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { floorDiv } from './floorDiv';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction div_(a, b) {\n    let $a = convertToTensor(a, 'a', 'div');\n    let $b = convertToTensor(b, 'b', 'div');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n        return floorDiv($a, $b);\n    }\n    const forward = (backend, save) => {\n        const res = backend.realDivide($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Div, attrs);\n}\nexport const div = op({ div_ });\n//# sourceMappingURL=div.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multiply } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mul_(a, b) {\n    let $a = convertToTensor(a, 'a', 'mul');\n    let $b = convertToTensor(b, 'b', 'mul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.multiply($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Multiply);\n}\nexport const mul = op({ mul_ });\n//# sourceMappingURL=mul.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Abs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_(x) {\n    const $x = convertToTensor(x, 'x', 'abs');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        save([$x]);\n        if ($x.dtype === 'complex64') {\n            return backend.complexAbs($x);\n        }\n        return backend.abs($x);\n    }, inputs, null /* grad */, Abs);\n}\nexport const abs = op({ abs_ });\n//# sourceMappingURL=abs.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Acos } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.acos().print();  // or tf.acos(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acos_(x) {\n    const $x = convertToTensor(x, 'x', 'acos');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.acos($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Acos);\n}\nexport const acos = op({ acos_ });\n//# sourceMappingURL=acos.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Acosh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n * `acosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\n *\n * x.acosh().print();  // or tf.acosh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acosh_(x) {\n    const $x = convertToTensor(x, 'x', 'acosh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.acosh($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Acosh);\n}\nexport const acosh = op({ acosh_ });\n//# sourceMappingURL=acosh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_(tensors) {\n    util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n    util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +\n        `${tensors.length}`);\n    const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n    const firstTensor = $tensors[0];\n    $tensors.forEach(t => {\n        if (t.dtype !== firstTensor.dtype) {\n            throw new Error('All tensors passed to tf.addN() must have the same dtype');\n        }\n    });\n    $tensors.forEach(t => {\n        if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n            throw new Error('All tensors passed to tf.addN() must have the same shape');\n        }\n    });\n    const forward = (backend, save) => {\n        const res = backend.addN($tensors);\n        save($tensors);\n        return res;\n    };\n    const inputs = $tensors;\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, AddN);\n}\nexport const addN = op({ addN_ });\n//# sourceMappingURL=add_n.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n    for (let i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n    const rank = outputLoc.length + reduceLoc.length;\n    const loc = [];\n    let outIdx = 0;\n    let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        }\n        else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    const reduceShape = axes.map(dim => aShape[dim]);\n    return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n    const reduceSubShape = axes.map(x => 1);\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +\n        `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    const result = [];\n    for (let i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(axis => result.push(axis));\n    return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n    return axes.map((axis, i) => [i, axis])\n        .sort((a, b) => a[1] - b[1])\n        .map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n    const res = [];\n    for (let i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\n//# sourceMappingURL=axis_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { All } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction all_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'all', 'bool');\n    const forward = (backend) => {\n        const origAxes = parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = getInnerMostAxes(axes.length, $x.rank);\n        }\n        const res = backend.all($x, axes);\n        if (keepDims) {\n            const newShape = expandShapeToKeepDim(res.shape, origAxes);\n            return reshape(res, newShape);\n        }\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, All, attrs);\n}\nexport const all = op({ all_ });\n//# sourceMappingURL=all.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Any } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.any().print();  // or tf.any(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.any(axis).print();  // or tf.any(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction any_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'any', 'bool');\n    const forward = (backend) => {\n        const origAxes = parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = getInnerMostAxes(axes.length, $x.rank);\n        }\n        const res = backend.any($x, axes);\n        if (keepDims) {\n            const newShape = expandShapeToKeepDim(res.shape, origAxes);\n            return reshape(res, newShape);\n        }\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Any, attrs);\n}\n// tslint:disable-next-line:variable-name\nexport const any = op({ any_ });\n//# sourceMappingURL=any.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ArgMax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMax_(x, axis = 0) {\n    let $x = convertToTensor(x, 'x', 'argMax');\n    const forward = (backend, save) => {\n        save([$x]);\n        let axes = util.parseAxisParam(axis, $x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n        }\n        return backend.argMax($x, axes[0]);\n    };\n    const inputs = { x: $x };\n    const attrs = { axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ArgMax, attrs);\n}\nexport const argMax = op({ argMax_ });\n//# sourceMappingURL=arg_max.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ArgMin } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Returns the indices of the minimum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMin().print();  // or tf.argMin(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMin_(x, axis = 0) {\n    let $x = convertToTensor(x, 'x', 'argMin');\n    const forward = (backend, save) => {\n        save([$x]);\n        if (axis == null) {\n            axis = 0;\n        }\n        let axes = util.parseAxisParam(axis, $x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        if (permutedAxes != null) {\n            $x = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n        }\n        return backend.argMin($x, axes[0]);\n    };\n    const inputs = { x: $x };\n    const attrs = { axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ArgMin, attrs);\n}\nexport const argMin = op({ argMin_ });\n//# sourceMappingURL=arg_min.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Asin } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asin().print();  // or tf.asin(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asin_(x) {\n    const $x = convertToTensor(x, 'x', 'asin');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.asin($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Asin);\n}\nexport const asin = op({ asin_ });\n//# sourceMappingURL=asin.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Asinh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n * `asinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asinh().print();  // or tf.asinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asinh_(x) {\n    const $x = convertToTensor(x, 'x', 'asinh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.asinh($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Asinh);\n}\nexport const asinh = op({ asinh_ });\n//# sourceMappingURL=asinh.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Atan } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.atan().print();  // or tf.atan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan_(x) {\n    const $x = convertToTensor(x, 'x', 'atan');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.atan($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Atan);\n}\nexport const atan = op({ atan_ });\n//# sourceMappingURL=atan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Atan2 } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n *\n * tf.atan2(a, b).print()\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan2_(a, b) {\n    let $a = convertToTensor(a, 'a', 'atan2');\n    let $b = convertToTensor(b, 'b', 'atan2');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.atan2($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Atan2);\n}\nexport const atan2 = op({ atan2_ });\n//# sourceMappingURL=atan2.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Atanh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n * `atanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.atanh().print();  // or tf.atanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atanh_(x) {\n    const $x = convertToTensor(x, 'x', 'atanh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.atanh($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Atanh);\n}\nexport const atanh = op({ atanh_ });\n//# sourceMappingURL=atanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n    // `computerConv2DInfo` require filterShape to be in the dimension of:\n    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n    // outDepth, it should have the same depth as the input.\n    // Input shape: [batch, height, width, inChannels]\n    const inputChannels = inputShape[3];\n    const $filterShape = [...filterShape, inputChannels];\n    const $dataFormat = convertConv2DDataFormat(dataFormat);\n    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n    const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n    let filterShape;\n    if (dataFormat === 'channelsLast') {\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n    }\n    else if (dataFormat === 'channelsFirst') {\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n    let filterShape;\n    let $dataFormat;\n    if (dataFormat === 'NDHWC') {\n        $dataFormat = 'channelsLast';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n    }\n    else if (dataFormat === 'NCDHW') {\n        $dataFormat = 'channelsFirst';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideHeight, strideWidth] = parseTupleParam(strides);\n    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inHeight,\n        inWidth,\n        inChannels,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideHeight,\n        strideWidth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inDepth,\n        inHeight,\n        inWidth,\n        inChannels,\n        outDepth,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideDepth,\n        strideHeight,\n        strideWidth,\n        filterDepth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterDepth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationDepth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputRows = inShape[0];\n    const inputCols = inShape[1];\n    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` +\n        `Change the stride and/or zero pad parameters`);\n    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` +\n        `Change the stride and/or zero pad parameters`);\n    return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputDepth = inShape[0];\n    const inputRows = inShape[1];\n    const inputCols = inShape[2];\n    const outputDepths = conditionalRound((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputDepths), () => `The output # of depths (${outputDepths}) must be an integer. ` +\n        `Change the stride and/or zero pad parameters`);\n    const outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputRows), () => `The output # of rows (${outputRows}) must be an integer. ` +\n        `Change the stride and/or zero pad parameters`);\n    const outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputCols), () => `The output # of columns (${outputCols}) must be an integer. ` +\n        `Change the stride and/or zero pad parameters`);\n    return [outputDepths, outputRows, outputCols, outChannels];\n}\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n    if (typeof param === 'number') {\n        return [param, param, param];\n    }\n    if (param.length === 2) {\n        return [param[0], param[1], 1];\n    }\n    return param;\n}\nfunction parse3TupleParam(param) {\n    return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize, dilation) {\n    if (dilation <= 1) {\n        return filterSize;\n    }\n    return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n    let padInfo;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };\n        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n        outHeight = outShape[0];\n        outWidth = outShape[1];\n    }\n    else if (pad === 'same') {\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else if (typeof pad === 'object') {\n        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n            'VALID' :\n            'EXPLICIT';\n        padInfo = { top, bottom, left, right, type: padType };\n        outHeight = conditionalRound((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n        outWidth = conditionalRound((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outHeight, outWidth };\n}\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n    let padInfo;\n    let outDepth;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = {\n            top: pad,\n            bottom: pad,\n            left: pad,\n            right: pad,\n            front: pad,\n            back: pad,\n            type: padType\n        };\n        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n        outDepth = outShape[0];\n        outHeight = outShape[1];\n        outWidth = outShape[2];\n    }\n    else if (pad === 'same') {\n        outDepth = Math.ceil(inDepth / strideDepth);\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n        const front = Math.floor(padAlongDepth / 2);\n        const back = padAlongDepth - front;\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            front: 0,\n            back: 0,\n            type: 'VALID'\n        };\n        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outDepth, outHeight, outWidth };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode\n */\nfunction conditionalRound(value, roundingMode) {\n    if (!roundingMode) {\n        return value;\n    }\n    switch (roundingMode) {\n        case 'round':\n            // used for Caffe Conv\n            return Math.round(value);\n        case 'ceil':\n            // used for Caffe Pool\n            return Math.ceil(value);\n        case 'floor':\n            return Math.floor(value);\n        default:\n            throw new Error(`Unknown roundingMode ${roundingMode}`);\n    }\n}\nexport function tupleValuesAreOne(param) {\n    const [dimA, dimB, dimC] = parseTupleParam(param);\n    return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat) {\n    if (dataFormat === 'NHWC') {\n        return 'channelsLast';\n    }\n    else if (dataFormat === 'NCHW') {\n        return 'channelsFirst';\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n}\n//# sourceMappingURL=conv_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction avgPool_(x, filterSize, strides, pad, dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n    const dilations = 1;\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in avgPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        const convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        save([x4D]);\n        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n            util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n            return x4D.clone();\n        }\n        return backend.avgPool(x4D, convInfo);\n    };\n    const inputs = { x: x4D };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool, attrs);\n    res = cast(res, $x.dtype);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const avgPool = op({ avgPool_ });\n//# sourceMappingURL=avg_pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { AvgPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 3D average pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\n    if (dilations == null) {\n        dilations = [1, 1, 1];\n    }\n    else {\n        deprecationWarn('dilations is deprecated, this field will be gone in ' +\n            'v3.0.0.');\n    }\n    const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n    let x5D = $x;\n    let reshapedTo5D = false;\n    if ($x.rank === 4) {\n        reshapedTo5D = true;\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n    util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\n        `but got dataFormat of ${dataFormat}`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        if (dilations == null) {\n            dilations = [1, 1, 1];\n        }\n        const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n        save([x5D]);\n        return backend.avgPool3d(x5D, convInfo);\n    };\n    const inputs = { x: x5D };\n    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };\n    let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3D, attrs);\n    res = cast(res, x5D.dtype);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const avgPool3d = op({ avgPool3d_ });\n//# sourceMappingURL=avg_pool_3d.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n    const rank = shapes[0].length;\n    shapes.forEach((shape, i) => {\n        util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n    });\n    util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n    const firstShape = shapes[0];\n    shapes.forEach((shape, i) => {\n        for (let r = 0; r < rank; r++) {\n            util.assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n                `does not match the shape of the rest (${firstShape}) ` +\n                `along the non-concatenated axis ${i}.`);\n        }\n    });\n}\nexport function computeOutShape(shapes, axis) {\n    const outputShape = shapes[0].slice();\n    for (let i = 1; i < shapes.length; i++) {\n        outputShape[axis] += shapes[i][axis];\n    }\n    return outputShape;\n}\n//# sourceMappingURL=concat_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Concat } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport { assert, parseAxisParam, sizeFromShape } from '../util';\nimport { assertParamsConsistent, computeOutShape } from './concat_util';\nimport { op } from './operation';\nimport { tensor } from './tensor';\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction concat_(tensors, axis = 0) {\n    assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n    let $tensors = convertToTensorArray(tensors, 'tensors', 'concat');\n    if ($tensors[0].dtype === 'complex64') {\n        $tensors.forEach(tensor => {\n            if (tensor.dtype !== 'complex64') {\n                throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n            }\n        });\n    }\n    const $axis = parseAxisParam(axis, $tensors[0].shape)[0];\n    const outShape = computeOutShape($tensors.map(t => t.shape), $axis);\n    if (sizeFromShape(outShape) === 0) {\n        return tensor([], outShape);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    $tensors = $tensors.filter(t => t.size > 0);\n    if ($tensors.length === 1) {\n        return $tensors[0];\n    }\n    const shapes = $tensors.map(t => t.shape);\n    assertParamsConsistent(shapes, $axis);\n    const forward = (backend, save) => {\n        const res = backend.concat($tensors, $axis);\n        save($tensors);\n        return res;\n    };\n    const inputs = $tensors;\n    const attr = { axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Concat, attr);\n}\nexport const concat = op({ concat_ });\n//# sourceMappingURL=concat.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sigmoid } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sigmoid_(x) {\n    const $x = convertToTensor(x, 'x', 'sigmoid');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.sigmoid($x);\n        save([res]);\n        return res;\n    }, inputs, null /* grad */, Sigmoid);\n}\nexport const sigmoid = op({ sigmoid_ });\n//# sourceMappingURL=sigmoid.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport * as slice_util from './slice_util';\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice');\n    if ($x.rank === 0) {\n        throw new Error('Slicing scalar is not possible');\n    }\n    const [begin_, size_] = slice_util.parseSliceParams($x, begin, size);\n    slice_util.assertParamsValid($x, begin_, size_);\n    const forward = (backend, save) => {\n        save([$x]);\n        return backend.slice($x, begin_, size_);\n    };\n    const inputs = { x: $x };\n    const attrs = { begin, size };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Slice, attrs);\n}\nexport const slice = op({ slice_ });\n//# sourceMappingURL=slice.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tanh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, 70]);\n *\n * x.tanh().print();  // or tf.tanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tanh_(x) {\n    const $x = convertToTensor(x, 'x', 'tanh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const y = backend.tanh($x);\n        save([y]);\n        return y;\n    }, inputs, null /* grad */, Tanh);\n}\nexport const tanh = op({ tanh_ });\n//# sourceMappingURL=tanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n    const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n    const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n    const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n    const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n    const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n    const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n    const combined = concat([$data, $h], 1);\n    const weighted = matMul(combined, $lstmKernel);\n    const res = add(weighted, $lstmBias);\n    // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n    const batchSize = res.shape[0];\n    const sliceCols = res.shape[1] / 4;\n    const sliceSize = [batchSize, sliceCols];\n    const i = slice(res, [0, 0], sliceSize);\n    const j = slice(res, [0, sliceCols], sliceSize);\n    const f = slice(res, [0, sliceCols * 2], sliceSize);\n    const o = slice(res, [0, sliceCols * 3], sliceSize);\n    const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n    const newH = mul(tanh(newC), sigmoid(o));\n    return [newC, newH];\n}\nexport const basicLSTMCell = op({ basicLSTMCell_ });\n//# sourceMappingURL=basic_lstm_cell.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchToSpaceND } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\n * the same rank as the input. The spatial dimensions of this intermediate\n * result are then optionally cropped according to `crops` to produce the\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\n * description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\n * const blockShape = [2, 2];\n * const crops = [[0, 0], [0, 0]];\n *\n * x.batchToSpaceND(blockShape, crops).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\n * x.shape[N-1]]`\n *\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\n * according to `crops` to produce the output of shape: `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction batchToSpaceND_(x, blockShape, crops) {\n    const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n    const prod = blockShape.reduce((a, b) => a * b);\n    util.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);\n    util.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);\n    util.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` +\n        `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n    const forward = backend => {\n        return backend.batchToSpaceND($x, blockShape, crops);\n    };\n    const inputs = { x: $x };\n    const attrs = { blockShape, crops };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, BatchToSpaceND, attrs);\n}\nexport const batchToSpaceND = op({ batchToSpaceND_ });\n//# sourceMappingURL=batch_to_space_nd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FusedBatchNorm } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { xAs4D } from './batchnorm_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Batch normalization.\n *\n * As described in\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n *\n * Mean, variance, scale, and offset can be of two shapes:\n *   - The same shape as the input.\n *   - In the common case, the depth dimension is the last dimension of x, so\n *     the values would be an `tf.Tensor1D` of shape [depth].\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that parameters passed are of given rank\n *   - `tf.batchNorm2d`\n *   - `tf.batchNorm3d`\n *   - `tf.batchNorm4d`\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const $x = convertToTensor(x, 'x', 'batchNorm');\n    const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n    const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n    let $scale;\n    if (scale != null) {\n        $scale = convertToTensor(scale, 'scale', 'batchNorm');\n    }\n    let $offset;\n    if (offset != null) {\n        $offset = convertToTensor(offset, 'offset', 'batchNorm');\n    }\n    util.assert($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    const x4D = xAs4D($x);\n    const forward = (backend, save) => {\n        save([x4D, $mean, $variance, $scale]);\n        return backend.batchNorm(x4D, as1DOr4D($mean), as1DOr4D($variance), as1DOr4D($offset), as1DOr4D($scale), varianceEpsilon);\n    };\n    const inputs = {\n        x: x4D,\n        scale: $scale,\n        offset: $offset,\n        mean: $mean,\n        variance: $variance\n    };\n    const attrs = { varianceEpsilon };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, FusedBatchNorm, attrs);\n    return reshape(res, $x.shape);\n}\nfunction as1DOr4D(x) {\n    if (x == null) {\n        return null;\n    }\n    if (x.rank === 0) {\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        return reshape(x, [x.size]);\n    }\n    else if (x.rank === 1) {\n        return x;\n    }\n    else if (x.rank === 2) {\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        return reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n    }\n    else if (x.rank === 3) {\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        return reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n    }\n    return x;\n}\nexport const batchNorm = op({ batchNorm_ });\n//# sourceMappingURL=batchnorm.js.map","import { reshape } from './reshape';\nexport function xAs4D(x) {\n    let x4D;\n    if (x.rank === 0 || x.rank === 1) {\n        x4D = reshape(x, [1, 1, 1, x.size]);\n    }\n    else if (x.rank === 2) {\n        x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n    }\n    else if (x.rank === 3) {\n        x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n    }\n    else {\n        x4D = x;\n    }\n    return x4D;\n}\n//# sourceMappingURL=batchnorm_util.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {\n    const $x = convertToTensor(x, 'x', 'batchNorm');\n    const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n    const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n    let $scale;\n    if (scale != null) {\n        $scale = convertToTensor(scale, 'scale', 'batchNorm');\n    }\n    let $offset;\n    if (offset != null) {\n        $offset = convertToTensor(offset, 'offset', 'batchNorm');\n    }\n    util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n        `${$x.rank}.`);\n    util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n        `got rank ${$mean.rank}.`);\n    util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n        `but got rank ${$variance.rank}.`);\n    if ($scale != null) {\n        util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n    }\n    return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport const batchNorm2d = op({ batchNorm2d_ });\n//# sourceMappingURL=batchnorm2d.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 3D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {\n    const $x = convertToTensor(x, 'x', 'batchNorm');\n    const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n    const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n    let $scale;\n    if (scale != null) {\n        $scale = convertToTensor(scale, 'scale', 'batchNorm');\n    }\n    let $offset;\n    if (offset != null) {\n        $offset = convertToTensor(offset, 'offset', 'batchNorm');\n    }\n    util.assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n        `${$x.rank}.`);\n    util.assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +\n        `got rank ${$mean.rank}.`);\n    util.assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +\n        `but got rank ${$variance.rank}.`);\n    if ($scale != null) {\n        util.assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n    }\n    return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport const batchNorm3d = op({ batchNorm3d_ });\n//# sourceMappingURL=batchnorm3d.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {\n    const $x = convertToTensor(x, 'x', 'batchNorm');\n    const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n    const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n    let $scale;\n    if (scale != null) {\n        $scale = convertToTensor(scale, 'scale', 'batchNorm');\n    }\n    let $offset;\n    if (offset != null) {\n        $offset = convertToTensor(offset, 'offset', 'batchNorm');\n    }\n    util.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n        `${$x.rank}.`);\n    util.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n        `got rank ${$mean.rank}.`);\n    util.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n        `but got rank ${$variance.rank}.`);\n    if ($scale != null) {\n        util.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n    }\n    return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport const batchNorm4d = op({ batchNorm4d_ });\n//# sourceMappingURL=batchnorm4d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BroadcastTo } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until is has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_(x, shape) {\n    let input = convertToTensor(x, 'broadcastTo', 'x');\n    const xShape = input.shape;\n    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n    }\n    if (shape.length < input.rank) {\n        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);\n    }\n    if (shape.length > input.rank) {\n        const newShape = input.shape.slice();\n        while (newShape.length < shape.length) {\n            newShape.unshift(1);\n        }\n        input = reshape(input, newShape);\n    }\n    const inputShape = input.shape;\n    const reps = Array.from(shape);\n    for (let i = shape.length - 1; i >= 0; i--) {\n        if (inputShape[i] === shape[i]) {\n            reps[i] = 1;\n        }\n        else if (input.shape[i] !== 1) {\n            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n        }\n    }\n    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n    if (axes.length === 0) {\n        return clone(input);\n    }\n    const forward = (backend) => backend.tile(input, reps);\n    const inputs = { x: input };\n    const attrs = { shape, inputShape };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, BroadcastTo, attrs);\n}\nexport const broadcastTo = op({ broadcastTo_ });\n//# sourceMappingURL=broadcast_to.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Ceil } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.ceil().print();  // or tf.ceil(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction ceil_(x) {\n    const $x = convertToTensor(x, 'x', 'ceil');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.ceil($x), inputs, null /* grad */, Ceil);\n}\nexport const ceil = op({ ceil_ });\n//# sourceMappingURL=ceil.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ClipByValue } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower-bound of range to be clipped to.\n * @param clipValueMax Upper-bound of range to be clipped to.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\n    const $x = convertToTensor(x, 'x', 'clipByValue');\n    util.assert((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +\n        `less than or equal to max (${clipValueMax}).`);\n    const inputs = { x: $x };\n    const attrs = { clipValueMin, clipValueMax };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.clip($x, clipValueMin, clipValueMax);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, ClipByValue, attrs);\n}\nexport const clipByValue = op({ clipByValue_ });\n//# sourceMappingURL=clip_by_value.js.map","import { concat } from './concat';\nimport { op } from './operation';\n/**\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(3) = |r1, g1, b1|\n * B: shape(2) = |r2, g2|\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @return The concatenated array.\n */\nfunction concat1d_(tensors) {\n    return concat(tensors, 0 /* axis */);\n}\nexport const concat1d = op({ concat1d_ });\n//# sourceMappingURL=concat_1d.js.map","import { concat } from './concat';\nimport { op } from './operation';\n/**\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *\n * B: shape(2, 3) = | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * C = tf.concat2d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *                  | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * if axis = 1:\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n *                   | r2, g2, b2, r4, g4, b4 |\n *\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concatenate along.\n * @return The concatenated array.\n */\nfunction concat2d_(tensors, axis) {\n    return concat(tensors, axis);\n}\nexport const concat2d = op({ concat2d_ });\n//# sourceMappingURL=concat_2d.js.map","import { concat } from './concat';\nimport { op } from './operation';\n/**\n * Concatenates a list of `tf.Tensor3D`s along an axis.\n * See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *\n * B: shape(2, 1, 3) = | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * C = tf.concat3d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *                     | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * if axis = 1:\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n *                     | r2, g2, b2, r4, g4, b4 |\n *\n * if axis = 2:\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n *                      | r2, g2, b2, r4, g4, b4 |\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat3d_(tensors, axis) {\n    return concat(tensors, axis);\n}\nexport const concat3d = op({ concat3d_ });\n//# sourceMappingURL=concat_3d.js.map","import { concat } from './concat';\nimport { op } from './operation';\n/**\n * Concatenates a list of `tf.Tensor4D`s along an axis.\n * See `concat` for details.\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat4d_(tensors, axis) {\n    return concat(tensors, axis);\n}\nexport const concat4d = op({ concat4d_ });\n//# sourceMappingURL=concat_4d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'conv2d');\n    const $filter = convertToTensor(filter, 'filter', 'conv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` +\n        `${$filter.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n    util.assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n        `input depth for filter ${$filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const forward = (backend, save) => {\n        const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n        const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n        const res = backend.conv2d(x4D, $filter, convInfo);\n        save([x4D, $filter]);\n        return res;\n    };\n    const inputs = { x: x4D, filter: $filter };\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv2D, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const conv2d = op({ conv2d_ });\n//# sourceMappingURL=conv2d.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'conv1d');\n    const $filter = convertToTensor(filter, 'filter', 'conv1d');\n    let x3D = $x;\n    let reshapedTo3D = false;\n    if ($x.rank === 2) {\n        reshapedTo3D = true;\n        x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n    }\n    util.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n    util.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` +\n        `${$filter.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv1d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    util.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n        `input depth for filter ${$filter.shape[1]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n        `Got stride ${stride} and dilation '${dilation}'`);\n    util.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);\n    const filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n    const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n    const strides = [1, stride];\n    const dilations = [1, dilation];\n    const conv2dDataFormat = 'NHWC';\n    const res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n    if (reshapedTo3D) {\n        return reshape(res, [res.shape[2], res.shape[3]]);\n    }\n    return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\nexport const conv1d = op({ conv1d_ });\n//# sourceMappingURL=conv1d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n    let xShape4D = xShape;\n    let dy4D = dy;\n    let reshapedTo4D = false;\n    if (dy.rank === 3) {\n        reshapedTo4D = true;\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n        xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n    }\n    util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n        `${xShape4D.length}.`);\n    util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n        `rank ${dy4D.rank}`);\n    util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n        `rank ${filter.rank}`);\n    const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n    util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n        `match input depth for filter ${filter.shape[2]}.`);\n    util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n        `match output depth for filter ${filter.shape[3]}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        const dilations = 1;\n        const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n        const convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n        const res = backend.conv2dDerInput(dy4D, filter, convInfo);\n        save([dy4D, filter]);\n        return res;\n    };\n    const inputs = { dy: dy4D, filter };\n    const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv2DBackpropInput, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const conv2DBackpropInput = op({ conv2DBackpropInput_ });\n//# sourceMappingURL=conv2d_backprop_input.js.map","import { convertToTensor } from '../tensor_util_env';\nimport { conv2DBackpropInput } from './conv2d_backprop_input';\nimport { op } from './operation';\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode The rounding mode used when computing output\n *    dimensions if pad is a number. If none is provided, it will not round\n *    and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n    const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n    return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\nexport const conv2dTranspose = op({ conv2dTranspose_ });\n//# sourceMappingURL=conv2d_transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { eitherStridesOrDilationsAreOne } from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {\n    const $x = convertToTensor(x, 'x', 'conv3d');\n    const $filter = convertToTensor(filter, 'filter', 'conv3d');\n    let x5D = $x;\n    let reshapedTo5D = false;\n    if ($x.rank === 4) {\n        reshapedTo5D = true;\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n    util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` +\n        `${$filter.rank}.`);\n    util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n        `input depth for filter ${$filter.shape[3]}.`);\n    util.assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);\n    const forward = (backend, save) => {\n        const convInfo = conv_util.computeConv3DInfo(x5D.shape, $filter.shape, strides, dilations, pad);\n        const res = backend.conv3d(x5D, $filter, convInfo);\n        save([x5D, $filter]);\n        return res;\n    };\n    const inputs = { x: x5D, filter: $filter };\n    const attrs = { strides, pad, dataFormat, dilations };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv3D, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const conv3d = op({ conv3d_ });\n//# sourceMappingURL=conv3d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n    let xShape5D = xShape;\n    let dy5D = dy;\n    let reshapedTo5D = false;\n    if (dy.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n        xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n    }\n    const inDepth = xShape5D[4];\n    const outDepth = dy5D.shape[4];\n    util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n        `${xShape5D.length}.`);\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n        `rank ${dy5D.rank}`);\n    util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n        `rank ${filter.rank}`);\n    util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n        `match input depth for filter ${filter.shape[3]}.`);\n    util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n        `match output depth for filter ${filter.shape[4]}.`);\n    const forward = backend => {\n        const dilations = 1;\n        const convInfo = conv_util.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);\n        return backend.conv3dDerInput(dy5D, filter, convInfo);\n    };\n    const inputs = { dy: dy5D };\n    const attrs = { pad };\n    const res = ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropInputV2, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const conv3DBackpropInput = op({ conv3DBackpropInput_ });\n//# sourceMappingURL=conv3d_backprop_input.js.map","import { convertToTensor } from '../tensor_util_env';\nimport { conv3DBackpropInput } from './conv3d_backprop_input';\nimport { op } from './operation';\n/**\n * Computes the transposed 3D convolution of a volume, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 5 or rank 4, of shape\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 5 or rank 4:\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\n *    assumed.\n * @param strides The strides of the original convolution:\n *     `[strideDepth, strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3dTranspose_(x, filter, outputShape, strides, pad) {\n    const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n    const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n    return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);\n}\nexport const conv3dTranspose = op({ conv3dTranspose_ });\n//# sourceMappingURL=conv3d_transpose.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cos } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.cos().print();  // or tf.cos(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cos_(x) {\n    const $x = convertToTensor(x, 'x', 'cos');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.cos($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Cos);\n}\nexport const cos = op({ cos_ });\n//# sourceMappingURL=cos.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cosh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.cosh().print();  // or tf.cosh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cosh_(x) {\n    const $x = convertToTensor(x, 'x', 'cosh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.cosh($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Cosh);\n}\nexport const cosh = op({ cosh_ });\n//# sourceMappingURL=cosh.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { getAxesPermutation, getInnerMostAxes, getUndoAxesPermutation } from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_(x, axis = 0, exclusive = false, reverse = false) {\n    const $x = convertToTensor(x, 'x', 'cumsum');\n    const forward = (backend, save) => {\n        const permutation = getAxesPermutation([axis], $x.rank);\n        let permutedX = $x;\n        if (permutation != null) {\n            permutedX = transpose($x, permutation);\n        }\n        const permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n        let value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);\n        save([$x]);\n        if (permutation != null) {\n            const reversePermutation = getUndoAxesPermutation(permutation);\n            value = transpose(value, reversePermutation);\n        }\n        return value;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, exclusive, reverse };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Cumsum, attrs);\n}\nexport const cumsum = op({ cumsum_ });\n//# sourceMappingURL=cumsum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction depthToSpace_(x, blockSize, dataFormat = 'NHWC') {\n    const $x = convertToTensor(x, 'x', 'depthToSpace');\n    const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n    util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n    util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n    util.assert((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\n    const forward = backend => backend.depthToSpace($x, blockSize, dataFormat);\n    const inputs = { x: $x };\n    const attrs = { blockSize, dataFormat };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, DepthToSpace, attrs);\n}\nexport const depthToSpace = op({ depthToSpace_ });\n//# sourceMappingURL=depth_to_space.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n    const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n        `${$filter.rank}.`);\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +\n        `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n        `filter ${$filter.shape[2]}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        if (dilations == null) {\n            dilations = [1, 1];\n        }\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n            `1. Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n        const res = backend.depthwiseConv2D(x4D, $filter, convInfo);\n        save([x4D, $filter]);\n        return res;\n    };\n    const inputs = { x: x4D, filter: $filter };\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, DepthwiseConv2dNative, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const depthwiseConv2d = op({ depthwiseConv2d_ });\n//# sourceMappingURL=depthwise_conv2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Diag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Returns a diagonal tensor with a given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n */\nfunction diag_(x) {\n    const $x = convertToTensor(x, 'x', 'diag');\n    const forward = backend => {\n        const flat = reshape($x, [$x.size]);\n        const result = backend.diag(flat);\n        const outShape = [...x.shape, ...x.shape];\n        return reshape(result, outShape);\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Diag);\n}\nexport const diag = op({ diag_ });\n//# sourceMappingURL=diag.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Dilation2D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the grayscale dilation over the input `x`.\n *\n * @param x The input tensor, rank 3 or rank 4 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter tensor, rank 3, of shape\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat Specify the data format of the input and output data.\n *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the\n *      default format \"NHWC\", the data is stored in the order of: [batch,\n *      height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`\n *     is a single number, then `dilationHeight == dilationWidth`. If it is\n *     greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {\n    const $x = convertToTensor(x, 'x', 'dilation2d');\n    const $filter = convertToTensor(filter, 'filter', 'dilation2d');\n    util.assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +\n        `${$x.rank}.`);\n    util.assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` +\n        `${$filter.rank}.`);\n    util.assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` +\n        `but got dataFormat of ${dataFormat}`);\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n        reshapedTo4D = true;\n    }\n    const inputs = { x: x4D, filter: $filter };\n    const attrs = { strides, pad, dilations };\n    const res = ENGINE.runKernel(Dilation2D, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const dilation2d = op({ dilation2d_ });\n//# sourceMappingURL=dilation2d.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n    const inRank = inShape.length;\n    const dims = [];\n    for (let i = 0; i < inRank; i++) {\n        const dim = inRank - 1 - i;\n        const a = inShape[dim] || 1;\n        const b = outShape[outShape.length - 1 - i] || 1;\n        if (b > 1 && a === 1) {\n            dims.unshift(dim);\n        }\n    }\n    return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(inShape, outShape) {\n    const result = [];\n    for (let i = 0; i < outShape.length; i++) {\n        const inDim = inShape[inShape.length - i - 1];\n        const outAxis = outShape.length - i - 1;\n        const outDim = outShape[outAxis];\n        if (inDim == null || (inDim === 1 && outDim > 1)) {\n            result.unshift(outAxis);\n        }\n    }\n    return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n    const result = [];\n    const l = Math.max(shapeA.length, shapeB.length);\n    for (let i = 0; i < l; i++) {\n        let a = shapeA[shapeA.length - i - 1];\n        if (a == null) {\n            a = 1;\n        }\n        let b = shapeB[shapeB.length - i - 1];\n        if (b == null) {\n            b = 1;\n        }\n        if (a === 1) {\n            result.unshift(b);\n        }\n        else if (b === 1) {\n            result.unshift(a);\n        }\n        else if (a !== b) {\n            const errMsg = `Operands could not be broadcast together with shapes ` +\n                `${shapeA} and ${shapeB}.`;\n            throw Error(errMsg);\n        }\n        else {\n            result.unshift(a);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=broadcast_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Equal } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.equal(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction equal_(a, b) {\n    let $a = convertToTensor(a, 'a', 'equal');\n    let $b = convertToTensor(b, 'b', 'equal');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = backend => backend.equal($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null, Equal);\n}\nexport const equal = op({ equal_ });\n//# sourceMappingURL=equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SelectV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch } from '../util';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_(condition, a, b) {\n    const $a = convertToTensor(a, 'a', 'where');\n    const $b = convertToTensor(b, 'b', 'where');\n    const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n    // TODO: move this logic to forward function when the broadcastTo op is\n    // implemented in WASM.\n    // Find the broadcastable shape for $a and $b.\n    const broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\n    const $broadcastedA = broadcastTo($a, broadcastShape);\n    const $broadcastedB = broadcastTo($b, broadcastShape);\n    if ($condition.rank === 1) {\n        // If condition rank is 1, then the first dimension must match the size of\n        // condition.\n        assert($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');\n    }\n    if ($condition.rank !== 1) {\n        // A must have the same shape as condition.\n        assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\n    }\n    const forward = (backend, save) => {\n        const res = backend.select($condition, $broadcastedA, $broadcastedB);\n        save([$condition]);\n        return res;\n    };\n    const inputs = {\n        condition: $condition,\n        t: $broadcastedA,\n        e: $broadcastedB\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, SelectV2);\n}\nexport const where = op({ where_ });\n//# sourceMappingURL=where.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ZerosLike } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction zerosLike_(x) {\n    const $x = convertToTensor(x, 'x', 'zerosLike');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.zerosLike($x), inputs, null /* grad */, ZerosLike);\n}\nexport const zerosLike = op({ zerosLike_ });\n//# sourceMappingURL=zeros_like.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { div } from './div';\nimport { equal } from './equal';\nimport { op } from './operation';\nimport { where } from './where';\nimport { zerosLike } from './zeros_like';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\n * if denominator is 0.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n * const c = tf.tensor1d([0, 0, 0, 0]);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n * const c = tf.scalar(0);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction divNoNan_(a, b) {\n    // TODO: Make this into its own kernel.\n    let $a = convertToTensor(a, 'a', 'div');\n    let $b = convertToTensor(b, 'b', 'div');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const divResult = div($a, $b);\n    const zeros = zerosLike(divResult);\n    const bEqualsZero = equal($b, zeros);\n    return where(bEqualsZero, zeros, divResult);\n}\nexport const divNoNan = op({ divNoNan_ });\n//# sourceMappingURL=div_no_nan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1, t2) {\n    const $t1 = convertToTensor(t1, 't1', 'dot');\n    const $t2 = convertToTensor(t2, 't2', 'dot');\n    util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n        `${$t1.rank} and ${$t2.rank}.`);\n    const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n    const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n    util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` +\n        `${t1Inner} and ${t2Inner}.`);\n    if ($t1.rank === 1 && $t2.rank === 1) {\n        const t12D = reshape($t1, [1, -1]);\n        const t22D = reshape($t2, [-1, 1]);\n        const t1t2 = matMul(t12D, t22D);\n        return reshape(t1t2, []);\n    }\n    else if ($t1.rank === 1 && $t2.rank === 2) {\n        const t12D = reshape($t1, [1, -1]);\n        const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n        const t1t2 = matMul(t12D, t22D);\n        return reshape(t1t2, [t1t2.size]);\n    }\n    else if ($t1.rank === 2 && $t2.rank === 1) {\n        const t22D = reshape($t2, [-1, 1]);\n        const t1t2 = matMul($t1, t22D);\n        return reshape(t1t2, [t1t2.size]);\n    }\n    else {\n        const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n        const t1t2 = matMul($t1, t22D);\n        return t1t2;\n    }\n}\nexport const dot = op({ dot_ });\n//# sourceMappingURL=dot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Elu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction elu_(x) {\n    const $x = convertToTensor(x, 'x', 'elu');\n    const forward = (backend, save) => {\n        const y = backend.elu($x);\n        save([y]);\n        return y;\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Elu);\n}\nexport const elu = op({ elu_ });\n//# sourceMappingURL=elu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Erf } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Computes gause error function of the input `tf.Tensor` element-wise:\n * `erf(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.erf().print(); // or tf.erf(x);\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction erf_(x) {\n    let $x = convertToTensor(x, 'x', 'erf');\n    util.assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');\n    if ($x.dtype === 'int32') {\n        $x = cast($x, 'float32');\n    }\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.erf($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Erf);\n}\nexport const erf = op({ erf_ });\n//# sourceMappingURL=erf.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Exp } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction exp_(x) {\n    const $x = convertToTensor(x, 'x', 'exp');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.exp($x);\n        save([res]);\n        return res;\n    }, inputs, null /* grad */, Exp);\n}\nexport const exp = op({ exp_ });\n//# sourceMappingURL=exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_(x, axis = 0) {\n    const parseAs = null;\n    const $x = convertToTensor(x, 'x', 'expandDims', parseAs);\n    util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n    const newShape = $x.shape.slice();\n    if (axis < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-($x.rank + 1) <= axis, () => `Axis must be in the interval [${-($x.rank + 1)}, ${$x.rank}]`);\n        axis = $x.rank + axis + 1;\n    }\n    newShape.splice(axis, 0, 1);\n    return reshape($x, newShape);\n}\nexport const expandDims = op({ expandDims_ });\n//# sourceMappingURL=expand_dims.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Expm1 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\n * `e ^ x - 1`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.expm1().print();  // or tf.expm1(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction expm1_(x) {\n    const $x = convertToTensor(x, 'x', 'expm1');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.expm1($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Expm1);\n}\nexport const expm1 = op({ expm1_ });\n//# sourceMappingURL=expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction tile_(x, reps) {\n    const parseAs = null;\n    const $x = convertToTensor(x, 'x', 'tile', parseAs);\n    util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of reps ${reps}.`);\n    const forward = (backend, save) => {\n        const res = backend.tile($x, reps);\n        save([$x]);\n        return res;\n    };\n    const inputsToSave = [$x];\n    const inputs = { x: $x };\n    const attrs = { reps };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Tile, attrs, inputsToSave);\n}\nexport const tile = op({ tile_ });\n//# sourceMappingURL=tile.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    const buff = buffer([numRows, numColumns], dtype);\n    const n = numRows <= numColumns ? numRows : numColumns;\n    for (let i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    const out = reshape(buff.toTensor(), [numRows, numColumns]);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n                batchShape[0], batchShape[1], batchShape[2], 1, 1\n            ]);\n        }\n        else {\n            throw new Error(`eye() currently supports only 1D and 2D ` +\n                // tslint:disable-next-line:no-any\n                `batchShapes, but received ${batchShape.length}D.`);\n        }\n    }\n}\nexport const eye = op({ eye_ });\n//# sourceMappingURL=eye.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Fill } from '../kernel_names';\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill(shape, value, dtype) {\n    const attrs = { shape, value, dtype };\n    return ENGINE.runKernelFunc(backend => backend.fill(shape, value, dtype), {}, null, Fill, attrs);\n}\nexport { fill };\n//# sourceMappingURL=fill.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Floor } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.floor().print();  // or tf.floor(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction floor_(x) {\n    const $x = convertToTensor(x, 'x', 'floor');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.floor($x), inputs, null /* grad */, Floor);\n}\nexport const floor = op({ floor_ });\n//# sourceMappingURL=floor.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport { nearestDivisor } from '../util';\nexport const PARALLELIZE_THRESHOLD = 30;\nexport function computeOptimalWindowSize(inSize) {\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        return inSize;\n    }\n    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n//# sourceMappingURL=reduce_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GatherV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { collectGatherOpShapeInfo } from './segment_util';\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction gather_(x, indices, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'gather');\n    const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n    const inputs = { x: $x, indices: $indices };\n    const attrs = { axis };\n    const forward = (backend, save) => {\n        const parsedAxis = parseAxisParam(axis, $x.shape)[0];\n        const shapeInfo = collectGatherOpShapeInfo($x, $indices, parsedAxis);\n        const res = backend.gather($x, reshape($indices, [$indices.size]), parsedAxis);\n        save([$x, $indices]);\n        return reshape(res, shapeInfo.outputShape);\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, GatherV2, attrs);\n}\nexport const gather = op({ gather_ });\n//# sourceMappingURL=gather.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n    let done = false;\n    let res;\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        res = inSize;\n        done = true;\n    }\n    else {\n        res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n    }\n    while (!done) {\n        if (res > numSegments || res === inSize) {\n            done = true;\n        }\n        else {\n            res = nearestDivisor(inSize, res + 1);\n        }\n    }\n    return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (dim !== axis) {\n            outShape.push(aShape[dim]);\n        }\n        else {\n            outShape.push(numSegments);\n        }\n    }\n    return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis) {\n    const dimSize = x.shape[axis];\n    const outputShape = [];\n    let batchSize = 1;\n    let sliceSize = 1;\n    for (let i = 0; i < axis; i++) {\n        outputShape.push(x.shape[i]);\n        batchSize *= x.shape[i];\n    }\n    for (let i = 0; i < indices.rank; i++) {\n        outputShape.push(indices.shape[i]);\n    }\n    for (let i = axis + 1; i < x.rank; i++) {\n        outputShape.push(x.shape[i]);\n        sliceSize *= x.shape[i];\n    }\n    return { batchSize, sliceSize, dimSize, outputShape };\n}\n//# sourceMappingURL=segment_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Greater } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greater_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greater');\n    let $b = convertToTensor(b, 'b', 'greater');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = backend => backend.greater($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Greater);\n}\nexport const greater = op({ greater_ });\n//# sourceMappingURL=greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GreaterEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greaterEqual');\n    let $b = convertToTensor(b, 'b', 'greaterEqual');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend, save) => {\n        const res = backend.greaterEqual($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, GreaterEqual);\n}\nexport const greaterEqual = op({ greaterEqual_ });\n//# sourceMappingURL=greater_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Imag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction imag_(input) {\n    const $input = convertToTensor(input, 'input', 'imag');\n    const forward = (backend) => {\n        return backend.imag($input);\n    };\n    const inputs = { input: $input };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Imag);\n}\nexport const imag = op({ imag_ });\n//# sourceMappingURL=imag.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { IsFinite } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns which elements of x are finite.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isFinite().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isFinite_(x) {\n    const $x = convertToTensor(x, 'x', 'isFinite');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend) => backend.isFinite($x), inputs, null /* grad */, IsFinite);\n}\nexport const isFinite = op({ isFinite_ });\n//# sourceMappingURL=is_finite.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { IsInf } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns which elements of x are Infinity or -Infinity.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isInf().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isInf_(x) {\n    const $x = convertToTensor(x, 'x', 'isInf');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend) => backend.isInf($x), inputs, null /* grad */, IsInf);\n}\nexport const isInf = op({ isInf_ });\n//# sourceMappingURL=is_inf.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { IsNan } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * RReturns which elements of x are NaN.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isNaN().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isNaN_(x) {\n    const $x = convertToTensor(x, 'x', 'isNaN');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.isNaN($x), inputs, null /* grad */, IsNan);\n}\nexport const isNaN = op({ isNaN_ });\n//# sourceMappingURL=is_nan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Maximum } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.maximumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * ```js\n * // Broadcast maximum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction maximum_(a, b) {\n    let $a = convertToTensor(a, 'a', 'maximum');\n    let $b = convertToTensor(b, 'b', 'maximum');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'bool') {\n        $a = cast($a, 'int32');\n        $b = cast($b, 'int32');\n    }\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend, save) => {\n        const res = backend.maximum($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Maximum);\n}\nexport const maximum = op({ maximum_ });\n//# sourceMappingURL=maximum.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(value, dtype) {\n    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n        dtype !== 'complex64') {\n        throw new Error('Error creating a new Scalar: value must be a primitive ' +\n            '(number|boolean|string)');\n    }\n    if (dtype === 'string' && isTypedArray(value) &&\n        !(value instanceof Uint8Array)) {\n        throw new Error('When making a scalar from encoded string, ' +\n            'the value must be `Uint8Array`.');\n    }\n    const shape = [];\n    const inferredShape = [];\n    return makeTensor(value, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=scalar.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { maximum } from './maximum';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { scalar } from './scalar';\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction leakyRelu_(x, alpha = 0.2) {\n    const $x = convertToTensor(x, 'x', 'leakyRelu');\n    return maximum(mul(scalar(alpha), $x), $x);\n}\nexport const leakyRelu = op({ leakyRelu_ });\n//# sourceMappingURL=leaky_relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Less } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction less_(a, b) {\n    let $a = convertToTensor(a, 'a', 'less');\n    let $b = convertToTensor(b, 'b', 'less');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = backend => backend.less($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Less);\n}\nexport const less = op({ less_ });\n//# sourceMappingURL=less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LessEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction lessEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'lessEqual');\n    let $b = convertToTensor(b, 'b', 'lessEqual');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend, save) => {\n        const res = backend.lessEqual($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LessEqual);\n}\nexport const lessEqual = op({ lessEqual_ });\n//# sourceMappingURL=less_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n    const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n    util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n    util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +\n        `integer but got depthRadius ${depthRadius}.`);\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    const forward = (backend, save) => {\n        const y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);\n        save([x4D, y]);\n        return y;\n    };\n    const inputs = { x: x4D };\n    const attrs = { depthRadius, bias, alpha, beta };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, LRN, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    else {\n        return res;\n    }\n}\nexport const localResponseNormalization = op({ localResponseNormalization_ });\n//# sourceMappingURL=local_response_normalization.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log_(x) {\n    const $x = convertToTensor(x, 'x', 'log');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.log($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Log);\n}\nexport const log = op({ log_ });\n//# sourceMappingURL=log.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log1p } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log1p_(x) {\n    const $x = convertToTensor(x, 'x', 'log1p');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.log1p($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Log1p);\n}\nexport const log1p = op({ log1p_ });\n//# sourceMappingURL=log1p.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n    return (x, dy) => {\n        // x can be of any dtype, thus null as the last argument.\n        const $x = convertToTensor(x, 'x', 'tf.grad', null);\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f($x), [$x], $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                    'returned by f(x)');\n            }\n            checkGrads(grads);\n            return grads[0];\n        });\n    };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n        // args can be of any dtype, thus null as the last argument.\n        const $args = convertToTensorArray(args, 'args', 'tf.grads', null);\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f(...$args), $args, $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                    'match the shape returned by f([x1,...])');\n            }\n            checkGrads(grads);\n            return grads;\n        });\n    };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n    return (x, dy) => {\n        util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n        const { grads, value } = ENGINE.gradients(() => f(x), [x], dy);\n        checkGrads(grads);\n        return { grad: grads[0], value };\n    };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n        const res = ENGINE.gradients(() => f(...args), args, dy);\n        if (dy != null) {\n            util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n        }\n        checkGrads(res.grads);\n        return res;\n    };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f, varList) {\n    util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n    util.assert(varList == null ||\n        Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +\n        'of variables');\n    const specifiedVarList = varList != null;\n    if (!specifiedVarList) {\n        // Get all of the trainable variables.\n        varList = [];\n        for (const varName in ENGINE.registeredVariables) {\n            varList.push(ENGINE.registeredVariables[varName]);\n        }\n    }\n    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n    // Prune non-trainable variables.\n    const originalVarCount = varList.length;\n    varList = varList.filter(variable => variable.trainable);\n    util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +\n        `be trainable, but none of the ${originalVarCount} variables is ` +\n        `trainable.`);\n    const allowNoGradients = true;\n    const { value, grads } = ENGINE.gradients(f, varList, null, allowNoGradients);\n    util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +\n        'the loss function y=f(x). Please make sure the operations that ' +\n        'use variables are inside the function f passed to minimize().');\n    util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n        `returned a rank-${value.rank} tensor`);\n    const namedGrads = {};\n    varList.forEach((v, i) => {\n        if (grads[i] != null) {\n            namedGrads[v.name] = grads[i];\n        }\n    });\n    if (specifiedNonTrainable != null) {\n        // If varList is explicitly provided and contains non-trainable values,\n        // add them to the returned gradients with `null` values.\n        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n    }\n    return { value, grads: namedGrads };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad(f) {\n    return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads) {\n    const numNullGradients = grads.filter(g => g == null).length;\n    if (numNullGradients > 0) {\n        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n    }\n}\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads, };\n//# sourceMappingURL=gradients.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Negate } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction neg_(x) {\n    const $x = convertToTensor(x, 'x', 'neg');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.neg($x), inputs, null /* grad */, Negate);\n}\nexport const neg = op({ neg_ });\n//# sourceMappingURL=neg.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Softplus } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.softplus().print();  // or tf.softplus(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction softplus_(x) {\n    const $x = convertToTensor(x, 'x', 'softplus');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.softplus($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Softplus);\n}\nexport const softplus = op({ softplus_ });\n//# sourceMappingURL=softplus.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { mul } from './mul';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { softplus } from './softplus';\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction logSigmoid_(x) {\n    const $x = convertToTensor(x, 'x', 'logSigmoid');\n    // Use a custom gradient to maintain previous implementation.\n    // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n    // directly\n    const customOp = customGrad((x) => {\n        // TODO(yassogba) we can remove the chained softplus call here only\n        // after backends have modualrized softplus at which point we can call\n        // engine runKernel(..., Sotfplus, ...) directly.\n        const value = neg(softplus(neg(x)));\n        const gradFunc = (dy) => {\n            const derX = mul(dy, sigmoid(neg(x)));\n            return derX;\n        };\n        return { value, gradFunc };\n    });\n    return customOp($x);\n}\nexport const logSigmoid = op({ logSigmoid_ });\n//# sourceMappingURL=log_sigmoid.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'max');\n    const forward = (backend, save) => {\n        const origAxes = util.parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        let maxInput = $x;\n        if (permutedAxes != null) {\n            maxInput = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, maxInput.rank);\n        }\n        const y = backend.max(maxInput, axes);\n        if (permutedAxes != null) {\n            maxInput.dispose();\n        }\n        let res = y;\n        if (keepDims) {\n            const expandedShape = axis_util.expandShapeToKeepDim(res.shape, util.parseAxisParam(axis, $x.shape));\n            res = reshape(res, expandedShape);\n            y.dispose();\n        }\n        save([$x, res]);\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { reductionIndices: axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Max, attrs);\n}\nexport const max = op({ max_ });\n//# sourceMappingURL=max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sub } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_(a, b) {\n    let $a = convertToTensor(a, 'a', 'sub');\n    let $b = convertToTensor(b, 'b', 'sub');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.subtract($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Sub);\n}\nexport const sub = op({ sub_ });\n//# sourceMappingURL=sub.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction sum_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'sum');\n    if ($x.dtype === 'bool') {\n        $x = cast($x, 'int32');\n    }\n    const forward = (backend, save) => {\n        save([$x]);\n        const axes = parseAxisParam(axis, $x.shape);\n        const permutation = getAxesPermutation(axes, $x.rank);\n        let reductionAxes = axes;\n        let permutedX = $x;\n        if (permutation != null) {\n            permutedX = transpose($x, permutation);\n            reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);\n        }\n        let value = backend.sum(permutedX, reductionAxes);\n        if (keepDims) {\n            const newShape = expandShapeToKeepDim(value.shape, axes);\n            value = reshape(value, newShape);\n        }\n        return value;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Sum, attrs);\n}\nexport const sum = op({ sum_ });\n//# sourceMappingURL=sum.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogSoftmax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { op } from './operation';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction logSoftmax_(logits, axis = -1) {\n    const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n    if (axis === -1) {\n        axis = $logits.rank - 1;\n    }\n    if (axis !== $logits.rank - 1) {\n        throw Error('Log Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${$logits.rank} and axis was ${axis}`);\n    }\n    const forward = (backend, save) => {\n        const keepDims = true;\n        const xMax = max(logits, axis, true);\n        const shifted = sub(logits, xMax);\n        const value = sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n        save([value]);\n        return value;\n    };\n    const inputs = { logits: $logits };\n    const attrs = { axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LogSoftmax, attrs);\n}\nexport const logSoftmax = op({ logSoftmax_ });\n//# sourceMappingURL=log_softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { add } from './add';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'logSumExp');\n    const axes = parseAxisParam(axis, $x.shape);\n    const xMax = max($x, axes, true /* keepDims */);\n    const a = sub($x, xMax);\n    const b = exp(a);\n    const c = sum(b, axes);\n    const d = log(c);\n    const res = add(reshape(xMax, d.shape), d);\n    if (keepDims) {\n        const newShape = expandShapeToKeepDim(res.shape, axes);\n        return reshape(res, newShape);\n    }\n    return res;\n}\nexport const logSumExp = op({ logSumExp_ });\n//# sourceMappingURL=log_sum_exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_(a, b) {\n    const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n    const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(backend => backend.logicalAnd($a, $b), inputs, null /* grad */, LogicalAnd);\n}\nexport const logicalAnd = op({ logicalAnd_ });\n//# sourceMappingURL=logical_and.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalNot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the truth value of `NOT x` element-wise.\n *\n * ```js\n * const a = tf.tensor1d([false, true], 'bool');\n *\n * a.logicalNot().print();\n * ```\n *\n * @param x The input tensor. Must be of dtype 'bool'.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalNot_(x) {\n    const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.logicalNot($x), inputs, null /* grad */, LogicalNot);\n}\nexport const logicalNot = op({ logicalNot_ });\n//# sourceMappingURL=logical_not.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalOr } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalOr(b).print();\n * ```\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalOr_(a, b) {\n    const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n    const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(backend => backend.logicalOr($a, $b), inputs, null /* grad */, LogicalOr);\n}\nexport const logicalOr = op({ logicalOr_ });\n//# sourceMappingURL=logical_or.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { logicalAnd } from './logical_and';\nimport { logicalNot } from './logical_not';\nimport { logicalOr } from './logical_or';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalXor(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalXor_(a, b) {\n    const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');\n    const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    // x ^ y = (x | y) & ~(x & y)\n    return logicalAnd(logicalOr(a, b), logicalNot(logicalAnd(a, b)));\n}\nexport const logicalXor = op({ logicalXor_ });\n//# sourceMappingURL=logical_xor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPool } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction maxPool_(x, filterSize, strides, pad, dimRoundingMode) {\n    const $x = convertToTensor(x, 'x', 'maxPool');\n    const dilations = 1;\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        const convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        let y;\n        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n            util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n            y = x4D.clone();\n        }\n        else {\n            y = backend.maxPool(x4D, convInfo);\n        }\n        save([x4D, y]);\n        return y;\n    };\n    const inputs = { x: x4D };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const maxPool = op({ maxPool_ });\n//# sourceMappingURL=max_pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { MaxPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\n    if (dilations == null) {\n        dilations = [1, 1, 1];\n    }\n    else {\n        deprecationWarn('dilations is deprecated, this field will be gone in ' +\n            'v3.0.0.');\n    }\n    const $x = convertToTensor(x, 'x', 'maxPool3d');\n    let x5D = $x;\n    let reshapedTo5D = false;\n    if ($x.rank === 4) {\n        reshapedTo5D = true;\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n    util.assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n        `but got dataFormat of ${dataFormat}`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = (backend, save) => {\n        if (dilations == null) {\n            dilations = [1, 1, 1];\n        }\n        const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n        const y = backend.maxPool3d(x5D, convInfo);\n        save([x5D, y]);\n        return y;\n    };\n    const inputs = { x: x5D };\n    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool3D, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const maxPool3d = op({ maxPool3d_ });\n//# sourceMappingURL=max_pool_3d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolWithArgmax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the 2D max pooling of an image with Argmax index.\n * The indices in argmax are flattened, so that a maximum value at position `[b,\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\n * +c` if include_batch_in_index is True.\n *\n * The indices returned are always in `[0, height) x [0, width)` before\n * flattening.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param includeBatchIndex Defaults to False. Whether to include batch\n *    dimension in flattened index of argmax.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {\n    const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\n    const inputs = { x: $x };\n    const attrs = { filterSize, strides, pad, includeBatchInIndex };\n    const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);\n    return { result: result[0], indexes: result[1] };\n}\nexport const maxPoolWithArgmax = op({ maxPoolWithArgmax_ });\n//# sourceMappingURL=max_pool_with_argmax.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeZerosTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n//# sourceMappingURL=zeros.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeOnesTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\nimport { zeros } from './zeros';\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = ones(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n//# sourceMappingURL=ones.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam, sizeFromShape } from '../util';\nimport { computeOutAndReduceShapes } from './axis_util';\nimport { cast } from './cast';\nimport { div } from './div';\nimport { mul } from './mul';\nimport { ones } from './ones';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sum } from './sum';\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction mean_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'mean');\n    const axes = parseAxisParam(axis, $x.shape);\n    const shapes = computeOutAndReduceShapes($x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = sizeFromShape(reduceShape);\n    // Use a custom gradient to bypass 2 gradient backprops since mean is used\n    // extremely often.\n    const customOp = customGrad((x) => {\n        const reduceSizeScalar = scalar(reduceSize);\n        // Cast if needed.\n        const xReduce = reduceSizeScalar.dtype === x.dtype ?\n            x :\n            cast(x, reduceSizeScalar.dtype);\n        const res = div(xReduce, reduceSizeScalar);\n        const value = sum(res, axis, keepDims);\n        const gradFunc = (dy) => {\n            const expandedDyShape = x.shape.slice();\n            axes.forEach(axis => {\n                expandedDyShape[axis] = 1;\n            });\n            const expandedDy = reshape(dy, expandedDyShape);\n            const derX = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n            return derX;\n        };\n        return { value, gradFunc };\n    });\n    return customOp($x);\n}\nexport const mean = op({ mean_ });\n//# sourceMappingURL=mean.js.map","import { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'min');\n    const forward = (backend, save) => {\n        const origAxes = parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        let minInput = $x;\n        if (permutedAxes != null) {\n            minInput = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n        }\n        const y = backend.min(minInput, axes);\n        if (permutedAxes != null) {\n            minInput.dispose();\n        }\n        let res = y;\n        if (keepDims) {\n            const expandedShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            res = reshape(y, expandedShape);\n            y.dispose();\n        }\n        save([$x, res]);\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Min, attrs);\n}\nexport const min = op({ min_ });\n//# sourceMappingURL=min.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Minimum } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction minimum_(a, b) {\n    let $a = convertToTensor(a, 'a', 'minimum');\n    let $b = convertToTensor(b, 'b', 'minimum');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'bool') {\n        $a = cast($a, 'int32');\n        $b = cast($b, 'int32');\n    }\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend, save) => {\n        const res = backend.minimum($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Minimum);\n}\nexport const minimum = op({ minimum_ });\n//# sourceMappingURL=minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Mod } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the mod of a and b element-wise.\n * `floor(x / y) * y + mod(x, y) = x`\n * Supports broadcasting.\n *\n * We also expose `tf.modStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * ```js\n * // Broadcast a mod b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mod_(a, b) {\n    let $a = convertToTensor(a, 'a', 'mod');\n    let $b = convertToTensor(b, 'b', 'mod');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const forward = (backend, save) => {\n        const res = backend.mod($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Mod);\n}\nexport const mod = op({ mod_ });\n//# sourceMappingURL=mod.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction square_(x) {\n    const $x = convertToTensor(x, 'x', 'square');\n    const attrs = {};\n    const inputsToSave = [$x];\n    const outputsToSave = [];\n    return ENGINE.runKernelFunc((backend, save) => {\n        save([$x]);\n        return backend.square($x);\n    }, { x: $x }, null /* grad */, 'Square', attrs, inputsToSave, outputsToSave);\n}\nexport const square = op({ square_ });\n//# sourceMappingURL=square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { cast } from './cast';\nimport { mean } from './mean';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { square } from './square';\nimport { sub } from './sub';\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(x, axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'moments');\n    const axes = parseAxisParam(axis, x.shape);\n    const xMean = mean(x, axes, keepDims);\n    let keepDimsShape = xMean.shape;\n    if (!keepDims) {\n        keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n    }\n    const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n    const variance = mean(devSquared, axes, keepDims);\n    return { mean: xMean, variance };\n}\nexport const moments = op({ moments_ });\n//# sourceMappingURL=moments.js.map","import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(lstmCells, data, c, h) {\n    const $data = convertToTensor(data, 'data', 'multiRNNCell');\n    const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n    const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n    let input = $data;\n    const newStates = [];\n    for (let i = 0; i < lstmCells.length; i++) {\n        const output = lstmCells[i](input, $c[i], $h[i]);\n        newStates.push(output[0]);\n        newStates.push(output[1]);\n        input = output[1];\n    }\n    const newC = [];\n    const newH = [];\n    for (let i = 0; i < newStates.length; i += 2) {\n        newC.push(newStates[i]);\n        newH.push(newStates[i + 1]);\n    }\n    return [newC, newH];\n}\nexport const multiRNNCell = op({ multiRNNCell_ });\n//# sourceMappingURL=multi_rnn_cell.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n    const $logits = convertToTensor(logits, 'logits', 'multinomial');\n    const numOutcomes = $logits.size;\n    const origRank = $logits.rank;\n    if (numOutcomes < 2) {\n        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +\n            `${numOutcomes}.`);\n    }\n    if (origRank > 2) {\n        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n    }\n    seed = seed || Math.random();\n    const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n    const res = ENGINE.runKernelFunc(backend => backend.multinomial(logits2D, normalized, numSamples, seed), { logits2D });\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport const multinomial = op({ multinomial_ });\n//# sourceMappingURL=multinomial.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { NotEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction notEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'notEqual');\n    let $b = convertToTensor(b, 'b', 'notEqual');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend) => backend.notEqual($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, NotEqual);\n}\nexport const notEqual = op({ notEqual_ });\n//# sourceMappingURL=not_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Real } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction real_(input) {\n    const $input = convertToTensor(input, 'input', 'real');\n    const forward = (backend) => {\n        return backend.real($input);\n    };\n    const inputs = { input: $input };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Real);\n}\nexport const real = op({ real_ });\n//# sourceMappingURL=real.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { OnesLike } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { complex } from './complex';\nimport { imag } from './imag';\nimport { op } from './operation';\nimport { real } from './real';\nimport { zerosLike } from './zeros_like';\n/**\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.onesLike(x).print();\n * ```\n * @param x A tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction onesLike_(x) {\n    const $x = convertToTensor(x, 'x', 'onesLike');\n    const forward = (backend, save) => {\n        if ($x.dtype === 'complex64') {\n            const r = onesLike(real($x));\n            const i = zerosLike(imag($x));\n            return complex(r, i);\n        }\n        return backend.onesLike($x);\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OnesLike);\n}\nexport const onesLike = op({ onesLike_ });\n//# sourceMappingURL=ones_like.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(v1, v2) {\n    const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n    const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n    util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n        `${$v1.rank} and ${$v2.rank}.`);\n    const v12D = reshape($v1, [-1, 1]);\n    const v22D = reshape($v2, [1, -1]);\n    return matMul(v12D, v22D);\n}\nexport const outerProduct = op({ outerProduct_ });\n//# sourceMappingURL=outer_product.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { PadV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Pads a `tf.Tensor` with a given value and paddings.\n *\n * This operation currently only implements the `CONSTANT` mode.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `paddings` is of given length.\n *   - `tf.pad1d`\n *   - `tf.pad2d`\n *   - `tf.pad3d`\n *   - `tf.pad4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.pad([[1, 2]]).print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * @param constantValue The pad value to use. Defaults to 0.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction pad_(x, paddings, constantValue = 0) {\n    const $x = convertToTensor(x, 'x', 'pad');\n    if ($x.rank === 0) {\n        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n    }\n    const forward = (backend, save) => {\n        save([$x]);\n        return backend.pad($x, paddings, constantValue);\n    };\n    const attrs = { paddings, constantValue };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, PadV2, attrs);\n}\nexport const pad = op({ pad_ });\n//# sourceMappingURL=pad.js.map","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');\n    return pad(x, [paddings], constantValue);\n}\nexport const pad1d = op({ pad1d_ });\n//# sourceMappingURL=pad1d.js.map","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 2 && paddings[0].length === 2 &&\n        paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad2d = op({ pad2d_ });\n//# sourceMappingURL=pad2d.js.map","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 3 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad3d = op({ pad3d_ });\n//# sourceMappingURL=pad3d.js.map","import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(x, paddings, constantValue = 0) {\n    assert(paddings.length === 4 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2 &&\n        paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n    return pad(x, paddings, constantValue);\n}\nexport const pad4d = op({ pad4d_ });\n//# sourceMappingURL=pad4d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SpaceToBatchND } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\n * the \"batch\" dimension (0) such that in the output, the spatial\n * dimensions `[1, ..., M]` correspond to the position within the grid,\n * and the batch dimension combines both the position within a spatial block\n * and the original batch position. Prior to division into blocks,\n * the spatial dimensions of the input are optionally zero padded\n * according to `paddings`. See below for a precise description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n * const blockShape = [2, 2];\n * const paddings = [[0, 0], [0, 0]];\n *\n * x.spaceToBatchND(blockShape, paddings).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\n * is required that\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\n * according to `paddings` to produce `padded` of shape paddedShape.\n *\n * 2. Reshape `padded` to `reshapedPadded` of shape:\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n *\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\n * batch dimension, producing an output tensor of shape:\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction spaceToBatchND_(x, blockShape, paddings) {\n    const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n    util.assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);\n    util.assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n    util.assert($x.shape.reduce((a, b, i) => {\n        if (i > 0 && i <= blockShape.length) {\n            return a &&\n                ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                    blockShape[i - 1] ===\n                    0);\n        }\n        return a;\n    }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);\n    const forward = backend => backend.spaceToBatchND($x, blockShape, paddings);\n    const inputs = { x: $x };\n    const attrs = { blockShape, paddings };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, SpaceToBatchND, attrs);\n}\nexport const spaceToBatchND = op({ spaceToBatchND_ });\n//# sourceMappingURL=space_to_batch_nd.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { avgPool } from './avg_pool';\nimport { batchToSpaceND } from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport { maxPool } from './max_pool';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { spaceToBatchND } from './space_to_batch_nd';\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_(input, windowShape, poolingType, pad, dilations, strides) {\n    if (dilations == null) {\n        dilations = [1, 1];\n    }\n    if (strides == null) {\n        strides = 1;\n    }\n    if (pad === 0) {\n        pad = 'valid';\n    }\n    const $x = convertToTensor(input, 'x', 'maxPool');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);\n    const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];\n    // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n    // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n    let basePadding;\n    if (pad === 'same') {\n        basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);\n    }\n    else {\n        basePadding = [[0, 0], [0, 0]];\n    }\n    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n    const convertedPad = isDilationOne ? pad : 'valid';\n    const convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n    const forwardOp = poolingType === 'avg' ?\n        () => avgPool(convertedX, windowShape, strides, convertedPad) :\n        () => maxPool(convertedX, windowShape, strides, convertedPad);\n    const y = forwardOp();\n    const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {\n    const padStart = basePadding.map(b => b[0]);\n    const origPadEnd = basePadding.map(b => b[1]);\n    const fullInputShape = inputShape.concat(padStart, origPadEnd);\n    const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n    const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n    const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n    const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n    return [paddings, crops];\n}\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(filterShape, dilation) {\n    // Spatial dimensions of the filters and the upsampled filters in which we\n    // introduce (rate - 1) zeros between consecutive filter values.\n    const dilatedFilterShape = filterShape.map((s, i) => {\n        return s + (s - 1) * (dilation[i] - 1);\n    });\n    const padExtraShape = dilatedFilterShape.map(s => s - 1);\n    // When padding is odd, we pad more at end, following the same\n    // convention as conv2d.\n    const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n    const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n    return padExtraShape.map((_, i) => {\n        return [padExtraStart[i], padExtraEnd[i]];\n    });\n}\nexport const pool = op({ pool_ });\n//# sourceMappingURL=pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pow } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction pow_(base, exp) {\n    let $base = convertToTensor(base, 'base', 'pow');\n    let $exp = convertToTensor(exp, 'exp', 'pow');\n    [$base, $exp] = makeTypesMatch($base, $exp);\n    const inputs = { a: $base, b: $exp };\n    const forward = (backend, save) => {\n        const y = backend.pow($base, $exp);\n        save([$base, $exp, y]);\n        return y;\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Pow);\n}\nexport const pow = op({ pow_ });\n//# sourceMappingURL=pow.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_(x, alpha) {\n    const $x = convertToTensor(x, 'x', 'prelu');\n    const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n    const forward = (backend, save) => {\n        const res = backend.prelu($x, $alpha);\n        save([$x, $alpha]);\n        return res;\n    };\n    const inputs = { x: $x, alpha: $alpha };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Prelu);\n}\nexport const prelu = op({ prelu_ });\n//# sourceMappingURL=prelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Prod } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the product of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.prod().print();  // or tf.prod(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.prod(axis).print();  // or tf.prod(x, axis)\n * ```\n *\n * @param x The input tensor to compute the product over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction prod_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'prod');\n    const forward = (backend) => {\n        if ($x.dtype === 'bool') {\n            $x = cast($x, 'int32');\n        }\n        const axes = parseAxisParam(axis, $x.shape);\n        const permutation = getAxesPermutation(axes, $x.rank);\n        let reductionAxes = axes;\n        let permutedX = $x;\n        if (permutation != null) {\n            permutedX = transpose($x, permutation);\n            reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);\n        }\n        let value = backend.prod(permutedX, reductionAxes);\n        if (keepDims) {\n            const newShape = expandShapeToKeepDim(value.shape, axes);\n            value = reshape(value, newShape);\n        }\n        return value;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Prod, attrs);\n}\nexport const prod = op({ prod_ });\n//# sourceMappingURL=prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { sizeFromShape } from '../util';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\nfunction rand_(shape, randFunction, dtype) {\n    const size = sizeFromShape(shape);\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    for (let i = 0; i < size; i++) {\n        values[i] = randFunction();\n    }\n    return ENGINE.makeTensor(values, shape, dtype);\n}\nexport const rand = op({ rand_ });\n//# sourceMappingURL=rand.js.map","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss {\n    constructor(mean, stdDeviation, dtype, truncated, seed) {\n        this.mean = mean;\n        this.stdDev = stdDeviation;\n        this.dtype = dtype;\n        this.nextVal = NaN;\n        this.truncated = truncated;\n        if (this.truncated) {\n            this.upper = this.mean + this.stdDev * 2;\n            this.lower = this.mean - this.stdDev * 2;\n        }\n        const seedValue = seed ? seed : Math.random();\n        this.random = seedrandom.alea(seedValue.toString());\n    }\n    /** Returns next sample from a Gaussian distribution. */\n    nextValue() {\n        if (!isNaN(this.nextVal)) {\n            const value = this.nextVal;\n            this.nextVal = NaN;\n            return value;\n        }\n        let resultX, resultY;\n        let isValid = false;\n        while (!isValid) {\n            let v1, v2, s;\n            do {\n                v1 = 2 * this.random() - 1;\n                v2 = 2 * this.random() - 1;\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s === 0);\n            const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n            resultX = this.mean + this.stdDev * v1 * mul;\n            resultY = this.mean + this.stdDev * v2 * mul;\n            if (!this.truncated || this.isValidTruncated(resultX)) {\n                isValid = true;\n            }\n        }\n        if (!this.truncated || this.isValidTruncated(resultY)) {\n            this.nextVal = this.convertValue(resultY);\n        }\n        return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype == null || this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n    isValidTruncated(value) {\n        return value <= this.upper && value >= this.lower;\n    }\n}\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma {\n    constructor(alpha, beta, dtype, seed) {\n        this.alpha = alpha;\n        this.beta = 1 / beta; // convert rate to scale parameter\n        this.dtype = dtype;\n        const seedValue = seed ? seed : Math.random();\n        this.randu = seedrandom.alea(seedValue.toString());\n        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n        if (alpha < 1) {\n            this.d = alpha + (2 / 3);\n        }\n        else {\n            this.d = alpha - (1 / 3);\n        }\n        this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    /** Returns next sample from a gamma distribution. */\n    nextValue() {\n        let x2, v0, v1, x, u, v;\n        while (true) {\n            do {\n                x = this.randn.nextValue();\n                v = 1 + (this.c * x);\n            } while (v <= 0);\n            v *= v * v;\n            x2 = x * x;\n            v0 = 1 - (0.331 * x2 * x2);\n            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n            u = this.randu();\n            if (u < v0 || Math.log(u) < v1) {\n                break;\n            }\n        }\n        v = (1 / this.beta) * this.d * v;\n        if (this.alpha < 1) {\n            v *= Math.pow(this.randu(), 1 / this.alpha);\n        }\n        return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n}\nexport class UniformRandom {\n    constructor(min = 0, max = 1, dtype, seed) {\n        /** Handles proper rounding for non floating point numbers. */\n        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');\n        this.min = min;\n        this.range = max - min;\n        this.dtype = dtype;\n        if (seed == null) {\n            seed = Math.random();\n        }\n        if (typeof seed === 'number') {\n            seed = seed.toString();\n        }\n        if (!this.canReturnFloat() && this.range <= 1) {\n            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n        }\n        this.random = seedrandom.alea(seed);\n    }\n    convertValue(value) {\n        if (this.canReturnFloat()) {\n            return value;\n        }\n        return Math.round(value);\n    }\n    nextValue() {\n        return this.convertValue(this.min + this.range * this.random());\n    }\n}\nexport function jarqueBeraNormalityTest(values) {\n    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n    const n = values.length;\n    const s = skewness(values);\n    const k = kurtosis(values);\n    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n    const CHI_SQUARE_2DEG = 5.991;\n    if (jb > CHI_SQUARE_2DEG) {\n        throw new Error(`Invalid p-value for JB: ${jb}`);\n    }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    const actualMean = mean(actual);\n    expectNumbersClose(actualMean, expectedMean, epsilon);\n    expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n    let squareDiffSum = 0;\n    for (let i = 0; i < values.length; i++) {\n        const diff = values[i] - mean;\n        squareDiffSum += diff * diff;\n    }\n    return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n    // https://en.wikipedia.org/wiki/Kurtosis\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum4 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum4 += Math.pow(v, 4);\n    }\n    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\nfunction skewness(values) {\n    // https://en.wikipedia.org/wiki/Skewness\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum3 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum3 += Math.pow(v, 3);\n    }\n    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n//# sourceMappingURL=rand_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { RandGamma } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {\n    if (beta == null) {\n        beta = 1;\n    }\n    if (dtype == null) {\n        dtype = 'float32';\n    }\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new Error(`Unsupported data type ${dtype}`);\n    }\n    const rgamma = new RandGamma(alpha, beta, dtype, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = rgamma.nextValue();\n    }\n    return res.toTensor();\n}\nexport const randomGamma = op({ randomGamma_ });\n//# sourceMappingURL=random_gamma.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(`Unsupported data type ${dtype}`);\n    }\n    const randGauss = new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nexport const randomNormal = op({ randomNormal_ });\n//# sourceMappingURL=random_normal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { UniformRandom } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {\n    const res = buffer(shape, dtype);\n    const random = new UniformRandom(minval, maxval, null, seed);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = random.nextValue();\n    }\n    return res.toTensor();\n}\nexport const randomUniform = op({ randomUniform_ });\n//# sourceMappingURL=random_uniform.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor1d(values, dtype) {\n    assertNonNull(values);\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 1) {\n        throw new Error('tensor1d() requires values to be a flat/TypedArray');\n    }\n    const shape = null;\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=tensor1d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Range } from '../kernel_names';\nimport { makeZerosTypedArray } from '../util';\nimport { tensor1d } from './tensor1d';\nimport { zeros } from './zeros';\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a is half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.sv\n *\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function range(start, stop, step = 1, dtype = 'float32') {\n    if (step === 0) {\n        throw new Error('Cannot have a step of zero');\n    }\n    const forward = () => {\n        const sameStartStop = start === stop;\n        const increasingRangeNegativeStep = start < stop && step < 0;\n        const decreasingRangePositiveStep = stop < start && step > 1;\n        if (sameStartStop || increasingRangeNegativeStep ||\n            decreasingRangePositiveStep) {\n            return zeros([0], dtype);\n        }\n        const numElements = Math.abs(Math.ceil((stop - start) / step));\n        const values = makeZerosTypedArray(numElements, dtype);\n        if (stop < start && step === 1) {\n            // Auto adjust the step's sign if it hasn't been set\n            // (or was set to 1)\n            step = -1;\n        }\n        values[0] = start;\n        for (let i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return tensor1d(values, dtype);\n    };\n    const attrs = { start, stop, step, dtype };\n    return ENGINE.runKernelFunc(forward, {} /* inputs */, null /* grad */, Range, attrs);\n}\n//# sourceMappingURL=range.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reciprocal } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes reciprocal of x element-wise: `1 / x`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, 2]);\n *\n * x.reciprocal().print();  // or tf.reciprocal(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction reciprocal_(x) {\n    const $x = convertToTensor(x, 'x', 'reciprocal');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.reciprocal($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Reciprocal);\n}\nexport const reciprocal = op({ reciprocal_ });\n//# sourceMappingURL=reciprocal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { cast } from './cast';\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu_(x) {\n    const $x = convertToTensor(x, 'x', 'relu');\n    const forward = (backend, save) => {\n        save([$x]);\n        if ($x.dtype === 'bool') {\n            return cast($x, 'int32');\n        }\n        return backend.relu($x);\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Relu);\n}\nexport const relu = op({ relu_ });\n//# sourceMappingURL=relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu6 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu6_(x) {\n    const $x = convertToTensor(x, 'x', 'relu6');\n    const forward = (backend, save) => {\n        save([$x]);\n        if ($x.dtype === 'bool') {\n            return cast($x, 'int32');\n        }\n        return backend.relu6($x);\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Relu6);\n}\nexport const relu6 = op({ relu6_ });\n//# sourceMappingURL=relu6.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reverse } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction reverse_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    const forward = (backend) => {\n        const axes = parseAxisParam(axis, $x.shape);\n        if ($x.rank === 0) {\n            return clone($x);\n        }\n        const res = backend.reverse($x, axes);\n        return reshape(res, $x.shape);\n    };\n    const inputs = { x: $x };\n    const attrs = { dims: axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Reverse, attrs);\n}\nexport const reverse = op({ reverse_ });\n//# sourceMappingURL=reverse.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n    return reverse($x, 0);\n}\nexport const reverse1d = op({ reverse1d_ });\n//# sourceMappingURL=reverse_1d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse2d = op({ reverse2d_ });\n//# sourceMappingURL=reverse_2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse3d = op({ reverse3d_ });\n//# sourceMappingURL=reverse_3d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    util.assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n    return reverse($x, axis);\n}\nexport const reverse4d = op({ reverse4d_ });\n//# sourceMappingURL=reverse_4d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Round } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction round_(x) {\n    const $x = convertToTensor(x, 'x', 'round');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend) => backend.round($x), inputs, null /* grad */, Round);\n}\nexport const round = op({ round_ });\n//# sourceMappingURL=round.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Rsqrt } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n * `y = 1 / sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.rsqrt().print();  // or tf.rsqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction rsqrt_(x) {\n    const $x = convertToTensor(x, 'x', 'rsqrt');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.rsqrt($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Rsqrt);\n}\nexport const rsqrt = op({ rsqrt_ });\n//# sourceMappingURL=rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Selu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes scaled exponential linear element-wise.\n *\n * `x < 0 ? scale * alpha * (exp(x) - 1) : x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.selu().print();  // or tf.selu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction selu_(x) {\n    const $x = convertToTensor(x, 'x', 'selu');\n    const forward = (backend, save) => {\n        const res = backend.selu($x);\n        save([$x]);\n        return res;\n    };\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Selu);\n}\nexport const selu = op({ selu_ });\n//# sourceMappingURL=selu.js.map","import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {\n    const $x = convertToTensor(x, 'x', 'separableConv2d');\n    const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n    const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    if (dataFormat === 'NCHW') {\n        throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +\n            'NHWC is supported');\n    }\n    util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n        `got rank ${$depthwiseFilter.rank}.`);\n    util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n        `got rank ${$depthwiseFilter.rank}.`);\n    util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +\n        ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n    util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +\n        `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n    const inChannels = $depthwiseFilter.shape[2];\n    const channelMultiplier = $depthwiseFilter.shape[3];\n    util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +\n        `must be ${inChannels * channelMultiplier}, ` +\n        `but got ${$pointwiseFilter.shape[2]}.`);\n    const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n    const pointwiseStride = 1;\n    const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const separableConv2d = op({ separableConv2d_ });\n//# sourceMappingURL=separable_conv2d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sign } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns an element-wise indication of the sign of a number.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n *\n * x.sign().print();  // or tf.sign(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sign_(x) {\n    const $x = convertToTensor(x, 'x', 'sign');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc(backend => backend.sign($x), inputs, null /* grad */, Sign);\n}\nexport const sign = op({ sign_ });\n//# sourceMappingURL=sign.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sin } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes sin of the input Tensor element-wise: `sin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.sin().print();  // or tf.sin(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sin_(x) {\n    const $x = convertToTensor(x, 'x', 'sin');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.sin($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Sin);\n}\nexport const sin = op({ sin_ });\n//# sourceMappingURL=sin.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sinh } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.sinh().print();  // or tf.sinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sinh_(x) {\n    const $x = convertToTensor(x, 'x', 'sinh');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.sinh($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Sinh);\n}\nexport const sinh = op({ sinh_ });\n//# sourceMappingURL=sinh.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n * of length `size`. See `slice` for details.\n */\nfunction slice1d_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice1d');\n    util.assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n    return slice($x, [begin], [size]);\n}\nexport const slice1d = op({ slice1d_ });\n//# sourceMappingURL=slice1d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice2d');\n    util.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n    return slice($x, begin, size);\n}\nexport const slice2d = op({ slice2d_ });\n//# sourceMappingURL=slice2d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice3d_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice3d');\n    util.assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n    return slice($x, begin, size);\n}\nexport const slice3d = op({ slice3d_ });\n//# sourceMappingURL=slice3d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { slice } from './slice';\n/**\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice4d_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice4d');\n    util.assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n    return slice($x, begin, size);\n}\nexport const slice4d = op({ slice4d_ });\n//# sourceMappingURL=slice4d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Softmax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the softmax normalized vector given the logits.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction softmax_(logits, dim = -1) {\n    const $logits = convertToTensor(logits, 'logits', 'softmax', 'float32');\n    if (dim === -1) {\n        dim = $logits.rank - 1;\n    }\n    if (dim !== $logits.rank - 1) {\n        throw Error('Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${$logits.rank} and dim was ${dim}`);\n    }\n    const inputs = { logits: $logits };\n    const attrs = { dim };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const y = backend.softmax($logits, dim);\n        save([y]);\n        return y;\n    }, inputs, null /* grad */, Softmax, attrs);\n}\nexport const softmax = op({ softmax_ });\n//# sourceMappingURL=softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernelFunc(backend => {\n        // Collapse all outer dimensions to a single batch dimension.\n        const innerDimensionSize = input.shape[input.shape.length - 1];\n        const batch = input.size / innerDimensionSize;\n        const input2D = input.as2D(batch, innerDimensionSize);\n        const result = backend.fft(input2D);\n        return result.reshape(input.shape);\n    }, inputs, null /* gradient */, FFT);\n}\nexport const fft = op({ fft_ });\n//# sourceMappingURL=fft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { IFFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernelFunc(backend => {\n        // Collapse all outer dimensions to a single batch dimension.\n        const innerDimensionSize = input.shape[input.shape.length - 1];\n        const batch = input.size / innerDimensionSize;\n        const input2D = reshape(input, [batch, innerDimensionSize]);\n        const result = backend.ifft(input2D);\n        return reshape(result, input.shape);\n    }, inputs, null /* gradient */, IFFT);\n}\nexport const ifft = op({ ifft_ });\n//# sourceMappingURL=ifft.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { reverse } from '../reverse';\nimport { scalar } from '../scalar';\nimport { slice } from '../slice';\nimport { ifft } from './ifft';\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input) {\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let ret;\n    if (innerDimensionSize <= 2) {\n        const complexInput = reshape(input, [batch, innerDimensionSize]);\n        ret = ifft(complexInput);\n    }\n    else {\n        // The length of unique components of the DFT of a real-valued signal\n        // is 2 * (input_len - 1)\n        const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n        const realInput = reshape(real(input), [batch, innerDimensionSize]);\n        const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n        const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n        const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n        const r = concat([realInput, realConjugate], 1);\n        const i = concat([imagInput, imagConjugate], 1);\n        const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n        ret = ifft(complexInput);\n    }\n    ret = real(ret);\n    // reshape the result if the input is 3D tensor.\n    if (input.rank === 3 && input.shape[0] !== 0) {\n        const temp = ret;\n        const batch = input.shape[0];\n        ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n        temp.dispose();\n    }\n    return ret;\n}\nexport const irfft = op({ irfft_ });\n//# sourceMappingURL=irfft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { prepareSplitSize } from './split_util';\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'split');\n    const forward = (backend, _) => {\n        const $axis = parseAxisParam(axis, $x.shape)[0];\n        const splitSizes = prepareSplitSize($x, numOrSizeSplits, $axis);\n        return backend.split($x, splitSizes, $axis);\n    };\n    const inputs = { x: $x };\n    const attr = { numOrSizeSplits, axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, SplitV, attr);\n}\nexport const split = op({ split_ });\n//# sourceMappingURL=split.js.map","import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n    let splitSizes = [];\n    if (typeof (numOrSizeSplits) === 'number') {\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n        splitSizes =\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n    }\n    else {\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n            if (value === -1) {\n                count += 1;\n            }\n            return count;\n        }, 0);\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n        const negIndex = numOrSizeSplits.indexOf(-1);\n        // Allow the number of split array to be -1, which indicates the rest\n        // of dimension is allocated to that split.\n        if (negIndex !== -1) {\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\n        }\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n        splitSizes = numOrSizeSplits;\n    }\n    return splitSizes;\n}\n//# sourceMappingURL=split_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../../util';\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { split } from '../split';\nimport { zeros } from '../zeros';\nimport { zerosLike } from '../zeros_like';\nimport { fft } from './fft';\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input, fftLength) {\n    assert(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n    let innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let adjustedInput;\n    if (fftLength != null && fftLength < innerDimensionSize) {\n        // Need to crop\n        const begin = input.shape.map(v => 0);\n        const size = input.shape.map(v => v);\n        size[input.shape.length - 1] = fftLength;\n        adjustedInput = slice(input, begin, size);\n        innerDimensionSize = fftLength;\n    }\n    else if (fftLength != null && fftLength > innerDimensionSize) {\n        // Need to pad with zeros\n        const zerosShape = input.shape.map(v => v);\n        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n        adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);\n        innerDimensionSize = fftLength;\n    }\n    else {\n        adjustedInput = input;\n    }\n    // Complement the input with zero imaginary numbers.\n    const zerosInput = zerosLike(adjustedInput);\n    const complexInput = reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n    const ret = fft(complexInput);\n    // Exclude complex conjugations. These conjugations are put symmetrically.\n    const half = Math.floor(innerDimensionSize / 2) + 1;\n    const realValues = real(ret);\n    const imagValues = imag(ret);\n    const realComplexConjugate = split(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);\n    const imagComplexConjugate = split(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);\n    const outputShape = adjustedInput.shape.slice();\n    outputShape[adjustedInput.shape.length - 1] = half;\n    return reshape(complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\nexport const rfft = op({ rfft_ });\n//# sourceMappingURL=rfft.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sqrt } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sqrt_(x) {\n    const $x = convertToTensor(x, 'x', 'sqrt');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.sqrt($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Sqrt);\n}\nexport const sqrt = op({ sqrt_ });\n//# sourceMappingURL=sqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SquaredDifference } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction squaredDifference_(a, b) {\n    let $a = convertToTensor(a, 'a', 'squaredDifference');\n    let $b = convertToTensor(b, 'b', 'squaredDifference');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const forward = (backend, save) => {\n        const res = backend.squaredDifference($a, $b);\n        save([$a, $b]);\n        return res;\n    };\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, SquaredDifference, attrs);\n}\nexport const squaredDifference = op({ squaredDifference_ });\n//# sourceMappingURL=squared_difference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { squeezeShape } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'squeeze');\n    return reshape($x, squeezeShape($x.shape, axis).newShape);\n}\nexport const squeeze = op({ squeeze_ });\n//# sourceMappingURL=squeeze.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { concat } from './concat';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_(tensors, axis = 0) {\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n    util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n    if ($tensors.length === 1) {\n        return expandDims($tensors[0], axis);\n    }\n    const rank = $tensors[0].rank;\n    const shape = $tensors[0].shape;\n    const dtype = $tensors[0].dtype;\n    util.assert(axis <= rank, () => 'Axis must be <= rank of the tensor');\n    $tensors.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const expandedTensors = $tensors.map(t => expandDims(t, axis));\n    // Stack exists in the TensorFlow C++ API\n    // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not\n    // in\n    // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.\n    // Therefore we are treating it like a high-level op rather than\n    // creating a dedicated stack kernel.\n    return concat(expandedTensors, axis);\n}\nexport const stack = op({ stack_ });\n//# sourceMappingURL=stack.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Step } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction step_(x, alpha = 0.0) {\n    const $x = convertToTensor(x, 'x', 'step');\n    const inputs = { x: $x };\n    const attrs = { alpha };\n    return ENGINE.runKernelFunc(backend => backend.step($x, alpha), inputs, null /* grad */, Step, attrs);\n}\nexport const step = op({ step_ });\n//# sourceMappingURL=step.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { StridedSlice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { slice } from './slice';\nimport { computeOutShape, getNormalizedAxes, maskToAxes } from './slice_util';\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n    let $x = convertToTensor(x, 'x', 'stridedSlice');\n    const forward = (backend) => {\n        if (strides == null) {\n            strides = new Array(begin.length);\n        }\n        const ellipsisAxes = maskToAxes(ellipsisMask);\n        if (ellipsisAxes.length > 1) {\n            throw new Error('Multiple ellipses in slice is not allowed.');\n        }\n        if (ellipsisMask !== 0 && newAxisMask !== 0) {\n            throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n        }\n        if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n            throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n        }\n        const numInterpolatedAxes = $x.rank - begin.length;\n        // Expand the dims of x based on the newAxisMask.\n        const expandAxes = maskToAxes(newAxisMask);\n        const newShape = $x.shape.slice();\n        expandAxes.forEach(axis => {\n            begin[axis] = 0;\n            end[axis] = 1;\n            newShape.splice(axis, 0, 1);\n        });\n        $x = reshape($x, newShape);\n        const { begin: normalizedBegin, end: normalizedEnd, strides: normalizedStrides } = getNormalizedAxes($x.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);\n        begin = normalizedBegin;\n        end = normalizedEnd;\n        strides = normalizedStrides;\n        const shrinkAxes = maskToAxes(shrinkAxisMask);\n        // Adjust the ends based on the shrink mask.\n        shrinkAxes.forEach(axis => {\n            end[axis] = begin[axis] + 1;\n            strides[axis] = 1;\n        });\n        // Figure out the output shape.\n        const size = computeOutShape(begin, end, strides);\n        // Remove the axes based on shrinkMask.\n        const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n        const nonStrided = strides.every(v => v === 1);\n        if (nonStrided) {\n            return reshape(slice($x, begin, size), outShape);\n        }\n        const res = backend.stridedSlice($x, begin, end, strides);\n        return reshape(res, outShape);\n    };\n    const inputs = { x: $x };\n    const attrs = {\n        begin,\n        end,\n        strides,\n        beginMask,\n        endMask,\n        ellipsisMask,\n        newAxisMask,\n        shrinkAxisMask\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, StridedSlice, attrs);\n}\nexport const stridedSlice = op({ stridedSlice_ });\n//# sourceMappingURL=strided_slice.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tan } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.tan().print();  // or tf.tan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tan_(x) {\n    const $x = convertToTensor(x, 'x', 'tan');\n    const inputs = { x: $x };\n    return ENGINE.runKernelFunc((backend, save) => {\n        const res = backend.tan($x);\n        save([$x]);\n        return res;\n    }, inputs, null /* grad */, Tan);\n}\nexport const tan = op({ tan_ });\n//# sourceMappingURL=tan.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor2d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 2) {\n        throw new Error('tensor2d() requires shape to have two numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n        throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor2d() requires shape to be provided when `values` ' +\n            'are a flat/TypedArray');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=tensor2d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor4d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 4) {\n        throw new Error('tensor4d() requires shape to have four numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n        throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor4d() requires shape to be provided when `values` ' +\n            'are a flat array');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n//# sourceMappingURL=tensor4d.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_(x, k = 1, sorted = true) {\n    const $x = convertToTensor(x, 'x', 'topk');\n    if ($x.rank === 0) {\n        throw new Error('topk() expects the input to be of rank 1 or higher');\n    }\n    const lastDim = $x.shape[$x.shape.length - 1];\n    if (k > lastDim) {\n        throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n            `but got ${k}`);\n    }\n    const inputs = { x: $x };\n    const attrs = { k, sorted };\n    const [values, indices] = ENGINE.runKernelFunc(b => b.topk($x, k, sorted), inputs, null /* grad */, TopK, attrs);\n    return { values, indices };\n}\nexport const topk = op({ topk_ });\n//# sourceMappingURL=topk.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(`Unsupported data type $ { dtype }`);\n    }\n    const randGauss = new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n    const res = buffer(shape, dtype);\n    for (let i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nexport const truncatedNormal = op({ truncatedNormal_ });\n//# sourceMappingURL=truncated_normal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, isInt } from '../util';\nimport { op } from './operation';\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n *\n * @doc {heading: 'Operations', subheading: 'Segment'}\n */\nfunction unsortedSegmentSum_(x, segmentIds, numSegments) {\n    const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n    const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n    assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n    const inputs = { x: $x, segmentIds: $segmentIds };\n    const attrs = { numSegments };\n    const forward = (backend, save) => {\n        const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);\n        save([$segmentIds]);\n        return res;\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, UnsortedSegmentSum, attrs);\n}\nexport const unsortedSegmentSum = op({ unsortedSegmentSum_ });\n//# sourceMappingURL=unsorted_segment_sum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'unstack');\n    util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n    if (axis < 0) {\n        axis += $x.shape.length;\n    }\n    const inputs = { value: $x };\n    const attrs = { axis };\n    const forward = (backend) => backend.unstack($x, axis);\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Unpack, attrs);\n}\nexport const unstack = op({ unstack_ });\n//# sourceMappingURL=unstack.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the Where kernel shared between cpu and webgl */\nimport { buffer } from '../ops/buffer';\nexport function whereImpl(condShape, condVals) {\n    const indices = [];\n    for (let i = 0; i < condVals.length; i++) {\n        if (condVals[i]) {\n            indices.push(i);\n        }\n    }\n    const inBuffer = buffer(condShape, 'int32');\n    const out = buffer([indices.length, condShape.length], 'int32');\n    for (let i = 0; i < indices.length; i++) {\n        const loc = inBuffer.indexToLoc(indices[i]);\n        const offset = i * condShape.length;\n        out.values.set(loc, offset);\n    }\n    return out.toTensor();\n}\n//# sourceMappingURL=where_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n    let x4D = x;\n    if (x.rank === 3) {\n        x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n    }\n    let dy4D = dy;\n    if (dy4D.rank === 3) {\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n        `${x4D.shape}.`);\n    util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n        `${dy4D.shape}.`);\n    util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n        `${filterShape}.`);\n    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n    util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n        `match input depth in filter (${filterShape[2]}.`);\n    util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n        `match output depth for filter (${filterShape[3]}).`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in conv2dDerFilter: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = backend => {\n        const dilations = 1;\n        const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n        const convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n        return backend.conv2dDerFilter(x4D, dy4D, convInfo);\n    };\n    const inputs = { x: x4D, dy: dy4D };\n    const attrs = { strides, pad, dataFormat, dimRoundingMode };\n    return ENGINE.runKernelFunc(forward, inputs, null, Conv2DBackpropFilter, attrs);\n}\nexport const conv2DBackpropFilter = op({ conv2DBackpropFilter_ });\n//# sourceMappingURL=conv2d_backprop_filter.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { step } from './step';\nimport { sum } from './sum';\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(dy, y, activation) {\n    if (activation == null || activation === 'linear') {\n        return dy;\n    }\n    if (activation === 'relu') {\n        return mul(dy, step(y));\n    }\n    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n}\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(bias, dyActivation) {\n    let res = dyActivation;\n    const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n    if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n    }\n    return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights) {\n    if (activation === 'linear') {\n        return x;\n    }\n    else if (activation === 'relu') {\n        return relu(x);\n    }\n    else if (activation === 'elu') {\n        return elu(x);\n    }\n    else if (activation === 'relu6') {\n        return relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return prelu(x, preluActivationWeights);\n    }\n    throw new Error(`Unknown fused activation ${activation}.`);\n}\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth, activation) => {\n    const gradientMode = gradientDepth > 0;\n    return !gradientMode || activation === 'linear';\n};\n//# sourceMappingURL=fused_util.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { conv2d as unfusedConv2d } from '../conv2d';\nimport { conv2DBackpropFilter } from '../conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n */\nfunction fusedConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights }) {\n    activation = activation || 'linear';\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n        let result = unfusedConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n        if (bias != null) {\n            result = add(result, bias);\n        }\n        return applyActivation(result, activation, preluActivationWeights);\n    }\n    const $x = convertToTensor(x, 'x', 'conv2d');\n    const $filter = convertToTensor(filter, 'filter', 'conv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n        `${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n        `${$filter.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +\n        `input depth for filter ${$filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    util.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);\n    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n    let $bias;\n    if (bias != null) {\n        $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n        [$bias] = makeTypesMatch($bias, $x);\n        broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    }\n    let $preluActivationWeights;\n    if (preluActivationWeights != null) {\n        $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');\n    }\n    const grad = (dy, saved) => {\n        const [$filter, x4D, y, $bias] = saved;\n        const dyActivation = getFusedDyActivation(dy, y, activation);\n        util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n        const xDer = conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n        const filterDer = conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n        const der = [xDer, filterDer];\n        if ($bias != null) {\n            const biasDer = getFusedBiasGradient($bias, dyActivation);\n            der.push(biasDer);\n        }\n        return der;\n    };\n    const forward = (backend) => {\n        const res = backend.fusedConv2d({\n            input: x4D,\n            filter: $filter,\n            convInfo,\n            bias: $bias,\n            activation,\n            preluActivationWeights: $preluActivationWeights\n        });\n        return res;\n    };\n    const inputs = {\n        x: x4D,\n        filter: $filter,\n        bias: $bias,\n        preluActivationWeights: $preluActivationWeights\n    };\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode, activation };\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n        const customOp = customGrad((x4D, filter, save) => {\n            let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedConv2D, attrs);\n            save([filter, x4D, res]);\n            if (reshapedTo4D) {\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOp(x4D, $filter);\n    }\n    else {\n        const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n            let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedConv2D, attrs);\n            save([filter, x4D, res, bias]);\n            if (reshapedTo4D) {\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOpWithBias(x4D, $filter, $bias);\n    }\n}\nexport const conv2d = op({ fusedConv2d_ });\n//# sourceMappingURL=conv2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropFilter } from '../kernel_names';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nfunction depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, convInfo) {\n    let x4D = x;\n    if (x.rank === 3) {\n        x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n    }\n    let dy4D = dy;\n    if (dy4D.rank === 3) {\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    }\n    const forward = backend => backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);\n    const inputs = { x: x4D, dy: dy4D };\n    return ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropFilter);\n}\nexport const depthwiseConv2dNativeBackpropFilter = op({ depthwiseConv2dNativeBackpropFilter_ });\n//# sourceMappingURL=depthwise_conv2d_native_backprop_filter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropInput } from '../kernel_names';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nfunction depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, convInfo) {\n    let dy4D = dy;\n    let reshapedTo4D = false;\n    if (dy.rank === 3) {\n        reshapedTo4D = true;\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    }\n    const forward = backend => backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);\n    const inputs = { dy: dy4D };\n    const res = ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropInput);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const depthwiseConv2dNativeBackpropInput = op({ depthwiseConv2dNativeBackpropInput_ });\n//# sourceMappingURL=depthwise_conv2d_native_backprop_input.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedDepthwiseConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport { depthwiseConv2d as unfusedDepthwiseConv2d } from '../depthwise_conv2d';\nimport { depthwiseConv2dNativeBackpropFilter } from '../depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../depthwise_conv2d_native_backprop_input';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n */\nfunction fusedDepthwiseConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights }) {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n        let result = unfusedDepthwiseConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n        if (bias != null) {\n            result = add(result, bias);\n        }\n        return applyActivation(result, activation, preluActivationWeights);\n    }\n    const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n    const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n        `rank ${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n        `but got rank ${$filter.rank}.`);\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` +\n        `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n        `filter ${$filter.shape[2]}.`);\n    if (dilations == null) {\n        dilations = [1, 1];\n    }\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n        `be 1. Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in fused depthwiseConv2d: pad must be an integer when ` +\n            `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    let $bias;\n    if (bias != null) {\n        $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n        [$bias] = makeTypesMatch($bias, $x);\n        broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    }\n    let $preluActivationWeights;\n    if (preluActivationWeights != null) {\n        $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n    }\n    const grad = (dy, saved) => {\n        util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n        const [$filter, x4D, y, bias] = saved;\n        const dyActivation = getFusedDyActivation(dy, y, activation);\n        const xDer = depthwiseConv2dNativeBackpropInput(x4D.shape, dyActivation, $filter, convInfo);\n        const filterDer = depthwiseConv2dNativeBackpropFilter(x4D, dyActivation, $filter.shape, convInfo);\n        if (bias != null) {\n            const biasDer = getFusedBiasGradient($bias, dyActivation);\n            return [xDer, filterDer, biasDer];\n        }\n        return [xDer, filterDer];\n    };\n    const forward = (backend) => {\n        const res = backend.fusedDepthwiseConv2D({\n            input: x4D,\n            filter: $filter,\n            convInfo,\n            bias: $bias,\n            activation,\n            preluActivationWeights: $preluActivationWeights\n        });\n        return res;\n    };\n    const inputs = {\n        x: x4D,\n        filter: $filter,\n        bias: $bias,\n        preluActivationWeights: $preluActivationWeights\n    };\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode, activation };\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n        const customOp = customGrad((x4D, filter, save) => {\n            let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedDepthwiseConv2D, attrs);\n            save([filter, x4D, res]);\n            if (reshapedTo4D) {\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOp(x4D, $filter);\n    }\n    else {\n        const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n            let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedDepthwiseConv2D, attrs);\n            save([filter, x4D, res, bias]);\n            if (reshapedTo4D) {\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOpWithBias(x4D, $filter, $bias);\n    }\n}\nexport const depthwiseConv2d = op({ fusedDepthwiseConv2d_ });\n//# sourceMappingURL=depthwise_conv2d.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { _FusedMatMul } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { matMul as unfusedMatMul } from '../mat_mul';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n */\nfunction fusedMatMul_({ a, b, transposeA = false, transposeB = false, bias, activation = 'linear', preluActivationWeights }) {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n        let result = unfusedMatMul(a, b, transposeA, transposeB);\n        if (bias != null) {\n            result = add(result, bias);\n        }\n        return applyActivation(result, activation, preluActivationWeights);\n    }\n    let $a = convertToTensor(a, 'a', 'fused matMul');\n    let $b = convertToTensor(b, 'b', 'fused matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in fused matMul: inputs must have the same rank of at least ` +\n        `2, got ranks ${$a.rank} and ${$b.rank}.`);\n    util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` +\n        `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} must match.`);\n    util.assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n    const a3D = transposeA ?\n        reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D = transposeB ?\n        reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n    let $bias;\n    if (bias != null) {\n        $bias = convertToTensor(bias, 'bias', 'fused matMul');\n        [$bias] = makeTypesMatch($bias, $a);\n        broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n    }\n    let $preluActivationWeights;\n    if (preluActivationWeights != null) {\n        $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused matMul');\n    }\n    const grad = (dy, saved) => {\n        const [a3D, b3D, y, $bias] = saved;\n        // we reshape dy because the result of the forward is not\n        // necessarily going to be a 3d tensor due to a reshape done at the end of\n        // the customOp.\n        const dyActivation = getFusedDyActivation(reshape(dy, y.shape), y, activation);\n        let aDer;\n        let bDer;\n        if (!transposeA && !transposeB) {\n            aDer = unfusedMatMul(dyActivation, b3D, false, true);\n            bDer = unfusedMatMul(a3D, dyActivation, true, false);\n        }\n        else if (!transposeA && transposeB) {\n            aDer = unfusedMatMul(dyActivation, b3D, false, false);\n            bDer = unfusedMatMul(dyActivation, a3D, true, false);\n        }\n        else if (transposeA && !transposeB) {\n            aDer = unfusedMatMul(b3D, dyActivation, false, true);\n            bDer = unfusedMatMul(a3D, dyActivation, false, false);\n        }\n        else {\n            aDer = unfusedMatMul(b3D, dyActivation, true, true);\n            bDer = unfusedMatMul(dyActivation, a3D, true, true);\n        }\n        if (bias != null) {\n            const biasDer = getFusedBiasGradient($bias, dyActivation);\n            return [aDer, bDer, biasDer];\n        }\n        else {\n            return [aDer, bDer];\n        }\n    };\n    const forward = (backend) => {\n        const y = backend.fusedBatchMatMul({\n            a: a3D,\n            b: b3D,\n            transposeA,\n            transposeB,\n            bias: $bias,\n            activation,\n            preluActivationWeights: $preluActivationWeights\n        });\n        return y;\n    };\n    const inputs = {\n        a: a3D,\n        b: b3D,\n        bias: $bias,\n        preluActivationWeights: $preluActivationWeights\n    };\n    const attrs = { transposeA, transposeB, activation };\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n        const customOp = customGrad((a3D, b3D, save) => {\n            const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, _FusedMatMul, attrs);\n            save([a3D, b3D, res]);\n            return { value: reshape(res, outShape), gradFunc: grad };\n        });\n        return customOp(a3D, b3D);\n    }\n    else {\n        const customOpWithBias = customGrad((a3D, b3D, $bias, save) => {\n            const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, _FusedMatMul, attrs);\n            save([a3D, b3D, res, $bias]);\n            return { value: reshape(res, outShape), gradFunc: grad };\n        });\n        return customOpWithBias(a3D, b3D, $bias);\n    }\n}\nexport const matMul = op({ fusedMatMul_ });\n//# sourceMappingURL=mat_mul.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.54, 0.46);\n}\nexport const hammingWindow = op({ hammingWindow_ });\n//# sourceMappingURL=hamming_window.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.5, 0.5);\n}\nexport const hannWindow = op({ hannWindow_ });\n//# sourceMappingURL=hann_window.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n    let start = 0;\n    const output = [];\n    while (start + frameLength <= signal.size) {\n        output.push(slice(signal, start, frameLength));\n        start += frameStep;\n    }\n    if (padEnd) {\n        while (start < signal.size) {\n            const padLen = (start + frameLength) - signal.size;\n            const pad = concat([\n                slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n            ]);\n            output.push(pad);\n            start += frameStep;\n        }\n    }\n    if (output.length === 0) {\n        return tensor2d([], [0, frameLength]);\n    }\n    return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({ frame_ });\n//# sourceMappingURL=frame.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { slice } from '../slice';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n    if (fftLength == null) {\n        fftLength = enclosingPowerOfTwo(frameLength);\n    }\n    const framedSignal = frame(signal, frameLength, frameStep);\n    const windowedSignal = mul(framedSignal, windowFn(frameLength));\n    const output = [];\n    for (let i = 0; i < framedSignal.shape[0]; i++) {\n        output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n    }\n    return concat(output);\n}\nexport const stft = op({ stft_ });\n//# sourceMappingURL=stft.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from './tensor1d';\nexport function enclosingPowerOfTwo(value) {\n    // Return 2**N for integer N such that 2**N >= value.\n    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\nexport function cosineWindow(windowLength, a, b) {\n    const even = 1 - windowLength % 2;\n    const newValues = new Float32Array(windowLength);\n    for (let i = 0; i < windowLength; ++i) {\n        const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n        newValues[i] = a - b * Math.cos(cosArg);\n    }\n    return tensor1d(newValues, 'float32');\n}\n//# sourceMappingURL=signal_ops_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by crop_size.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(image, boxes, boxInd, cropSize, method, extrapolationValue) {\n    const $image = convertToTensor(image, 'image', 'cropAndResize');\n    const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n    const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n    method = method || 'bilinear';\n    extrapolationValue = extrapolationValue || 0;\n    const numBoxes = $boxes.shape[0];\n    util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n        `length ${cropSize.length}.`);\n    util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n    util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n    const forward = (backend) => backend.cropAndResize($image, $boxes, $boxInd, cropSize, method, extrapolationValue);\n    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };\n    const attrs = { method, extrapolationValue, cropSize };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, CropAndResize, attrs);\n    return res;\n}\nexport const cropAndResize = op({ cropAndResize_ });\n//# sourceMappingURL=crop_and_resize.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FlipLeftRight } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image) {\n    const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n    util.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const res = ENGINE.runKernel(FlipLeftRight, inputs, {});\n    return res;\n}\nexport const flipLeftRight = op({ flipLeftRight_ });\n//# sourceMappingURL=flip_left_right.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { RotateWithOffset } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Rotates the input image tensor counter-clockwise with an optional offset\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param radians The amount of rotation.\n * @param fillValue The value to fill in the empty space leftover\n *     after rotation. Can be either a single grayscale value (0-255), or an\n *     array of three numbers `[red, green, blue]` specifying the red, green,\n *     and blue channels. Defaults to `0` (black).\n * @param center The center of rotation. Can be either a single value (0-1), or\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\n *     the image around its center).\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {\n    const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n    util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const attrs = { radians, fillValue, center };\n    const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n    return res;\n}\nexport const rotateWithOffset = op({ rotateWithOffset_ });\n//# sourceMappingURL=rotate_with_offset.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    if (iouThreshold == null) {\n        iouThreshold = 0.5;\n    }\n    if (scoreThreshold == null) {\n        scoreThreshold = Number.NEGATIVE_INFINITY;\n    }\n    if (softNmsSigma == null) {\n        softNmsSigma = 0.0;\n    }\n    const numBoxes = boxes.shape[0];\n    maxOutputSize = Math.min(maxOutputSize, numBoxes);\n    util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n    util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n    util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n    util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n    util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n        `but was ${scores.shape[0]}`);\n    util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\nexport { nonMaxSuppSanityCheck };\n//# sourceMappingURL=nonmax_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV3 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };\n    return ENGINE.runKernelFunc(b => b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), { boxes: $boxes, scores: $scores }, null /* grad */, NonMaxSuppressionV3, attrs);\n}\nexport const nonMaxSuppression = op({ nonMaxSuppression_ });\n//# sourceMappingURL=non_max_suppression.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert(arr, element, comparator) {\n    const index = binarySearch(arr, element, comparator);\n    const insertionPoint = index < 0 ? -(index + 1) : index;\n    arr.splice(insertionPoint, 0, element);\n}\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch(arr, target, comparator) {\n    return binarySearch_(arr, target, comparator || defaultComparator);\n}\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction binarySearch_(arr, target, comparator) {\n    let left = 0;\n    let right = arr.length;\n    let middle = 0;\n    let found = false;\n    while (left < right) {\n        middle = left + ((right - left) >>> 1);\n        const compareResult = comparator(target, arr[middle]);\n        if (compareResult > 0) {\n            left = middle + 1;\n        }\n        else {\n            right = middle;\n            // If compareResult is 0, the value is found. We record it is found,\n            // and then keep looking because there may be duplicate.\n            found = !compareResult;\n        }\n    }\n    return found ? left : -left - 1;\n}\n//# sourceMappingURL=array_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\nimport { scalar } from '../ops/scalar';\nimport { tensor1d } from '../ops/tensor1d';\nimport { binaryInsert } from './array_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */)\n        .selectedIndices;\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true\n    /* returnValidOutputs */ );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);\n}\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n    // The list is sorted in ascending order, so that we can always pop the\n    // candidate with the largest score in O(1) time.\n    const candidates = [];\n    for (let i = 0; i < scores.length; i++) {\n        if (scores[i] > scoreThreshold) {\n            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });\n        }\n    }\n    candidates.sort(ascendingComparator);\n    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n    // before.\n    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n    const selectedIndices = [];\n    const selectedScores = [];\n    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n        const candidate = candidates.pop();\n        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;\n        if (originalScore < scoreThreshold) {\n            break;\n        }\n        // Overlapping boxes are likely to have similar scores, therefore we\n        // iterate through the previously selected boxes backwards in order to\n        // see if candidate's score should be suppressed. We use\n        // suppressBeginIndex to track and ensure a candidate can be suppressed\n        // by a selected box no more than once. Also, if the overlap exceeds\n        // iouThreshold, we simply ignore the candidate.\n        let ignoreCandidate = false;\n        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n            if (iou >= iouThreshold) {\n                ignoreCandidate = true;\n                break;\n            }\n            candidate.score =\n                candidate.score * suppressWeight(iouThreshold, scale, iou);\n            if (candidate.score <= scoreThreshold) {\n                break;\n            }\n        }\n        // At this point, if `candidate.score` has not dropped below\n        // `scoreThreshold`, then we know that we went through all of the\n        // previous selections and can safely update `suppressBeginIndex` to the\n        // end of the selected array. Then we can re-insert the candidate with\n        // the updated score and suppressBeginIndex back in the candidate list.\n        // If on the other hand, `candidate.score` has dropped below the score\n        // threshold, we will not add it back to the candidates list.\n        candidate.suppressBeginIndex = selectedIndices.length;\n        if (!ignoreCandidate) {\n            // Candidate has passed all the tests, and is not suppressed, so\n            // select the candidate.\n            if (candidate.score === originalScore) {\n                selectedIndices.push(boxIndex);\n                selectedScores.push(candidate.score);\n            }\n            else if (candidate.score > scoreThreshold) {\n                // Candidate's score is suppressed but is still high enough to be\n                // considered, so add back to the candidates list.\n                binaryInsert(candidates, candidate, ascendingComparator);\n            }\n        }\n    }\n    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n    const validOutputs = selectedIndices.length;\n    const elemsToPad = maxOutputSize - validOutputs;\n    if (padToMaxOutputSize && elemsToPad > 0) {\n        selectedIndices.push(...new Array(elemsToPad).fill(0));\n        selectedScores.push(...new Array(elemsToPad).fill(0.0));\n    }\n    const result = { selectedIndices: tensor1d(selectedIndices, 'int32') };\n    if (returnScoresTensor) {\n        result['selectedScores'] = tensor1d(selectedScores, 'float32');\n    }\n    if (returnValidOutputs) {\n        result['validOutputs'] = scalar(validOutputs, 'int32');\n    }\n    return result;\n}\nfunction intersectionOverUnion(boxes, i, j) {\n    const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n    const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n    const yminI = Math.min(iCoord[0], iCoord[2]);\n    const xminI = Math.min(iCoord[1], iCoord[3]);\n    const ymaxI = Math.max(iCoord[0], iCoord[2]);\n    const xmaxI = Math.max(iCoord[1], iCoord[3]);\n    const yminJ = Math.min(jCoord[0], jCoord[2]);\n    const xminJ = Math.min(jCoord[1], jCoord[3]);\n    const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n    const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n    const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n    if (areaI <= 0 || areaJ <= 0) {\n        return 0.0;\n    }\n    const intersectionYmin = Math.max(yminI, yminJ);\n    const intersectionXmin = Math.max(xminI, xminJ);\n    const intersectionYmax = Math.min(ymaxI, ymaxJ);\n    const intersectionXmax = Math.min(xmaxI, xmaxJ);\n    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n        Math.max(intersectionXmax - intersectionXmin, 0.0);\n    return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold, scale, iou) {\n    const weight = Math.exp(scale * iou * iou);\n    return iou <= iouThreshold ? weight : 0.0;\n}\nfunction ascendingComparator(c1, c2) {\n    // For objects with same scores, we make the object with the larger index go\n    // first. In an array that pops from the end, this means that the object with\n    // the smaller index will be popped first. This ensures the same output as\n    // the TensorFlow python version.\n    return (c1.score - c2.score) ||\n        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n//# sourceMappingURL=non_max_suppression_impl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'notEqualStrict');\n    const $b = convertToTensor(b, 'b', 'notEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n    return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessStrict');\n    const $b = convertToTensor(b, 'b', 'lessStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n    return less($a, $b);\n}\nfunction equalStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'equalStrict');\n    const $b = convertToTensor(b, 'b', 'equalStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n    return equal($a, $b);\n}\nfunction lessEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n    const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n    return lessEqual($a, $b);\n}\nfunction greaterStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterStrict');\n    const $b = convertToTensor(b, 'b', 'greaterStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n    return greater($a, $b);\n}\nfunction greaterEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n    const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n    return greaterEqual($a, $b);\n}\nexport const equalStrict = op({ equalStrict_ });\nexport const greaterEqualStrict = op({ greaterEqualStrict_ });\nexport const greaterStrict = op({ greaterStrict_ });\nexport const lessEqualStrict = op({ lessEqualStrict_ });\nexport const lessStrict = op({ lessStrict_ });\nexport const notEqualStrict = op({ notEqualStrict_ });\n//# sourceMappingURL=compare.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { add } from './add';\nimport { div } from './div';\nimport { maximum } from './maximum';\nimport { minimum } from './minimum';\nimport { mod } from './mod';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { squaredDifference } from './squared_difference';\nimport { sub } from './sub';\n/**\n * @deprecated\n * Adds two `tf.Tensor`s element-wise, A + B.\n *\n * Inputs must be the same shape. For broadcasting support, use add() instead.\n *\n * @param a The first Tensor to add element-wise.\n * @param b The second Tensor to add element-wise.\n */\nfunction addStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'addStrict');\n    const $b = convertToTensor(b, 'b', 'addStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');\n    return add($a, $b);\n}\n/**\n * @deprecated\n * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.sub` instead.\n *\n * @param a The first Tensor to subtract element-wise.\n * @param b The second Tensor to subtract element-wise.\n */\nfunction subStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'subStrict');\n    const $b = convertToTensor(b, 'b', 'subStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');\n    return sub($a, $b);\n}\n/**\n * @deprecated\n * Computes the power of one `tf.Tensor` to another. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.pow` instead.\n *\n * @param base The base tensor to pow element-wise.\n * @param exp The exponent tensor to pow element-wise.\n */\nfunction powStrict_(base, exp) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n    return pow(base, exp);\n}\n/**\n * @deprecated\n * Multiplies two `tf.Tensor`s element-wise, A * B.\n *\n * Inputs must be the same shape. For broadcasting support, use `tf.mul`.\n *\n * @param a The first tensor to multiply.\n * @param b The first tensor to multiply. Must have the same\n *    dtype as `a`.\n */\nfunction mulStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'mul');\n    const $b = convertToTensor(b, 'b', 'mul');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');\n    return mul($a, $b);\n}\n/**\n * @deprecated\n * Divides two `tf.Tensor`s element-wise, A / B. Inputs must\n * be the same shape.\n *\n * @param a The first tensor as the numerator for element-wise division.\n * @param b The second tensor as the denominator for element-wise division.\n */\nfunction divStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'div');\n    const $b = convertToTensor(b, 'b', 'div');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');\n    return div($a, $b);\n}\n/**\n * @deprecated\n * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use mod().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction modStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'modStrict');\n    const $b = convertToTensor(b, 'b', 'modStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');\n    return mod($a, $b);\n}\n/**\n * @deprecated\n * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use minimum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction minimumStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'minimumStrict');\n    const $b = convertToTensor(b, 'b', 'minimumStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');\n    return minimum($a, $b);\n}\n/**\n * @deprecated\n * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use maximum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction maximumStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'maximumStrict');\n    const $b = convertToTensor(b, 'b', 'maximumStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');\n    return maximum($a, $b);\n}\n/**\n * @deprecated\n * Returns (a - b) * (a - b) element-wise.\n *\n * Inputs must be the same shape. For broadcasting support, use\n * `tf.squaredDifference` instead.\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\nfunction squaredDifferenceStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'squaredDifferenceStrict');\n    const $b = convertToTensor(b, 'b', 'squaredDifferenceStrict');\n    util.assertShapesMatch($a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');\n    return squaredDifference($a, $b);\n}\nexport const addStrict = op({ addStrict_ });\nexport const divStrict = op({ divStrict_ });\nexport const maximumStrict = op({ maximumStrict_ });\nexport const minimumStrict = op({ minimumStrict_ });\nexport const modStrict = op({ modStrict_ });\nexport const mulStrict = op({ mulStrict_ });\nexport const powStrict = op({ powStrict_ });\nexport const squaredDifferenceStrict = op({ squaredDifferenceStrict_ });\nexport const subStrict = op({ subStrict_ });\n//# sourceMappingURL=binary_ops.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'norm');\n    const norm = normImpl(x, ord, axis);\n    let keepDimsShape = norm.shape;\n    if (keepDims) {\n        const axes = parseAxisParam(axis, x.shape);\n        keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n    return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n    if (x.rank === 0) {\n        return abs(x);\n    }\n    // consider vector when no axis is specified\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(reshape(x, [-1]), p, axis);\n    }\n    // vector\n    if (x.rank === 1 || typeof axis === 'number' ||\n        Array.isArray(axis) && axis.length === 1) {\n        if (p === 1) {\n            return sum(abs(x), axis);\n        }\n        if (p === Infinity) {\n            return max(abs(x), axis);\n        }\n        if (p === -Infinity) {\n            return min(abs(x), axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    // matrix (assumption axis[0] < axis[1])\n    if (Array.isArray(axis) && axis.length === 2) {\n        if (p === 1) {\n            return max(sum(abs(x), axis[0]), axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return max(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === -Infinity) {\n            return min(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            // norm(x) = sqrt(sum(pow(x, 2)))\n            return sqrt(sum(square(x), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = op({ norm_ });\n//# sourceMappingURL=norm.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assertTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { add } from './add';\nimport { div } from './div';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { scalar } from './scalar';\nimport { sub } from './sub';\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n *\n * @doc {heading: 'Operations', subheading: 'Moving Average'}\n */\nfunction movingAverage_(v, x, decay, step, zeroDebias = true) {\n    const $v = convertToTensor(v, 'v', 'movingAverage');\n    const $x = convertToTensor(x, 'x', 'movingAverage');\n    const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n    assertTypesMatch($v, $x);\n    util.assert(util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n    const one = scalar(1);\n    const oneMinusDecay = sub(one, $decay);\n    let update = mul(sub($x, $v), oneMinusDecay);\n    if (zeroDebias) {\n        util.assert(step != null, () => 'When using zeroDebias: true, step is required.');\n        const $step = convertToTensor(step, 'step', 'movingAverage');\n        update = div(update, sub(one, pow($decay, $step)));\n    }\n    return add($v, update);\n}\nexport const movingAverage = op({ movingAverage_ });\n//# sourceMappingURL=moving_average.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ScatterNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction scatterND_(indices, updates, shape) {\n    const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n    const $updates = convertToTensor(updates, 'updates', 'scatterND');\n    scatter_nd_util.validateInput($updates, $indices, shape);\n    const forward = (backend) => {\n        return backend.scatterND($indices, $updates, shape);\n    };\n    const inputs = { indices: $indices, updates: $updates };\n    const attrs = { shape };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ScatterNd, attrs);\n}\nexport const scatterND = op({ scatterND_ });\n//# sourceMappingURL=scatter_nd.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SparseToDense } from '../kernel_names';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. the type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {\n    const $sparseIndices = convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n    const $sparseValues = convertToTensor(sparseValues, 'sparseValues', 'sparseToDense');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n    sparse_to_dense.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);\n    const inputs = {\n        sparseIndices: $sparseIndices,\n        sparseValues: $sparseValues,\n        defaultValue: $defaultValue\n    };\n    const attrs = { outputShape };\n    return ENGINE.runKernelFunc(backend => backend.sparseToDense($sparseIndices, $sparseValues, outputShape, $defaultValue), inputs, null /* grad */, SparseToDense, attrs);\n}\nexport const sparseToDense = op({ sparseToDense_ });\n//# sourceMappingURL=sparse_to_dense.js.map","/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {\n    if (sparseIndices.dtype !== 'int32') {\n        throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +\n            ` but the dtype was ${sparseIndices.dtype}.`);\n    }\n    if (sparseIndices.rank > 2) {\n        throw new Error('sparseIndices should be a scalar, vector, or matrix,' +\n            ` but got shape ${sparseIndices.shape}.`);\n    }\n    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n    if (outputShape.length !== numDims) {\n        throw new Error('outputShape has incorrect number of elements:,' +\n            ` ${outputShape.length}, should be: ${numDims}.`);\n    }\n    const numValues = sparseValues.size;\n    if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n        throw new Error('sparseValues has incorrect shape ' +\n            `${sparseValues.shape}, should be [] or [${numElems}]`);\n    }\n    if (sparseValues.dtype !== defaultValues.dtype) {\n        throw new Error('sparseValues.dtype must match defaultValues.dtype');\n    }\n}\n//# sourceMappingURL=sparse_to_dense_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GatherNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction gatherND_(x, indices) {\n    const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n    const $x = convertToTensor(x, 'x', 'gatherND');\n    const forward = (backend) => {\n        return backend.gatherND($x, $indices);\n    };\n    const inputs = { params: $x, indices: $indices };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, GatherNd);\n}\nexport const gatherND = op({ gatherND_ });\n//# sourceMappingURL=gather_nd.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { add } from './add';\nimport { div } from './div';\nimport { getNoiseShape } from './dropout_util';\nimport { floor } from './floor';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { randomUniform } from './random_uniform';\n/**\n * Computes dropout.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 2, 1]);\n * const rate = 0.75;\n * const output = tf.dropout(x, rate);\n * output.print();\n * ```\n *\n * @param x A floating point Tensor or TensorLike.\n * @param rate A float in the range [0, 1). The probability that each element\n *   of x is discarded.\n * @param noiseShape An array of numbers of type int32, representing the\n * shape for randomly generated keep/drop flags. If the noiseShape has null\n * value, it will be automatically replaced with the x's relative dimension\n * size. Optional.\n * @param seed Used to create random seeds. Optional.\n * @returns A Tensor of the same shape of x.\n *\n * @doc {heading: 'Operations', subheading: 'Dropout'}\n */\nfunction dropout_(x, rate, noiseShape, seed) {\n    const $x = convertToTensor(x, 'x', 'dropout');\n    util.assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` +\n        `scaled, but got a ${$x.dtype} tensor instead.`);\n    util.assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n    if (rate === 0) {\n        return x instanceof Tensor ? $x.clone() : $x;\n    }\n    const $noiseShape = getNoiseShape($x, noiseShape);\n    const keepProb = 1 - rate;\n    const multiplier = div(floor(add(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);\n    return mul($x, multiplier);\n}\nexport const dropout = op({ dropout_ });\n//# sourceMappingURL=dropout.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x, noiseShape) {\n    if (noiseShape == null) {\n        return x.shape.slice();\n    }\n    if (util.arraysEqual(x.shape, noiseShape)) {\n        return noiseShape;\n    }\n    if (x.shape.length === noiseShape.length) {\n        const newDimension = [];\n        for (let i = 0; i < x.shape.length; i++) {\n            if (noiseShape[i] == null && x.shape[i] != null) {\n                newDimension.push(x.shape[i]);\n            }\n            else {\n                newDimension.push(noiseShape[i]);\n            }\n        }\n        return newDimension;\n    }\n    return noiseShape;\n}\n//# sourceMappingURL=dropout_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV5 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n    const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n    return { selectedIndices: result[0], selectedScores: result[1] };\n}\nexport const nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });\n//# sourceMappingURL=non_max_suppression_with_score.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV4 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defalts to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = {\n        maxOutputSize: $maxOutputSize,\n        iouThreshold: $iouThreshold,\n        scoreThreshold: $scoreThreshold,\n        padToMaxOutputSize\n    };\n    const result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);\n    return { selectedIndices: result[0], validOutputs: result[1] };\n}\nexport const nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_ });\n//# sourceMappingURL=non_max_suppression_padded.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeBilinear } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Bilinear resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_(images, size, alignCorners = false) {\n    const $images = convertToTensor(images, 'images', 'resizeBilinear');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n        `${size}.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [newHeight, newWidth] = size;\n    const forward = (backend, save) => {\n        save([batchImages]);\n        return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n    };\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, size };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeBilinear, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeBilinear = op({ resizeBilinear_ });\n//# sourceMappingURL=resize_bilinear.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_(images, size, alignCorners = false) {\n    const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [newHeight, newWidth] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, size };\n    const forward = (backend, save) => {\n        save([batchImages]);\n        return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);\n    };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeNearestNeighbor, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n//# sourceMappingURL=resize_nearest_neighbor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n    assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n    assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n    const $a = convertToTensor(a, 'a', 'bandPart');\n    assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n    const shape = $a.shape;\n    const [M, N] = $a.shape.slice(-2);\n    if (!(numLower <= M)) {\n        throw new Error(`bandPart(): numLower (${numLower})` +\n            ` must not be greater than the number of rows (${M}).`);\n    }\n    if (!(numUpper <= N)) {\n        throw new Error(`bandPart(): numUpper (${numUpper})` +\n            ` must not be greater than the number of columns (${N}).`);\n    }\n    if (numLower < 0) {\n        numLower = M;\n    }\n    if (numUpper < 0) {\n        numUpper = N;\n    }\n    const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n    const j = range(0, N, 1, 'int32');\n    const ij = sub(i, j);\n    const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n    const zero = zeros([M, N], $a.dtype);\n    return reshape(stack(unstack(reshape($a, [-1, M, N]))\n        .map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({ bandPart_ });\n//# sourceMappingURL=band_part.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs) {\n    let inputIsTensor2D;\n    if (Array.isArray(xs)) {\n        inputIsTensor2D = false;\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n        const dim = xs[0].shape[0];\n        for (let i = 1; i < xs.length; ++i) {\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n                `(${xs[i].shape[0]} vs. ${dim})`);\n        }\n    }\n    else {\n        inputIsTensor2D = true;\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n    }\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\n        `number of dimensions (${xs[0].shape[0]}).`);\n    const ys = [];\n    const xs1d = xs;\n    for (let i = 0; i < xs.length; ++i) {\n        ys.push(ENGINE.tidy(() => {\n            let x = xs1d[i];\n            if (i > 0) {\n                for (let j = 0; j < i; ++j) {\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\n                    x = sub(x, proj);\n                }\n            }\n            return div(x, norm(x, 'euclidean'));\n        }));\n    }\n    if (inputIsTensor2D) {\n        return stack(ys, 0);\n    }\n    else {\n        return ys;\n    }\n}\nexport const gramSchmidt = op({ gramSchmidt_ });\n//# sourceMappingURL=gram_schmidt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x, fullMatrices = false) {\n    assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n    if (x.rank === 2) {\n        return qr2d(x, fullMatrices);\n    }\n    else {\n        // Rank > 2.\n        // TODO(cais): Below we split the input into individual 2D tensors,\n        //   perform QR decomposition on them and then stack the results back\n        //   together. We should explore whether this can be parallelized.\n        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n            .reduce((value, prev) => value * prev);\n        const x2ds = unstack(reshape(x, [\n            outerDimsProd, x.shape[x.shape.length - 2],\n            x.shape[x.shape.length - 1]\n        ]), 0);\n        const q2ds = [];\n        const r2ds = [];\n        x2ds.forEach(x2d => {\n            const [q2d, r2d] = qr2d(x2d, fullMatrices);\n            q2ds.push(q2d);\n            r2ds.push(r2d);\n        });\n        const q = reshape(stack(q2ds, 0), x.shape);\n        const r = reshape(stack(r2ds, 0), x.shape);\n        return [q, r];\n    }\n}\nfunction qr2d(x, fullMatrices = false) {\n    return ENGINE.tidy(() => {\n        assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n        const m = x.shape[0];\n        const n = x.shape[1];\n        let q = eye(m); // Orthogonal transform so far.\n        let r = clone(x); // Transformed matrix so far.\n        const one2D = tensor2d([[1]], [1, 1]);\n        let w = clone(one2D);\n        const iters = m >= n ? n : m;\n        for (let j = 0; j < iters; ++j) {\n            // This tidy within the for-loop ensures we clean up temporary\n            // tensors as soon as they are no longer needed.\n            const rTemp = r;\n            const wTemp = w;\n            const qTemp = q;\n            [w, r, q] = ENGINE.tidy(() => {\n                // Find H = I - tau * w * w', to put zeros below R(j, j).\n                const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n                const normX = norm(rjEnd1);\n                const rjj = slice(r, [j, j], [1, 1]);\n                // The sign() function returns 0 on 0, which causes division by zero.\n                const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n                const u1 = sub(rjj, mul(s, normX));\n                const wPre = div(rjEnd1, u1);\n                if (wPre.shape[0] === 1) {\n                    w = clone(one2D);\n                }\n                else {\n                    w = concat([\n                        one2D,\n                        slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n                    ], 0);\n                }\n                const tau = neg(div(matMul(s, u1), normX));\n                // -- R := HR, Q := QH.\n                const rjEndAll = slice(r, [j, 0], [m - j, n]);\n                const tauTimesW = mul(tau, w);\n                const wT = transpose(w);\n                if (j === 0) {\n                    r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                }\n                else {\n                    const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                    r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n                }\n                const tawTimesWT = transpose(tauTimesW);\n                const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n                if (j === 0) {\n                    q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                }\n                else {\n                    const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                    q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n                }\n                return [w, r, q];\n            });\n            dispose([rTemp, wTemp, qTemp]);\n        }\n        if (!fullMatrices && m > n) {\n            q = slice(q, [0, 0], [m, n]);\n            r = slice(r, [0, 0], [n, n]);\n        }\n        return [q, r];\n    });\n}\nexport const qr = op({ qr_ });\n//# sourceMappingURL=qr.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Reduction;\n(function (Reduction) {\n    Reduction[Reduction[\"NONE\"] = 0] = \"NONE\";\n    Reduction[Reduction[\"MEAN\"] = 1] = \"MEAN\";\n    Reduction[Reduction[\"SUM\"] = 2] = \"SUM\";\n    Reduction[Reduction[\"SUM_BY_NONZERO_WEIGHTS\"] = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n})(Reduction || (Reduction = {}));\n//# sourceMappingURL=loss_ops_utils.js.map","import { convertToTensor } from '../../tensor_util_env';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { Reduction } from '../loss_ops_utils';\nimport { mean } from '../mean';\nimport { mul } from '../mul';\nimport { notEqual } from '../not_equal';\nimport { ones } from '../ones';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sum } from '../sum';\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n    }\n    const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n    if (reduction === Reduction.NONE) {\n        return weightedLoss;\n    }\n    if (reduction === Reduction.SUM) {\n        return sum(weightedLoss);\n    }\n    if (reduction === Reduction.MEAN) {\n        if ($weights == null) {\n            return mean(weightedLoss);\n        }\n        else {\n            const broadcastFactor = $losses.size / $weights.size;\n            const result = div(sum(weightedLoss), sum($weights));\n            return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                result;\n        }\n    }\n    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n        if ($weights == null) {\n            return div(sum(weightedLoss), scalar($losses.size));\n        }\n        else {\n            const broadcastedWeights = mul($weights, ones($losses.shape));\n            const numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n            return div(sum(weightedLoss), numNonZeros);\n        }\n    }\n    throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = op({ computeWeightedLoss_ });\n//# sourceMappingURL=compute_weighted_loss.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n    const $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n    const losses = abs(sub($labels, $predictions));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const absoluteDifference = op({ absoluteDifference_ });\n//# sourceMappingURL=absolute_difference.js.map","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n    const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n    const one = scalar(1);\n    const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = op({ cosineDistance_ });\n//# sourceMappingURL=cosine_distance.js.map","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n    const one = scalar(1);\n    // Convert binary labels to (-1, 1)\n    $labels = sub(mul(scalar(2), $labels), one);\n    const losses = relu(sub(one, mul($labels, $predictions)));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({ hingeLoss_ });\n//# sourceMappingURL=hinge_loss.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { Reduction } from '../loss_ops_utils';\nimport { minimum } from '../minimum';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { square } from '../square';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_(labels, predictions, weights, delta = 1.0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'huberLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n    const deltaScalar = scalar(delta);\n    const error = abs(sub($predictions, $labels));\n    const quadratic = minimum(error, deltaScalar);\n    const linear = sub(error, quadratic);\n    const losses = add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = op({ huberLoss_ });\n//# sourceMappingURL=huber_loss.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'logLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'logLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n    const one = scalar(1);\n    const epsilonScalar = scalar(epsilon);\n    const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n    const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n    const losses = sub(l1, l2);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = op({ logLoss_ });\n//# sourceMappingURL=log_loss.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { squaredDifference } from '../squared_difference';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n    const $predictions = convertToTensor(predictions, 'predictions', 'meanSquaredError');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n    const losses = squaredDifference($labels, $predictions);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const meanSquaredError = op({ meanSquaredError_ });\n//# sourceMappingURL=mean_squared_error.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { exp } from '../exp';\nimport { log1p } from '../log1p';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\nfunction sigmoidCrossEntropyWithLogits_(labels, logits) {\n    const $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n    assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n    /**\n     * Implementation Details:\n     *\n     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n     *   = (1 - z) * x + log(1 + exp(-x))\n     *   = x - x * z + log(1 + exp(-x))\n     *\n     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n     *     x - x * z + log(1 + exp(-x))\n     *   = log(exp(x)) - x * z + log(1 + exp(-x))\n     *   = - x * z + log(1 + exp(x))\n     *\n     * Hence, to ensure stability and avoid overflow, the implementation uses\n     * this equivalent formulation:\n     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n     */\n    const maxOutput = relu($logits);\n    const outputXTarget = mul($logits, $labels);\n    const sigmoidOutput = log1p(exp(neg(abs($logits))));\n    return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n    }\n    assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const half = scalar(0.5);\n        $multiClassLabels =\n            add(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));\n    }\n    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const sigmoidCrossEntropy = op({ sigmoidCrossEntropy_ });\n//# sourceMappingURL=sigmoid_cross_entropy.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../../gradients';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { expandShapeToKeepDim } from '../axis_util';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { exp } from '../exp';\nimport { logSumExp } from '../log_sum_exp';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n    if (dim === -1) {\n        dim = logits.rank - 1;\n    }\n    if (dim !== logits.rank - 1) {\n        throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +\n            `supported. Labels / logits was rank ${logits.rank} ` +\n            `and dim was ${dim}`);\n    }\n    // Use a custom gradient for numerical stability.\n    const customOp = customGrad((labels, logits, save) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n        const costVector = neg(mul(logResult, labels));\n        const value = sum(costVector, [dim]);\n        const gradFunc = (dy, saved) => {\n            const [labels, logResult] = saved;\n            const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n            return [\n                mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))),\n                mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32'))),\n            ];\n        };\n        return { value, gradFunc };\n    });\n    return customOp(labels, logits);\n}\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n    }\n    assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const numClasses = scalar($onehotLabels.shape[1]);\n        $onehotLabels =\n            add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n    }\n    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const softmaxCrossEntropy = op({ softmaxCrossEntropy_ });\n//# sourceMappingURL=softmax_cross_entropy.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Modularized ops.\nexport { abs } from './abs';\nexport { acos } from './acos';\nexport { acosh } from './acosh';\nexport { add } from './add';\nexport { addN } from './add_n';\nexport { all } from './all';\nexport { any } from './any';\nexport { argMax } from './arg_max';\nexport { argMin } from './arg_min';\nexport { asin } from './asin';\nexport { asinh } from './asinh';\nexport { atan } from './atan';\nexport { atan2 } from './atan2';\nexport { atanh } from './atanh';\nexport { avgPool } from './avg_pool';\nexport { avgPool3d } from './avg_pool_3d';\nexport { basicLSTMCell } from './basic_lstm_cell';\nexport { batchToSpaceND } from './batch_to_space_nd';\nexport { batchNorm } from './batchnorm';\nexport { batchNorm2d } from './batchnorm2d';\nexport { batchNorm3d } from './batchnorm3d';\nexport { batchNorm4d } from './batchnorm4d';\nexport { broadcastTo } from './broadcast_to';\nexport { buffer } from './buffer';\nexport { cast } from './cast';\nexport { ceil } from './ceil';\nexport { clipByValue } from './clip_by_value';\nexport { clone } from './clone';\nexport { complex } from './complex';\nexport { concat } from './concat';\nexport { concat1d } from './concat_1d';\nexport { concat2d } from './concat_2d';\nexport { concat3d } from './concat_3d';\nexport { concat4d } from './concat_4d';\nexport { conv1d } from './conv1d';\nexport { conv2d } from './conv2d';\nexport { conv2dTranspose } from './conv2d_transpose';\nexport { conv3d } from './conv3d';\nexport { conv3dTranspose } from './conv3d_transpose';\nexport { cos } from './cos';\nexport { cosh } from './cosh';\nexport { cumsum } from './cumsum';\nexport { depthToSpace } from './depth_to_space';\nexport { depthwiseConv2d } from './depthwise_conv2d';\nexport { diag } from './diag';\nexport { dilation2d } from './dilation2d';\nexport { div } from './div';\nexport { divNoNan } from './div_no_nan';\nexport { dot } from './dot';\nexport { elu } from './elu';\nexport { equal } from './equal';\nexport { erf } from './erf';\nexport { exp } from './exp';\nexport { expandDims } from './expand_dims';\nexport { expm1 } from './expm1';\nexport { eye } from './eye';\nexport { fill } from './fill';\nexport { floor } from './floor';\nexport { floorDiv } from './floorDiv';\nexport { gather } from './gather';\nexport { greater } from './greater';\nexport { greaterEqual } from './greater_equal';\nexport { imag } from './imag';\nexport { isFinite } from './is_finite';\nexport { isInf } from './is_inf';\nexport { isNaN } from './is_nan';\nexport { leakyRelu } from './leaky_relu';\nexport { less } from './less';\nexport { lessEqual } from './less_equal';\nexport { linspace } from './linspace';\nexport { localResponseNormalization } from './local_response_normalization';\nexport { log } from './log';\nexport { log1p } from './log1p';\nexport { logSigmoid } from './log_sigmoid';\nexport { logSoftmax } from './log_softmax';\nexport { logSumExp } from './log_sum_exp';\nexport { logicalAnd } from './logical_and';\nexport { logicalNot } from './logical_not';\nexport { logicalOr } from './logical_or';\nexport { logicalXor } from './logical_xor';\nexport { matMul } from './mat_mul';\nexport { max } from './max';\nexport { maxPool } from './max_pool';\nexport { maxPool3d } from './max_pool_3d';\nexport { maxPoolWithArgmax } from './max_pool_with_argmax';\nexport { maximum } from './maximum';\nexport { mean } from './mean';\nexport { min } from './min';\nexport { minimum } from './minimum';\nexport { mod } from './mod';\nexport { moments } from './moments';\nexport { mul } from './mul';\nexport { multiRNNCell } from './multi_rnn_cell';\nexport { multinomial } from './multinomial';\nexport { neg } from './neg';\nexport { notEqual } from './not_equal';\nexport { oneHot } from './one_hot';\nexport { ones } from './ones';\nexport { onesLike } from './ones_like';\nexport { outerProduct } from './outer_product';\nexport { pad } from './pad';\nexport { pad1d } from './pad1d';\nexport { pad2d } from './pad2d';\nexport { pad3d } from './pad3d';\nexport { pad4d } from './pad4d';\nexport { pool } from './pool';\nexport { pow } from './pow';\nexport { prelu } from './prelu';\nexport { print } from './print';\nexport { prod } from './prod';\nexport { rand } from './rand';\nexport { randomGamma } from './random_gamma';\nexport { randomNormal } from './random_normal';\nexport { randomUniform } from './random_uniform';\nexport { range } from './range';\nexport { real } from './real';\nexport { reciprocal } from './reciprocal';\nexport { relu } from './relu';\nexport { relu6 } from './relu6';\nexport { reshape } from './reshape';\nexport { reverse } from './reverse';\nexport { reverse1d } from './reverse_1d';\nexport { reverse2d } from './reverse_2d';\nexport { reverse3d } from './reverse_3d';\nexport { reverse4d } from './reverse_4d';\nexport { round } from './round';\nexport { rsqrt } from './rsqrt';\nexport { scalar } from './scalar';\nexport { selu } from './selu';\nexport { separableConv2d } from './separable_conv2d';\nexport { setdiff1dAsync } from './setdiff1d_async';\nexport { sigmoid } from './sigmoid';\nexport { sign } from './sign';\nexport { sin } from './sin';\nexport { sinh } from './sinh';\nexport { slice } from './slice';\nexport { slice1d } from './slice1d';\nexport { slice2d } from './slice2d';\nexport { slice3d } from './slice3d';\nexport { slice4d } from './slice4d';\nexport { softmax } from './softmax';\nexport { softplus } from './softplus';\nexport { spaceToBatchND } from './space_to_batch_nd';\nexport { fft } from './spectral/fft';\nexport { ifft } from './spectral/ifft';\nexport { irfft } from './spectral/irfft';\nexport { rfft } from './spectral/rfft';\nexport { split } from './split';\nexport { sqrt } from './sqrt';\nexport { square } from './square';\nexport { squaredDifference } from './squared_difference';\nexport { squeeze } from './squeeze';\nexport { stack } from './stack';\nexport { step } from './step';\nexport { stridedSlice } from './strided_slice';\nexport { sub } from './sub';\nexport { sum } from './sum';\nexport { tan } from './tan';\nexport { tanh } from './tanh';\nexport { tensor } from './tensor';\nexport { tensor1d } from './tensor1d';\nexport { tensor2d } from './tensor2d';\nexport { tensor3d } from './tensor3d';\nexport { tensor4d } from './tensor4d';\nexport { tensor5d } from './tensor5d';\nexport { tensor6d } from './tensor6d';\nexport { tile } from './tile';\nexport { topk } from './topk';\nexport { truncatedNormal } from './truncated_normal';\nexport { unsortedSegmentSum } from './unsorted_segment_sum';\nexport { unstack } from './unstack';\nexport { variable } from './variable';\nexport { where } from './where';\nexport { whereAsync } from './where_async';\nexport { zeros } from './zeros';\nexport { zerosLike } from './zeros_like';\nexport * from './boolean_mask';\nexport * from './compare';\nexport * from './binary_ops';\nexport * from './transpose';\nexport * from './norm';\nexport * from './moving_average';\nexport * from './scatter_nd';\nexport * from './sparse_to_dense';\nexport * from './gather_nd';\nexport * from './dropout';\nexport * from './signal_ops_util';\nexport * from './in_top_k';\nexport { op, OP_SCOPE_SUFFIX } from './operation';\nimport { rfft } from './spectral/rfft';\nimport { fft } from './spectral/fft';\nimport { ifft } from './spectral/ifft';\nimport { irfft } from './spectral/irfft';\nconst spectral = {\n    fft,\n    ifft,\n    rfft,\n    irfft\n};\nimport * as fused from './fused_ops';\nimport { hammingWindow } from './signal/hamming_window';\nimport { hannWindow } from './signal/hann_window';\nimport { frame } from './signal/frame';\nimport { stft } from './signal/stft';\nconst signal = {\n    hammingWindow,\n    hannWindow,\n    frame,\n    stft,\n};\n// Image Ops namespace\nimport { cropAndResize } from './image/crop_and_resize';\nimport { flipLeftRight } from './image/flip_left_right';\nimport { rotateWithOffset } from './image/rotate_with_offset';\nimport { nonMaxSuppression } from './image/non_max_suppression';\nimport { nonMaxSuppressionAsync } from './image/non_max_suppression_async';\nimport { nonMaxSuppressionWithScore } from './image/non_max_suppression_with_score';\nimport { nonMaxSuppressionWithScoreAsync } from './image/non_max_suppression_with_score_async';\nimport { nonMaxSuppressionPadded } from './image/non_max_suppression_padded';\nimport { nonMaxSuppressionPaddedAsync } from './image/non_max_suppression_padded_async';\nimport { resizeBilinear } from './image/resize_bilinear';\nimport { resizeNearestNeighbor } from './image/resize_nearest_neighbor';\nconst image = {\n    flipLeftRight,\n    resizeNearestNeighbor,\n    resizeBilinear,\n    rotateWithOffset,\n    cropAndResize,\n    nonMaxSuppression,\n    nonMaxSuppressionAsync,\n    nonMaxSuppressionWithScore,\n    nonMaxSuppressionWithScoreAsync,\n    nonMaxSuppressionPadded,\n    nonMaxSuppressionPaddedAsync\n};\n// linalg namespace\nimport { bandPart } from './linalg/band_part';\nimport { gramSchmidt } from './linalg/gram_schmidt';\nimport { qr } from './linalg/qr';\nconst linalg = {\n    bandPart,\n    gramSchmidt,\n    qr\n};\n// losses namespace;\nimport { absoluteDifference } from './losses/absolute_difference';\nimport { computeWeightedLoss } from './losses/compute_weighted_loss';\nimport { cosineDistance } from './losses/cosine_distance';\nimport { hingeLoss } from './losses/hinge_loss';\nimport { huberLoss } from './losses/huber_loss';\nimport { logLoss } from './losses/log_loss';\nimport { meanSquaredError } from './losses/mean_squared_error';\nimport { sigmoidCrossEntropy } from './losses/sigmoid_cross_entropy';\nimport { softmaxCrossEntropy } from './losses/softmax_cross_entropy';\nconst losses = {\n    absoluteDifference,\n    computeWeightedLoss,\n    cosineDistance,\n    hingeLoss,\n    huberLoss,\n    logLoss,\n    meanSquaredError,\n    sigmoidCrossEntropy,\n    softmaxCrossEntropy\n};\n// Second level exports.\nexport { image, linalg, losses, spectral, fused, signal };\n//# sourceMappingURL=ops.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dispose } from '../globals';\nimport { variableGrads } from '../gradients';\nimport { scalar } from '../ops/ops';\nimport { Serializable } from '../serialization';\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport class Optimizer extends Serializable {\n    /**\n     * Executes `f()` and minimizes the scalar output of `f()` by computing\n     * gradients of y with respect to the list of trainable variables provided by\n     * `varList`. If no list is provided, it defaults to all trainable variables.\n     *\n     * @param f The function to execute and whose output to minimize.\n     * @param returnCost Whether to return the scalar cost value produced by\n     * executing `f()`.\n     * @param varList An optional list of variables to update. If specified, only\n     * the trainable variables in varList will be updated by minimize. Defaults to\n     * all trainable variables.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers'}\n     */\n    minimize(f, returnCost = false, varList) {\n        const { value, grads } = this.computeGradients(f, varList);\n        if (varList != null) {\n            const gradArray = varList.map(v => ({ name: v.name, tensor: grads[v.name] }));\n            this.applyGradients(gradArray);\n        }\n        else {\n            this.applyGradients(grads);\n        }\n        // Dispose gradients.\n        dispose(grads);\n        if (returnCost) {\n            return value;\n        }\n        else {\n            value.dispose();\n            return null;\n        }\n    }\n    /**\n     * The number of iterations that this optimizer instance has been invoked for.\n     */\n    get iterations() {\n        if (this.iterations_ == null) {\n            this.iterations_ = 0;\n        }\n        return this.iterations_;\n    }\n    incrementIterations() {\n        this.iterations_ = this.iterations + 1;\n    }\n    /**\n     * Executes f() and computes the gradient of the scalar output of f() with\n     * respect to the list of trainable variables provided by `varList`. If no\n     * list is provided, it defaults to all trainable variables.\n     *\n     * @param f The function to execute and whose output to use for computing\n     * gradients with respect to variables.\n     * @param varList An optional list of variables to compute gradients with\n     * respect to. If specified, only the trainable variables in varList will have\n     * gradients computed with respect to. Defaults to all trainable variables.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers'}\n     */\n    computeGradients(f, varList) {\n        return variableGrads(f, varList);\n    }\n    /**\n     * Dispose the variables (if any) owned by this optimizer instance.\n     */\n    dispose() {\n        if (this.iterations_ != null) {\n            dispose(this.iterations_);\n        }\n    }\n    async saveIterations() {\n        if (this.iterations_ == null) {\n            this.iterations_ = 0;\n        }\n        return {\n            name: 'iter',\n            // TODO(cais): Use 'int64' type when available.\n            tensor: scalar(this.iterations_, 'int32')\n        };\n    }\n    async getWeights() {\n        throw new Error('getWeights() is not implemented for this optimizer yet.');\n    }\n    async setWeights(weightValues) {\n        throw new Error(`setWeights() is not implemented for this optimizer class ` +\n            `${this.getClassName()}`);\n    }\n    /**\n     * Extract the first element of the weight values and set it\n     * as the iterations counter variable of this instance of optimizer.\n     *\n     * @param weightValues\n     * @returns Weight values with the first element consumed and excluded.\n     */\n    async extractIterations(weightValues) {\n        this.iterations_ = (await weightValues[0].tensor.data())[0];\n        return weightValues.slice(1);\n    }\n}\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance.minimize != null && instance.computeGradients != null &&\n            instance.applyGradients != null;\n    }\n});\n//# sourceMappingURL=optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/ops';\nimport { square } from '../ops/square';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n    constructor(learningRate, rho, epsilon = null) {\n        super();\n        this.learningRate = learningRate;\n        this.rho = rho;\n        this.epsilon = epsilon;\n        this.accumulatedGrads = [];\n        this.accumulatedUpdates = [];\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            const trainable = false;\n            if (this.accumulatedGrads[i] == null) {\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accum_grad`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedUpdates[i] == null) {\n                this.accumulatedUpdates[i] = {\n                    originalName: `${name}/accum_var`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(mul(accumulatedGrad, this.rho), mul(square(gradient), 1 - this.rho));\n                const updates = mul(div(sqrt(add(accumulatedUpdate, this.epsilon)), sqrt(add(accumulatedGrad, this.epsilon))), gradient);\n                const newAccumulatedUpdate = add(mul(accumulatedUpdate, this.rho), mul(square(updates), 1 - this.rho));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                accumulatedUpdate.assign(newAccumulatedUpdate);\n                const newValue = add(mul(updates, -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedUpdates != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n            dispose(this.accumulatedUpdates.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const variableCount = weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedGrads =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedUpdates =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'rho': this.rho,\n            'epsilon': this.epsilon\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['rho'], config['epsilon']);\n    }\n}\n/** @nocollapse */\nAdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.\nregisterClass(AdadeltaOptimizer);\n//# sourceMappingURL=adadelta_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n    constructor(learningRate, initialAccumulatorValue = 0.1) {\n        super();\n        this.learningRate = learningRate;\n        this.initialAccumulatorValue = initialAccumulatorValue;\n        this.accumulatedGrads = [];\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulatedGrads[i] == null) {\n                const trainable = false;\n                this.accumulatedGrads[i] = {\n                    originalName: `${name}/accumulator`,\n                    variable: tidy(() => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\n            tidy(() => {\n                const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n                accumulatedGrad.assign(newAccumulatedGrad);\n                const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedGrads != null) {\n            dispose(this.accumulatedGrads.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'initialAccumulatorValue': this.initialAccumulatorValue,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n}\n/** @nocollapse */\nAdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.\nregisterClass(AdagradOptimizer);\n//# sourceMappingURL=adagrad_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedSecondMoment = [];\n        tidy(() => {\n            // accB* will be updated by batch.\n            this.accBeta1 = scalar(beta1).variable();\n            this.accBeta2 = scalar(beta2).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const varNames = Array.isArray(variableGradients) ?\n            variableGradients.map(v => v.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const oneMinusAccBeta2 = sub(1, this.accBeta2);\n            varNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                if (this.accumulatedSecondMoment[i] == null) {\n                    this.accumulatedSecondMoment[i] = {\n                        originalName: `${name}/v`,\n                        variable: tidy(() => zerosLike(value).variable(trainable))\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const secondMoment = this.accumulatedSecondMoment[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n                const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n                const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n                firstMoment.assign(newFirstMoment);\n                secondMoment.assign(newSecondMoment);\n                const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n                value.assign(newValue);\n            });\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n            this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedSecondMoment != null) {\n            dispose(this.accumulatedSecondMoment.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        tidy(() => {\n            this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n            this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n        });\n        const variableCount = weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedFirstMoment =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedSecondMoment =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n    }\n}\n/** @nocollapse */\nAdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.\nregisterClass(AdamOptimizer);\n//# sourceMappingURL=adam_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n        super();\n        this.learningRate = learningRate;\n        this.beta1 = beta1;\n        this.beta2 = beta2;\n        this.epsilon = epsilon;\n        this.decay = decay;\n        this.accumulatedFirstMoment = [];\n        this.accumulatedWeightedInfNorm = [];\n        tidy(() => {\n            this.iteration = scalar(0).variable();\n            this.accBeta1 = scalar(beta1).variable();\n        });\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        tidy(() => {\n            const oneMinusAccBeta1 = sub(1, this.accBeta1);\n            const lr = div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n            variableNames.forEach((name, i) => {\n                const value = ENGINE.registeredVariables[name];\n                const trainable = false;\n                if (this.accumulatedFirstMoment[i] == null) {\n                    this.accumulatedFirstMoment[i] = {\n                        originalName: `${name}/m`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                if (this.accumulatedWeightedInfNorm[i] == null) {\n                    this.accumulatedWeightedInfNorm[i] = {\n                        originalName: `${name}/v`,\n                        variable: zerosLike(value).variable(trainable)\n                    };\n                }\n                const gradient = Array.isArray(variableGradients) ?\n                    variableGradients[i].tensor :\n                    variableGradients[name];\n                if (gradient == null) {\n                    return;\n                }\n                const firstMoment = this.accumulatedFirstMoment[i].variable;\n                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n                const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n                const ut0 = mul(weightedInfNorm, this.beta2);\n                const ut1 = abs(gradient);\n                const newWeightedInfNorm = maximum(ut0, ut1);\n                firstMoment.assign(newFirstMoment);\n                weightedInfNorm.assign(newWeightedInfNorm);\n                const newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))), value);\n                value.assign(newValue);\n            });\n            this.iteration.assign(add(this.iteration, 1));\n            this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.accBeta1.dispose();\n        this.iteration.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            dispose(this.accumulatedFirstMoment.map(v => v.variable));\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        throw new Error('getWeights() is not implemented for Adamax yet.');\n    }\n    async setWeights(weightValues) {\n        throw new Error('setWeights() is not implemented for Adamax yet.');\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'beta1': this.beta1,\n            'beta2': this.beta2,\n            'epsilon': this.epsilon,\n            'decay': this.decay\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n    }\n}\n/** @nocollapse */\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\nregisterClass(AdamaxOptimizer);\n//# sourceMappingURL=adamax_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { keep, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n    constructor(learningRate) {\n        super();\n        this.learningRate = learningRate;\n        this.setLearningRate(learningRate);\n    }\n    applyGradients(variableGradients) {\n        const varNames = Array.isArray(variableGradients) ?\n            variableGradients.map(v => v.name) :\n            Object.keys(variableGradients);\n        varNames.forEach((name, i) => {\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const value = ENGINE.registeredVariables[name];\n            tidy(() => {\n                const newValue = add(mul(this.c, gradient), value);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    /**\n     * Sets the learning rate of the optimizer.\n     */\n    setLearningRate(learningRate) {\n        this.learningRate = learningRate;\n        if (this.c != null) {\n            this.c.dispose();\n        }\n        this.c = keep(scalar(-learningRate));\n    }\n    dispose() {\n        this.c.dispose();\n    }\n    async getWeights() {\n        return [await this.saveIterations()];\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        if (weightValues.length !== 0) {\n            throw new Error('SGD optimizer does not have settable weights.');\n        }\n    }\n    getConfig() {\n        return { 'learningRate': this.learningRate };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate']);\n    }\n}\n/** @nocollapse */\nSGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.\nregisterClass(SGDOptimizer);\n//# sourceMappingURL=sgd_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n    constructor(learningRate, momentum, useNesterov = false) {\n        super(learningRate);\n        this.learningRate = learningRate;\n        this.momentum = momentum;\n        this.useNesterov = useNesterov;\n        this.accumulations = [];\n        this.m = scalar(this.momentum);\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            if (this.accumulations[i] == null) {\n                const trainable = false;\n                this.accumulations[i] = {\n                    originalName: `${name}/momentum`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const accumulation = this.accumulations[i].variable;\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            tidy(() => {\n                let newValue;\n                const newAccumulation = add(mul(this.m, accumulation), gradient);\n                if (this.useNesterov) {\n                    newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n                }\n                else {\n                    newValue = add(mul(this.c, newAccumulation), value);\n                }\n                accumulation.assign(newAccumulation);\n                value.assign(newValue);\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        this.m.dispose();\n        if (this.accumulations != null) {\n            dispose(this.accumulations.map(v => v.variable));\n        }\n    }\n    /**\n     * Sets the momentum of the optimizer.\n     *\n     * @param momentum\n     */\n    setMomentum(momentum) {\n        this.momentum = momentum;\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        return [await this.saveIterations()].concat(this.accumulations.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const trainable = false;\n        this.accumulations = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'momentum': this.momentum,\n            'useNesterov': this.useNesterov\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n    }\n}\n/** @nocollapse */\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\nregisterClass(MomentumOptimizer);\n//# sourceMappingURL=momentum_optimizer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {\n        super();\n        this.learningRate = learningRate;\n        this.decay = decay;\n        this.momentum = momentum;\n        this.epsilon = epsilon;\n        this.accumulatedMeanSquares = [];\n        this.accumulatedMoments = [];\n        this.accumulatedMeanGrads = [];\n        this.centered = centered;\n        if (epsilon == null) {\n            this.epsilon = ENGINE.backend.epsilon();\n        }\n        if (learningRate == null) {\n            throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n        }\n    }\n    applyGradients(variableGradients) {\n        const variableNames = Array.isArray(variableGradients) ?\n            variableGradients.map(item => item.name) :\n            Object.keys(variableGradients);\n        variableNames.forEach((name, i) => {\n            const value = ENGINE.registeredVariables[name];\n            const trainable = false;\n            if (this.accumulatedMeanSquares[i] == null) {\n                this.accumulatedMeanSquares[i] = {\n                    originalName: `${name}/rms`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMoments[i] == null) {\n                this.accumulatedMoments[i] = {\n                    originalName: `${name}/momentum`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            if (this.accumulatedMeanGrads[i] == null && this.centered) {\n                this.accumulatedMeanGrads[i] = {\n                    originalName: `${name}/mg`,\n                    variable: tidy(() => zerosLike(value).variable(trainable))\n                };\n            }\n            const gradient = Array.isArray(variableGradients) ?\n                variableGradients[i].tensor :\n                variableGradients[name];\n            if (gradient == null) {\n                return;\n            }\n            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n            const accumulatedMoments = this.accumulatedMoments[i].variable;\n            tidy(() => {\n                const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                if (this.centered) {\n                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n                    // Centered gradient\n                    const newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, this.decay), mul(gradient, 1 - this.decay));\n                    const gradContribution = div(mul(gradient, this.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), this.epsilon))));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), gradContribution);\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n                else {\n                    // Plain gradient\n                    const newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, this.decay), mul(square(gradient), 1 - this.decay));\n                    const newAccumulatedMoments = add(mul(accumulatedMoments, this.momentum), div(mul(gradient, this.learningRate), sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n                    accumulatedMoments.assign(newAccumulatedMoments);\n                    const newValue = sub(value, newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n            });\n        });\n        this.incrementIterations();\n    }\n    dispose() {\n        if (this.accumulatedMeanSquares != null) {\n            dispose(this.accumulatedMeanSquares.map(v => v.variable));\n        }\n        if (this.accumulatedMeanGrads != null && this.centered) {\n            dispose(this.accumulatedMeanGrads.map(v => v.variable));\n        }\n        if (this.accumulatedMoments != null) {\n            dispose(this.accumulatedMoments.map(v => v.variable));\n        }\n    }\n    async getWeights() {\n        // Order matters for Python compatibility.\n        const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n        if (this.centered) {\n            variables.push(...this.accumulatedMeanGrads);\n        }\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\n    }\n    async setWeights(weightValues) {\n        weightValues = await this.extractIterations(weightValues);\n        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n        const trainable = false;\n        this.accumulatedMeanSquares =\n            weightValues.slice(0, variableCount).map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        this.accumulatedMoments =\n            weightValues.slice(variableCount, variableCount * 2)\n                .map(v => ({\n                originalName: v.name,\n                variable: v.tensor.variable(trainable)\n            }));\n        if (this.centered) {\n            this.accumulatedMeanGrads =\n                weightValues.slice(variableCount * 2, variableCount * 3)\n                    .map(v => ({\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                }));\n        }\n    }\n    getConfig() {\n        return {\n            'learningRate': this.learningRate,\n            'decay': this.decay,\n            'momentum': this.momentum,\n            'epsilon': this.epsilon,\n            'centered': this.centered\n        };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n}\n/** @nocollapse */\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\nregisterClass(RMSPropOptimizer);\n//# sourceMappingURL=rmsprop_optimizer.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst delayCallback = (() => {\n    if (typeof requestAnimationFrame !== 'undefined') {\n        return requestAnimationFrame;\n    }\n    else if (typeof setImmediate !== 'undefined') {\n        return setImmediate;\n    }\n    return (f) => f(); // no delays\n})();\n/**\n * Returns a promise that resolve when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame() {\n    return new Promise(resolve => delayCallback(() => resolve()));\n}\nexport { nextFrame };\n//# sourceMappingURL=browser_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AdadeltaOptimizer } from './adadelta_optimizer';\nimport { AdagradOptimizer } from './adagrad_optimizer';\nimport { AdamOptimizer } from './adam_optimizer';\nimport { AdamaxOptimizer } from './adamax_optimizer';\nimport { MomentumOptimizer } from './momentum_optimizer';\nimport { RMSPropOptimizer } from './rmsprop_optimizer';\nimport { SGDOptimizer } from './sgd_optimizer';\nexport class OptimizerConstructors {\n    /**\n     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\n     *\n     * ```js\n     * // Fit a quadratic function by learning the coefficients a, b, c.\n     * const xs = tf.tensor1d([0, 1, 2, 3]);\n     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n     *\n     * const a = tf.scalar(Math.random()).variable();\n     * const b = tf.scalar(Math.random()).variable();\n     * const c = tf.scalar(Math.random()).variable();\n     *\n     * // y = a * x^2 + b * x + c.\n     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);\n     * const loss = (pred, label) => pred.sub(label).square().mean();\n     *\n     * const learningRate = 0.01;\n     * const optimizer = tf.train.sgd(learningRate);\n     *\n     * // Train the model.\n     * for (let i = 0; i < 10; i++) {\n     *   optimizer.minimize(() => loss(f(xs), ys));\n     * }\n     *\n     * // Make predictions.\n     * console.log(\n     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\n     * const preds = f(xs).dataSync();\n     * preds.forEach((pred, i) => {\n     *   console.log(`x: ${i}, pred: ${pred}`);\n     * });\n     * ```\n     *\n     * @param learningRate The learning rate to use for the SGD algorithm.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static sgd(learningRate) {\n        return new SGDOptimizer(learningRate);\n    }\n    /**\n     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient\n     * descent.\n     *\n     * See\n     * [http://proceedings.mlr.press/v28/sutskever13.pdf](\n     * http://proceedings.mlr.press/v28/sutskever13.pdf)\n     *\n     * @param learningRate The learning rate to use for the Momentum gradient\n     * descent algorithm.\n     * @param momentum The momentum to use for the momentum gradient descent\n     * algorithm.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static momentum(learningRate, momentum, useNesterov = false) {\n        return new MomentumOptimizer(learningRate, momentum, useNesterov);\n    }\n    /**\n     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\n     * descent. This implementation uses plain momentum and is not centered\n     * version of RMSProp.\n     *\n     * See\n     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\n     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\n     *\n     * @param learningRate The learning rate to use for the RMSProp gradient\n     * descent algorithm.\n     * @param decay The discounting factor for the history/coming gradient.\n     * @param momentum The momentum to use for the RMSProp gradient descent\n     * algorithm.\n     * @param epsilon Small value to avoid zero denominator.\n     * @param centered If true, gradients are normalized by the estimated\n     * variance of the gradient.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {\n        return new RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);\n    }\n    /**\n     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\n     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n     *\n     * @param learningRate The learning rate to use for the Adam gradient\n     * descent algorithm.\n     * @param beta1 The exponential decay rate for the 1st moment estimates.\n     * @param beta2 The exponential decay rate for the 2nd moment estimates.\n     * @param epsilon A small constant for numerical stability.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {\n        return new AdamOptimizer(learningRate, beta1, beta2, epsilon);\n    }\n    /**\n     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\n     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)\n     *\n     * @param learningRate The learning rate to use for the Adadelta gradient\n     * descent algorithm.\n     * @param rho The learning rate decay over each update.\n     * @param epsilon A constant epsilon used to better condition the grad\n     * update.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static adadelta(learningRate = .001, rho = .95, epsilon = null) {\n        return new AdadeltaOptimizer(learningRate, rho, epsilon);\n    }\n    /**\n     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\n     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n     *\n     * @param learningRate The learning rate to use for the Adamax gradient\n     * descent algorithm.\n     * @param beta1 The exponential decay rate for the 1st moment estimates.\n     * @param beta2 The exponential decay rate for the 2nd moment estimates.\n     * @param epsilon A small constant for numerical stability.\n     * @param decay The learning rate decay over each update.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {\n        return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);\n    }\n    /**\n     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\n     * See\n     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\n     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\n     * or\n     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\n     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)\n     *\n     * @param learningRate The learning rate to use for the Adagrad gradient\n     * descent algorithm.\n     * @param initialAccumulatorValue Starting value for the accumulators, must be\n     * positive.\n     *\n     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n     */\n    static adagrad(learningRate, initialAccumulatorValue = 0.1) {\n        return new AdagradOptimizer(learningRate, initialAccumulatorValue);\n    }\n}\n//# sourceMappingURL=optimizer_constructors.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// So typings can propagate.\nimport { AdadeltaOptimizer } from './optimizers/adadelta_optimizer';\nimport { AdagradOptimizer } from './optimizers/adagrad_optimizer';\nimport { AdamOptimizer } from './optimizers/adam_optimizer';\nimport { AdamaxOptimizer } from './optimizers/adamax_optimizer';\nimport { MomentumOptimizer } from './optimizers/momentum_optimizer';\nimport { OptimizerConstructors } from './optimizers/optimizer_constructors';\nimport { RMSPropOptimizer } from './optimizers/rmsprop_optimizer';\nimport { SGDOptimizer } from './optimizers/sgd_optimizer';\n// tslint:disable-next-line:no-unused-expression\n[MomentumOptimizer, SGDOptimizer, AdadeltaOptimizer, AdagradOptimizer,\n    RMSPropOptimizer, AdamaxOptimizer, AdamOptimizer];\nexport const train = {\n    sgd: OptimizerConstructors.sgd,\n    momentum: OptimizerConstructors.momentum,\n    adadelta: OptimizerConstructors.adadelta,\n    adagrad: OptimizerConstructors.adagrad,\n    rmsprop: OptimizerConstructors.rmsprop,\n    adamax: OptimizerConstructors.adamax,\n    adam: OptimizerConstructors.adam\n};\n//# sourceMappingURL=train.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Returns the image center in pixels.\nexport function getImageCenter(center, imageHeight, imageWidth) {\n    const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);\n    const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);\n    return [centerX, centerY];\n}\n//# sourceMappingURL=rotate_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n    let reshaped = [];\n    if (batchToSpace) {\n        reshaped = reshaped.concat(blockShape.slice(0));\n        reshaped.push(inputShape[0] / prod);\n        reshaped = reshaped.concat(inputShape.slice(1));\n    }\n    else {\n        reshaped = reshaped.concat(inputShape[0]);\n        const spatialLength = blockShape.length;\n        for (let i = 0; i < spatialLength; ++i) {\n            reshaped =\n                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n        }\n        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n    }\n    return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n    const permuted = [];\n    if (batchToSpace) {\n        permuted.push(blockShapeRank);\n        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n            if (i <= 2 * blockShapeRank) {\n                permuted.push(i);\n                permuted.push(i - (blockShapeRank + 1));\n            }\n            else {\n                permuted.push(i);\n            }\n        }\n    }\n    else {\n        const permutedBeforeBatch = [];\n        const permutedAfterBatch = [];\n        for (let i = 1; i < reshapedRank; ++i) {\n            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n                permutedAfterBatch.push(i);\n            }\n            else {\n                permutedBeforeBatch.push(i);\n            }\n        }\n        permuted.push(...permutedBeforeBatch);\n        permuted.push(0);\n        permuted.push(...permutedAfterBatch);\n    }\n    return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n    const reshapedPermuted = [];\n    if (batchToSpace) {\n        reshapedPermuted.push(inputShape[0] / prod);\n    }\n    else {\n        reshapedPermuted.push(inputShape[0] * prod);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n        if (i <= blockShape.length) {\n            if (batchToSpace) {\n                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n            }\n            else {\n                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n            }\n        }\n        else {\n            reshapedPermuted.push(inputShape[i]);\n        }\n    }\n    return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n    const sliceBeginCoords = [0];\n    for (let i = 0; i < blockShape; ++i) {\n        sliceBeginCoords.push(crops[i][0]);\n    }\n    return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n    const sliceSize = uncroppedShape.slice(0, 1);\n    for (let i = 0; i < blockShape; ++i) {\n        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n    }\n    return sliceSize;\n}\n//# sourceMappingURL=array_ops_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n//# sourceMappingURL=selu_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nexport function warn(...msg) {\n    if (!env().getBool('IS_TEST')) {\n        console.warn(...msg);\n    }\n}\nexport function log(...msg) {\n    if (!env().getBool('IS_TEST')) {\n        console.log(...msg);\n    }\n}\n//# sourceMappingURL=log.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(real, imag) {\n    if (real.length !== imag.length) {\n        throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +\n            `${real.length}, imag: ${imag.length}.`);\n    }\n    const result = new Float32Array(real.length * 2);\n    for (let i = 0; i < result.length; i += 2) {\n        result[i] = real[i / 2];\n        result[i + 1] = imag[i / 2];\n    }\n    return result;\n}\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex) {\n    const real = new Float32Array(complex.length / 2);\n    const imag = new Float32Array(complex.length / 2);\n    for (let i = 0; i < complex.length; i += 2) {\n        real[i / 2] = complex[i];\n        imag[i / 2] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex) {\n    const len = Math.ceil(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 0; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex) {\n    const len = Math.floor(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 2; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(complex, index) {\n    const real = complex[index * 2];\n    const imag = complex[index * 2 + 1];\n    return { real, imag };\n}\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(data, real, imag, index) {\n    data[index * 2] = real;\n    data[index * 2 + 1] = imag;\n}\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(n, inverse) {\n    const real = new Float32Array(n / 2);\n    const imag = new Float32Array(n / 2);\n    for (let i = 0; i < Math.ceil(n / 2); i++) {\n        const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n        real[i] = Math.cos(x);\n        imag[i] = Math.sin(x);\n    }\n    return { real, imag };\n}\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(k, n, inverse) {\n    const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n    const real = Math.cos(x);\n    const imag = Math.sin(x);\n    return { real, imag };\n}\n//# sourceMappingURL=complex_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { cast } from '../ops/cast';\nimport { scalar } from '../ops/scalar';\nimport { tensor1d } from '../ops/tensor1d';\nimport { zeros } from '../ops/zeros';\nimport { hasEncodingLoss, makeZerosTypedArray } from '../util';\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/reduce_util';\nimport * as slice_util from '../ops/slice_util';\nexport { slice_util };\nexport { upcastType } from '../types';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../ops/split_util';\nimport * as segment_util from '../ops/segment_util';\nexport { segment_util };\nexport function castTensor(x, dtype, backend) {\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return x.clone();\n        }\n        const zerosTensor = zeros(x.shape);\n        const floatX = cast(x, 'float32');\n        const result = backend.complex(floatX, zerosTensor);\n        zerosTensor.dispose();\n        floatX.dispose();\n        return result;\n    }\n    if (!hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        return ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype);\n    }\n    if (x.dtype === 'complex64') {\n        const real = backend.real(x);\n        const result = cast(real, dtype);\n        real.dispose();\n        return result;\n    }\n    if (dtype === 'int32') {\n        return backend.int(x);\n    }\n    else if (dtype === 'bool') {\n        const zero = scalar(0, x.dtype);\n        const result = backend.notEqual(x, zero);\n        zero.dispose();\n        return result;\n    }\n    else {\n        throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n    }\n}\nexport function reshapeTensor(x, shape) {\n    return ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype);\n}\nexport function linspaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return tensor1d(values, 'float32');\n}\n//# sourceMappingURL=backend_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice } from '../ops/slice';\n// TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate\n// kernels have been modularized in WebGL and CPU\n// https://github.com/tensorflow/tfjs/issues/2822.\n/** Shared implementation of the split kernel across WebGL and CPU. */\nexport function split(x, sizeSplits, axis) {\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    return sizeSplits.map(s => {\n        const sliceSize = [...size];\n        sliceSize[axis] = s;\n        const sliceT = slice(x, begin, sliceSize);\n        begin[axis] += s;\n        return sliceT;\n    });\n}\n//# sourceMappingURL=split_shared.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nimport { buffer } from '../ops/buffer';\nexport function tile(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor();\n}\n//# sourceMappingURL=tile_impl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { tensor } from '../ops/tensor';\nimport { getTypedArrayFromDType } from '../util';\nexport function topkImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        tensor(allTopKVals, outputShape, xDtype),\n        tensor(allTopKIndices, outputShape, 'int32')\n    ];\n}\n//# sourceMappingURL=topk_impl.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        return notYetImplemented('batchMatMul');\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedBatchMatMul');\n    }\n    slice(x, begin, size) {\n        return notYetImplemented('slice');\n    }\n    stridedSlice(x, begin, end, strides) {\n        return notYetImplemented('stridedSlice');\n    }\n    unstack(x, axis) {\n        return notYetImplemented('unstack');\n    }\n    reverse(a, axis) {\n        return notYetImplemented('reverse');\n    }\n    concat(tensors, axis) {\n        return notYetImplemented('concat');\n    }\n    neg(a) {\n        return notYetImplemented('neg');\n    }\n    add(a, b) {\n        return notYetImplemented('add');\n    }\n    addN(tensors) {\n        return notYetImplemented('addN');\n    }\n    subtract(a, b) {\n        return notYetImplemented('subtract');\n    }\n    multiply(a, b) {\n        return notYetImplemented('multiply');\n    }\n    realDivide(a, b) {\n        return notYetImplemented('realDivide');\n    }\n    floorDiv(a, b) {\n        return notYetImplemented('floorDiv');\n    }\n    sum(x, axes) {\n        return notYetImplemented('sum');\n    }\n    prod(x, axes) {\n        return notYetImplemented('prod');\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        return notYetImplemented('unsortedSegmentSum');\n    }\n    argMin(x, axis) {\n        return notYetImplemented('argMin');\n    }\n    argMax(x, axis) {\n        return notYetImplemented('argMax');\n    }\n    equal(a, b) {\n        return notYetImplemented('equal');\n    }\n    notEqual(a, b) {\n        return notYetImplemented('notEqual');\n    }\n    less(a, b) {\n        return notYetImplemented('less');\n    }\n    lessEqual(a, b) {\n        return notYetImplemented('lessEqual');\n    }\n    greater(a, b) {\n        return notYetImplemented('greater');\n    }\n    greaterEqual(a, b) {\n        return notYetImplemented('greaterEqual');\n    }\n    logicalNot(a) {\n        return notYetImplemented('logicalNot');\n    }\n    logicalAnd(a, b) {\n        return notYetImplemented('logicalAnd');\n    }\n    logicalOr(a, b) {\n        return notYetImplemented('logicalOr');\n    }\n    where(condition) {\n        return notYetImplemented('where');\n    }\n    select(condition, a, b) {\n        return notYetImplemented('select');\n    }\n    topk(x, k, sorted) {\n        return notYetImplemented('topk');\n    }\n    min(x, axes) {\n        return notYetImplemented('min');\n    }\n    minimum(a, b) {\n        return notYetImplemented('minimum');\n    }\n    mod(a, b) {\n        return notYetImplemented('mod');\n    }\n    max(x, axes) {\n        return notYetImplemented('max');\n    }\n    maximum(a, b) {\n        return notYetImplemented('maximum');\n    }\n    all(x, axes) {\n        return notYetImplemented('all');\n    }\n    any(x, axes) {\n        return notYetImplemented('any');\n    }\n    squaredDifference(a, b) {\n        return notYetImplemented('squaredDifference');\n    }\n    ceil(x) {\n        return notYetImplemented('ceil');\n    }\n    floor(x) {\n        return notYetImplemented('floor');\n    }\n    round(x) {\n        return notYetImplemented('round');\n    }\n    sign(x) {\n        return notYetImplemented('sign');\n    }\n    isNaN(x) {\n        return notYetImplemented('isNaN');\n    }\n    isInf(x) {\n        return notYetImplemented('isInf');\n    }\n    isFinite(x) {\n        return notYetImplemented('isFinite');\n    }\n    pow(a, b) {\n        return notYetImplemented('pow');\n    }\n    exp(x) {\n        return notYetImplemented('exp');\n    }\n    expm1(x) {\n        return notYetImplemented('expm1');\n    }\n    softmax(x, dim) {\n        return notYetImplemented('softmax');\n    }\n    log(x) {\n        return notYetImplemented('log');\n    }\n    log1p(x) {\n        return notYetImplemented('log1p');\n    }\n    sqrt(x) {\n        return notYetImplemented('sqrt');\n    }\n    rsqrt(x) {\n        return notYetImplemented('rsqrt');\n    }\n    square(x) {\n        return notYetImplemented('square');\n    }\n    reciprocal(x) {\n        return notYetImplemented('reciprocal');\n    }\n    relu(x) {\n        return notYetImplemented('relu');\n    }\n    relu6(x) {\n        return notYetImplemented('relu6');\n    }\n    prelu(x, a) {\n        return notYetImplemented('prelu');\n    }\n    elu(x) {\n        return notYetImplemented('elu');\n    }\n    eluDer(dy, y) {\n        return notYetImplemented('eluDer');\n    }\n    selu(x) {\n        return notYetImplemented('selu');\n    }\n    int(x) {\n        return notYetImplemented('int');\n    }\n    clip(x, min, max) {\n        return notYetImplemented('clip');\n    }\n    abs(x) {\n        return notYetImplemented('abs');\n    }\n    complexAbs(x) {\n        return notYetImplemented('complexAbs');\n    }\n    sigmoid(x) {\n        return notYetImplemented('sigmoid');\n    }\n    softplus(x) {\n        return notYetImplemented('softplus');\n    }\n    sin(x) {\n        return notYetImplemented('sin');\n    }\n    cos(x) {\n        return notYetImplemented('cos');\n    }\n    tan(x) {\n        return notYetImplemented('tan');\n    }\n    asin(x) {\n        return notYetImplemented('asin');\n    }\n    acos(x) {\n        return notYetImplemented('acos');\n    }\n    atan(x) {\n        return notYetImplemented('atan');\n    }\n    atan2(a, b) {\n        return notYetImplemented('atan2');\n    }\n    sinh(x) {\n        return notYetImplemented('sinh');\n    }\n    cosh(x) {\n        return notYetImplemented('cosh');\n    }\n    tanh(x) {\n        return notYetImplemented('tanh');\n    }\n    asinh(x) {\n        return notYetImplemented('asinh');\n    }\n    acosh(x) {\n        return notYetImplemented('acosh');\n    }\n    atanh(x) {\n        return notYetImplemented('atanh');\n    }\n    erf(x) {\n        return notYetImplemented('erf');\n    }\n    step(x, alpha) {\n        return notYetImplemented('step');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedConv2d');\n    }\n    conv2d(x, filter, convInfo) {\n        return notYetImplemented('conv2d');\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv2dDerInput');\n    }\n    conv2dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv2dDerFilter');\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedDepthwiseConv2D');\n    }\n    depthwiseConv2D(input, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2D');\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerInput');\n    }\n    depthwiseConv2DDerFilter(x, dY, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n    conv3d(x, filter, convInfo) {\n        return notYetImplemented('conv3d');\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv3dDerInput');\n    }\n    conv3dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv3dDerFilter');\n    }\n    maxPool(x, convInfo) {\n        return notYetImplemented('maxPool');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPoolBackprop');\n    }\n    avgPool(x, convInfo) {\n        return notYetImplemented('avgPool');\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPoolBackprop');\n    }\n    avgPool3d(x, convInfo) {\n        return notYetImplemented('avgPool3d');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPool3dBackprop');\n    }\n    maxPool3d(x, convInfo) {\n        return notYetImplemented('maxPool3d');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPool3dBackprop');\n    }\n    reshape(x, shape) {\n        return notYetImplemented('reshape');\n    }\n    cast(x, dtype) {\n        return notYetImplemented('cast');\n    }\n    tile(x, reps) {\n        return notYetImplemented('tile');\n    }\n    pad(x, paddings, constantValue) {\n        return notYetImplemented('pad');\n    }\n    transpose(x, perm) {\n        return notYetImplemented('transpose');\n    }\n    gather(x, indices, axis) {\n        return notYetImplemented('gather');\n    }\n    gatherND(x, indices) {\n        return notYetImplemented('gatherND');\n    }\n    scatterND(indices, updates, shape) {\n        return notYetImplemented('scatterND');\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        return notYetImplemented('batchToSpaceND');\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        return notYetImplemented('spaceToBatchND');\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        return notYetImplemented('resizeBilinear');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeBilinearBackprop');\n    }\n    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {\n        return notYetImplemented('resizeNearestNeighbor');\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        return notYetImplemented('batchNorm');\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        return notYetImplemented('localResponseNormalization4D');\n    }\n    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        return notYetImplemented('LRNGrad');\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        return notYetImplemented('multinomial');\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        return notYetImplemented('oneHot');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        return notYetImplemented('cumsum');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        return notYetImplemented('nonMaxSuppression');\n    }\n    fft(x) {\n        return notYetImplemented('fft');\n    }\n    ifft(x) {\n        return notYetImplemented('ifft');\n    }\n    complex(real, imag) {\n        return notYetImplemented('complex');\n    }\n    real(input) {\n        return notYetImplemented('real');\n    }\n    imag(input) {\n        return notYetImplemented('imag');\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        return notYetImplemented('cropAndResize');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        return notYetImplemented('depthToSpace');\n    }\n    // Aligns with the \"SplitV\" kernel in TensorFlow.\n    split(value, sizeSplits, axis) {\n        return notYetImplemented('split');\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        return notYetImplemented('sparseToDense');\n    }\n    diag(x) {\n        return notYetImplemented('diag');\n    }\n    fill(shape, value, dtype) {\n        return notYetImplemented('fill');\n    }\n    onesLike(x) {\n        return notYetImplemented('onesLike');\n    }\n    zerosLike(x) {\n        return notYetImplemented('zerosLike');\n    }\n    linspace(start, stop, num) {\n        return notYetImplemented('linspace');\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `Did you forget to import the kernel?`);\n}\n//# sourceMappingURL=backend.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { step } from '../ops/step';\nexport const absGradConfig = {\n    kernelName: Abs,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(dy, step(cast(x, 'float32'), -1)) };\n    }\n};\n//# sourceMappingURL=Abs_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { neg } from '../ops/neg';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nexport const acosGradConfig = {\n    kernelName: Acos,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return {\n            x: () => {\n                const a = square(cast(x, 'float32'));\n                const b = sqrt(sub(scalar(1), a));\n                return neg(div(dy, b));\n            }\n        };\n    }\n};\n//# sourceMappingURL=Acos_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nexport const acoshGradConfig = {\n    kernelName: Acosh,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return {\n            x: () => {\n                const a = sqrt(sub(square(cast(x, 'float32')), 1));\n                return div(dy, a);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Acosh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const addGradConfig = {\n    kernelName: Add,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            let res = dy;\n            const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, a.shape);\n        };\n        const derB = () => {\n            let res = dy;\n            const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, b.shape);\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Add_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN } from '../kernel_names';\nexport const addNGradConfig = {\n    kernelName: AddN,\n    saveAllInputs: true,\n    gradFunc: (dy, saved) => {\n        const ders = {};\n        saved.forEach((_, i) => {\n            ders[i] = () => dy.clone();\n        });\n        return ders;\n    }\n};\n//# sourceMappingURL=AddN_grad.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const argMaxGradConfig = {\n    kernelName: ArgMax,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => zerosLike(x) };\n    }\n};\n//# sourceMappingURL=ArgMax_grad.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const argMinGradConfig = {\n    kernelName: ArgMin,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => zerosLike(x) };\n    }\n};\n//# sourceMappingURL=ArgMin_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nexport const asinGradConfig = {\n    kernelName: Asin,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, sqrt(sub(scalar(1), square(cast(x, 'float32'))))) };\n    }\n};\n//# sourceMappingURL=Asin_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nexport const asinhGradConfig = {\n    kernelName: Asinh,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return {\n            x: () => {\n                const a = sqrt(add(scalar(1), square(cast(x, 'float32'))));\n                return div(dy, a);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Asinh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n    kernelName: Atan2,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const d = add(square(a), square(b));\n            let res = mul(dy, div(b, d));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, a.shape);\n        };\n        const derB = () => {\n            const d = add(square(a), square(b));\n            let res = neg(mul(dy, div(a, d)));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, b.shape);\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Atan2_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { square } from '../ops/square';\nexport const atanGradConfig = {\n    kernelName: Atan,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, add(square(cast(x, 'float32')), 1)) };\n    }\n};\n//# sourceMappingURL=Atan_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { scalar } from '../ops/scalar';\nexport const atanhGradConfig = {\n    kernelName: Atanh,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, sub(scalar(1), square(cast(x, 'float32')))) };\n    }\n};\n//# sourceMappingURL=Atanh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool3DBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation\n *     rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction avgPool3dBackprop_(dy, input, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');\n    const $input = convertToTensor(input, 'input', 'avgPool3dBackprop');\n    let dy5D = $dy;\n    let input5D = $input;\n    let reshapedTo5D = false;\n    if ($input.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n        input5D = reshape($input, [\n            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n        ]);\n    }\n    util.assert(dy5D.rank === 5, () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` +\n        `${dy5D.rank}.`);\n    util.assert(input5D.rank === 5, () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` +\n        `${input5D.rank}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3dBackprop: Either strides or dilations ' +\n        `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = backend => {\n        const convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n        return backend.avgPool3dBackprop(dy5D, input5D, convInfo);\n    };\n    const inputs = { dy: dy5D, input: input5D };\n    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3DBackprop, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const avgPool3dBackprop = op({ avgPool3dBackprop_ });\n//# sourceMappingURL=avg_pool_3d_backprop.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D } from '../kernel_names';\nimport { avgPool3dBackprop } from '../ops/avg_pool_3d_backprop';\nexport const avgPool3DGradConfig = {\n    kernelName: AvgPool3D,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1, 1] : dilations;\n        return {\n            x: () => avgPool3dBackprop(dy, x, filterSize, strides, $dilations, pad, dimRoundingMode)\n        };\n    }\n};\n//# sourceMappingURL=AvgPool3D_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction avgPoolBackprop_(dy, input, filterSize, strides, pad) {\n    const $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');\n    const $input = convertToTensor(input, 'input', 'avgPoolBackprop');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n    let input4D = $input;\n    let dy4D = $dy;\n    let reshapedTo4D = false;\n    if ($input.rank === 3) {\n        reshapedTo4D = true;\n        input4D =\n            reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n        dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n    }\n    util.assert(dy4D.rank === 4, () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +\n        `${dy4D.rank}.`);\n    util.assert(input4D.rank === 4, () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` +\n        `${input4D.rank}.`);\n    const forward = backend => {\n        const convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, 1 /* dilations */, pad);\n        return backend.avgPoolBackprop(dy4D, input4D, convInfo);\n    };\n    const inputs = { dy: dy4D, input: input4D };\n    const attrs = { filterSize, strides, pad };\n    const res = ENGINE.runKernelFunc(forward, inputs, null, AvgPoolBackprop, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const avgPoolBackprop = op({ avgPoolBackprop_ });\n//# sourceMappingURL=avg_pool_backprop.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool } from '../kernel_names';\nimport { avgPoolBackprop } from '../ops/avg_pool_backprop';\nexport const avgPoolGradConfig = {\n    kernelName: AvgPool,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { filterSize, strides, pad } = attrs;\n        return {\n            x: () => avgPoolBackprop(dy, x, filterSize, strides, pad)\n        };\n    }\n};\n//# sourceMappingURL=AvgPool_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '../kernel_names';\nimport { matMul } from '../ops/mat_mul';\nexport const batchMatMulGradConfig = {\n    kernelName: BatchMatMul,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved, attrs) => {\n        const [a, b] = saved;\n        const { transposeA, transposeB } = attrs;\n        if (!transposeA && !transposeB) {\n            return {\n                a: () => matMul(dy, b, false, true),\n                b: () => matMul(a, dy, true, false)\n            };\n        }\n        else if (!transposeA && transposeB) {\n            return {\n                a: () => matMul(dy, b, false, false),\n                b: () => matMul(dy, a, true, false)\n            };\n        }\n        else if (transposeA && !transposeB) {\n            return {\n                a: () => matMul(b, dy, false, true),\n                b: () => matMul(a, dy, false, false)\n            };\n        }\n        else {\n            return {\n                a: () => matMul(b, dy, true, true),\n                b: () => matMul(dy, a, true, true)\n            };\n        }\n    }\n};\n//# sourceMappingURL=BatchMatMul_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchToSpaceND } from '../kernel_names';\nimport { spaceToBatchND } from '../ops/space_to_batch_nd';\nexport const batchToSpaceNDGradConfig = {\n    kernelName: BatchToSpaceND,\n    gradFunc: (dy, saved, attrs) => {\n        const { blockShape, crops } = attrs;\n        return { x: () => spaceToBatchND(dy, blockShape, crops) };\n    }\n};\n//# sourceMappingURL=BatchToSpaceND_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport const broadcastToGradConfig = {\n    kernelName: BroadcastTo,\n    gradFunc: (dy, saved, attrs) => {\n        const broadCastToAttrs = attrs;\n        const inputShape = broadCastToAttrs.inputShape;\n        const outputShape = broadCastToAttrs.shape;\n        const reps = Array.from(outputShape);\n        for (let i = inputShape.length - 1; i >= 0; i--) {\n            if (inputShape[i] === outputShape[i]) {\n                reps[i] = 1;\n            }\n            else if (inputShape[i] !== 1) {\n                throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n            }\n        }\n        const axes = [];\n        for (let i = 0; i < reps.length; i++) {\n            if (reps[i] > 1) {\n                axes.push(i);\n            }\n        }\n        return { x: () => sum(dy, axes, true /* keepDims */) };\n    }\n};\n//# sourceMappingURL=BroadcastTo_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast } from '../kernel_names';\nexport const castGradConfig = {\n    kernelName: Cast,\n    gradFunc: (dy) => {\n        return { x: () => dy.clone() };\n    }\n};\n//# sourceMappingURL=Cast_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const ceilGradConfig = {\n    kernelName: Ceil,\n    gradFunc: (dy) => {\n        // TODO(manrajgrover): Return null for gradients when backprop supports it.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=Ceil_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue } from '../kernel_names';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { lessEqual } from '../ops/less_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const clipByValueGradConfig = {\n    kernelName: ClipByValue,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { clipValueMin, clipValueMax } = attrs;\n        return {\n            x: () => where(logicalAnd(greaterEqual(x, clipValueMin), lessEqual(x, clipValueMax)), dy, zerosLike(dy)),\n        };\n    }\n};\n//# sourceMappingURL=ClipByValue_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Concat } from '../kernel_names';\nimport { split } from '../ops/split';\nimport { parseAxisParam } from '../util';\nexport const concatGradConfig = {\n    kernelName: Concat,\n    saveAllInputs: true,\n    gradFunc: (dy, saved, attrs) => {\n        const shapes = saved.map(t => t.shape);\n        const { axis } = attrs;\n        const $axis = parseAxisParam(axis, saved[0].shape)[0];\n        const sizeSplits = shapes.map(s => s[$axis]);\n        const derTensors = split(dy, sizeSplits, $axis);\n        return derTensors.map(t => () => t);\n    }\n};\n//# sourceMappingURL=Concat_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv2D } from '../kernel_names';\nimport { conv2DBackpropFilter } from '../ops/conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport * as util from '../util';\nexport const conv2DGradConfig = {\n    kernelName: Conv2D,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x4D, $filter] = saved;\n        const { dilations, strides, pad, dataFormat } = attrs;\n        util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n        return {\n            x: () => conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n            filter: () => conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n        };\n    }\n};\n//# sourceMappingURL=Conv2D_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport { conv2d } from '../ops/conv2d';\nimport { conv2DBackpropFilter } from '../ops/conv2d_backprop_filter';\nexport const conv2DBackpropInputGradConfig = {\n    kernelName: Conv2DBackpropInput,\n    inputsToSave: ['dy', 'filter'],\n    gradFunc: (ddx, saved, attrs) => {\n        const [dy, filter] = saved;\n        const { strides, pad, dataFormat, dimRoundingMode } = attrs;\n        return {\n            dy: () => conv2d(ddx, filter, strides, pad, dataFormat, 1 /* dilations */, dimRoundingMode),\n            filter: () => conv2DBackpropFilter(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)\n        };\n    }\n};\n//# sourceMappingURL=Conv2DBackpropInput_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n    let x5D = x;\n    if (x.rank === 4) {\n        x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n    }\n    let dy5D = dy;\n    if (dy5D.rank === 4) {\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    }\n    util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n        `${x5D.shape}.`);\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n        `${dy5D.shape}.`);\n    util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n        `${filterShape}.`);\n    util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n        `match input depth in filter (${filterShape[3]}.`);\n    util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n        `match output depth for filter (${filterShape[4]}).`);\n    const forward = backend => {\n        const dilations = 1;\n        const convInfo = conv_util.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);\n        return backend.conv3dDerFilter(x5D, dy5D, convInfo);\n    };\n    const inputs = { x: x5D, y: dy5D };\n    const attrs = { strides, pad };\n    return ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropFilterV2, attrs);\n}\nexport const conv3DBackpropFilter = op({ conv3DBackpropFilter_ });\n//# sourceMappingURL=conv3d_backprop_filter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv3D } from '../kernel_names';\nimport { conv3DBackpropFilter } from '../ops/conv3d_backprop_filter';\nimport { conv3DBackpropInput } from '../ops/conv3d_backprop_input';\nimport { tupleValuesAreOne } from '../ops/conv_util';\nimport * as util from '../util';\nexport const conv3DGradConfig = {\n    kernelName: Conv3D,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const { dilations, strides, pad } = attrs;\n        util.assert(tupleValuesAreOne(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' +\n            `not yet supported in gradients. Got dilations '${dilations}'`);\n        const [x5D, $filter] = saved;\n        return {\n            x: () => conv3DBackpropInput(x5D.shape, dy, $filter, strides, pad),\n            filter: () => conv3DBackpropFilter(x5D, dy, $filter.shape, strides, pad)\n        };\n    }\n};\n//# sourceMappingURL=Conv3D_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { sin } from '../ops/sin';\nexport const cosGradConfig = {\n    kernelName: Cos,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(neg(sin(cast(x, 'float32'))), dy) };\n    }\n};\n//# sourceMappingURL=Cos_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { sinh } from '../ops/sinh';\nexport const coshGradConfig = {\n    kernelName: Cosh,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(sinh(cast(x, 'float32')), dy) };\n    }\n};\n//# sourceMappingURL=Cosh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumsum } from '../kernel_names';\nimport { getAxesPermutation } from '../ops/axis_util';\nimport { cumsum } from '../ops/cumsum';\nimport { transpose } from '../ops/transpose';\nexport const cumsumGradConfig = {\n    kernelName: Cumsum,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { axis, exclusive, reverse } = attrs;\n        return {\n            x: () => {\n                const permutation = getAxesPermutation([axis], x.rank);\n                let out = cumsum(dy, axis, exclusive, !reverse);\n                if (permutation != null) {\n                    out = transpose(out, permutation);\n                }\n                return out;\n            }\n        };\n    }\n};\n//# sourceMappingURL=Cumsum_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n    kernelName: DepthwiseConv2dNative,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const { dilations, strides, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1] : dilations;\n        util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n        const [x, filter] = saved;\n        util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n        util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n        util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        const convInfo = conv_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n        return {\n            x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, convInfo),\n            filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, convInfo),\n        };\n    }\n};\n//# sourceMappingURL=DepthwiseConv2dNative_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Dilation2D, Dilation2DBackpropFilter, Dilation2DBackpropInput } from '../kernel_names';\nexport const dilation2dGradConfig = {\n    kernelName: Dilation2D,\n    inputsToSave: ['x', 'filter'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, filter] = saved;\n        const inputInputs = { x, filter, dy };\n        const filterInputs = { x, filter, dy };\n        return {\n            x: () => ENGINE.runKernel(Dilation2DBackpropInput, inputInputs, attrs),\n            filter: () => ENGINE.runKernel(Dilation2DBackpropFilter, filterInputs, attrs)\n        };\n    }\n};\n//# sourceMappingURL=Dilation2D_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Div } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n    kernelName: Div,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = div(dy, cast(b, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            let res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = reshape(sum(res, reduceAxes), b.shape);\n            }\n            const tmp = square(b);\n            return neg(div(res, cast(tmp, 'float32')));\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Div_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Elu, EluGrad } from '../kernel_names';\nexport const eluGradConfig = {\n    kernelName: Elu,\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [y] = saved;\n        const backPropKernelFunc = (backend) => {\n            return backend.eluDer(dy, y);\n        };\n        const inputs = { dy, y };\n        return {\n            x: () => ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* grad */, EluGrad)\n        };\n    }\n};\n//# sourceMappingURL=Elu_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Erf } from '../kernel_names';\nimport { exp } from '../ops/exp';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { square } from '../ops/square';\nexport const erfGradConfig = {\n    kernelName: Erf,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        const a = mul(exp(neg(square(x))), 2 / Math.sqrt(Math.PI));\n        return { x: () => mul(dy, a) };\n    }\n};\n//# sourceMappingURL=Erf_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '../kernel_names';\nimport { mul } from '../ops/mul';\nexport const expGradConfig = {\n    kernelName: Exp,\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [y] = saved;\n        return { x: () => mul(dy, y) };\n    }\n};\n//# sourceMappingURL=Exp_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '../kernel_names';\nimport { exp } from '../ops/exp';\nimport { mul } from '../ops/mul';\nexport const expm1GradConfig = {\n    kernelName: Expm1,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(dy, exp(x)) };\n    }\n};\n//# sourceMappingURL=Expm1_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const floorGradConfig = {\n    kernelName: Floor,\n    gradFunc: (dy) => {\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=Floor_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const floorDivGradConfig = {\n    kernelName: FloorDiv,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = div(dy, cast(b, 'float32'));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            let res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = reshape(sum(res, reduceAxes), b.shape);\n            }\n            const tmp = square(b);\n            return neg(div(res, cast(tmp, 'float32')));\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=FloorDiv_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n    kernelName: FusedBatchNorm,\n    inputsToSave: ['x', 'mean', 'variance', 'scale'],\n    gradFunc: (dy, saved, attrs) => {\n        const { varianceEpsilon } = attrs;\n        const [x, mean, variance, scale] = saved;\n        const scaleValue = scale == null ? scalar(1) : scale;\n        const reductionAxes = getReductionAxes(mean.shape, x.shape);\n        const tileShape = [];\n        if (mean.rank === 1) {\n            for (let i = 0; i < x.shape.length - 1; ++i) {\n                tileShape.push(x.shape[i]);\n            }\n            tileShape.push(1);\n        }\n        const xMinusMean = sub(x, mean);\n        const dyTimesScaleValue = mul(dy, scaleValue);\n        const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n        const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n        const derX = () => {\n            if (mean.rank === 1) {\n                return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n            }\n            else {\n                return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n            }\n        };\n        const derMean = () => {\n            let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                meanDer = sum(meanDer, reductionAxes);\n            }\n            return reshape(meanDer, mean.shape);\n        };\n        const derVariance = () => {\n            let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                varianceDer = sum(varianceDer, reductionAxes);\n            }\n            return reshape(varianceDer, mean.shape);\n        };\n        const derScale = () => {\n            const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n            let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n            if (mean.rank === 1) {\n                scaleDer = sum(scaleDer, reductionAxes);\n            }\n            return reshape(scaleDer, mean.shape);\n        };\n        const derOffset = () => {\n            let offsetDer = dy;\n            if (mean.rank === 1) {\n                offsetDer = sum(offsetDer, reductionAxes);\n            }\n            return reshape(offsetDer, mean.shape);\n        };\n        return {\n            x: derX,\n            mean: derMean,\n            variance: derVariance,\n            scale: derScale,\n            offset: derOffset\n        };\n    }\n};\n//# sourceMappingURL=FusedBatchNorm_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GatherV2 } from '../kernel_names';\nimport { getUndoAxesPermutation } from '../ops/axis_util';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\nimport { parseAxisParam } from '../util';\nexport const gatherGradConfig = {\n    kernelName: GatherV2,\n    inputsToSave: ['x', 'indices'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, indices] = saved;\n        const { axis } = attrs;\n        const parsedAxis = parseAxisParam(axis, x.shape)[0];\n        const derX = () => {\n            const paramsShape = x.shape;\n            const indicesSize = indices.size;\n            const outerShape = paramsShape.slice(0, parsedAxis);\n            const outerDims = outerShape.length;\n            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n            const innerDims = innerShape.length;\n            const outerAxesIndices = arrayRange(0, outerDims);\n            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n            const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n            const values = reshape(dy, valuesShape);\n            const reshapedIndices = reshape(indices, [indicesSize]);\n            const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n            const valuesTranspose = transpose(values, transposeDims);\n            let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n            const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n            paramsGrad = transpose(paramsGrad, invertTransposeDims);\n            return paramsGrad;\n        };\n        return { x: derX, indices: () => indices };\n    }\n};\nfunction arrayRange(start, stop) {\n    const result = [];\n    for (let i = start; i < stop; ++i) {\n        result.push(i);\n    }\n    return result;\n}\nfunction arrayConcat(arrays) {\n    const result = [];\n    for (let i = 0; i < arrays.length; ++i) {\n        for (let j = 0; j < arrays[i].length; ++j) {\n            result.push(arrays[i][j]);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=GatherV2_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const greaterEqualGradConfig = {\n    kernelName: GreaterEqual,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        return { a: () => zerosLike(a), b: () => zerosLike(b) };\n    }\n};\n//# sourceMappingURL=GreaterEqual_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '../kernel_names';\nimport { cast } from '../ops/cast';\nexport const identityGradConfig = {\n    kernelName: Identity,\n    gradFunc: (dy) => {\n        return { x: () => cast(dy, 'float32') };\n    }\n};\n//# sourceMappingURL=Identity_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const isFiniteGradConfig = {\n    kernelName: IsFinite,\n    gradFunc: (dy) => {\n        // TODO(nsthorat): Let gradients be null for cases where we want to stop\n        // backpropgation.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=IsFinite_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const isInfGradConfig = {\n    kernelName: IsInf,\n    gradFunc: (dy) => {\n        // TODO(nsthorat): Let gradients be null for cases where we want to stop\n        // backpropgation.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=IsInf_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const isNanGradConfig = {\n    kernelName: IsNan,\n    gradFunc: (dy) => {\n        // TODO(nsthorat): Let gradients be null for cases where we want to stop\n        // backpropgation.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=IsNan_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nexport const log1pGradConfig = {\n    kernelName: Log1p,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, add(x, 1)) };\n    }\n};\n//# sourceMappingURL=Log1p_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nexport const logGradConfig = {\n    kernelName: Log,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, cast(x, 'float32')) };\n    }\n};\n//# sourceMappingURL=Log_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogSoftmax } from '../kernel_names';\nimport { exp } from '../ops/exp';\nimport { mul } from '../ops/mul';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nexport const logSoftmaxGradConfig = {\n    kernelName: LogSoftmax,\n    inputsToSave: [],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const [value] = saved;\n        const { axis } = attrs;\n        return {\n            logits: () => {\n                const keepDims = true;\n                const softmax = exp(value);\n                return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n            }\n        };\n    }\n};\n//# sourceMappingURL=LogSoftmax_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRNBackprop } from '../kernel_names';\nimport { op } from './operation';\nfunction localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {\n    const forward = backend => backend.LRNGrad(dy, x, y, depthRadius, bias, alpha, beta);\n    const inputs = { x, y, dy };\n    const attrs = { depthRadius, bias, alpha, beta };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LRNBackprop, attrs);\n}\nexport const localResponseNormalizationBackprop = op({ localResponseNormalizationBackprop_ });\n//# sourceMappingURL=local_response_normalization_backprop.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN } from '../kernel_names';\nimport { localResponseNormalizationBackprop } from '../ops/local_response_normalization_backprop';\nexport const lrnGradConfig = {\n    kernelName: LRN,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, y] = saved;\n        const { depthRadius, bias, alpha, beta } = attrs;\n        return {\n            x: () => localResponseNormalizationBackprop(x, y, dy, depthRadius, bias, alpha, beta)\n        };\n    }\n};\n//# sourceMappingURL=LRN_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as axis_util from '../ops/axis_util';\nimport { cast } from '../ops/cast';\nimport { equal } from '../ops/equal';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\n/**\n * Gradient helper function for the min and max operations.\n */\nexport function gradForMinAndMax(dy, y, xOrig, origAxes, permutedAxes) {\n    if (y.rank < xOrig.rank) {\n        y = reshape(y, axis_util.expandShapeToKeepDim(y.shape, origAxes));\n    }\n    if (dy.rank < xOrig.rank) {\n        dy = reshape(dy, axis_util.expandShapeToKeepDim(dy.shape, origAxes));\n    }\n    return {\n        x: () => {\n            const dx = mul(dy, cast(equal(xOrig, y), dy.dtype));\n            return permutedAxes == null ? dx : transpose(dx, permutedAxes);\n        }\n    };\n}\n//# sourceMappingURL=min_max_grad_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '../kernel_names';\nimport * as axis_util from '../ops/axis_util';\nimport { transpose } from '../ops/transpose';\nimport * as util from '../util';\nimport { gradForMinAndMax } from './min_max_grad_util';\nexport const maxGradConfig = {\n    kernelName: Max,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const maxAttrs = attrs;\n        const { reductionIndices } = maxAttrs;\n        const [x, y] = saved;\n        const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);\n        const maxGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);\n        return {\n            x: () => {\n                let out = maxGrad['x']();\n                if (permutedAxes != null) {\n                    out = transpose(out);\n                }\n                return out;\n            }\n        };\n    }\n};\n//# sourceMappingURL=Max_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { less } from '../ops/less';\nimport { mul } from '../ops/mul';\nexport const maximumGradConfig = {\n    kernelName: Maximum,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const derA = () => mul(dy, cast(greaterEqual(a, b), 'float32'));\n        const derB = () => mul(dy, cast(less(a, b), 'float32'));\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Maximum_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPool3DBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPool3dBackprop_(dy, input, output, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'maxPool3dBackprop');\n    const $input = convertToTensor(input, 'input', 'maxPool3dBackprop');\n    const $output = convertToTensor(output, 'output', 'maxPool3dBackprop');\n    let dy5D = $dy;\n    let input5D = $input;\n    let output5D = $output;\n    let reshapedTo5D = false;\n    if ($input.rank === 4) {\n        reshapedTo5D = true;\n        dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n        input5D = reshape($input, [\n            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n        ]);\n        output5D = reshape($output, [\n            1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]\n        ]);\n    }\n    util.assert(dy5D.rank === 5, () => `Error in maxPool3dBackprop: dy must be rank 5 but got rank ` +\n        `${dy5D.rank}.`);\n    util.assert(input5D.rank === 5, () => `Error in maxPool3dBackprop: input must be rank 5 but got rank ` +\n        `${input5D.rank}.`);\n    util.assert(output5D.rank === 5, () => `Error in maxPool3dBackprop: output must be rank 5 but got rank ` +\n        `${output5D.rank}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3dBackprop: Either strides or dilations ' +\n        `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = backend => {\n        const convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n        return backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo);\n    };\n    const inputs = { dy: dy5D, input: input5D, output: output5D };\n    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool3DBackprop, attrs);\n    if (reshapedTo5D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n    }\n    return res;\n}\nexport const maxPool3dBackprop = op({ maxPool3dBackprop_ });\n//# sourceMappingURL=max_pool_3d_backprop.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPool3D } from '../kernel_names';\nimport { maxPool3dBackprop } from '../ops/max_pool_3d_backprop';\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3D,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, y] = saved;\n        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;\n        const $dilations = dilations == null ? [1, 1, 1] : dilations;\n        return {\n            x: () => maxPool3dBackprop(dy, x, y, filterSize, strides, $dilations, pad, dimRoundingMode)\n        };\n    }\n};\n//# sourceMappingURL=MaxPool3D_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPoolBackprop_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n    const $dy = convertToTensor(dy, 'dy', 'maxPoolBackprop');\n    const $input = convertToTensor(input, 'input', 'maxPoolBackprop');\n    const $output = convertToTensor(output, 'output', 'maxPoolBackprop');\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n        `(${$dy.rank})`);\n    util.assert($dy.rank === 4, () => `Error in maxPoolBackprop: dy must be rank 4 but got rank ` +\n        `${$dy.rank}.`);\n    util.assert($input.rank === 4, () => `Error in maxPoolBackprop: input must be rank 4 but got rank ` +\n        `${$input.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in maxPoolBackprop: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    const forward = backend => {\n        const convInfo = conv_util.computePool2DInfo($input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        return backend.maxPoolBackprop($dy, $input, $output, convInfo);\n    };\n    const inputs = { dy: $dy, input: $input, output: $output };\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\n    return ENGINE.runKernelFunc(forward, inputs, null, MaxPoolBackprop, attrs);\n}\nexport const maxPoolBackprop = op({ maxPoolBackprop_ });\n//# sourceMappingURL=max_pool_backprop.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2 } from '../kernel_names';\nimport { slice } from '../ops/slice';\nexport const padV2GradConfig = {\n    kernelName: PadV2,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        // Pad introduces values around the original tensor, so the gradient\n        // slices the original shape out of the gradient.\n        const x = saved[0];\n        const { paddings } = attrs;\n        const begin = paddings.map(p => p[0]);\n        return { x: () => slice(dy, begin, x.shape) };\n    }\n};\n//# sourceMappingURL=PadV2_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SpaceToBatchND } from '../kernel_names';\nimport { batchToSpaceND } from '../ops/batch_to_space_nd';\nexport const spaceToBatchNDGradConfig = {\n    kernelName: SpaceToBatchND,\n    gradFunc: (dy, saved, attrs) => {\n        const { blockShape, paddings } = attrs;\n        return { x: () => batchToSpaceND(dy, blockShape, paddings) };\n    }\n};\n//# sourceMappingURL=SpaceToBatchND_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SplitV } from '../kernel_names';\nimport { concat } from '../ops/concat';\nexport const splitVGradConfig = {\n    kernelName: SplitV,\n    gradFunc: (dy, saved, attrs) => {\n        const { axis } = attrs;\n        return { x: () => concat(dy, axis) };\n    }\n};\n//# sourceMappingURL=SplitV_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const zerosLikeGradConfig = {\n    kernelName: ZerosLike,\n    gradFunc: (dy) => {\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=ZerosLike_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { absGradConfig } from './gradients/Abs_grad';\nimport { acosGradConfig } from './gradients/Acos_grad';\nimport { acoshGradConfig } from './gradients/Acosh_grad';\nimport { addGradConfig } from './gradients/Add_grad';\nimport { addNGradConfig } from './gradients/AddN_grad';\nimport { argMaxGradConfig } from './gradients/ArgMax_grad';\nimport { argMinGradConfig } from './gradients/ArgMin_grad';\nimport { asinGradConfig } from './gradients/Asin_grad';\nimport { asinhGradConfig } from './gradients/Asinh_grad';\nimport { atan2GradConfig } from './gradients/Atan2_grad';\nimport { atanGradConfig } from './gradients/Atan_grad';\nimport { atanhGradConfig } from './gradients/Atanh_grad';\nimport { avgPool3DGradConfig } from './gradients/AvgPool3D_grad';\nimport { avgPoolGradConfig } from './gradients/AvgPool_grad';\nimport { batchMatMulGradConfig } from './gradients/BatchMatMul_grad';\nimport { batchToSpaceNDGradConfig } from './gradients/BatchToSpaceND_grad';\nimport { broadcastToGradConfig } from './gradients/BroadcastTo_grad';\nimport { castGradConfig } from './gradients/Cast_grad';\nimport { ceilGradConfig } from './gradients/Ceil_grad';\nimport { clipByValueGradConfig } from './gradients/ClipByValue_grad';\nimport { concatGradConfig } from './gradients/Concat_grad';\nimport { conv2DGradConfig } from './gradients/Conv2D_grad';\nimport { conv2DBackpropInputGradConfig } from './gradients/Conv2DBackpropInput_grad';\nimport { conv3DGradConfig } from './gradients/Conv3D_grad';\nimport { cosGradConfig } from './gradients/Cos_grad';\nimport { coshGradConfig } from './gradients/Cosh_grad';\nimport { cumsumGradConfig } from './gradients/Cumsum_grad';\nimport { depthwiseConv2dNativeGradConfig } from './gradients/DepthwiseConv2dNative_grad';\nimport { dilation2dGradConfig } from './gradients/Dilation2D_grad';\nimport { divGradConfig } from './gradients/Div_grad';\nimport { eluGradConfig } from './gradients/Elu_grad';\nimport { erfGradConfig } from './gradients/Erf_grad';\nimport { expGradConfig } from './gradients/Exp_grad';\nimport { expm1GradConfig } from './gradients/Expm1_grad';\nimport { floorGradConfig } from './gradients/Floor_grad';\nimport { floorDivGradConfig } from './gradients/FloorDiv_grad';\nimport { fusedBatchNormGradConfig } from './gradients/FusedBatchNorm_grad';\nimport { gatherGradConfig } from './gradients/GatherV2_grad';\nimport { greaterEqualGradConfig } from './gradients/GreaterEqual_grad';\nimport { identityGradConfig } from './gradients/Identity_grad';\nimport { isFiniteGradConfig } from './gradients/IsFinite_grad';\nimport { isInfGradConfig } from './gradients/IsInf_grad';\nimport { isNanGradConfig } from './gradients/IsNan_grad';\nimport { log1pGradConfig } from './gradients/Log1p_grad';\nimport { logGradConfig } from './gradients/Log_grad';\nimport { logSoftmaxGradConfig } from './gradients/LogSoftmax_grad';\nimport { lrnGradConfig } from './gradients/LRN_grad';\nimport { maxGradConfig } from './gradients/Max_grad';\nimport { maximumGradConfig } from './gradients/Maximum_grad';\nimport { maxPool3DGradConfig } from './gradients/MaxPool3D_grad';\nimport { maxPoolGradConfig } from './gradients/MaxPool_grad';\nimport { minGradConfig } from './gradients/Min_grad';\nimport { minimumGradConfig } from './gradients/Minimum_grad';\nimport { modGradConfig } from './gradients/Mod_grad';\nimport { multiplyGradConfig } from './gradients/Multiply_grad';\nimport { negateGradConfig } from './gradients/Negate_grad';\nimport { oneHotGradConfig } from './gradients/OneHot_grad';\nimport { onesLikeGradConfig } from './gradients/OnesLike_grad';\nimport { padV2GradConfig } from './gradients/PadV2_grad';\nimport { powGradConfig } from './gradients/Pow_grad';\nimport { preluGradConfig } from './gradients/Prelu_grad';\nimport { reciprocalGradConfig } from './gradients/Reciprocal_grad';\nimport { relu6GradConfig } from './gradients/Relu6_grad';\nimport { reluGradConfig } from './gradients/Relu_grad';\nimport { reshapeGradConfig } from './gradients/Reshape_grad';\nimport { resizeBilinearGradConfig } from './gradients/ResizeBilinear_grad';\nimport { resizeNearestNeighborGradConfig } from './gradients/ResizeNearestNeighbor_grad';\nimport { reverseGradConfig } from './gradients/Reverse_grad';\nimport { roundGradConfig } from './gradients/Round_grad';\nimport { rsqrtGradConfig } from './gradients/Rsqrt_grad';\nimport { selectV2PoolGradConfig } from './gradients/SelectV2_grad';\nimport { seluGradConfig } from './gradients/Selu_grad';\nimport { sigmoidGradConfig } from './gradients/Sigmoid_grad';\nimport { signGradConfig } from './gradients/Sign_grad';\nimport { sinGradConfig } from './gradients/Sin_grad';\nimport { sinhGradConfig } from './gradients/Sinh_grad';\nimport { sliceGradConfig } from './gradients/Slice_grad';\nimport { softmaxGradConfig } from './gradients/Softmax_grad';\nimport { softplusGradConfig } from './gradients/Softplus_grad';\nimport { spaceToBatchNDGradConfig } from './gradients/SpaceToBatchND_grad';\nimport { splitVGradConfig } from './gradients/SplitV_grad';\nimport { sqrtGradConfig } from './gradients/Sqrt_grad';\nimport { squareGradConfig } from './gradients/Square_grad';\nimport { squaredDifferenceGradConfig } from './gradients/SquaredDifference_grad';\nimport { stepGradConfig } from './gradients/Step_grad';\nimport { subGradConfig } from './gradients/Sub_grad';\nimport { sumGradConfig } from './gradients/Sum_grad';\nimport { tanGradConfig } from './gradients/Tan_grad';\nimport { tanhGradConfig } from './gradients/Tanh_grad';\nimport { tileGradConfig } from './gradients/Tile_grad';\nimport { transposeGradConfig } from './gradients/Transpose_grad';\nimport { unpackGradConfig } from './gradients/Unpack_grad';\nimport { unsortedSegmentSumGradConfig } from './gradients/UnsortedSegmentSum_grad';\nimport { zerosLikeGradConfig } from './gradients/ZerosLike_grad';\nimport { registerGradient } from './kernel_registry';\n// Export all kernel configs here so that the package can auto register them\nconst gradConfigs = [\n    absGradConfig,\n    acosGradConfig,\n    acoshGradConfig,\n    addGradConfig,\n    addNGradConfig,\n    argMaxGradConfig,\n    argMinGradConfig,\n    asinGradConfig,\n    asinhGradConfig,\n    atan2GradConfig,\n    atanGradConfig,\n    atanhGradConfig,\n    avgPool3DGradConfig,\n    avgPoolGradConfig,\n    batchMatMulGradConfig,\n    batchToSpaceNDGradConfig,\n    broadcastToGradConfig,\n    castGradConfig,\n    ceilGradConfig,\n    clipByValueGradConfig,\n    concatGradConfig,\n    conv2DBackpropInputGradConfig,\n    conv2DGradConfig,\n    conv3DGradConfig,\n    cosGradConfig,\n    coshGradConfig,\n    cumsumGradConfig,\n    depthwiseConv2dNativeGradConfig,\n    dilation2dGradConfig,\n    divGradConfig,\n    eluGradConfig,\n    erfGradConfig,\n    expGradConfig,\n    expm1GradConfig,\n    floorDivGradConfig,\n    floorGradConfig,\n    fusedBatchNormGradConfig,\n    gatherGradConfig,\n    greaterEqualGradConfig,\n    identityGradConfig,\n    isFiniteGradConfig,\n    isInfGradConfig,\n    isNanGradConfig,\n    log1pGradConfig,\n    logGradConfig,\n    logSoftmaxGradConfig,\n    lrnGradConfig,\n    maxGradConfig,\n    maxGradConfig,\n    maximumGradConfig,\n    maxPool3DGradConfig,\n    maxPoolGradConfig,\n    minGradConfig,\n    minimumGradConfig,\n    modGradConfig,\n    multiplyGradConfig,\n    negateGradConfig,\n    oneHotGradConfig,\n    onesLikeGradConfig,\n    padV2GradConfig,\n    padV2GradConfig,\n    powGradConfig,\n    preluGradConfig,\n    reciprocalGradConfig,\n    relu6GradConfig,\n    reluGradConfig,\n    reshapeGradConfig,\n    resizeBilinearGradConfig,\n    resizeNearestNeighborGradConfig,\n    reverseGradConfig,\n    roundGradConfig,\n    rsqrtGradConfig,\n    selectV2PoolGradConfig,\n    seluGradConfig,\n    sigmoidGradConfig,\n    signGradConfig,\n    sinGradConfig,\n    sinhGradConfig,\n    sliceGradConfig,\n    softmaxGradConfig,\n    softplusGradConfig,\n    spaceToBatchNDGradConfig,\n    spaceToBatchNDGradConfig,\n    splitVGradConfig,\n    splitVGradConfig,\n    sqrtGradConfig,\n    squaredDifferenceGradConfig,\n    squareGradConfig,\n    stepGradConfig,\n    subGradConfig,\n    sumGradConfig,\n    tanGradConfig,\n    tanhGradConfig,\n    tileGradConfig,\n    transposeGradConfig,\n    unpackGradConfig,\n    unsortedSegmentSumGradConfig,\n    zerosLikeGradConfig\n];\nfor (const gradientConfig of gradConfigs) {\n    registerGradient(gradientConfig);\n}\n//# sourceMappingURL=register_all_gradients.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPool } from '../kernel_names';\nimport { maxPoolBackprop } from '../ops/max_pool_backprop';\nexport const maxPoolGradConfig = {\n    kernelName: MaxPool,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const [x, y] = saved;\n        const { filterSize, strides, pad } = attrs;\n        return {\n            x: () => maxPoolBackprop(dy, x, y, filterSize, strides, pad)\n        };\n    }\n};\n//# sourceMappingURL=MaxPool_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Min } from '../kernel_names';\nimport * as axis_util from '../ops/axis_util';\nimport { transpose } from '../ops/transpose';\nimport * as util from '../util';\nimport { gradForMinAndMax } from './min_max_grad_util';\nexport const minGradConfig = {\n    kernelName: Min,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const minAttrs = attrs;\n        const { axis } = minAttrs;\n        const [x, y] = saved;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);\n        const minGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);\n        return {\n            x: () => {\n                let out = minGrad['x']();\n                if (permutedAxes != null) {\n                    out = transpose(out);\n                }\n                return out;\n            }\n        };\n    }\n};\n//# sourceMappingURL=Min_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { greater } from '../ops/greater';\nimport { lessEqual } from '../ops/less_equal';\nimport { mul } from '../ops/mul';\nexport const minimumGradConfig = {\n    kernelName: Minimum,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const derA = () => mul(dy, cast(lessEqual(a, b), 'float32'));\n        const derB = () => mul(dy, cast(greater(a, b), 'float32'));\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Minimum_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { floor } from '../ops/floor';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const modGradConfig = {\n    kernelName: Mod,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(dy, reduceAxes), a.shape);\n            }\n            return dy;\n        };\n        const derB = () => {\n            const res = mul(dy, neg(floor(div(a, b))));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), b.shape);\n            }\n            return res;\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Mod_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const multiplyGradConfig = {\n    kernelName: Multiply,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            const res = mul(dy, cast(b, 'float32'));\n            const reduceAxes = getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), a.shape);\n            }\n            return res;\n        };\n        const derB = () => {\n            const res = mul(dy, cast(a, 'float32'));\n            const reduceAxes = getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                return reshape(sum(res, reduceAxes), b.shape);\n            }\n            return res;\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Multiply_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Negate } from '../kernel_names';\nimport { neg } from '../ops/neg';\nexport const negateGradConfig = {\n    kernelName: Negate,\n    gradFunc: (dy) => {\n        return { x: () => neg(dy) };\n    }\n};\n//# sourceMappingURL=Negate_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot } from '../kernel_names';\nimport { zeros } from '../ops/zeros';\nexport const oneHotGradConfig = {\n    kernelName: OneHot,\n    inputsToSave: ['indices'],\n    gradFunc: (dy, saved) => {\n        const indices = saved[0];\n        return { indices: () => zeros(indices.shape, 'float32') };\n    }\n};\n//# sourceMappingURL=OneHot_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const onesLikeGradConfig = {\n    kernelName: OnesLike,\n    gradFunc: (dy) => {\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=OnesLike_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { greater } from '../ops/greater';\nimport { log } from '../ops/log';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { reshape } from '../ops/reshape';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const powGradConfig = {\n    kernelName: Pow,\n    inputsToSave: ['a', 'b'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [a, b, y] = saved;\n        const base = a;\n        const exp = b;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n        const derBase = () => {\n            const expFloat = cast(exp, 'float32');\n            let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n            const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, base.shape);\n        };\n        const derExp = () => {\n            const condition = greater(base, 0);\n            const logBase = where(condition, log(base), zerosLike(base));\n            let res = mul(dy, mul(y, logBase));\n            const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, exp.shape);\n        };\n        return { a: derBase, b: derExp };\n    }\n};\n//# sourceMappingURL=Pow_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '../kernel_names';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const preluGradConfig = {\n    kernelName: Prelu,\n    inputsToSave: ['x', 'alpha'],\n    gradFunc: (dy, saved) => {\n        const [x, alpha] = saved;\n        const mask = greater(x, 0);\n        return {\n            x: () => where(mask, dy, mul(dy, alpha)),\n            alpha: () => {\n                let res = where(mask, zerosLike(dy), mul(dy, x));\n                const reduceAxes = getReductionAxes(alpha.shape, dy.shape);\n                if (reduceAxes.length > 0) {\n                    res = sum(res, reduceAxes);\n                }\n                return reshape(res, alpha.shape);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Prelu_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '../kernel_names';\nimport { div } from '../ops/div';\nimport { neg } from '../ops/neg';\nimport { square } from '../ops/square';\nexport const reciprocalGradConfig = {\n    kernelName: Reciprocal,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, neg(square(x))) };\n    }\n};\n//# sourceMappingURL=Reciprocal_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { lessEqual } from '../ops/less_equal';\nimport { mul } from '../ops/mul';\nimport { step } from '../ops/step';\nexport const relu6GradConfig = {\n    kernelName: Relu6,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        const mask = mul(lessEqual(x, 6), step(x));\n        return { x: () => mul(dy, cast(mask, 'float32')) };\n    }\n};\n//# sourceMappingURL=Relu6_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { step } from '../ops/step';\nexport const reluGradConfig = {\n    kernelName: Relu,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(dy, cast(step(x), 'float32')) };\n    }\n};\n//# sourceMappingURL=Relu_grad.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape } from '../kernel_names';\nimport { reshape } from '../ops/reshape';\nexport const reshapeGradConfig = {\n    kernelName: Reshape,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => reshape(dy, x.shape) };\n    }\n};\n//# sourceMappingURL=Reshape_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ResizeBilinear, ResizeBilinearGrad } from '../kernel_names';\nexport const resizeBilinearGradConfig = {\n    kernelName: ResizeBilinear,\n    inputsToSave: ['images'],\n    gradFunc: (dy, saved, attrs) => {\n        const [images] = saved;\n        const backPropKernelFunc = (backend) => {\n            const { alignCorners } = attrs;\n            return backend.resizeBilinearBackprop(dy, images, alignCorners);\n        };\n        const inputs = { images };\n        const imagesDer = () => ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, ResizeBilinearGrad, attrs);\n        return { images: imagesDer };\n    }\n};\n//# sourceMappingURL=ResizeBilinear_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ResizeNearestNeighbor, ResizeNearestNeighborGrad } from '../kernel_names';\nexport const resizeNearestNeighborGradConfig = {\n    kernelName: ResizeNearestNeighbor,\n    inputsToSave: ['images'],\n    gradFunc: (dy, saved, attrs) => {\n        const [images] = saved;\n        const backPropKernelFunc = (backend) => {\n            const { alignCorners } = attrs;\n            return backend.resizeNearestNeighborBackprop(dy, images, alignCorners);\n        };\n        const inputs = { images };\n        const imagesDer = () => ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, ResizeNearestNeighborGrad, attrs);\n        return { images: imagesDer };\n    }\n};\n//# sourceMappingURL=ResizeNearestNeighbor_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse } from '../kernel_names';\nimport { reverse } from '../ops/reverse';\nimport { parseAxisParam } from '../util';\nexport const reverseGradConfig = {\n    kernelName: Reverse,\n    gradFunc: (dy, saved, attrs) => {\n        const { dims } = attrs;\n        const axes = parseAxisParam(dims, dy.shape);\n        return { x: () => reverse(dy, axes) };\n    }\n};\n//# sourceMappingURL=Reverse_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const roundGradConfig = {\n    kernelName: Round,\n    gradFunc: (dy) => {\n        // TODO(nsthorat): Let gradients be null for cases where we want to stop\n        // backpropgation.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=Round_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '../kernel_names';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { pow } from '../ops/pow';\nexport const rsqrtGradConfig = {\n    kernelName: Rsqrt,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => neg(div(dy, mul(pow(x, 1.5), 2))) };\n    }\n};\n//# sourceMappingURL=Rsqrt_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SelectV2 } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { logicalNot } from '../ops/logical_not';\nimport { mul } from '../ops/mul';\nimport { zerosLike } from '../ops/zeros_like';\nexport const selectV2PoolGradConfig = {\n    kernelName: SelectV2,\n    inputsToSave: ['condition'],\n    gradFunc: (dy, saved) => {\n        const [condition] = saved;\n        return {\n            // TODO(julianoks): Return null for condition gradient\n            // when backprop supports it.\n            condition: () => cast(zerosLike(condition), 'float32'),\n            t: () => mul(dy, cast(condition, dy.dtype)),\n            e: () => mul(dy, cast(logicalNot(condition), dy.dtype))\n        };\n    }\n};\n//# sourceMappingURL=SelectV2_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Selu } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { exp } from '../ops/exp';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { SELU_SCALE, SELU_SCALEALPHA } from '../ops/selu_util';\nimport { where } from '../ops/where';\nexport const seluGradConfig = {\n    kernelName: Selu,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return {\n            x: () => {\n                const mask = greater(x, scalar(0));\n                const scaleAlpha = scalar(SELU_SCALEALPHA);\n                const scale = scalar(SELU_SCALE);\n                const greaterThanZeroDer = mul(dy, scale);\n                const lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(x, 'float32')));\n                return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Selu_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nexport const sigmoidGradConfig = {\n    kernelName: Sigmoid,\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [y] = saved;\n        return { x: () => mul(dy, mul(y, sub(scalar(1), y))) };\n    }\n};\n//# sourceMappingURL=Sigmoid_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const signGradConfig = {\n    kernelName: Sign,\n    gradFunc: (dy) => {\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=Sign_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { cos } from '../ops/cos';\nimport { mul } from '../ops/mul';\nexport const sinGradConfig = {\n    kernelName: Sin,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(cos(cast(x, 'float32')), dy) };\n    }\n};\n//# sourceMappingURL=Sin_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { cosh } from '../ops/cosh';\nimport { mul } from '../ops/mul';\nexport const sinhGradConfig = {\n    kernelName: Sinh,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(cosh(cast(x, 'float32')), dy) };\n    }\n};\n//# sourceMappingURL=Sinh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice } from '../kernel_names';\nimport { pad } from '../ops/pad';\nimport { parseSliceParams } from '../ops/slice_util';\nexport const sliceGradConfig = {\n    kernelName: Slice,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { begin, size } = attrs;\n        const inputShape = x.shape;\n        const [begin_, size_] = parseSliceParams(x, begin, size);\n        // Create an Nx2 padding where the first column represents how many\n        // zeros are prepended (at start) for each dimension, and the second\n        // column indicates how many zeros are appended (at end).\n        // The number of zeros to append is the shape of the input\n        // elementwise-subtracted by both the begin vector and sizes vector.\n        const paddings = [];\n        for (let i = 0; i < dy.rank; i++) {\n            paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n        }\n        return { x: () => pad(dy, paddings) };\n    }\n};\n//# sourceMappingURL=Slice_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softmax } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nexport const softmaxGradConfig = {\n    kernelName: Softmax,\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const [y] = saved;\n        const { dim } = attrs;\n        const keepDims = true;\n        const dyTimesY = mul(dy, y);\n        return {\n            logits: () => sub(dyTimesY, mul(sum(dyTimesY, [dim], keepDims), y))\n        };\n    }\n};\n//# sourceMappingURL=Softmax_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { sigmoid } from '../ops/sigmoid';\nexport const softplusGradConfig = {\n    kernelName: Softplus,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(dy, sigmoid(x)) };\n    }\n};\n//# sourceMappingURL=Softplus_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nexport const sqrtGradConfig = {\n    kernelName: Sqrt,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, mul(sqrt(cast(x, 'float32')), 2)) };\n    }\n};\n//# sourceMappingURL=Sqrt_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nexport const squaredDifferenceGradConfig = {\n    kernelName: SquaredDifference,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const two = scalar(2);\n        const derA = () => mul(dy, mul(two, sub(a, b)));\n        const derB = () => mul(dy, mul(two, sub(b, a)));\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=SquaredDifference_grad.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nexport const squareGradConfig = {\n    kernelName: Square,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => mul(dy, mul(cast(x, 'float32'), 2)) };\n    }\n};\n//# sourceMappingURL=Square_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const stepGradConfig = {\n    kernelName: Step,\n    gradFunc: (dy) => {\n        // TODO(manrajgrover): Return null for gradients when backprop supports\n        // it.\n        return { x: () => zerosLike(dy) };\n    }\n};\n//# sourceMappingURL=Step_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const subGradConfig = {\n    kernelName: Sub,\n    inputsToSave: ['a', 'b'],\n    gradFunc: (dy, saved) => {\n        const [a, b] = saved;\n        const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const derA = () => {\n            let res = dy;\n            const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(res, a.shape);\n        };\n        const derB = () => {\n            let res = dy;\n            const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n            if (reduceAxes.length > 0) {\n                res = sum(res, reduceAxes);\n            }\n            return reshape(neg(res), b.shape);\n        };\n        return { a: derA, b: derB };\n    }\n};\n//# sourceMappingURL=Sub_grad.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport { parseAxisParam } from '../util';\nexport const sumGradConfig = {\n    kernelName: Sum,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const expandedDyShape = x.shape.slice();\n        const { axis } = attrs;\n        const axes = parseAxisParam(axis, x.shape);\n        axes.forEach(axis => {\n            expandedDyShape[axis] = 1;\n        });\n        const expandedDy = reshape(dy, expandedDyShape);\n        const derX = mul(expandedDy, ones(x.shape, 'float32'));\n        return { x: () => derX };\n    }\n};\n//# sourceMappingURL=Sum_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '../kernel_names';\nimport { cos } from '../ops/cos';\nimport { div } from '../ops/div';\nimport { square } from '../ops/square';\nexport const tanGradConfig = {\n    kernelName: Tan,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved) => {\n        const [x] = saved;\n        return { x: () => div(dy, square(cos(x))) };\n    }\n};\n//# sourceMappingURL=Tan_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nexport const tanhGradConfig = {\n    kernelName: Tanh,\n    outputsToSave: [true],\n    gradFunc: (dy, saved) => {\n        const [y] = saved;\n        return { x: () => mul(sub(scalar(1), square(y)), dy) };\n    }\n};\n//# sourceMappingURL=Tanh_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { slice } from '../ops/slice';\nimport { zerosLike } from '../ops/zeros_like';\nexport const tileGradConfig = {\n    kernelName: Tile,\n    inputsToSave: ['x'],\n    gradFunc: (dy, saved, attrs) => {\n        const [x] = saved;\n        const { reps } = attrs;\n        const derX = () => {\n            let xGrad = zerosLike(x);\n            // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n            // slicing.\n            if (x.rank === 1) {\n                for (let i = 0; i < reps[0]; ++i) {\n                    xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n                }\n            }\n            else if (x.rank === 2) {\n                for (let i = 0; i < reps[0]; ++i) {\n                    for (let j = 0; j < reps[1]; ++j) {\n                        xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [\n                            x.shape[0], x.shape[1]\n                        ]));\n                    }\n                }\n            }\n            else if (x.rank === 3) {\n                for (let i = 0; i < reps[0]; ++i) {\n                    for (let j = 0; j < reps[1]; ++j) {\n                        for (let k = 0; k < reps[2]; ++k) {\n                            xGrad =\n                                add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n                        }\n                    }\n                }\n            }\n            else if (x.rank === 4) {\n                for (let i = 0; i < reps[0]; ++i) {\n                    for (let j = 0; j < reps[1]; ++j) {\n                        for (let k = 0; k < reps[2]; ++k) {\n                            for (let l = 0; l < reps[3]; ++l) {\n                                xGrad =\n                                    add(xGrad, slice(dy, [\n                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                                        l * x.shape[3]\n                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error(`Gradient for tile operation is not implemented for rank-` +\n                    `${x.rank} tensors yet.`);\n            }\n            return xGrad;\n        };\n        return { x: derX };\n    },\n};\n//# sourceMappingURL=Tile_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '../kernel_names';\nimport * as axis_util from '../ops/axis_util';\nimport { transpose } from '../ops/transpose';\nexport const transposeGradConfig = {\n    kernelName: Transpose,\n    gradFunc: (dy, saved, attrs) => {\n        const transposeAttrs = attrs;\n        const { perm } = transposeAttrs;\n        const undoPerm = axis_util.getUndoAxesPermutation(perm);\n        return { x: () => transpose(dy, undoPerm) };\n    }\n};\n//# sourceMappingURL=Transpose_grad.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '../kernel_names';\nimport { stack } from '../ops/stack';\nexport const unpackGradConfig = {\n    kernelName: Unpack,\n    gradFunc: (dy, saved, attrs) => {\n        const unpackAttrs = attrs;\n        const { axis } = unpackAttrs;\n        return { value: () => stack(dy, axis) };\n    }\n};\n//# sourceMappingURL=Unpack_grad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n    kernelName: UnsortedSegmentSum,\n    inputsToSave: ['segmentIds'],\n    gradFunc: (dy, saved) => {\n        const [segmentIds] = saved;\n        const derX = () => {\n            return gatherDropNegatives(dy, segmentIds);\n        };\n        return { x: derX };\n    }\n};\nfunction gatherDropNegatives(x, indices) {\n    // Helper function for unsorted segment ops. Gathers params for\n    // positive segment ids and gathers 0 for inputs with negative segment id.\n    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n    const zeroClippedIndices = maximum(indices, zerosLike(indices));\n    const gathered = gather(x, zeroClippedIndices);\n    let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n    const numIters = gathered.rank - isPositive.rank;\n    for (let i = 0; i < numIters; ++i) {\n        isPositive = expandDims(isPositive, i + 1);\n    }\n    isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n    const zeroSlice = zerosLike(gathered);\n    return where(isPositive, gathered, zeroSlice);\n}\n//# sourceMappingURL=UnsortedSegmentSum_grad.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { backend } from '@tensorflow/tfjs-core';\nlet _epsilon;\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n    if (_epsilon == null) {\n        _epsilon = backend().epsilon();\n    }\n    return _epsilon;\n}\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e) {\n    _epsilon = e;\n}\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat() {\n    return 'channelsLast';\n}\n//# sourceMappingURL=common.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { abs } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.abs = function () {\n    this.throwIfDisposed();\n    return abs(this);\n};\n//# sourceMappingURL=abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { acos } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.acos = function () {\n    this.throwIfDisposed();\n    return acos(this);\n};\n//# sourceMappingURL=acos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { acosh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.acosh = function () {\n    this.throwIfDisposed();\n    return acosh(this);\n};\n//# sourceMappingURL=acosh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { addStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.addStrict = function (x) {\n    this.throwIfDisposed();\n    return addStrict(this, x);\n};\n//# sourceMappingURL=add_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { add } from '../../ops/add';\nimport { Tensor } from '../../tensor';\nTensor.prototype.add = function (b) {\n    this.throwIfDisposed();\n    return add(this, b);\n};\n//# sourceMappingURL=add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { all } from '../../ops/all';\nimport { Tensor } from '../../tensor';\nTensor.prototype.all = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return all(this, axis, keepDims);\n};\n//# sourceMappingURL=all.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { any } from '../../ops/any';\nimport { Tensor } from '../../tensor';\nTensor.prototype.any = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return any(this, axis, keepDims);\n};\n//# sourceMappingURL=any.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { argMax } from '../../ops/arg_max';\nimport { Tensor } from '../../tensor';\nTensor.prototype.argMax = function (axis) {\n    this.throwIfDisposed();\n    return argMax(this, axis);\n};\n//# sourceMappingURL=arg_max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { argMin } from '../../ops/arg_min';\nimport { Tensor } from '../../tensor';\nTensor.prototype.argMin = function (axis) {\n    this.throwIfDisposed();\n    return argMin(this, axis);\n};\n//# sourceMappingURL=arg_min.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\nimport { assert } from '../../util';\n/** Converts a size-1 `tf.Tensor` to a `tf.Scalar`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.asScalar = function () {\n    this.throwIfDisposed();\n    assert(this.size === 1, () => 'The array must have only 1 element.');\n    return reshape(this, []);\n};\n//# sourceMappingURL=as_scalar.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cast } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * Casts a `tf.Tensor` to a specified dtype.\n *\n * @param dtype Data-type to cast the tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.asType = function (dtype) {\n    this.throwIfDisposed();\n    return cast(this, dtype);\n};\n//# sourceMappingURL=as_type.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/** Converts a `tf.Tensor` to a `tf.Tensor1D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.as1D = function () {\n    this.throwIfDisposed();\n    return reshape(this, [this.size]);\n};\n//# sourceMappingURL=as1d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n *\n * @param rows Number of rows in `tf.Tensor2D`.\n * @param columns Number of columns in `tf.Tensor2D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.as2D = function (rows, columns) {\n    this.throwIfDisposed();\n    return reshape(this, [rows, columns]);\n};\n//# sourceMappingURL=as2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n *\n * @param rows Number of rows in `tf.Tensor3D`.\n * @param columns Number of columns in `tf.Tensor3D`.\n * @param depth Depth of `tf.Tensor3D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.as3D = function (rows, columns, depth) {\n    this.throwIfDisposed();\n    return reshape(this, [rows, columns, depth]);\n};\n//# sourceMappingURL=as3d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n *\n * @param rows Number of rows in `tf.Tensor4D`.\n * @param columns Number of columns in `tf.Tensor4D`.\n * @param depth Depth of `tf.Tensor4D`.\n * @param depth2 4th dimension of `tf.Tensor4D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.as4D = function (rows, columns, depth, depth2) {\n    this.throwIfDisposed();\n    return reshape(this, [rows, columns, depth, depth2]);\n};\n//# sourceMappingURL=as4d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n *\n * @param rows Number of rows in `tf.Tensor5D`.\n * @param columns Number of columns in `tf.Tensor5D`.\n * @param depth Depth of `tf.Tensor5D`.\n * @param depth2 4th dimension of `tf.Tensor5D`.\n * @param depth3 5th dimension of 'tf.Tensor5D'\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.as5D = function (rows, columns, depth, depth2, depth3) {\n    this.throwIfDisposed();\n    return reshape(this, [rows, columns, depth, depth2, depth3]);\n};\n//# sourceMappingURL=as5d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { asin } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.asin = function () {\n    this.throwIfDisposed();\n    return asin(this);\n};\n//# sourceMappingURL=asin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { asinh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.asinh = function () {\n    this.throwIfDisposed();\n    return asinh(this);\n};\n//# sourceMappingURL=asinh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { atan } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.atan = function () {\n    this.throwIfDisposed();\n    return atan(this);\n};\n//# sourceMappingURL=atan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atan2 } from '../../ops/atan2';\nimport { Tensor } from '../../tensor';\nTensor.prototype.atan2 = function (b) {\n    this.throwIfDisposed();\n    return atan2(this, b);\n};\n//# sourceMappingURL=atan2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { atanh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.atanh = function () {\n    this.throwIfDisposed();\n    return atanh(this);\n};\n//# sourceMappingURL=atanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { avgPool } from '../../ops/avg_pool';\nimport { Tensor } from '../../tensor';\nTensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {\n    this.throwIfDisposed();\n    return avgPool(this, filterSize, strides, pad, dimRoundingMode);\n};\n//# sourceMappingURL=avg_pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { batchToSpaceND } from '../../ops/batch_to_space_nd';\nimport { Tensor } from '../../tensor';\nTensor.prototype.batchToSpaceND = function (blockShape, crops) {\n    this.throwIfDisposed();\n    return batchToSpaceND(this, blockShape, crops);\n};\n//# sourceMappingURL=batch_to_space_nd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { batchNorm } from '../../ops/batchnorm';\nimport { Tensor } from '../../tensor';\nTensor.prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {\n    this.throwIfDisposed();\n    return batchNorm(this, mean, variance, offset, scale, varianceEpsilon);\n};\n//# sourceMappingURL=batchnorm.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcastTo } from '../../ops/broadcast_to';\nimport { Tensor } from '../../tensor';\nTensor.prototype.broadcastTo = function (shape) {\n    this.throwIfDisposed();\n    return broadcastTo(this, shape);\n};\n//# sourceMappingURL=broadcast_to.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cast } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.cast = function (dtype) {\n    this.throwIfDisposed();\n    return cast(this, dtype);\n};\n//# sourceMappingURL=cast.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { ceil } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.ceil = function () {\n    this.throwIfDisposed();\n    return ceil(this);\n};\n//# sourceMappingURL=ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { clipByValue } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.clipByValue = function (min, max) {\n    this.throwIfDisposed();\n    return clipByValue(this, min, max);\n};\n//# sourceMappingURL=clip_by_value.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../../ops/concat';\nimport { Tensor } from '../../tensor';\nTensor.prototype.concat = function (x, axis) {\n    this.throwIfDisposed();\n    if (x instanceof Tensor) {\n        x = [x];\n    }\n    return concat([this, ...x], axis);\n};\n//# sourceMappingURL=concat.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { conv1d } from '../../ops/conv1d';\nimport { Tensor } from '../../tensor';\nTensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {\n    this.throwIfDisposed();\n    return conv1d(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);\n};\n//# sourceMappingURL=conv1d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { conv2dTranspose } from '../../ops/conv2d_transpose';\nimport { Tensor } from '../../tensor';\nTensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {\n    this.throwIfDisposed();\n    return conv2dTranspose(this, filter, outputShape, strides, pad, dimRoundingMode);\n};\n//# sourceMappingURL=conv2d_transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { conv2d } from '../../ops/conv2d';\nimport { Tensor } from '../../tensor';\nTensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n    this.throwIfDisposed();\n    return conv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n};\n//# sourceMappingURL=conv2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cos } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.cos = function () {\n    this.throwIfDisposed();\n    return cos(this);\n};\n//# sourceMappingURL=cos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cosh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.cosh = function () {\n    this.throwIfDisposed();\n    return cosh(this);\n};\n//# sourceMappingURL=cosh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { cumsum } from '../../ops/cumsum';\nimport { Tensor } from '../../tensor';\nTensor.prototype.cumsum = function (axis, exclusive, reverse) {\n    this.throwIfDisposed();\n    return cumsum(this, axis, exclusive, reverse);\n};\n//# sourceMappingURL=cumsum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { depthToSpace } from '../../ops/depth_to_space';\nimport { Tensor } from '../../tensor';\nTensor.prototype.depthToSpace = function (blockSize, dataFormat) {\n    this.throwIfDisposed();\n    return depthToSpace(this, blockSize, dataFormat);\n};\n//# sourceMappingURL=depth_to_space.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../../globals';\nimport { depthwiseConv2d } from '../../ops/depthwise_conv2d';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated Use `depthwiseConv2d` instead.\n */\nTensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n    deprecationWarn('depthwiseConv2D is deprecated, use depthwiseConv2d instead');\n    this.throwIfDisposed();\n    return depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n};\n//# sourceMappingURL=depthwise_conv2D_deprecated.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { depthwiseConv2d } from '../../ops/depthwise_conv2d';\nimport { Tensor } from '../../tensor';\nTensor.prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n    this.throwIfDisposed();\n    return depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n};\n//# sourceMappingURL=depthwise_conv2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dilation2d } from '../../ops/dilation2d';\nimport { Tensor } from '../../tensor';\nTensor.prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {\n    this.throwIfDisposed();\n    return dilation2d(this, filter, strides, pad, dilations, dataFormat);\n};\n//# sourceMappingURL=dilation2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { divNoNan } from '../../ops/div_no_nan';\nimport { Tensor } from '../../tensor';\nTensor.prototype.divNoNan = function (b) {\n    this.throwIfDisposed();\n    return divNoNan(this, b);\n};\n//# sourceMappingURL=div_no_nan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { divStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.divStrict = function (x) {\n    this.throwIfDisposed();\n    return divStrict(this, x);\n};\n//# sourceMappingURL=div_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { div } from '../../ops/div';\nimport { Tensor } from '../../tensor';\nTensor.prototype.div = function (b) {\n    this.throwIfDisposed();\n    return div(this, b);\n};\n//# sourceMappingURL=div.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dot } from '../../ops/dot';\nimport { Tensor } from '../../tensor';\nTensor.prototype.dot = function (b) {\n    this.throwIfDisposed();\n    return dot(this, b);\n};\n//# sourceMappingURL=dot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { elu } from '../../ops/elu';\nimport { Tensor } from '../../tensor';\nTensor.prototype.elu = function () {\n    this.throwIfDisposed();\n    return elu(this);\n};\n//# sourceMappingURL=elu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { equalStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.equalStrict = function (x) {\n    this.throwIfDisposed();\n    return equalStrict(this, x);\n};\n//# sourceMappingURL=equal_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { equal } from '../../ops/equal';\nimport { Tensor } from '../../tensor';\nTensor.prototype.equal = function (b) {\n    this.throwIfDisposed();\n    return equal(this, b);\n};\n//# sourceMappingURL=equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { erf } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.erf = function () {\n    this.throwIfDisposed();\n    return erf(this);\n};\n//# sourceMappingURL=erf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { exp } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.exp = function () {\n    this.throwIfDisposed();\n    return exp(this);\n};\n//# sourceMappingURL=exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { expandDims } from '../../ops/expand_dims';\nimport { Tensor } from '../../tensor';\nTensor.prototype.expandDims = function (axis) {\n    this.throwIfDisposed();\n    return expandDims(this, axis);\n};\n//# sourceMappingURL=expand_dims.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { expm1 } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.expm1 = function () {\n    this.throwIfDisposed();\n    return expm1(this);\n};\n//# sourceMappingURL=expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { fft } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.fft = function () {\n    this.throwIfDisposed();\n    return fft(this);\n};\n//# sourceMappingURL=fft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/** Flatten a Tensor to a 1D array.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.flatten = function () {\n    this.throwIfDisposed();\n    return reshape(this, [this.size]);\n};\n//# sourceMappingURL=flatten.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { floor } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.floor = function () {\n    this.throwIfDisposed();\n    return floor(this);\n};\n//# sourceMappingURL=floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { floorDiv } from '../../ops/floorDiv';\nimport { Tensor } from '../../tensor';\nTensor.prototype.floorDiv = function (b) {\n    this.throwIfDisposed();\n    return floorDiv(this, b);\n};\n//# sourceMappingURL=floorDiv.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { gather } from '../../ops/gather';\nimport { Tensor } from '../../tensor';\nTensor.prototype.gather = function (indices, axis) {\n    this.throwIfDisposed();\n    return gather(this, indices, axis);\n};\n//# sourceMappingURL=gather.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { greaterEqualStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.greaterEqualStrict = function (x) {\n    this.throwIfDisposed();\n    return greaterEqualStrict(this, x);\n};\n//# sourceMappingURL=greater_equal_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { greaterEqual } from '../../ops/greater_equal';\nimport { Tensor } from '../../tensor';\nTensor.prototype.greaterEqual = function (b) {\n    this.throwIfDisposed();\n    return greaterEqual(this, b);\n};\n//# sourceMappingURL=greater_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { greaterStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.greaterStrict = function (x) {\n    this.throwIfDisposed();\n    return greaterStrict(this, x);\n};\n//# sourceMappingURL=greater_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { greater } from '../../ops/greater';\nimport { Tensor } from '../../tensor';\nTensor.prototype.greater = function (b) {\n    this.throwIfDisposed();\n    return greater(this, b);\n};\n//# sourceMappingURL=greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { ifft } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.ifft = function () {\n    this.throwIfDisposed();\n    return ifft(this);\n};\n//# sourceMappingURL=ifft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { irfft } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.irfft = function () {\n    this.throwIfDisposed();\n    return irfft(this);\n};\n//# sourceMappingURL=irfft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { isFinite } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.isFinite = function () {\n    this.throwIfDisposed();\n    return isFinite(this);\n};\n//# sourceMappingURL=is_finite.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { isInf } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.isInf = function () {\n    this.throwIfDisposed();\n    return isInf(this);\n};\n//# sourceMappingURL=is_inf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { isNaN } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.isNaN = function () {\n    this.throwIfDisposed();\n    return isNaN(this);\n};\n//# sourceMappingURL=is_nan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { leakyRelu } from '../../ops/leaky_relu';\nimport { Tensor } from '../../tensor';\nTensor.prototype.leakyRelu = function (alpha) {\n    this.throwIfDisposed();\n    return leakyRelu(this, alpha);\n};\n//# sourceMappingURL=leaky_relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { lessEqualStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.lessEqualStrict = function (x) {\n    this.throwIfDisposed();\n    return lessEqualStrict(this, x);\n};\n//# sourceMappingURL=less_equal_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { lessEqual } from '../../ops/less_equal';\nimport { Tensor } from '../../tensor';\nTensor.prototype.lessEqual = function (b) {\n    this.throwIfDisposed();\n    return lessEqual(this, b);\n};\n//# sourceMappingURL=less_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { lessStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.lessStrict = function (x) {\n    this.throwIfDisposed();\n    return lessStrict(this, x);\n};\n//# sourceMappingURL=less_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { less } from '../../ops/less';\nimport { Tensor } from '../../tensor';\nTensor.prototype.less = function (b) {\n    this.throwIfDisposed();\n    return less(this, b);\n};\n//# sourceMappingURL=less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { localResponseNormalization } from '../../ops/local_response_normalization';\nimport { Tensor } from '../../tensor';\nTensor.prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {\n    this.throwIfDisposed();\n    return localResponseNormalization(this, depthRadius, bias, alpha, beta);\n};\n//# sourceMappingURL=local_response_normalization.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { logSigmoid } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logSigmoid = function () {\n    this.throwIfDisposed();\n    return logSigmoid(this);\n};\n//# sourceMappingURL=log_sigmoid.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { logSoftmax } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logSoftmax = function (axis) {\n    this.throwIfDisposed();\n    return logSoftmax(this, axis);\n};\n//# sourceMappingURL=log_softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { logSumExp } from '../../ops/log_sum_exp';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logSumExp = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return logSumExp(this, axis, keepDims);\n};\n//# sourceMappingURL=log_sum_exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { log } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.log = function () {\n    this.throwIfDisposed();\n    return log(this);\n};\n//# sourceMappingURL=log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { log1p } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.log1p = function () {\n    this.throwIfDisposed();\n    return log1p(this);\n};\n//# sourceMappingURL=log1p.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { logicalAnd } from '../../ops/logical_and';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logicalAnd = function (b) {\n    this.throwIfDisposed();\n    return logicalAnd(this, b);\n};\n//# sourceMappingURL=logical_and.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { logicalNot } from '../../ops/logical_not';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logicalNot = function () {\n    this.throwIfDisposed();\n    return logicalNot(this);\n};\n//# sourceMappingURL=logical_not.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { logicalOr } from '../../ops/logical_or';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logicalOr = function (b) {\n    this.throwIfDisposed();\n    return logicalOr(this, b);\n};\n//# sourceMappingURL=logical_or.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { logicalXor } from '../../ops/logical_xor';\nimport { Tensor } from '../../tensor';\nTensor.prototype.logicalXor = function (b) {\n    this.throwIfDisposed();\n    return logicalXor(this, b);\n};\n//# sourceMappingURL=logical_xor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { matMul } from '../../ops/mat_mul';\nimport { Tensor } from '../../tensor';\nTensor.prototype.matMul = function (b, transposeA, transposeB) {\n    this.throwIfDisposed();\n    return matMul(this, b, transposeA, transposeB);\n};\n//# sourceMappingURL=mat_mul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { maxPool } from '../../ops/max_pool';\nimport { Tensor } from '../../tensor';\nTensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {\n    this.throwIfDisposed();\n    return maxPool(this, filterSize, strides, pad, dimRoundingMode);\n};\n//# sourceMappingURL=max_pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { max } from '../../ops/max';\nimport { Tensor } from '../../tensor';\nTensor.prototype.max = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return max(this, axis, keepDims);\n};\n//# sourceMappingURL=max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { maximumStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.maximumStrict = function (x) {\n    this.throwIfDisposed();\n    return maximumStrict(this, x);\n};\n//# sourceMappingURL=maximum_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { maximum } from '../../ops/maximum';\nimport { Tensor } from '../../tensor';\nTensor.prototype.maximum = function (b) {\n    this.throwIfDisposed();\n    return maximum(this, b);\n};\n//# sourceMappingURL=maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { mean } from '../../ops/mean';\nimport { Tensor } from '../../tensor';\nTensor.prototype.mean = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return mean(this, axis, keepDims);\n};\n//# sourceMappingURL=mean.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { min } from '../../ops/min';\nimport { Tensor } from '../../tensor';\nTensor.prototype.min = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return min(this, axis, keepDims);\n};\n//# sourceMappingURL=min.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { minimumStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.minimumStrict = function (x) {\n    this.throwIfDisposed();\n    return minimumStrict(this, x);\n};\n//# sourceMappingURL=minimum_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { minimum } from '../../ops/minimum';\nimport { Tensor } from '../../tensor';\nTensor.prototype.minimum = function (b) {\n    this.throwIfDisposed();\n    return minimum(this, b);\n};\n//# sourceMappingURL=minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { modStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.modStrict = function (x) {\n    this.throwIfDisposed();\n    return modStrict(this, x);\n};\n//# sourceMappingURL=mod_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { mod } from '../../ops/mod';\nimport { Tensor } from '../../tensor';\nTensor.prototype.mod = function (b) {\n    this.throwIfDisposed();\n    return mod(this, b);\n};\n//# sourceMappingURL=mod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { mulStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.mulStrict = function (x) {\n    this.throwIfDisposed();\n    return mulStrict(this, x);\n};\n//# sourceMappingURL=mul_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { mul } from '../../ops/mul';\nimport { Tensor } from '../../tensor';\nTensor.prototype.mul = function (b) {\n    this.throwIfDisposed();\n    return mul(this, b);\n};\n//# sourceMappingURL=mul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { neg } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.neg = function () {\n    this.throwIfDisposed();\n    return neg(this);\n};\n//# sourceMappingURL=neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { norm } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.norm = function (ord, axis, keepDims) {\n    this.throwIfDisposed();\n    return norm(this, ord, axis, keepDims);\n};\n//# sourceMappingURL=norm.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { notEqualStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.notEqualStrict = function (x) {\n    this.throwIfDisposed();\n    return notEqualStrict(this, x);\n};\n//# sourceMappingURL=not_equal_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { notEqual } from '../../ops/not_equal';\nimport { Tensor } from '../../tensor';\nTensor.prototype.notEqual = function (b) {\n    this.throwIfDisposed();\n    return notEqual(this, b);\n};\n//# sourceMappingURL=not_equal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { oneHot } from '../../ops/one_hot';\nimport { Tensor } from '../../tensor';\nTensor.prototype.oneHot = function (depth, onValue = 1, offValue = 0) {\n    this.throwIfDisposed();\n    return oneHot(this, depth, onValue, offValue);\n};\n//# sourceMappingURL=one_hot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { onesLike } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.onesLike = function () {\n    this.throwIfDisposed();\n    return onesLike(this);\n};\n//# sourceMappingURL=ones_like.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { pad } from '../../ops/pad';\nimport { Tensor } from '../../tensor';\nTensor.prototype.pad = function (paddings, constantValue) {\n    this.throwIfDisposed();\n    return pad(this, paddings, constantValue);\n};\n//# sourceMappingURL=pad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { pool } from '../../ops/pool';\nimport { Tensor } from '../../tensor';\nTensor.prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {\n    this.throwIfDisposed();\n    return pool(this, windowShape, poolingType, padding, dilationRate, strides);\n};\n//# sourceMappingURL=pool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { powStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.powStrict = function (exp) {\n    this.throwIfDisposed();\n    return powStrict(this, exp);\n};\n//# sourceMappingURL=pow_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { pow } from '../../ops/pow';\nimport { Tensor } from '../../tensor';\nTensor.prototype.pow = function (exp) {\n    this.throwIfDisposed();\n    return pow(this, exp);\n};\n//# sourceMappingURL=pow.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { prelu } from '../../ops/prelu';\nimport { Tensor } from '../../tensor';\nTensor.prototype.prelu = function (alpha) {\n    this.throwIfDisposed();\n    return prelu(this, alpha);\n};\n//# sourceMappingURL=prelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { prod } from '../../ops/prod';\nimport { Tensor } from '../../tensor';\nTensor.prototype.prod = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return prod(this, axis, keepDims);\n};\n//# sourceMappingURL=prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { reciprocal } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.reciprocal = function () {\n    this.throwIfDisposed();\n    return reciprocal(this);\n};\n//# sourceMappingURL=reciprocal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { relu } from '../../ops/relu';\nimport { Tensor } from '../../tensor';\nTensor.prototype.relu = function () {\n    this.throwIfDisposed();\n    return relu(this);\n};\n//# sourceMappingURL=relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { relu6 } from '../../ops/relu6';\nimport { Tensor } from '../../tensor';\nTensor.prototype.relu6 = function () {\n    this.throwIfDisposed();\n    return relu6(this);\n};\n//# sourceMappingURL=relu6.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\n/**\n * Reshapes the tensor into the shape of the provided tensor.\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.reshapeAs = function (x) {\n    this.throwIfDisposed();\n    return reshape(this, x.shape);\n};\n//# sourceMappingURL=reshape_as.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reshape } from '../../ops/reshape';\nimport { Tensor } from '../../tensor';\nTensor.prototype.reshape = function (shape) {\n    this.throwIfDisposed();\n    return reshape(this, shape);\n};\n//# sourceMappingURL=reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { resizeBilinear } from '../../ops/image/resize_bilinear';\nimport { Tensor } from '../../tensor';\nTensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {\n    this.throwIfDisposed();\n    return resizeBilinear(this, newShape2D, alignCorners);\n};\n//# sourceMappingURL=resize_bilinear.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { resizeNearestNeighbor } from '../../ops/image/resize_nearest_neighbor';\nimport { Tensor } from '../../tensor';\nTensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {\n    this.throwIfDisposed();\n    return resizeNearestNeighbor(this, newShape2D, alignCorners);\n};\n//# sourceMappingURL=resize_nearest_neighbor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { reverse } from '../../ops/reverse';\nimport { Tensor } from '../../tensor';\nTensor.prototype.reverse = function (axis) {\n    this.throwIfDisposed();\n    return reverse(this, axis);\n};\n//# sourceMappingURL=reverse.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { rfft } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.rfft = function () {\n    this.throwIfDisposed();\n    return rfft(this);\n};\n//# sourceMappingURL=rfft.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { round } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.round = function () {\n    this.throwIfDisposed();\n    return round(this);\n};\n//# sourceMappingURL=round.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { rsqrt } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.rsqrt = function () {\n    this.throwIfDisposed();\n    return rsqrt(this);\n};\n//# sourceMappingURL=rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { selu } from '../../ops/selu';\nimport { Tensor } from '../../tensor';\nTensor.prototype.selu = function () {\n    this.throwIfDisposed();\n    return selu(this);\n};\n//# sourceMappingURL=selu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { separableConv2d } from '../../ops/separable_conv2d';\nimport { Tensor } from '../../tensor';\nTensor.prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {\n    this.throwIfDisposed();\n    return separableConv2d(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);\n};\n//# sourceMappingURL=separable_conv2d.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { sigmoid } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sigmoid = function () {\n    this.throwIfDisposed();\n    return sigmoid(this);\n};\n//# sourceMappingURL=sigmoid.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { sign } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sign = function () {\n    this.throwIfDisposed();\n    return sign(this);\n};\n//# sourceMappingURL=sign.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { sin } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sin = function () {\n    this.throwIfDisposed();\n    return sin(this);\n};\n//# sourceMappingURL=sin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { sinh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sinh = function () {\n    this.throwIfDisposed();\n    return sinh(this);\n};\n//# sourceMappingURL=sinh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { slice } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.slice = function (begin, size) {\n    this.throwIfDisposed();\n    return slice(this, begin, size);\n};\n//# sourceMappingURL=slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { softmax } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.softmax = function (dim) {\n    this.throwIfDisposed();\n    return softmax(this, dim);\n};\n//# sourceMappingURL=softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { softplus } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.softplus = function () {\n    this.throwIfDisposed();\n    return softplus(this);\n};\n//# sourceMappingURL=softplus.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { spaceToBatchND } from '../../ops/space_to_batch_nd';\nimport { Tensor } from '../../tensor';\nTensor.prototype.spaceToBatchND = function (blockShape, paddings) {\n    this.throwIfDisposed();\n    return spaceToBatchND(this, blockShape, paddings);\n};\n//# sourceMappingURL=space_to_batch_nd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { split } from '../../ops/split';\nimport { Tensor } from '../../tensor';\nTensor.prototype.split = function (numOrSizeSplits, axis) {\n    this.throwIfDisposed();\n    return split(this, numOrSizeSplits, axis);\n};\n//# sourceMappingURL=split.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { sqrt } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sqrt = function () {\n    this.throwIfDisposed();\n    return sqrt(this);\n};\n//# sourceMappingURL=sqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { square } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.square = function () {\n    this.throwIfDisposed();\n    return square(this);\n};\n//# sourceMappingURL=square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { squaredDifference } from '../../ops/squared_difference';\nimport { Tensor } from '../../tensor';\nTensor.prototype.squaredDifference = function (b) {\n    this.throwIfDisposed();\n    return squaredDifference(this, b);\n};\n//# sourceMappingURL=squared_difference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { squaredDifferenceStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.squaredDifferenceStrict = function (x) {\n    this.throwIfDisposed();\n    return squaredDifferenceStrict(this, x);\n};\n//# sourceMappingURL=squared_difference_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { squeeze } from '../../ops/squeeze';\nimport { Tensor } from '../../tensor';\nTensor.prototype.squeeze = function (axis) {\n    this.throwIfDisposed();\n    return squeeze(this, axis);\n};\n//# sourceMappingURL=squeeze.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { stack } from '../../ops/stack';\nimport { Tensor } from '../../tensor';\nTensor.prototype.stack = function (x, axis) {\n    this.throwIfDisposed();\n    const tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this, ...x];\n    return stack(tensorsToBeStacked, axis);\n};\n//# sourceMappingURL=stack.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { step } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.step = function (alpha) {\n    this.throwIfDisposed();\n    return step(this, alpha);\n};\n//# sourceMappingURL=step.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { stridedSlice } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n    this.throwIfDisposed();\n    return stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n};\n//# sourceMappingURL=strided_slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { subStrict } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/**\n * @deprecated strict variants of ops have been deprecated\n */\nTensor.prototype.subStrict = function (x) {\n    this.throwIfDisposed();\n    return subStrict(this, x);\n};\n//# sourceMappingURL=sub_strict.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sub } from '../../ops/sub';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sub = function (b) {\n    this.throwIfDisposed();\n    return sub(this, b);\n};\n//# sourceMappingURL=sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sum } from '../../ops/sum';\nimport { Tensor } from '../../tensor';\nTensor.prototype.sum = function (axis, keepDims) {\n    this.throwIfDisposed();\n    return sum(this, axis, keepDims);\n};\n//# sourceMappingURL=sum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { tan } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.tan = function () {\n    this.throwIfDisposed();\n    return tan(this);\n};\n//# sourceMappingURL=tan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { tanh } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.tanh = function () {\n    this.throwIfDisposed();\n    return tanh(this);\n};\n//# sourceMappingURL=tanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tile } from '../../ops/tile';\nimport { Tensor } from '../../tensor';\nTensor.prototype.tile = function (reps) {\n    this.throwIfDisposed();\n    return tile(this, reps);\n};\n//# sourceMappingURL=tile.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cast } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/** Casts the array to type `bool`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.toBool = function () {\n    this.throwIfDisposed();\n    return cast(this, 'bool');\n};\n//# sourceMappingURL=to_bool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cast } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/** Casts the array to type `float32`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.toFloat = function () {\n    this.throwIfDisposed();\n    return cast(this, 'float32');\n};\n//# sourceMappingURL=to_float.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { cast } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\n/** Casts the array to type `int32`\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nTensor.prototype.toInt = function () {\n    this.throwIfDisposed();\n    return cast(this, 'int32');\n};\n//# sourceMappingURL=to_int.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { topk } from '../../ops/topk';\nimport { Tensor } from '../../tensor';\nTensor.prototype.topk = function (k, sorted) {\n    this.throwIfDisposed();\n    return topk(this, k, sorted);\n};\n//# sourceMappingURL=topk.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { transpose } from '../../ops/transpose';\nimport { Tensor } from '../../tensor';\nTensor.prototype.transpose = function (perm) {\n    this.throwIfDisposed();\n    return transpose(this, perm);\n};\n//# sourceMappingURL=transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { unsortedSegmentSum } from '../../ops/unsorted_segment_sum';\nimport { Tensor } from '../../tensor';\nTensor.prototype.unsortedSegmentSum = function (segmentIds, numSegments) {\n    this.throwIfDisposed();\n    return unsortedSegmentSum(this, segmentIds, numSegments);\n};\n//# sourceMappingURL=unsorted_segment_sum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { unstack } from '../../ops/unstack';\nimport { Tensor } from '../../tensor';\nTensor.prototype.unstack = function (axis) {\n    this.throwIfDisposed();\n    return unstack(this, axis);\n};\n//# sourceMappingURL=unstack.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { where } from '../../ops/where';\nimport { Tensor } from '../../tensor';\nTensor.prototype.where = function (condition, x) {\n    this.throwIfDisposed();\n    return where(condition, this, x);\n};\n//# sourceMappingURL=where.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { zerosLike } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.zerosLike = function () {\n    this.throwIfDisposed();\n    return zerosLike(this);\n};\n//# sourceMappingURL=zeros_like.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AttributeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, RuntimeError.prototype);\n    }\n}\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, ValueError.prototype);\n    }\n}\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, NotImplementedError.prototype);\n    }\n}\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AssertionError.prototype);\n    }\n}\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n    constructor(message) {\n        super(message);\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, IndexError.prototype);\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        // tslint:disable-next-line:no-any\n        let newArray = [];\n        for (let i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    }\n    else {\n        const newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nexport function assert(val, message) {\n    if (!val) {\n        throw new AssertionError(message);\n    }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n    let counter = 0;\n    for (const item of array) {\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n    const objectList = toList(objs);\n    let retVal = '';\n    for (const obj of objectList) {\n        if (obj.id == null) {\n            throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = `${retVal}${Math.abs(obj.id)}`;\n    }\n    return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n    const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    /*\n     If the class is private the name starts with \"_\" which is not secure\n     for creating scopes. We prefix the name with \"private\" in this case.\n     */\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n    // quick return for empty string or single character strings\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    // Check for the underscore indicating snake_case\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    const dict = {};\n    dict['className'] = instance.getClassName();\n    dict['config'] = instance.getConfig();\n    return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n    if (config == null || typeof config !== 'object') {\n        return;\n    }\n    else if (Array.isArray(config)) {\n        config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n    }\n    else {\n        const fields = Object.keys(config);\n        for (const field of fields) {\n            const value = config[field];\n            if (value != null && typeof value === 'object') {\n                if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n                    typeof value['value'] === 'number') {\n                    config[field] = value['value'];\n                }\n                else {\n                    convertNDArrayScalarsInConfig(value);\n                }\n            }\n        }\n    }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n    // tslint:enable\n    if (typeof identifier === 'string') {\n        const functionName = identifier;\n        let fn;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        }\n        else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        }\n        else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` +\n                    `This may be due to one of the following reasons:\\n` +\n                    `1. The ${printableModuleName} is defined in Python, in which ` +\n                    `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                    `code.\\n` +\n                    `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                    `but is not registered properly with ` +\n                    `tf.serialization.registerClass().`);\n                // TODO(cais): Add link to tutorial page on custom layers.\n            }\n        }\n        return fn;\n    }\n    else {\n        // In this case we are dealing with a Keras config dictionary.\n        const config = identifier;\n        if (config['className'] == null || config['config'] == null) {\n            throw new ValueError(`${printableModuleName}: Improper config format: ` +\n                `${JSON.stringify(config)}.\\n` +\n                `'className' and 'config' must set.`);\n        }\n        const className = config['className'];\n        let cls, fromConfig;\n        if (className in customObjects) {\n            [cls, fromConfig] = customObjects[className];\n        }\n        else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n            [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n        }\n        else if (className in moduleObjects) {\n            [cls, fromConfig] = moduleObjects[className];\n        }\n        if (cls == null) {\n            throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` +\n                `This may be due to one of the following reasons:\\n` +\n                `1. The ${printableModuleName} is defined in Python, in which ` +\n                `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n                `code.\\n` +\n                `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n                `but is not registered properly with ` +\n                `tf.serialization.registerClass().`);\n            // TODO(cais): Add link to tutorial page on custom layers.\n        }\n        if (fromConfig != null) {\n            // Porting notes: Instead of checking to see whether fromConfig accepts\n            // customObjects, we create a customObjects dictionary and tack it on to\n            // config['config'] as config['config'].customObjects. Objects can use it,\n            // if they want.\n            // tslint:disable-next-line:no-any\n            const customObjectsCombined = {};\n            for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (const key of Object.keys(customObjects)) {\n                customObjectsCombined[key] = customObjects[key];\n            }\n            // Add the customObjects to config\n            const nestedConfig = config['config'];\n            nestedConfig['customObjects'] = customObjectsCombined;\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            convertNDArrayScalarsInConfig(config['config']);\n            const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n        else {\n            // Then `cls` may be a function returning a class.\n            // In this case by convention `config` holds\n            // the kwargs of the function.\n            const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (const key of Object.keys(customObjects)) {\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            // In python this is **config['config'], for tfjs-layers we require\n            // classes that use this fall-through construction method to take\n            // a config interface that mimics the expansion of named parameters.\n            const returnObj = new cls(config['config']);\n            _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n    return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return 'float32';\n        default:\n            throw new ValueError(`Invalid dtype: ${dtype}`);\n    }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n    if (xs == null || ys == null) {\n        return xs === ys;\n    }\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for (let i = 0; i < xs.length; ++i) {\n        if (xs[i] !== ys[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n    if (xs == null) {\n        return xs;\n    }\n    const out = [];\n    // TODO(cais): Maybe improve performance by sorting.\n    for (const x of xs) {\n        if (out.indexOf(x) === -1) {\n            out.push(x);\n        }\n    }\n    return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n    if (obj == null) {\n        throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n    }\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n    if (value == null) {\n        return;\n    }\n    if (values.indexOf(value) < 0) {\n        throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n    }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n    assert(minLength >= 0);\n    assert(maxLength >= minLength);\n    return (Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n        x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n    if (Array.isArray(value)) {\n        util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n        value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n    }\n    else {\n        util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n    }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (Array.isArray(value)) {\n        return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n    }\n    else if (typeof value === 'string') {\n        return `\"${value}\"`;\n    }\n    else {\n        return `${value}`;\n    }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs) {\n    let lastTime = util.now();\n    let lastResult;\n    const f2 = (...args) => {\n        const now = util.now();\n        if (now - lastTime < waitMs) {\n            return lastResult;\n        }\n        lastTime = now;\n        lastResult = f(...args);\n        return lastResult;\n    };\n    return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n    if (activationName === 'relu') {\n        return 'relu';\n    }\n    if (activationName === 'linear') {\n        return 'linear';\n    }\n    if (activationName === 'elu') {\n        return 'elu';\n    }\n    return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues) {\n    assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n    for (const values of arrayOfValues) {\n        assert(Array.isArray(values), 'one of the values is not an array');\n        assert(values.length > 0, 'one of the values is empty');\n    }\n    return arrayOfValues.reduce((products, values) => {\n        if (products.length === 0) {\n            return values.map(value => [value]);\n        }\n        return values\n            .map(value => {\n            return products.map((prevValue) => [...prevValue, value]);\n        })\n            .reduce((flattenedProduct, unflattenedProduct) => {\n            return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n    }, []);\n}\n//# sourceMappingURL=generic_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\nexport class MaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMaxValue = 2;\n        this.defaultAxis = 0;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.clipByValue(norms, 0, this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return { maxValue: this.maxValue, axis: this.axis };\n    }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultAxis = 0;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n    }\n    getConfig() {\n        return { axis: this.axis };\n    }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n    apply(w) {\n        return tfc.relu(w);\n    }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMinValue = 0.0;\n        this.defaultMaxValue = 1.0;\n        this.defaultRate = 1.0;\n        this.defaultAxis = 0;\n        this.minValue =\n            args.minValue != null ? args.minValue : this.defaultMinValue;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.rate = args.rate != null ? args.rate : this.defaultRate;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\n//# sourceMappingURL=constraints.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\nexport const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\nexport const VALID_POOL_MODE_VALUES = ['max', 'avg'];\nexport const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];\nexport const VALID_SAMPLE_WEIGHT_MODES = ['temporal'];\n//# sourceMappingURL=common.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport { VALID_DATA_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES } from './keras_format/common';\nimport { checkStringTypeUnionValue } from './utils/generic_utils';\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap = new Map();\nexport function checkDataFormat(value) {\n    checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\nexport function checkPaddingMode(value) {\n    checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\nexport function checkPoolMode(value) {\n    checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\nconst _nameScopeStack = [];\nconst _nameScopeDivider = '/';\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope(name, fn) {\n    _nameScopeStack.push(name);\n    try {\n        const val = fn();\n        _nameScopeStack.pop();\n        return val;\n    }\n    catch (e) {\n        _nameScopeStack.pop();\n        throw e;\n    }\n}\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix() {\n    if (_nameScopeStack.length === 0) {\n        return '';\n    }\n    else {\n        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n    }\n}\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName) {\n    if (!isValidTensorName(tensorName)) {\n        throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n    }\n    return currentNameScopePrefix() + tensorName;\n}\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName) {\n    if (!isValidTensorName(scopedName)) {\n        throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n    }\n    if (!nameMap.has(scopedName)) {\n        nameMap.set(scopedName, 0);\n    }\n    const index = nameMap.get(scopedName);\n    nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n    if (index > 0) {\n        const result = `${scopedName}_${index}`;\n        // Mark the composed name as used in case someone wants\n        // to call getUniqueTensorName(\"name_1\").\n        nameMap.set(result, 1);\n        return result;\n    }\n    else {\n        return scopedName;\n    }\n}\nconst tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name) {\n    return !!name.match(tensorNameRegex);\n}\n//# sourceMappingURL=common.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar, tensor1d } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    let prod = 1;\n    for (let i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array) {\n    array = Array.isArray(array) ? new Float32Array(array) : array;\n    return tensor1d(array);\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n    return tfc.min(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n    return tfc.max(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n    return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n    return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n    const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n    const sumSquare = tfc.sum(tfc.mul(demeaned, demeaned)).dataSync()[0];\n    return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n    const arraySorted = array.slice().sort((a, b) => a - b);\n    const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n    const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n    if (lowIdx === highIdx) {\n        return arraySorted[lowIdx];\n    }\n    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n    if (end < begin) {\n        throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n    }\n    const out = [];\n    for (let i = begin; i < end; ++i) {\n        out.push(i);\n    }\n    return out;\n}\n//# sourceMappingURL=math_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common';\n// tslint:enable\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n    tfc.setBackend(requestedBackend);\n    backend = requestedBackend;\n}\nexport function getBackend() {\n    return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic() {\n    return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x) {\n    const shape = x.shape;\n    if (shape.length > 0) {\n        return shape.reduce((a, b) => a * b);\n    }\n    else {\n        // Scalar.\n        return 1;\n    }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x, dtype) {\n    return x.asType(dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x, axis = -1) {\n    const outShape = x.shape.slice();\n    if (axis < 0) {\n        axis = outShape.length + axis + 1;\n    }\n    outShape.splice(axis, 0, 1);\n    return x.reshape(outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x, n) {\n    return tidy(() => {\n        if (x.shape.length !== 2) {\n            throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` +\n                `rank-${x.shape.length} tensor.`);\n        }\n        const y = expandDims(x, 1);\n        return tile(y, [1, n, 1]);\n    });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x) {\n    const newShape = [math_utils.arrayProd(x.shape)];\n    return x.reshape(newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x) {\n    if (x.rank <= 1) {\n        throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n    }\n    const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n    return x.reshape(newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n            case 3:\n                return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n            case 4:\n                return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n            case 5:\n                return tfc.slice(array, [start, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n                ]);\n            case 6:\n                return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n                    array.shape[5]\n                ]);\n            default:\n                throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n            case 3:\n                return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n            case 4:\n                return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(array, start, size, axis) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 3:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n                    case 3:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 4:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n                    case 3:\n                        return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n                    case 4:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors, axis = -1) {\n    let rank;\n    if (axis < 0) {\n        rank = tensors[0].rank;\n        if (rank !== 0) {\n            axis = rank;\n        }\n        else {\n            axis = 0;\n        }\n    }\n    if (axis === tensors[0].rank) {\n        // Porting Note: This is necessary because tfc.concat() requires axis to be\n        //   in the interval [-rank, rank).\n        axis = -1;\n    }\n    // Porting Note: Sparse concat is not supported yet.\n    return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a, b) {\n    switch (a.rank) {\n        case 1:\n            return tfc.concat1d([a, b]);\n        case 2:\n            return tfc.concat2d([a, b], 0);\n        case 3:\n            return tfc.concat3d([a, b], 0);\n        case 4:\n            return tfc.concat4d([a, b], 0);\n        default:\n            throw new ValueError(`concatAlongFirstAxis() received an unsupported ` +\n                `tensor rank: ${a.rank}`);\n    }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x, n) {\n    if (!Array.isArray(n)) {\n        n = [n];\n    }\n    if (x.rank !== n.length) {\n        throw new ValueError(`The length of input n (${n.length}) does not match ` +\n            `the number of dimensions in input x (${x.rank})`);\n    }\n    return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n    return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(a, b, activation, bias) {\n    if ((a.rank < 2) || (b.rank < 2)) {\n        throw new NotImplementedError(`dot requires both inputs to be rank >= 2` +\n            ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n    }\n    if (b.rank >= 3) {\n        const xLastDim = a.shape.slice(-1)[0];\n        const ySecondLastDim = b.shape.slice(-2)[0];\n        if (xLastDim !== ySecondLastDim) {\n            throw new NotImplementedError(`If rank y >= 3, then the second last dim` +\n                ` of y must equal the last dim of x but got x shape = ${a.shape} and ` +\n                ` y shape = ${b.shape}`);\n        }\n    }\n    // Handle basic 2D x 2D case.\n    if ((a.rank === 2) && (b.rank === 2)) {\n        const transposeA = false;\n        const transposeB = false;\n        // tfc.fused.matMul only fuses certain activation functions. Unsupported\n        // activation functions are treated as 'linear' activations, which is\n        // equivalent to a no-op.\n        return tfc.fused.matMul({\n            a,\n            b: b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        });\n    }\n    else {\n        // Reshape x into the analogous 2D Tensor.\n        const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n        const aLastDim = aFirstDims.pop();\n        a = a.reshape([-1, aLastDim]);\n        // Reshape y into the analogous 2D Tensor, and keep track of the\n        // required dimensions to reproduce the output shape.\n        const bShape = b.shape.slice();\n        const bLastDim = bShape.pop();\n        const ySecondLastDim = bShape.pop();\n        const yOtherDims = [...bShape, bLastDim];\n        // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n        // where r is the rank of y.\n        const perm = Array.from({ length: b.rank }, (_, i) => {\n            if (i === 0) {\n                return b.rank - 2;\n            }\n            else if (i <= b.rank - 2) {\n                return i - 1;\n            }\n            return i;\n        });\n        b = b.transpose(perm).reshape([ySecondLastDim, -1]);\n        // Multiply x and y as 2D Tensors, and then reshape back to original.\n        const outputShape = [...aFirstDims, ...yOtherDims];\n        const transposeA = false;\n        const transposeB = false;\n        return tfc.fused\n            .matMul({\n            a,\n            b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        })\n            .reshape(outputShape);\n    }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x) {\n    // TODO(cais): Move to the core.\n    return tidy(() => {\n        const zerosLikeX = coreZerosLike(x);\n        const onesLikeX = coreOnesLike(x);\n        return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n    });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices, numClasses) {\n    return tidy(() => {\n        if (indices.rank !== 1) {\n            throw new Error('Only 1D one-hot tensors are supported in the ' +\n                'deeplearn backend, at present.');\n        }\n        indices = indices.toInt();\n        return tfc.oneHot(indices, numClasses).toFloat();\n    });\n}\n/* Elementary math functions. */\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(reference, indices, axis) {\n    return tidy(() => {\n        if (Array.isArray(indices)) {\n            indices = tensor1d(indices, 'int32');\n        }\n        else {\n            indices = indices.toInt();\n        }\n        return tfc.gather(reference, indices, axis);\n    });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x) {\n    return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x, a) {\n    return tidy(() => {\n        if (typeof (a) === 'number') {\n            a = scalar(Math.round(a), 'int32');\n        }\n        if (a.dtype !== 'int32') {\n            throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n        }\n        return tfc.pow(x, a);\n    });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank, bias, dataFormat) {\n    const biasShape = bias.shape;\n    if (bias.rank !== 1 && bias.rank !== xRank) {\n        throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` +\n            `; expected it to be 1 or ${xRank}`);\n    }\n    if (xRank === 5) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, biasShape[0], 1, 1, 1]);\n            }\n            else {\n                return bias.reshape([1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, 1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return bias.reshape([1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 4) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, biasShape[0], 1, 1]);\n            }\n            else {\n                return bias.reshape([1, biasShape[2], biasShape[0], biasShape[1]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return bias.reshape([1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 3) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, biasShape[0], 1]);\n            }\n            else {\n                return bias.reshape([1, biasShape[1], biasShape[0]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return bias.reshape([1, 1, biasShape[0]]);\n            }\n            else {\n                return bias.reshape([1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank < 3) {\n        return bias;\n    }\n    throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(x, bias, dataFormat) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        return x.add(reshapeBias(x.rank, bias, dataFormat));\n    });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x, alpha = 1) {\n    // TODO(cais): Add support for alpha values other than 1.\n    if (alpha !== 1) {\n        throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` +\n            `yet.`);\n    }\n    return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x) {\n    return tidy(() => tfc.div(x, tfc.abs(x).add(1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(x, level, noiseShape, seed) {\n    return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x) {\n    return tidy(() => {\n        const y = tfc.add(.5, tfc.mul(.2, x));\n        return tfc.clipByValue(y, 0, 1);\n    });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase(x, alt, training = false) {\n    return training ? x() : alt();\n}\n//# sourceMappingURL=tfjs_backend.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nexport const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\nexport const VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', 'truncatedNormal'];\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid\n// and that we have the right number of them.\n/**\n * A string array of valid Initializer class names.\n *\n * This is guaranteed to match the `InitializerClassName` union type.\n */\nexport const initializerClassNames = [\n    'Zeros', 'Ones', 'Constant', 'RandomNormal', 'RandomUniform',\n    'TruncatedNormal', 'VarianceScaling', 'Orthogonal', 'Identity'\n];\n//# sourceMappingURL=initializer_config.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = q.transpose();\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=initializers.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Utilities related to persistent state in the backend.\n */\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n    return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = '') {\n    if (!(prefix in _uidPrefixes)) {\n        _uidPrefixes[prefix] = 0;\n    }\n    _uidPrefixes[prefix] += 1;\n    return prefix + _uidPrefixes[prefix].toString();\n}\n//# sourceMappingURL=state.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\n// tslint:enable\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x) {\n    return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x) {\n    if (x.length === 0) {\n        return [];\n    }\n    if (!Array.isArray(x[0])) {\n        return [x];\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs) {\n    let x;\n    if (Array.isArray(xs)) {\n        if (xs.length !== 1) {\n            throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n        }\n        x = xs[0];\n    }\n    else {\n        x = xs;\n    }\n    return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes) {\n    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n        if (shapes.length === 1) {\n            shapes = shapes;\n            return shapes[0];\n        }\n        else {\n            throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n        }\n    }\n    else {\n        return shapes;\n    }\n}\n//# sourceMappingURL=types_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights) {\n    let count = 0;\n    for (const weight of weights) {\n        if (weight.shape.length === 0) {\n            count += 1;\n        }\n        else {\n            count += weight.shape.reduce((a, b) => a * b);\n        }\n    }\n    return count;\n}\n//# sourceMappingURL=variable_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { variableGrads } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId } from './backend/state';\nimport { getScopedTensorName, getUniqueTensorName } from './common';\nimport { NotImplementedError } from './errors';\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n    /**\n     * Construct Variable from a `tf.Tensor`.\n     *\n     * If not explicitly named, the Variable will be given a name with the\n     * prefix 'Variable'. Variable names are unique. In the case of name\n     * collision, suffixies '_<num>' will be added to the name.\n     *\n     * @param val Initial value of the Variable.\n     * @param name Name of the variable. If `null` or `undefined` is provided, it\n     *   will default a name with the prefix 'Variable'.\n     * @param constraint Optional, projection function to be applied to the\n     * variable after optimize updates\n     * @throws ValueError if `name` is `null` or `undefined`.\n     */\n    constructor(val, dtype = 'float32', name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null) {\n        this.dtype = dtype == null ? 'float32' : dtype;\n        this.shape = val.shape;\n        this.id = getNextUniqueTensorId();\n        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n        this.originalName = getScopedTensorName(name);\n        this.name = getUniqueTensorName(this.originalName);\n        this.trainable_ = trainable;\n        this.constraint = constraint;\n        this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n    }\n    /**\n     * Get a snapshot of the Variable's value.\n     *\n     * The returned value is a snapshot of the Variable's value at the time of\n     * the invocation. Future mutations in the value of the tensor will only\n     * be reflected by future calls to this method.\n     */\n    read() {\n        this.assertNotDisposed();\n        return this.val;\n    }\n    /**\n     * Update the value of the Variable.\n     *\n     * @param newVal: The new value to update to. Must be consistent with the\n     *   dtype and shape of the Variable.\n     * @return This Variable.\n     */\n    write(newVal) {\n        // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n        this.assertNotDisposed();\n        checkShapesMatch(this.val, newVal);\n        // Skip updating if this is the exact same tensor.\n        if (this.val.id !== newVal.id) {\n            this.val.assign(newVal);\n            if (this.constraint != null) {\n                this.val.assign(this.constraint.apply(this.val));\n            }\n        }\n        return this;\n    }\n    /**\n     * Dispose this LayersVariable instance from memory.\n     */\n    dispose() {\n        this.assertNotDisposed();\n        this.val.dispose();\n    }\n    assertNotDisposed() {\n        if (this.val.isDisposed) {\n            throw new Error(`LayersVariable ${this.name} is already disposed.`);\n        }\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this.trainable_ = trainable;\n        this.val.trainable = trainable;\n    }\n}\nfunction checkShapesMatch(x, y) {\n    if (x.shape.toString() !== y.shape.toString()) {\n        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n            JSON.stringify(y.shape));\n    }\n}\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(x, dtype, name, constraint) {\n    return new LayerVariable(x, dtype, name, true, constraint);\n}\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(shape, dtype, name) {\n    // TODO(cais): Implement logic for dtype.\n    return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(x, dtype, name) {\n    return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(shape, dtype, name) {\n    // TODO(cais): Implement logic for dtype.\n    const allocated = tfc.ones(shape);\n    return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(x, dtype, name) {\n    const allocated = tfc.onesLike(x);\n    return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(size, dtype, name) {\n    return new LayerVariable(tfc.eye(size), dtype, name);\n}\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(shape, minval, maxval, dtype, seed, name = 'randomUniform') {\n    return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'truncatedNormal') {\n    // TODO(cais): Implement logic for dtype and seed once they are supported\n    // by deeplearn.js.\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n    }\n    return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'randomNormal') {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`randomNormalVariable does not support dType ${dtype}.`);\n    }\n    return new LayerVariable(tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x, xNew) {\n    return x.write(xNew);\n}\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x, increment) {\n    return x.write(tfc.add(x.read(), increment));\n}\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x, decrement) {\n    return x.write(tfc.sub(x.read(), decrement));\n}\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs) {\n    return xs.map(x => x.read());\n}\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(variablesAndValues) {\n    variablesAndValues.forEach(variableAndValue => {\n        const variable = variableAndValue[0];\n        variable.write(variableAndValue[1]);\n    });\n}\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(lossFn, variables) {\n    // TODO(cais): The return type signature can be simplified if deeplearn makes\n    //   the corresponding type public.\n    const variableList = variables.map(variable => variable.read());\n    const valudAndGrads = variableGrads(lossFn, variableList);\n    return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n//# sourceMappingURL=variables.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\n/**\n * Creates a new variable with the provided initial value.\n * ```js\n * const x = tf.variable(tf.tensor([1, 2, 3]));\n * x.assign(tf.tensor([4, 5, 6]));\n *\n * x.print();\n * ```\n *\n * @param initialValue Initial value for the tensor.\n * @param trainable If true, optimizers are allowed to update it.\n * @param name Name of the variable. Defaults to a unique id.\n * @param dtype If set, initialValue will be converted to the given type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function variable(initialValue, trainable = true, name, dtype) {\n    return ENGINE.makeVariable(initialValue, trainable, name, dtype);\n}\n//# sourceMappingURL=variable.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/engine/topology.py */\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId, getUid } from '../backend/state';\nimport { getScopedTensorName, getUniqueTensorName, nameScope } from '../common';\nimport { AttributeError, NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { getInitializer } from '../initializers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport { batchGetValue, batchSetValue, LayerVariable } from '../variables';\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n    constructor(args) {\n        this.dtype = args.dtype;\n        this.shape = args.shape;\n        /*\n          TODO(michaelterry): Could throw error if ndim and shape are both defined\n            (then backport).\n        */\n        if (args.shape != null) {\n            this.ndim = args.shape.length;\n        }\n        else {\n            this.ndim = args.ndim;\n        }\n        this.maxNDim = args.maxNDim;\n        this.minNDim = args.minNDim;\n        this.axes = args.axes || {};\n    }\n}\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * a `tf.LayersModel` and the input data's shape, but not values are known.\n *\n * @doc {heading: 'Models', 'subheading': 'Classes'}\n */\nexport class SymbolicTensor {\n    /**\n     *\n     * @param dtype\n     * @param shape\n     * @param sourceLayer The Layer that produced this symbolic tensor.\n     * @param inputs The inputs passed to sourceLayer's __call__() method.\n     * @param nodeIndex\n     * @param tensorIndex\n     * @param callArgs The keyword arguments passed to the __call__() method.\n     * @param name\n     * @param outputTensorIndex The index of this tensor in the list of outputs\n     *   returned by apply().\n     */\n    constructor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n        this.dtype = dtype;\n        this.shape = shape;\n        this.sourceLayer = sourceLayer;\n        this.inputs = inputs;\n        this.callArgs = callArgs;\n        this.outputTensorIndex = outputTensorIndex;\n        this.id = getNextUniqueTensorId();\n        if (name != null) {\n            this.originalName = getScopedTensorName(name);\n            this.name = getUniqueTensorName(this.originalName);\n        }\n        this.rank = shape.length;\n    }\n}\nlet _nextNodeID = 0;\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n    constructor(args, \n    // TODO(michaelterry): Define actual type for this.\n    callArgs) {\n        this.callArgs = callArgs;\n        this.id = _nextNodeID++;\n        /*\n          Layer instance (NOT a list).\n          this is the layer that takes a list of input tensors\n          and turns them into a list of output tensors.\n          the current node will be added to\n          the inboundNodes of outboundLayer.\n        */\n        this.outboundLayer = args.outboundLayer;\n        /*\n            The following 3 properties describe where\n            the input tensors come from: which layers,\n            and for each layer, which node and which\n            tensor output of each node.\n        */\n        // List of layer instances.\n        this.inboundLayers = args.inboundLayers;\n        // List of integers, 1:1 mapping with inboundLayers.\n        this.nodeIndices = args.nodeIndices;\n        // List of integers, 1:1 mapping with inboundLayers.\n        this.tensorIndices = args.tensorIndices;\n        /*\n            Following 2 properties:\n            tensor inputs and outputs of outboundLayer.\n        */\n        // List of tensors. 1:1 mapping with inboundLayers.\n        this.inputTensors = args.inputTensors;\n        // List of tensors, created by outboundLayer.call().\n        this.outputTensors = args.outputTensors;\n        /*\n            Following 2 properties: input and output masks.\n            List of tensors, 1:1 mapping with inputTensor.\n        */\n        this.inputMasks = args.inputMasks;\n        // List of tensors, created by outboundLayer.computeMask().\n        this.outputMasks = args.outputMasks;\n        // Following 2 properties: input and output shapes.\n        // List of shape tuples, shapes of inputTensors.\n        this.inputShapes = args.inputShapes;\n        // List of shape tuples, shapes of outputTensors.\n        this.outputShapes = args.outputShapes;\n        // Add nodes to all layers involved.\n        for (const layer of args.inboundLayers) {\n            if (layer != null) {\n                layer.outboundNodes.push(this);\n            }\n        }\n        args.outboundLayer.inboundNodes.push(this);\n    }\n    getConfig() {\n        const inboundNames = [];\n        for (const layer of this.inboundLayers) {\n            if (layer != null) {\n                inboundNames.push(layer.name);\n            }\n            else {\n                inboundNames.push(null);\n            }\n        }\n        return {\n            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n            inboundLayers: inboundNames,\n            nodeIndices: this.nodeIndices,\n            tensorIndices: this.tensorIndices\n        };\n    }\n}\nlet _nextLayerID = 0;\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.LayersModel`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n *\n * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}\n */\nexport class Layer extends serialization.Serializable {\n    constructor(args = {}) {\n        super();\n        this._callHook = null;\n        this._addedWeightNames = [];\n        // Porting Notes: PyKeras does not have this property in this base Layer\n        //   class. Instead lets Layer subclass set it dynamically and checks the\n        //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n        //   base class.\n        this._stateful = false;\n        this.id = _nextLayerID++;\n        this.activityRegularizer = null;\n        this.inputSpec = null;\n        this.supportsMasking = false;\n        // These properties will be set upon call of this.build()\n        this._trainableWeights = [];\n        this._nonTrainableWeights = [];\n        this._losses = [];\n        this._updates = [];\n        this._built = false;\n        /*\n          These lists will be filled via successive calls\n          to this.addInboundNode().\n         */\n        this.inboundNodes = [];\n        this.outboundNodes = [];\n        let name = args.name;\n        if (!name) {\n            const prefix = this.getClassName();\n            name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n        }\n        this.name = name;\n        this.trainable_ = args.trainable == null ? true : args.trainable;\n        if (args.inputShape != null || args.batchInputShape != null) {\n            /*\n              In this case we will later create an input layer\n              to insert before the current layer\n             */\n            let batchInputShape;\n            if (args.batchInputShape != null) {\n                batchInputShape = args.batchInputShape;\n            }\n            else if (args.inputShape != null) {\n                let batchSize = null;\n                if (args.batchSize != null) {\n                    batchSize = args.batchSize;\n                }\n                batchInputShape = [batchSize].concat(args.inputShape);\n            }\n            this.batchInputShape = batchInputShape;\n            // Set dtype.\n            let dtype = args.dtype;\n            if (dtype == null) {\n                dtype = args.inputDType;\n            }\n            if (dtype == null) {\n                dtype = 'float32';\n            }\n            this.dtype = dtype;\n        }\n        if (args.weights != null) {\n            this.initialWeights = args.weights;\n        }\n        else {\n            this.initialWeights = null;\n        }\n        // The value of `_refCount` is initialized to null. When the layer is used\n        // in a symbolic way for the first time, it will be set to 1.\n        this._refCount = null;\n        this.fastWeightInitDuringBuild = false;\n    }\n    /**\n     * Converts a layer and its index to a unique (immutable type) name.\n     * This function is used internally with `this.containerNodes`.\n     * @param layer The layer.\n     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n     *   nodes.\n     *\n     * @returns The unique name.\n     */\n    static nodeKey(layer, nodeIndex) {\n        return layer.name + '_ib-' + nodeIndex.toString();\n    }\n    /**\n     * Returns this.inboundNode at index nodeIndex.\n     *\n     * Porting note: This is a replacement for _get_node_attribute_at_index()\n     * @param nodeIndex\n     * @param attrName The name of the attribute related to request for this node.\n     */\n    getNodeAtIndex(nodeIndex, attrName) {\n        if (this.inboundNodes.length === 0) {\n            throw new RuntimeError('The layer has never been called ' +\n                `and thus has no defined ${attrName}.`);\n        }\n        if (this.inboundNodes.length <= nodeIndex) {\n            throw new ValueError(`Asked to get ${attrName} at node ${nodeIndex}, ` +\n                `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n        }\n        return this.inboundNodes[nodeIndex];\n    }\n    /**\n     * Retrieves the input tensor(s) of a layer at a given node.\n     *\n     * @param nodeIndex Integer, index of the node from which to retrieve the\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n     *   was called.\n     *\n     * @return A tensor (or list of tensors if the layer has multiple inputs).\n     */\n    getInputAt(nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n    }\n    /**\n     * Retrieves the output tensor(s) of a layer at a given node.\n     *\n     * @param nodeIndex Integer, index of the node from which to retrieve the\n     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n     *   was called.\n     *\n     * @return A tensor (or list of tensors if the layer has multiple outputs).\n     */\n    getOutputAt(nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n    }\n    // Properties\n    /**\n     * Retrieves the input tensor(s) of a layer.\n     *\n     * Only applicable if the layer has exactly one inbound node,\n     * i.e. if it is connected to one incoming layer.\n     *\n     * @return Input tensor or list of input tensors.\n     *\n     * @exception AttributeError if the layer is connected to more than one\n     *   incoming layers.\n     */\n    get input() {\n        if (this.inboundNodes.length > 1) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has multiple inbound nodes, ' +\n                'hence the notion of \"layer input\" ' +\n                'is ill-defined. ' +\n                'Use `getInputAt(nodeIndex)` instead.');\n        }\n        else if (this.inboundNodes.length === 0) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' is not connected, no input to return.');\n        }\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);\n    }\n    /**\n     * Retrieves the output tensor(s) of a layer.\n     *\n     * Only applicable if the layer has exactly one inbound node,\n     * i.e. if it is connected to one incoming layer.\n     *\n     * @return Output tensor or list of output tensors.\n     *\n     * @exception AttributeError if the layer is connected to more than one\n     *   incoming layers.\n     */\n    get output() {\n        if (this.inboundNodes.length === 0) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has no inbound nodes.');\n        }\n        if (this.inboundNodes.length > 1) {\n            throw new AttributeError(`Layer ${this.name}` +\n                ' has multiple inbound nodes, ' +\n                'hence the notion of \"layer output\" ' +\n                'is ill-defined. ' +\n                'Use `getOutputAt(nodeIndex)` instead.');\n        }\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);\n    }\n    get losses() {\n        return this._losses;\n    }\n    /**\n     * Retrieves the Layer's current loss values.\n     *\n     * Used for regularizers during training.\n     */\n    calculateLosses() {\n        // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n        //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n        //   Tensor (specifically Scalar) values are returned. This is due to the\n        //   imperative backend.\n        return this.losses.map(lossFn => lossFn());\n    }\n    get updates() {\n        return this._updates;\n    }\n    get built() {\n        return this._built;\n    }\n    set built(built) {\n        this._built = built;\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this._trainableWeights.forEach(w => w.trainable = trainable);\n        this.trainable_ = trainable;\n    }\n    get trainableWeights() {\n        if (this.trainable_) {\n            return this._trainableWeights.filter(w => w.trainable);\n        }\n        else {\n            return [];\n        }\n    }\n    set trainableWeights(weights) {\n        this._trainableWeights = weights;\n    }\n    get nonTrainableWeights() {\n        if (this.trainable) {\n            return this._trainableWeights.filter(w => !w.trainable)\n                .concat(this._nonTrainableWeights);\n        }\n        else {\n            return this._trainableWeights.concat(this._nonTrainableWeights);\n        }\n    }\n    set nonTrainableWeights(weights) {\n        this._nonTrainableWeights = weights;\n    }\n    /**\n     * The concatenation of the lists trainableWeights and nonTrainableWeights\n     * (in this order).\n     */\n    get weights() {\n        return this.trainableWeights.concat(this.nonTrainableWeights);\n    }\n    get stateful() {\n        return this._stateful;\n    }\n    /**\n     * Reset the states of the layer.\n     *\n     * This method of the base Layer class is essentially a no-op.\n     * Subclasses that are stateful (e.g., stateful RNNs) should override this\n     * method.\n     */\n    resetStates() {\n        if (!this.stateful) {\n            throw new Error('Cannot call the resetStates() method of a non-stateful Layer ' +\n                'object.');\n        }\n    }\n    /**\n     * Checks compatibility between the layer and provided inputs.\n     *\n     * This checks that the tensor(s) `input`\n     * verify the input assumptions of the layer\n     * (if any). If not, exceptions are raised.\n     *\n     * @param inputs Input tensor or list of input tensors.\n     *\n     * @exception ValueError in case of mismatch between\n     *   the provided inputs and the expectations of the layer.\n     */\n    assertInputCompatibility(inputs) {\n        inputs = generic_utils.toList(inputs);\n        if (this.inputSpec == null || this.inputSpec.length === 0) {\n            return;\n        }\n        const inputSpec = generic_utils.toList(this.inputSpec);\n        if (inputs.length !== inputSpec.length) {\n            throw new ValueError(`Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n                `but it received ${inputs.length} input tensors. ` +\n                `Input received: ${inputs}`);\n        }\n        for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n            const x = inputs[inputIndex];\n            const spec = inputSpec[inputIndex];\n            if (spec == null) {\n                continue;\n            }\n            // Check ndim.\n            const ndim = x.rank;\n            if (spec.ndim != null) {\n                if (ndim !== spec.ndim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n                        `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n                }\n            }\n            if (spec.maxNDim != null) {\n                if (ndim > spec.maxNDim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` +\n                        `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n                }\n            }\n            if (spec.minNDim != null) {\n                if (ndim < spec.minNDim) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` +\n                        `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n                }\n            }\n            // Check dtype.\n            if (spec.dtype != null) {\n                if (x.dtype !== spec.dtype) {\n                    throw new ValueError(`Input ${inputIndex} is incompatible with layer ${this.name} ` +\n                        `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n                }\n            }\n            // Check specific shape axes.\n            if (spec.axes) {\n                const xShape = x.shape;\n                for (const key in spec.axes) {\n                    const axis = Number(key);\n                    const value = spec.axes[key];\n                    // Perform Python-style slicing in case axis < 0;\n                    // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n                    // ensure type safety through Underscore calls.\n                    const xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n                        throw new ValueError(`Input ${inputIndex} is incompatible with layer ` +\n                            `${this.name}: expected axis ${axis} of input shape to ` +\n                            `have value ${value} but got shape ${xShape}.`);\n                    }\n                }\n            }\n            // Check shape.\n            if (spec.shape != null) {\n                for (let i = 0; i < spec.shape.length; ++i) {\n                    const specDim = spec.shape[i];\n                    const dim = x.shape[i];\n                    if (specDim != null && dim != null) {\n                        if (specDim !== dim) {\n                            throw new ValueError(`Input ${inputIndex} is incompatible with layer ` +\n                                `${this.name}: expected shape=${spec.shape}, ` +\n                                `found shape=${x.shape}.`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * This is where the layer's logic lives.\n     *\n     * @param inputs Input tensor, or list/tuple of input tensors.\n     * @param kwargs Additional keyword arguments.\n     *\n     * @return A tensor or list/tuple of tensors.\n     */\n    call(inputs, kwargs) {\n        return inputs;\n    }\n    invokeCallHook(inputs, kwargs) {\n        if (this._callHook != null) {\n            this._callHook(inputs, kwargs);\n        }\n    }\n    /**\n     * Set call hook.\n     * This is currently used for testing only.\n     * @param callHook\n     */\n    setCallHook(callHook) {\n        this._callHook = callHook;\n    }\n    /**\n     * Clear call hook.\n     * This is currently used for testing only.\n     */\n    clearCallHook() {\n        this._callHook = null;\n    }\n    /**\n     * Builds or executes a `Layer's logic.\n     *\n     * When called with `tf.Tensor`(s), execute the `Layer`s computation and\n     * return Tensor(s). For example:\n     *\n     * ```js\n     * const denseLayer = tf.layers.dense({\n     *   units: 1,\n     *   kernelInitializer: 'zeros',\n     *   useBias: false\n     * });\n     *\n     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n     * // numeric values).\n     * const input = tf.ones([2, 2]);\n     * const output = denseLayer.apply(input);\n     *\n     * // The output's value is expected to be [[0], [0]], due to the fact that\n     * // the dense layer has a kernel initialized to all-zeros and does not have\n     * // a bias.\n     * output.print();\n     * ```\n     *\n     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n     * future execution.  This entails internal book-keeping on shapes of\n     * expected Tensors, wiring layers together, and initializing weights.\n     *\n     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n     * building of non-`tf.Sequential` models. For example:\n     *\n     * ```js\n     * const flattenLayer = tf.layers.flatten();\n     * const denseLayer = tf.layers.dense({units: 1});\n     *\n     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n     * const input = tf.input({shape: [2, 2]});\n     * const output1 = flattenLayer.apply(input);\n     *\n     * // output1.shape is [null, 4]. The first dimension is the undetermined\n     * // batch size. The second dimension comes from flattening the [2, 2]\n     * // shape.\n     * console.log(JSON.stringify(output1.shape));\n     *\n     * // The output SymbolicTensor of the flatten layer can be used to call\n     * // the apply() of the dense layer:\n     * const output2 = denseLayer.apply(output1);\n     *\n     * // output2.shape is [null, 1]. The first dimension is the undetermined\n     * // batch size. The second dimension matches the number of units of the\n     * // dense layer.\n     * console.log(JSON.stringify(output2.shape));\n     *\n     * // The input and output and be used to construct a model that consists\n     * // of the flatten and dense layers.\n     * const model = tf.model({inputs: input, outputs: output2});\n     * ```\n     *\n     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n     * @param kwargs Additional keyword arguments to be passed to `call()`.\n     *\n     * @return Output of the layer's `call` method.\n     *\n     * @exception ValueError error in case the layer is missing shape information\n     *   for its `build` call.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    // Porting Note: This is a replacement for __call__() in Python.\n    apply(inputs, kwargs) {\n        kwargs = kwargs || {};\n        this.assertNotDisposed();\n        // Ensure inputs are all the same type.\n        const inputsList = generic_utils.toList(inputs);\n        let allAreSymbolic = true;\n        for (const input of inputsList) {\n            if (!(input instanceof SymbolicTensor)) {\n                allAreSymbolic = false;\n                break;\n            }\n        }\n        let noneAreSymbolic = true;\n        for (const input of inputsList) {\n            if (input instanceof SymbolicTensor) {\n                noneAreSymbolic = false;\n                break;\n            }\n        }\n        if (allAreSymbolic === noneAreSymbolic) {\n            throw new ValueError('Arguments to apply() must be all ' +\n                'SymbolicTensors or all Tensors');\n        }\n        // TODO(michaelterry): nameScope() may not be necessary.\n        return nameScope(this.name, () => {\n            // Handle laying building (weight creating, input spec locking).\n            if (!this.built) {\n                /*\n                  Throw exceptions in case the input is not compatible\n                  with the inputSpec specified in the layer constructor.\n                 */\n                this.assertInputCompatibility(inputs);\n                // Collect input shapes to build layer.\n                const inputShapes = [];\n                for (const xElem of generic_utils.toList(inputs)) {\n                    inputShapes.push(xElem.shape);\n                }\n                this.build(generic_utils.singletonOrArray(inputShapes));\n                this.built = true;\n                // Load weights that were specified at layer instantiation.\n                if (this.initialWeights) {\n                    this.setWeights(this.initialWeights);\n                }\n                if (this._refCount === null && noneAreSymbolic) {\n                    // The first use of this layer is a non-symbolic call, set ref count\n                    // to 1 so the Layer can be properly disposed if its dispose() method\n                    // is called.\n                    this._refCount = 1;\n                }\n            }\n            /*\n              Throw exceptions in case the input is not compatible\n              with the inputSpec set at build time.\n            */\n            this.assertInputCompatibility(inputs);\n            // Handle mask propagation.\n            // TODO(michaelterry): Mask propagation not currently implemented.\n            // Actually call the layer, collecting output(s), mask(s), and shape(s).\n            if (noneAreSymbolic) {\n                let output = this.call(inputs, kwargs);\n                // TODO(michaelterry): Compute the outputMask\n                // If the layer returns tensors from its inputs, unmodified,\n                // we copy them to avoid loss of tensor metadata.\n                const outputList = generic_utils.toList(output);\n                const outputListCopy = [];\n                // TODO(michaelterry): This copying may not be necessary given our eager\n                // backend.\n                for (let x of outputList) {\n                    if (inputsList.indexOf(x) !== -1) {\n                        x = x.clone();\n                    }\n                    outputListCopy.push(x);\n                }\n                output = generic_utils.singletonOrArray(outputListCopy);\n                if (this.activityRegularizer != null) {\n                    throw new NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                // TODO(michaelterry): Call addInboundNode()?\n                return output;\n            }\n            else {\n                const inputShape = collectInputShape(inputs);\n                const outputShape = this.computeOutputShape(inputShape);\n                let output;\n                const outputDType = guessOutputDType(inputs);\n                this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] :\n                    inputShape);\n                if (outputShape != null && outputShape.length > 0 &&\n                    Array.isArray(outputShape[0])) {\n                    // We have multiple output shapes. Create multiple output tensors.\n                    output = outputShape\n                        .map((shape, index) => new SymbolicTensor(outputDType, shape, this, generic_utils.toList(inputs), kwargs, this.name, index));\n                }\n                else {\n                    output = new SymbolicTensor(outputDType, outputShape, this, generic_utils.toList(inputs), kwargs, this.name);\n                }\n                /*\n                  Add an inbound node to the layer, so that it keeps track\n                  of the call and of all new variables created during the call.\n                  This also updates the layer history of the output tensor(s).\n                  If the input tensor(s) had no previous history,\n                  this does nothing.\n                */\n                this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n                this._refCount++;\n                if (this.activityRegularizer != null) {\n                    throw new NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n        });\n    }\n    /**\n     * Check compatibility between input shape and this layer's batchInputShape.\n     *\n     * Print warning if any incompatibility is found.\n     *\n     * @param inputShape Input shape to be checked.\n     */\n    warnOnIncompatibleInputShape(inputShape) {\n        if (this.batchInputShape == null) {\n            return;\n        }\n        else if (inputShape.length !== this.batchInputShape.length) {\n            console.warn(`The rank of the input tensor provided (shape: ` +\n                `${JSON.stringify(inputShape)}) does not match that of the ` +\n                `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n                `of the layer ${this.name}`);\n        }\n        else {\n            let dimMismatch = false;\n            this.batchInputShape.forEach((dimension, i) => {\n                if (dimension != null && inputShape[i] != null &&\n                    inputShape[i] !== dimension) {\n                    dimMismatch = true;\n                }\n            });\n            if (dimMismatch) {\n                console.warn(`The shape of the input tensor ` +\n                    `(${JSON.stringify(inputShape)}) does not ` +\n                    `match the expectation of layer ${this.name}: ` +\n                    `${JSON.stringify(this.batchInputShape)}`);\n            }\n        }\n    }\n    /**\n     * Retrieves the output shape(s) of a layer.\n     *\n     * Only applicable if the layer has only one inbound node, or if all inbound\n     * nodes have the same output shape.\n     *\n     * @returns Output shape or shapes.\n     * @throws AttributeError: if the layer is connected to more than one incoming\n     *   nodes.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    get outputShape() {\n        if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n            throw new AttributeError(`The layer ${this.name} has never been called and thus has no ` +\n                `defined output shape.`);\n        }\n        const allOutputShapes = [];\n        for (const node of this.inboundNodes) {\n            const shapeString = JSON.stringify(node.outputShapes);\n            if (allOutputShapes.indexOf(shapeString) === -1) {\n                allOutputShapes.push(shapeString);\n            }\n        }\n        if (allOutputShapes.length === 1) {\n            const outputShapes = this.inboundNodes[0].outputShapes;\n            if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n                outputShapes.length === 1) {\n                return outputShapes[0];\n            }\n            else {\n                return outputShapes;\n            }\n        }\n        else {\n            throw new AttributeError(`The layer ${this.name} has multiple inbound nodes with different ` +\n                `output shapes. Hence the notion of \"output shape\" is ill-defined ` +\n                `for the layer.`);\n            // TODO(cais): Implement getOutputShapeAt().\n        }\n    }\n    /**\n     * Counts the total number of numbers (e.g., float32, int32) in the\n     * weights.\n     *\n     * @returns An integer count.\n     * @throws RuntimeError: If the layer is not built yet (in which case its\n     *   weights are not defined yet.)\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    countParams() {\n        if (!this.built) {\n            throw new RuntimeError(`You tried to call countParams() on ${this.name}, ` +\n                `but the layer is not built yet. Build it first by calling ` +\n                `build(batchInputShape).`);\n        }\n        return variable_utils.countParamsInWeights(this.weights);\n    }\n    /**\n     * Creates the layer weights.\n     *\n     * Must be implemented on all layers that have weights.\n     *\n     * Called when apply() is called to construct the weights.\n     *\n     * @param inputShape A `Shape` or array of `Shape` (unused).\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    build(inputShape) {\n        this.built = true;\n    }\n    /**\n     * Returns the current values of the weights of the layer.\n     *\n     * @param trainableOnly Whether to get the values of only trainable weights.\n     * @returns Weight values as an `Array` of `tf.Tensor`s.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    getWeights(trainableOnly = false) {\n        return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n    }\n    /**\n     * Sets the weights of the layer, from Tensors.\n     *\n     * @param weights a list of Tensors. The number of arrays and their shape\n     *   must match number of the dimensions of the weights of the layer (i.e.\n     *   it should match the output of `getWeights`).\n     *\n     * @exception ValueError If the provided weights list does not match the\n     *   layer's specifications.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    setWeights(weights) {\n        tidy(() => {\n            const params = this.weights;\n            if (params.length !== weights.length) {\n                // TODO(cais): Restore the following and use `providedWeights`, instead\n                // of `weights` in the error message, once the deeplearn.js bug is\n                // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n                // providedWeights = JSON.stringify(weights).substr(0, 50);\n                throw new ValueError(`You called setWeights(weights) on layer \"${this.name}\" ` +\n                    `with a weight list of length ${weights.length}, ` +\n                    `but the layer was expecting ${params.length} weights. ` +\n                    `Provided weights: ${weights}...`);\n            }\n            if (params.length === 0) {\n                return;\n            }\n            const weightValueTuples = [];\n            const paramValues = batchGetValue(params);\n            for (let i = 0; i < paramValues.length; ++i) {\n                const pv = paramValues[i];\n                const p = params[i];\n                const w = weights[i];\n                if (!util.arraysEqual(pv.shape, w.shape)) {\n                    throw new ValueError(`Layer weight shape ${pv.shape} ` +\n                        `not compatible with provided weight shape ${w.shape}`);\n                }\n                weightValueTuples.push([p, w]);\n            }\n            batchSetValue(weightValueTuples);\n        });\n    }\n    /**\n     * Adds a weight variable to the layer.\n     *\n     * @param name Name of the new weight variable.\n     * @param shape The shape of the weight.\n     * @param dtype The dtype of the weight.\n     * @param initializer An initializer instance.\n     * @param regularizer A regularizer instance.\n     * @param trainable Whether the weight should be trained via backprop or not\n     *   (assuming that the layer itself is also trainable).\n     * @param constraint An optional trainable.\n     * @return The created weight variable.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    addWeight(name, shape, dtype, initializer, regularizer, trainable, constraint) {\n        // Reject duplicate weight names.\n        if (this._addedWeightNames.indexOf(name) !== -1) {\n            throw new ValueError(`Duplicate weight name ${name} for layer ${this.name}`);\n        }\n        this._addedWeightNames.push(name);\n        if (dtype == null) {\n            dtype = 'float32';\n        }\n        if (this.fastWeightInitDuringBuild) {\n            initializer = getInitializer('zeros');\n        }\n        const initValue = initializer.apply(shape, dtype);\n        const weight = new LayerVariable(initValue, dtype, name, trainable, constraint);\n        initValue.dispose();\n        // Request backend not to dispose the weights of the model on scope() exit.\n        if (regularizer != null) {\n            this.addLoss(() => regularizer.apply(weight.read()));\n        }\n        if (trainable == null) {\n            trainable = true;\n        }\n        if (trainable) {\n            this._trainableWeights.push(weight);\n        }\n        else {\n            this._nonTrainableWeights.push(weight);\n        }\n        return weight;\n    }\n    /**\n     * Set the fast-weight-initialization flag.\n     *\n     * In cases where the initialized weight values will be immediately\n     * overwritten by loaded weight values during model loading, setting\n     * the flag to `true` saves unnecessary calls to potentially expensive\n     * initializers and speeds up the loading process.\n     *\n     * @param value Target value of the flag.\n     */\n    setFastWeightInitDuringBuild(value) {\n        this.fastWeightInitDuringBuild = value;\n    }\n    /**\n     * Add losses to the layer.\n     *\n     * The loss may potentionally be conditional on some inputs tensors,\n     * for instance activity losses are conditional on the layer's inputs.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    addLoss(losses) {\n        if (losses == null || Array.isArray(losses) && losses.length === 0) {\n            return;\n        }\n        // Update this.losses\n        losses = generic_utils.toList(losses);\n        if (this._losses !== undefined && this._losses !== null) {\n            this.losses.push(...losses);\n        }\n    }\n    /**\n     * Computes the output shape of the layer.\n     *\n     * Assumes that the layer will be built to match that input shape provided.\n     *\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\n     *   (one per output tensor of the layer). Shape tuples can include null for\n     *   free dimensions, instead of an integer.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    /**\n     * Computes an output mask tensor.\n     *\n     * @param inputs Tensor or list of tensors.\n     * @param mask Tensor or list of tensors.\n     *\n     * @return null or a tensor (or list of tensors, one per output tensor of the\n     * layer).\n     */\n    computeMask(inputs, mask) {\n        if (!this.supportsMasking) {\n            if (mask != null) {\n                if (Array.isArray(mask)) {\n                    mask.forEach(maskElement => {\n                        if (maskElement != null) {\n                            throw new TypeError(`Layer ${this.name} does not support masking, ` +\n                                'but was passed an inputMask.');\n                        }\n                    });\n                }\n                else {\n                    throw new TypeError(`Layer ${this.name} does not support masking, ` +\n                        'but was passed an inputMask.');\n                }\n            }\n            // masking not explicitly supported: return null as mask\n            return null;\n        }\n        // if masking is explictly supported, by default\n        // carry over the input mask\n        return mask;\n    }\n    /**\n     * Internal method to create an inbound node for the layer.\n     *\n     * @param inputTensors List of input tensors.\n     * @param outputTensors List of output tensors.\n     * @param inputMasks List of input masks (a mask can be a tensor, or null).\n     * @param outputMasks List of output masks (a mask can be a tensor, or null).\n     * @param inputShapes List of input shape tuples.\n     * @param outputShapes List of output shape tuples.\n     * @param kwargs Dictionary of keyword arguments that were passed to the\n     *   `call` method of the layer at the call that created the node.\n     */\n    addInboundNode(inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs = null) {\n        const inputTensorList = generic_utils.toList(inputTensors);\n        outputTensors = generic_utils.toList(outputTensors);\n        inputMasks = generic_utils.toList(inputMasks);\n        outputMasks = generic_utils.toList(outputMasks);\n        inputShapes = types_utils.normalizeShapeList(inputShapes);\n        outputShapes = types_utils.normalizeShapeList(outputShapes);\n        // Collect input tensor(s) coordinates.\n        const inboundLayers = [];\n        const nodeIndices = [];\n        const tensorIndices = [];\n        for (const x of inputTensorList) {\n            /*\n             * TODO(michaelterry): Keras adds this value to tensors; it's not\n             * clear whether we'll use this or not.\n             */\n            inboundLayers.push(x.sourceLayer);\n            nodeIndices.push(x.nodeIndex);\n            tensorIndices.push(x.tensorIndex);\n        }\n        // Create node, add it to inbound nodes.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers,\n            nodeIndices,\n            tensorIndices,\n            inputTensors: inputTensorList,\n            outputTensors,\n            inputMasks,\n            outputMasks,\n            inputShapes,\n            outputShapes\n        }, kwargs);\n        // Update tensor history\n        for (let i = 0; i < outputTensors.length; i++) {\n            // TODO(michaelterry: _uses_learning_phase not tracked.\n            outputTensors[i].sourceLayer = this;\n            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n            outputTensors[i].tensorIndex = i;\n        }\n    }\n    /**\n     * Returns the config of the layer.\n     *\n     * A layer config is a TS dictionary (serializable)\n     * containing the configuration of a layer.\n     * The same layer can be reinstantiated later\n     * (without its trained weights) from this configuration.\n     *\n     * The config of a layer does not include connectivity\n     * information, nor the layer class name.  These are handled\n     * by 'Container' (one layer of abstraction above).\n     *\n     * Porting Note: The TS dictionary follows TS naming standrds for\n     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n     * should use a helper function to convert to the pythonic storage\n     * standard. (see serialization_utils.convertTsToPythonic)\n     *\n     * @returns TS dictionary of configuration.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    getConfig() {\n        const config = { name: this.name, trainable: this.trainable };\n        if (this.batchInputShape != null) {\n            config['batchInputShape'] = this.batchInputShape;\n        }\n        if (this.dtype != null) {\n            config['dtype'] = this.dtype;\n        }\n        return config;\n    }\n    /**\n     * Dispose the weight variables that this Layer instance holds.\n     *\n     * @returns {number} Number of disposed variables.\n     */\n    disposeWeights() {\n        this.weights.forEach(weight => weight.dispose());\n        return this.weights.length;\n    }\n    assertNotDisposed() {\n        if (this._refCount === 0) {\n            throw new Error(`Layer '${this.name}' is already disposed.`);\n        }\n    }\n    /**\n     * Attempt to dispose layer's weights.\n     *\n     * This method decrease the reference count of the Layer object by 1.\n     *\n     * A Layer is reference-counted. Its reference count is incremented by 1\n     * the first item its `apply()` method is called and when it becomes a part\n     * of a new `Node` (through calling the `apply()`) method on a\n     * `tf.SymbolicTensor`).\n     *\n     * If the reference count of a Layer becomes 0, all the weights will be\n     * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n     * will be freed.\n     *\n     * Note: If the reference count is greater than 0 after the decrement, the\n     * weights of the Layer will *not* be disposed.\n     *\n     * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n     * `getWeights()` or `setWeights()` anymore.\n     *\n     * @returns A DisposeResult Object with the following fields:\n     *   - refCountAfterDispose: The reference count of the Container after this\n     *     `dispose()` call.\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n     *     during this `dispose()` call.\n     * @throws {Error} If the layer is not built yet, or if the layer has already\n     *   been disposed.\n     *\n     * @doc {heading: 'Models', 'subheading': 'Classes'}\n     */\n    dispose() {\n        if (!this.built) {\n            throw new Error(`Cannot dispose Layer ${this.name} because it has not been ` +\n                `built yet.`);\n        }\n        if (this._refCount === null) {\n            throw new Error(`Cannot dispose Layer ${this.name} because it has not been used ` +\n                `yet.`);\n        }\n        this.assertNotDisposed();\n        let numDisposedVariables = 0;\n        if (--this._refCount === 0) {\n            numDisposedVariables = this.disposeWeights();\n        }\n        return { refCountAfterDispose: this._refCount, numDisposedVariables };\n    }\n}\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors) {\n    inputTensors =\n        generic_utils.toList(inputTensors);\n    const shapes = [];\n    for (const x of inputTensors) {\n        shapes.push(x.shape);\n    }\n    return generic_utils.singletonOrArray(shapes);\n}\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors) {\n    return 'float32';\n}\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(tensor, layer, nodeIndex) {\n    if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n        layer = tensor.sourceLayer;\n        nodeIndex = tensor.nodeIndex;\n    }\n    if (layer.inboundNodes.length === 0) {\n        return [tensor];\n    }\n    else {\n        const node = layer.inboundNodes[nodeIndex];\n        if (node.inboundLayers.length === 0) {\n            return node.inputTensors;\n        }\n        else {\n            const sourceTensors = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n                const x = node.inputTensors[i];\n                const layer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const previousSources = getSourceInputs(x, layer, nodeIndex);\n                // Avoid input redundancy.\n                for (const x of previousSources) {\n                    if (sourceTensors.indexOf(x) === -1) {\n                        sourceTensors.push(x);\n                    }\n                }\n            }\n            return sourceTensors;\n        }\n    }\n}\n//# sourceMappingURL=topology.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { ValueError } from '../errors';\nimport { Layer, Node, SymbolicTensor } from './topology';\nexport class InputLayer extends Layer {\n    constructor(args) {\n        super({\n            dtype: args.dtype,\n            name: args.name != null ? args.name : getUid('input').toString()\n        });\n        // Normalize config.batchSize and config.sparse\n        if (args.batchSize == null) {\n            args.batchSize = null;\n        }\n        if (args.sparse == null) {\n            args.sparse = false;\n        }\n        this.trainable = false;\n        this.built = true;\n        this.sparse = args.sparse;\n        if (args.inputShape != null && args.batchInputShape != null) {\n            throw new ValueError('Only provide the inputShape OR ' +\n                'batchInputShape argument to inputLayer, not both at the same time.');\n        }\n        let batchInputShape = args.batchInputShape;\n        if (batchInputShape == null) {\n            if (args.inputShape == null) {\n                throw new ValueError('An InputLayer should be passed either a ' +\n                    '`batchInputShape` or an `inputShape`.');\n            }\n            else {\n                batchInputShape = [args.batchSize].concat(args.inputShape);\n            }\n        }\n        else {\n            // TODO(michaelterry): Backport to PyKeras\n            if (args.batchSize != null) {\n                throw new ValueError('Cannot specify batchSize if batchInputShape is ' +\n                    'specified when creating an InputLayer.');\n            }\n        }\n        const dtype = args.dtype || 'float32';\n        this.batchInputShape = batchInputShape;\n        this.dtype = dtype;\n        // TODO(michaelterry): Backport this to PyKeras?\n        this.inputSpec = [{ shape: batchInputShape }];\n        const inputTensor = new SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);\n        inputTensor.nodeIndex = 0;\n        inputTensor.tensorIndex = 0;\n        // Create an input node to add to this.outboundNode.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: [inputTensor],\n            outputTensors: [inputTensor],\n            inputMasks: [null],\n            outputMasks: [null],\n            inputShapes: [batchInputShape],\n            outputShapes: [batchInputShape]\n        });\n    }\n    apply(inputs, kwargs) {\n        throw new ValueError('Cannot pass any input to an ' +\n            `InputLayer's apply() method. InputLayer name: ${this.name}`);\n    }\n    dispose() {\n        // dispose() for InputLayer is overridden as no-op.\n        return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };\n    }\n    getConfig() {\n        return {\n            batchInputShape: this.batchInputShape,\n            dtype: this.dtype,\n            sparse: this.sparse,\n            name: this.name\n        };\n    }\n}\n/** @nocollapse */\nInputLayer.className = 'InputLayer';\nserialization.registerClass(InputLayer);\nexport function Input(config) {\n    if (config.batchShape == null && config.shape == null) {\n        throw new Error('Please provide to Input either a `shape`' +\n            ' or a `batchShape` argument. Note that ' +\n            '`shape` does not include the batch ' +\n            'dimension.');\n    }\n    if (config.batchShape != null && config.shape != null) {\n        // TODO(michaelterry): Backport to PyKeras.\n        throw new ValueError('Please provide either a `shape` or `batchShape` ' +\n            'argument to Input, but not both.');\n    }\n    let batchShape = config.batchShape;\n    if (config.shape != null && batchShape == null) {\n        batchShape = [null].concat(config.shape);\n    }\n    let dtype = config.dtype;\n    if (dtype == null) {\n        dtype = 'float32';\n    }\n    const inputLayer = new InputLayer({\n        batchInputShape: batchShape,\n        name: config.name,\n        dtype,\n        sparse: config.sparse\n    });\n    const outputs = inputLayer.inboundNodes[0].outputTensors;\n    return outputs[0];\n}\n//# sourceMappingURL=input_layer.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { add, div, keep, mul, nextFrame, tidy, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nimport * as generic_utils from './utils/generic_utils';\n/** Verbosity logging level when fitting a model. */\nexport var ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport class BaseCallback {\n    constructor() {\n        // TODO(michaelterry): This type is a best guess.\n        this.validationData = null;\n    }\n    setParams(params) {\n        this.params = params;\n    }\n    async onEpochBegin(epoch, logs) { }\n    async onEpochEnd(epoch, logs) { }\n    async onBatchBegin(batch, logs) { }\n    async onBatchEnd(batch, logs) { }\n    async onTrainBegin(logs) { }\n    async onTrainEnd(logs) { }\n    // LayersModel needs to call Callback.setModel(), but cannot actually depend\n    // on Callback because that creates a cyclic dependency.  Providing this no-op\n    // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n    // BaseCallback but not on Callback.  The argument is typed as `Container`\n    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n    // overrides this method and enforces that the argument is really a\n    // LayersModel.\n    setModel(model) {\n        // Do nothing. Use Callback instead of BaseCallback to track the model.\n    }\n}\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n    // TODO(cais): When the need arises, uncomment the following lines and\n    // implement the queue for time values.\n    // private deltaTBatch: number;\n    // private deltaTsBatchBegin: Array<number>;\n    // private deltaTsBatchEnd: Array<number>;\n    /**\n     * Constructor of CallbackList.\n     * @param callbacks Array of `Callback` instances.\n     * @param queueLength Queue length for keeping running statistics over\n     *   callback execution time.\n     */\n    constructor(callbacks, queueLength = 10) {\n        // TODO(cais): Make use of queueLength when implementing the queue for time\n        // values.\n        if (callbacks == null) {\n            callbacks = [];\n        }\n        this.callbacks = callbacks;\n        this.queueLength = queueLength;\n    }\n    append(callback) {\n        this.callbacks.push(callback);\n    }\n    setParams(params) {\n        for (const callback of this.callbacks) {\n            callback.setParams(params);\n        }\n    }\n    setModel(model) {\n        for (const callback of this.callbacks) {\n            callback.setModel(model);\n        }\n    }\n    /**\n     * Called at the start of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochBegin(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochBegin(epoch, logs);\n        }\n    }\n    /**\n     * Called at the end of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochEnd(epoch, logs);\n        }\n    }\n    /**\n     * Called  right before processing a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchBegin(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchBegin(batch, logs);\n        }\n    }\n    /**\n     * Called at the end of a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchEnd(batch, logs);\n        }\n    }\n    /**\n     * Called at the beginning of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainBegin(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainBegin(logs);\n        }\n    }\n    /**\n     * Called at the end of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainEnd(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainEnd(logs);\n        }\n    }\n}\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n    constructor() {\n        super();\n    }\n    async onEpochBegin(epoch) {\n        this.seen = 0;\n        this.totals = {};\n    }\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const batchSize = logs['size'] == null ? 0 : logs['size'];\n        this.seen += batchSize;\n        for (const key in logs) {\n            const value = logs[key];\n            if (typeof value === 'number') {\n                if (!this.totals.hasOwnProperty(key)) {\n                    this.totals[key] = 0;\n                }\n                this.totals[key] = this.totals[key] + value * batchSize;\n            }\n            else {\n                let oldTotalsToDispose;\n                if (key in this.totals) {\n                    oldTotalsToDispose = this.totals[key];\n                }\n                else {\n                    this.totals[key] = 0;\n                }\n                const total = tidy(() => add((this.totals[key]), mul(value, batchSize)));\n                this.totals[key] = total;\n                if (oldTotalsToDispose != null) {\n                    oldTotalsToDispose.dispose();\n                }\n            }\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs != null) {\n            for (const key of this.params['metrics']) {\n                if (this.totals[key] == null) {\n                    continue;\n                }\n                if (typeof this.totals[key] === 'number') {\n                    logs[key] = this.totals[key] / this.seen;\n                }\n                else {\n                    tidy(() => {\n                        const log = mul(div(1, this.seen), this.totals[key]);\n                        logs[key] = log;\n                        this.totals[key].dispose();\n                        keep(logs[key]);\n                    });\n                }\n            }\n        }\n    }\n}\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n    async onTrainBegin(logs) {\n        this.epoch = [];\n        this.history = {};\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        this.epoch.push(epoch);\n        for (const key in logs) {\n            if (this.history[key] == null) {\n                this.history[key] = [];\n            }\n            this.history[key].push(logs[key]);\n        }\n    }\n    /**\n     * Await the values of all losses and metrics.\n     */\n    async syncData() {\n        const promises = [];\n        const keys = [];\n        const indices = [];\n        for (const key in this.history) {\n            const valueArray = this.history[key];\n            for (let i = 0; i < valueArray.length; ++i) {\n                if (typeof valueArray[i] !== 'number') {\n                    const valueScalar = valueArray[i];\n                    promises.push(valueScalar.data());\n                    keys.push(key);\n                    indices.push(i);\n                }\n            }\n        }\n        const values = await Promise.all(promises);\n        for (let n = 0; n < values.length; ++n) {\n            const tensorToDispose = this.history[keys[n]][indices[n]];\n            tensorToDispose.dispose();\n            this.history[keys[n]][indices[n]] = values[n][0];\n        }\n    }\n}\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n    constructor(args, yieldEvery) {\n        super();\n        this.currentEpoch = 0;\n        this.yieldEvery = yieldEvery || 'auto';\n        if (this.yieldEvery === 'auto') {\n            this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n        }\n        if (this.yieldEvery === 'never' && args.onYield != null) {\n            throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' +\n                'Either change `yieldEvery` or remove the callback');\n        }\n        if (util.isNumber(this.yieldEvery)) {\n            // Decorate `maybeWait` so it will be called at most once every\n            // `yieldEvery` ms.\n            this.maybeWait = generic_utils.debounce(this.maybeWait.bind(this), this.yieldEvery);\n        }\n        this.trainBegin = args.onTrainBegin;\n        this.trainEnd = args.onTrainEnd;\n        this.epochBegin = args.onEpochBegin;\n        this.epochEnd = args.onEpochEnd;\n        this.batchBegin = args.onBatchBegin;\n        this.batchEnd = args.onBatchEnd;\n        this.yield = args.onYield;\n    }\n    async maybeWait(epoch, batch, logs) {\n        const ps = [];\n        if (this.yield != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.yield(epoch, batch, logs));\n        }\n        ps.push(nextFrame());\n        await Promise.all(ps);\n    }\n    async onEpochBegin(epoch, logs) {\n        this.currentEpoch = epoch;\n        if (this.epochBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.epochBegin(epoch, logs);\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        const ps = [];\n        if (this.epochEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.epochEnd(epoch, logs));\n        }\n        if (this.yieldEvery === 'epoch') {\n            ps.push(nextFrame());\n        }\n        await Promise.all(ps);\n    }\n    async onBatchBegin(batch, logs) {\n        if (this.batchBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.batchBegin(batch, logs);\n        }\n    }\n    async onBatchEnd(batch, logs) {\n        const ps = [];\n        if (this.batchEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.batchEnd(batch, logs));\n        }\n        if (this.yieldEvery === 'batch') {\n            ps.push(nextFrame());\n        }\n        else if (util.isNumber(this.yieldEvery)) {\n            ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n        }\n        await Promise.all(ps);\n    }\n    async onTrainBegin(logs) {\n        if (this.trainBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainBegin(logs);\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.trainEnd != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainEnd(logs);\n        }\n    }\n}\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(callbacks, yieldEvery) {\n    if (callbacks == null) {\n        callbacks = {};\n    }\n    if (callbacks instanceof BaseCallback) {\n        return [callbacks];\n    }\n    if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n        return callbacks;\n    }\n    // Convert custom callback configs to custom callback objects.\n    const callbackConfigs = generic_utils.toList(callbacks);\n    return callbackConfigs.map(callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nexport class CallbackConstructorRegistry {\n    /**\n     * Blocks public access to constructor.\n     */\n    constructor() { }\n    /**\n     * Register a tf.LayersModel.fit() callback constructor.\n     *\n     * The registered callback constructor will be used to instantiate\n     * callbacks for every tf.LayersModel.fit() call afterwards.\n     *\n     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n     *   is to be reigstered.\n     * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n     * @throws Error, if the same callbackConstructor has been registered before,\n     *   either at the same or a different `verbosityLevel`.\n     */\n    static registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n        util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n        CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n        if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n            CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n        }\n        CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n    }\n    static checkForDuplicate(callbackConstructor) {\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const constructors = CallbackConstructorRegistry.constructors[+levelName];\n            constructors.forEach(ctor => {\n                if (ctor === callbackConstructor) {\n                    throw new ValueError('Duplicate callback constructor.');\n                }\n            });\n        }\n    }\n    /**\n     * Clear all registered callback constructors.\n     */\n    static clear() {\n        CallbackConstructorRegistry.constructors = {};\n    }\n    /**\n     * Create callbacks using the registered callback constructors.\n     *\n     * Given `verbosityLevel`, all constructors registered at that level or above\n     * will be called and the instantiated callbacks will be used.\n     *\n     * @param verbosityLevel: Level of verbosity.\n     */\n    static createCallbacks(verbosityLevel) {\n        const constructors = [];\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const level = +levelName;\n            if (verbosityLevel >= level) {\n                constructors.push(...CallbackConstructorRegistry.constructors[level]);\n            }\n        }\n        return constructors.map(ctor => new ctor());\n    }\n}\nCallbackConstructorRegistry.constructors = {};\nexport function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n    const history = new History();\n    const actualCallbacks = [\n        new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n    ];\n    if (callbacks != null) {\n        actualCallbacks.push(...callbacks);\n    }\n    actualCallbacks.push(history);\n    const callbackList = new CallbackList(actualCallbacks);\n    // TODO(cais): Figure out when this LayersModel instance can have a\n    // dynamically\n    //   set property called 'callback_model' as in PyKeras.\n    callbackList.setParams({\n        epochs,\n        initialEpoch,\n        samples: numTrainSamples,\n        steps: stepsPerEpoch,\n        batchSize,\n        verbose,\n        doValidation,\n        metrics: callbackMetrics,\n    });\n    return { callbackList, history };\n}\n//# sourceMappingURL=base_callbacks.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=logs.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source layers/__init__.py */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { deserializeKerasObject } from '../utils/generic_utils';\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\n */\nexport function deserialize(config, customObjects = {}, fastWeightInit = false) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'layer', fastWeightInit);\n}\n//# sourceMappingURL=serialization.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport { ValueError } from './errors';\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x, axis) {\n    return tidy(() => {\n        if (x.dtype !== 'float32') {\n            x = x.asType('float32');\n        }\n        const squareSum = tfc.sum(K.square(x), axis, true);\n        const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n        const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n        return tfc.div(x, norm);\n    });\n}\nexport function meanSquaredError(yTrue, yPred) {\n    return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsoluteError(yTrue, yPred) {\n    return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsolutePercentageError(yTrue, yPred) {\n    return tidy(() => {\n        const diff = tfc.sub(yTrue, yPred);\n        const clippedTrue = tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n        const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n        return tfc.mul(100, tfc.mean(absResult, -1));\n    });\n}\nexport function meanSquaredLogarithmicError(yTrue, yPred) {\n    return tidy(() => {\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n        const firstLog = tfc.log(tfc.add(1, clippedPred));\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n        const secondLog = tfc.log(tfc.add(1, clippedTrue));\n        return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n    });\n}\nexport function squaredHinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(K.square(maxResult), -1);\n    });\n}\nexport function hinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(maxResult, -1);\n    });\n}\nexport function categoricalHinge(yTrue, yPred) {\n    return tidy(() => {\n        const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n        const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n        return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n    });\n}\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue, yPred) {\n    return tidy(() => {\n        const log2 = Math.log(2);\n        const predictionDiff = tfc.sub(yPred, yTrue);\n        const logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))), log2);\n        return tfc.mean(logcoshResult, -1);\n    });\n}\nexport function categoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        if (fromLogits) {\n            output = tfc.softmax(output);\n        }\n        else {\n            // scale preds so that the class probabilities of each sample sum to 1.\n            const outputSum = tfc.sum(output, output.shape.length - 1, true);\n            output = tfc.div(output, outputSum);\n        }\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        return tfc.neg(tfc.sum(tfc.mul(target.toFloat(), tfc.log(output)), output.shape.length - 1));\n    });\n}\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        const flatTarget = tfc.floor(K.flatten(target)).toInt();\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        const outputShape = output.shape;\n        const oneHotTarget = tfc.oneHot(flatTarget, outputShape[outputShape.length - 1])\n            .reshape(outputShape);\n        return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n    });\n}\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(labels, logits) {\n    if (!util.arraysEqual(labels.shape, logits.shape)) {\n        throw new ValueError(`logits and labels must have the same shape, but got shapes ` +\n            `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n    }\n    return tidy(() => {\n        // The logistic loss formula from above is\n        //   x - x * z + log(1 + exp(-x))\n        // For x < 0, a more numerically stable formula is\n        //   -x * z + log(1 + exp(x))\n        // Note that these two expressions can be combined into the following:\n        //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n        const reluLogits = logits.relu();\n        const negAbsLogits = logits.abs().neg();\n        return reluLogits.sub(logits.mul(labels)).add(negAbsLogits.exp().log1p());\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return tidy(() => {\n        let y;\n        y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n        y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n        return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n    });\n}\nexport function kullbackLeiblerDivergence(yTrue, yPred) {\n    return tidy(() => {\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n        return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n    });\n}\nexport function poisson(yTrue, yPred) {\n    return tidy(() => {\n        const logPred = tfc.log(tfc.add(epsilon(), yPred));\n        return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n    });\n}\nexport function cosineProximity(yTrue, yPred) {\n    return tidy(() => {\n        const trueNormalized = l2Normalize(yTrue, -1);\n        const predNormalized = l2Normalize(yPred, -1);\n        const trueXPred = tfc.mul(trueNormalized, predNormalized);\n        return tfc.neg(tfc.sum(trueXPred, -1));\n    });\n}\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n// TODO(michaelterry): Add deserialize() function.\nexport const lossesMap = {\n    meanSquaredError,\n    meanAbsoluteError,\n    meanAbsolutePercentageError,\n    meanSquaredLogarithmicError,\n    squaredHinge,\n    hinge,\n    categoricalHinge,\n    logcosh,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    binaryCrossentropy,\n    kullbackLeiblerDivergence,\n    poisson,\n    cosineProximity\n};\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn) {\n    if (typeof identifierOrFn === 'string') {\n        if (identifierOrFn in lossesMap) {\n            return lossesMap[identifierOrFn];\n        }\n        let errMsg = `Unknown loss ${identifierOrFn}`;\n        if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n            errMsg = `Unknown loss ${identifierOrFn}. ` +\n                'Use \"categoricalCrossentropy\" as the string name for ' +\n                'tf.losses.softmaxCrossEntropy';\n        }\n        throw new ValueError(errMsg);\n    }\n    else {\n        return identifierOrFn;\n    }\n}\n//# sourceMappingURL=losses.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n    return tidy(() => {\n        const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n    return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n    });\n}\nexport function precision(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fp = falsePositives(yTrue, yPred);\n        const denominator = tp.add(fp);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function recall(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fn = falseNegatives(yTrue, yPred);\n        const denominator = tp.add(fn);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = yTrue.squeeze([yTrue.rank - 1]);\n    }\n    yPred = yPred.argMax(-1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = yPred.asType(yTrue.dtype);\n    }\n    return tfc.equal(yTrue, yPred).asType('float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine\n};\nexport function get(identifier) {\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new ValueError(`Unknown metric ${identifier}`);\n    }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n    util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        let fnName;\n        for (const key of Object.keys(lossesMap)) {\n            if (lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (const key of Object.keys(metricsMap)) {\n            if (metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\n//# sourceMappingURL=metrics.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n    if (userDefinedMetadata == null ||\n        typeof userDefinedMetadata !== 'object' ||\n        Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n        !plainObjectCheck(userDefinedMetadata)) {\n        throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n    }\n    if (checkSize) {\n        const out = JSON.stringify(userDefinedMetadata);\n        if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n            console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` +\n                `size (length=${out.length} when serialized). It is not ` +\n                `recommended to store such large objects in user-defined metadata. ` +\n                `Please make sure its serialized length is <= ` +\n                `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n        }\n    }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x) {\n    if (x === null) {\n        // Note: typeof `null` is 'object', and `null` is valid in JSON.\n        return true;\n    }\n    else if (typeof x === 'object') {\n        if (Object.getPrototypeOf(x) === Object.prototype) {\n            // `x` is a JavaScript object and its prototype is Object.\n            const keys = Object.keys(x);\n            for (const key of keys) {\n                if (typeof key !== 'string') {\n                    // JSON keys must be strings.\n                    return false;\n                }\n                if (!plainObjectCheck(x[key])) { // Recursive call.\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            // `x` is a JavaScript object but its prototype is not Object.\n            if (Array.isArray(x)) {\n                // `x` is a JavaScript array.\n                for (const item of x) {\n                    if (!plainObjectCheck(item)) { // Recursive call.\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                // `x` is a JavaScript object and its prototype is not Object,\n                // and it's not an Array. I.e., it's a complex object such as\n                // `Error` and `Date`.\n                return false;\n            }\n        }\n    }\n    else {\n        // `x` is not a JavaScript object or `null`.\n        const xType = typeof x;\n        return xType === 'string' || xType === 'number' || xType === 'boolean';\n    }\n}\n//# sourceMappingURL=user_defined_metadata.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { countParamsInWeights } from './variable_utils';\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(model, lineLength, positions, \n// tslint:disable-next-line:no-any\nprintFn = console.log) {\n    const sequentialLike = isModelSequentialLike(model);\n    // Header names for different log elements.\n    const toDisplay = ['Layer (type)', 'Output shape', 'Param #'];\n    if (sequentialLike) {\n        lineLength = lineLength || 65;\n        positions = positions || [0.45, 0.85, 1];\n    }\n    else {\n        lineLength = lineLength || 98;\n        positions = positions || [0.33, 0.55, 0.67, 1];\n        // Header names for different log elements.\n    }\n    if (positions[positions.length - 1] <= 1) {\n        // `positions` is relative. Convert it to absolute positioning.\n        positions = positions.map(p => Math.floor(lineLength * p));\n    }\n    let relevantNodes;\n    if (!sequentialLike) {\n        toDisplay.push('Receives inputs');\n        relevantNodes = [];\n        for (const depth in model.nodesByDepth) {\n            relevantNodes.push(...model.nodesByDepth[depth]);\n        }\n    }\n    printFn('_'.repeat(lineLength));\n    printRow(toDisplay, positions, printFn);\n    printFn('='.repeat(lineLength));\n    const layers = model.layers;\n    for (let i = 0; i < layers.length; ++i) {\n        if (sequentialLike) {\n            printLayerSummary(layers[i], positions, printFn);\n        }\n        else {\n            printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n        }\n        printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n    }\n    // tslint:disable-next-line:no-any\n    model.checkTrainableWeightsConsistency();\n    const trainableCount = countTrainableParams(model);\n    const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n    printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n    printFn(`Trainable params: ${trainableCount}`);\n    printFn(`Non-trainable params: ${nonTrainableCount}`);\n    printFn('_'.repeat(lineLength));\n}\nfunction countTrainableParams(model) {\n    let trainableCount;\n    // tslint:disable:no-any\n    if (model.collectedTrainableWeights != null) {\n        trainableCount =\n            countParamsInWeights(model.collectedTrainableWeights);\n    }\n    else {\n        trainableCount = countParamsInWeights(model.trainableWeights);\n    }\n    // tslint:enable:no-any\n    return trainableCount;\n}\nfunction isModelSequentialLike(model) {\n    let sequentialLike = true;\n    const nodesByDepth = [];\n    const nodes = [];\n    for (const depth in model.nodesByDepth) {\n        nodesByDepth.push(model.nodesByDepth[depth]);\n    }\n    for (const depthNodes of nodesByDepth) {\n        if (depthNodes.length > 1 ||\n            depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n            sequentialLike = false;\n            break;\n        }\n        nodes.push(...depthNodes);\n    }\n    if (sequentialLike) {\n        // Search for shared layers.\n        for (const layer of model.layers) {\n            let flag = false;\n            for (const node of layer.inboundNodes) {\n                if (nodes.indexOf(node) !== -1) {\n                    if (flag) {\n                        sequentialLike = false;\n                        break;\n                    }\n                    else {\n                        flag = true;\n                    }\n                }\n            }\n            if (!sequentialLike) {\n                break;\n            }\n        }\n    }\n    return sequentialLike;\n}\nfunction printRow(fields, positions, \n// tslint:disable-next-line:no-any\nprintFn = console.log) {\n    let line = '';\n    for (let i = 0; i < fields.length; ++i) {\n        if (i > 0) {\n            line = line.slice(0, line.length - 1) + ' ';\n        }\n        line += fields[i];\n        line = line.slice(0, positions[i]);\n        line += ' '.repeat(positions[i] - line.length);\n    }\n    printFn(line);\n}\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(layer, positions, \n// tslint:disable-next-line:no-any\nprintFn) {\n    let outputShape;\n    try {\n        outputShape = JSON.stringify(layer.outputShape);\n    }\n    catch (err) {\n        outputShape = 'multiple';\n    }\n    const name = layer.name;\n    const className = layer.getClassName();\n    const fields = [`${name} (${className})`, outputShape, layer.countParams().toString()];\n    printRow(fields, positions, printFn);\n}\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes, \n// tslint:disable-next-line:no-any\nprintFn) {\n    let outputShape;\n    try {\n        outputShape = JSON.stringify(layer.outputShape);\n    }\n    catch (err) {\n        outputShape = 'multiple';\n    }\n    const connections = [];\n    for (const node of layer.inboundNodes) {\n        if (relevantNodes != null && relevantNodes.length > 0 &&\n            relevantNodes.indexOf(node) === -1) {\n            continue;\n        }\n        for (let i = 0; i < node.inboundLayers.length; ++i) {\n            const inboundLayer = node.inboundLayers[i].name;\n            const inboundLayerIndex = node.nodeIndices[i];\n            const inboundTensorIndex = node.tensorIndices[i];\n            connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n        }\n    }\n    const name = layer.name;\n    const className = layer.getClassName();\n    const firstConnection = connections.length === 0 ? '' : connections[0];\n    const fields = [\n        `${name} (${className})`, outputShape, layer.countParams().toString(),\n        firstConnection\n    ];\n    printRow(fields, positions, printFn);\n    for (let i = 1; i < connections.length; ++i) {\n        printRow(['', '', '', connections[i]], positions, printFn);\n    }\n}\n//# sourceMappingURL=layer_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName(key, index, value) {\n    return (key === 'inboundNodes' || key === 'outputLayers' ||\n        key === 'inputLayers') &&\n        index === 0 && typeof value === 'string';\n}\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(pythonicConfig, key) {\n    if (pythonicConfig === null) {\n        return null;\n    }\n    else if (typeof pythonicConfig === 'string') {\n        return generic_utils.toCamelCase(pythonicConfig);\n    }\n    else if ((typeof pythonicConfig === 'number') ||\n        (typeof pythonicConfig === 'boolean')) {\n        return pythonicConfig;\n    }\n    else if (pythonicConfig instanceof Array) {\n        const tsArray = [];\n        const arrayLength = pythonicConfig.length;\n        for (let i = 0; i < arrayLength; ++i) {\n            const item = pythonicConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                tsArray.push(item);\n            }\n            else {\n                tsArray.push(convertPythonicToTs(item, key));\n            }\n        }\n        return tsArray;\n    }\n    else {\n        const tsDict = {};\n        for (const pythonicKey of Object.keys(pythonicConfig)) {\n            const pythonicValue = pythonicConfig[pythonicKey];\n            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n                // Special case the 'name' key with a string value. Name values, such as\n                // the names of LayersModel and Layer instances, should not undergo the\n                // camel-case conversion.\n                tsDict[pythonicKey] = pythonicValue;\n            }\n            else {\n                const tsKey = generic_utils.toCamelCase(pythonicKey);\n                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n            }\n        }\n        return tsDict;\n    }\n}\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(tsConfig, key) {\n    if (tsConfig === null || tsConfig === undefined) {\n        return null;\n    }\n    else if (typeof tsConfig === 'string') {\n        return generic_utils.toSnakeCase(tsConfig);\n    }\n    else if ((typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n        return tsConfig;\n    }\n    else if (tsConfig instanceof Array) {\n        const pyArray = [];\n        const arrayLength = tsConfig.length;\n        for (let i = 0; i < arrayLength; ++i) {\n            const item = tsConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                pyArray.push(item);\n            }\n            else {\n                pyArray.push(convertTsToPythonic(item, key));\n            }\n        }\n        return pyArray;\n    }\n    else {\n        const pyDict = {};\n        for (const tsKey of Object.keys(tsConfig)) {\n            const tsValue = tsConfig[tsKey];\n            const pyKey = generic_utils.toSnakeCase(tsKey);\n            if ((tsKey === 'name' || tsKey === 'className') &&\n                typeof tsValue === 'string') {\n                // Special case the 'name' key with a string value. Name values, such as\n                // the names of LayersModel and Layer instances, should not undergo the\n                // snake-case conversion.\n                pyDict[pyKey] = tsValue;\n            }\n            else {\n                pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n            }\n        }\n        return pyDict;\n    }\n}\n//# sourceMappingURL=serialization_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\nimport { toList } from '../utils/generic_utils';\nimport { InputLayer } from './input_layer';\nimport { SymbolicTensor } from './topology';\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key, val) {\n    // Check dtype compatibility.\n    if (key.dtype == null || key.dtype === val.dtype) {\n        //  a.  If types match, return val tensor as is.\n        return val;\n    }\n    try {\n        //  b. Attempt to convert to expected type.\n        return cast(val, key.dtype);\n    }\n    catch (err) {\n        //  c. If conversion fails, return helpful error.\n        throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n            `of the key '${key.name}' (${key.dtype}).`);\n    }\n}\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n    /**\n     * Constructor, optionally does copy-construction.\n     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n     *   copy-construction will be performed.\n     */\n    constructor(feeds) {\n        this.id2Value = {};\n        this.id2Mask = {};\n        this.name2Id = {};\n        if (feeds instanceof FeedDict) {\n            for (const id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n                if (id in feeds.id2Mask) {\n                    this.id2Mask[id] = feeds.id2Mask[id];\n                }\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (const feed of feeds) {\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    /**\n     * Add a key-value pair to the FeedDict.\n     *\n     * @param key The key of the feed.\n     * @param value The value of the tensor feed.\n     * @param mask The value of the mask feed (optional).\n     * @returns This `FeedDict`.\n     * @throws ValueError: If the key `SymbolicTensor` already exists in the\n     *   `FeedDict`.\n     */\n    add(key, value, mask) {\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = assertFeedCompatibility(key, value);\n            this.name2Id[key.name] = key.id;\n            if (mask != null) {\n                this.id2Mask[key.id] = mask;\n            }\n        }\n        else {\n            throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n        }\n        return this;\n    }\n    /**\n     * Add a Feed to the FeedDict.\n     * @param feed The new `Feed` to add.\n     * @returns This `FeedDict`.\n     */\n    addFeed(feed) {\n        this.add(feed.key, feed.value);\n    }\n    /**\n     * Probe whether a key already exists in the FeedDict.\n     * @param key\n     */\n    hasKey(key) {\n        return this.id2Value[key.id] != null;\n    }\n    /**\n     * Get all the SymbolicTensor available in this FeedDict.\n     */\n    names() {\n        return Object.keys(this.name2Id);\n    }\n    /**\n     * Get the feed value for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed value.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getValue(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Value[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Value[id];\n        }\n    }\n    /**\n     * Get the feed mask for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed mask.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getMask(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Mask[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Mask[id];\n        }\n    }\n    /** Dispose all mask Tensors held by this object. */\n    disposeMasks() {\n        if (this.id2Mask != null) {\n            dispose(this.id2Mask);\n        }\n    }\n}\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nconst cachedSorted = {};\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nconst cachedRecipientCounts = {};\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(fetches, feedDict, kwargs, probe) {\n    const training = kwargs == null ? false : kwargs['training'];\n    const arrayFetches = Array.isArray(fetches);\n    const fetchArray = arrayFetches ? fetches : [fetches];\n    const outputNames = fetchArray.map(t => t.name);\n    const finalOutputs = [];\n    const feedNames = feedDict.names();\n    for (const outputName of outputNames) {\n        if (feedNames.indexOf(outputName) !== -1) {\n            finalOutputs.push(feedDict.getValue(outputName));\n        }\n        else {\n            finalOutputs.push(null);\n        }\n    }\n    if (probe != null) {\n        // For optional probing of memory footprint during execution.\n        probe.maxNumTensors = -Infinity;\n        probe.minNumTensors = Infinity;\n    }\n    // Check cache.\n    const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().join(',');\n    let sorted;\n    let recipientCounts;\n    if (cachedSorted[fetchAndFeedKey] == null) {\n        // Cache doesn't contain the desired combination of fetches. Compute\n        // topological sort for the combination for the first time.\n        const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n        sorted = out.sorted;\n        recipientCounts = out.recipientCounts;\n        // Store results in cache for future use.\n        cachedSorted[fetchAndFeedKey] = sorted;\n        cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n    }\n    sorted = cachedSorted[fetchAndFeedKey];\n    recipientCounts = {};\n    if (!training) {\n        Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n    }\n    const internalFeedDict = new FeedDict(feedDict);\n    // Start iterative execution on the topologically-sorted SymbolicTensors.\n    for (let i = 0; i < sorted.length; ++i) {\n        if (probe != null) {\n            // For optional probing of memory usage during execution.\n            const numTensors = memory().numTensors;\n            if (numTensors > probe.maxNumTensors) {\n                probe.maxNumTensors = numTensors;\n            }\n            if (numTensors < probe.minNumTensors) {\n                probe.minNumTensors = numTensors;\n            }\n        }\n        const symbolic = sorted[i];\n        const srcLayer = symbolic.sourceLayer;\n        if (srcLayer instanceof InputLayer) {\n            continue;\n        }\n        const inputValues = [];\n        const inputMasks = [];\n        const tensorsToDispose = [];\n        let maskExists = false;\n        for (const input of symbolic.inputs) {\n            const value = internalFeedDict.getValue(input);\n            const mask = internalFeedDict.getMask(input);\n            inputValues.push(value);\n            inputMasks.push(mask);\n            if (mask != null) {\n                maskExists = true;\n            }\n            if (!training) {\n                recipientCounts[input.name]--;\n                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n                    outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n                    input.sourceLayer.stateful !== true) {\n                    tensorsToDispose.push(value);\n                }\n            }\n        }\n        if (maskExists) {\n            kwargs = kwargs || {};\n            kwargs['mask'] = inputMasks[0];\n        }\n        const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n        let outputMask = null;\n        if (srcLayer.supportsMasking) {\n            outputMask = srcLayer.computeMask(inputValues, inputMasks);\n        }\n        const layerOutputs = getNodeOutputs(symbolic);\n        const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n        for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n            if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n                internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n            }\n            const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n            if (index !== -1) {\n                finalOutputs[index] = outputTensors[i];\n            }\n        }\n        if (!training) {\n            // Clean up Tensors that are no longer needed.\n            dispose(tensorsToDispose);\n        }\n    }\n    // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n    // tensors as we go, because these tensors are sometimes passed over a\n    // series of mutliple layers, i.e., not obeying the immediate input\n    // relations in the graph. If this becomes a memory-usage concern,\n    // we can improve this in the future.\n    internalFeedDict.disposeMasks();\n    return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n    util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n    let finalSorted = [];\n    let finalRecipientMap = {};\n    if (fetches.length === 1) {\n        // Special-casing 1 fetch for efficiency.\n        const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n        finalSorted = out.sorted;\n        finalRecipientMap = out.recipientMap;\n    }\n    else {\n        const visited = new Set();\n        for (const fetch of fetches) {\n            const { sorted, recipientMap } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n            // Merge sorted SymbolicTensor Arrays.\n            for (const symbolicTensor of sorted) {\n                if (!visited.has(symbolicTensor.name)) {\n                    finalSorted.push(symbolicTensor);\n                    visited.add(symbolicTensor.name);\n                }\n            }\n            // Merge recipient maps.\n            for (const name in recipientMap) {\n                if (finalRecipientMap[name] == null) {\n                    finalRecipientMap[name] = new Set();\n                }\n                recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));\n            }\n        }\n    }\n    return {\n        sorted: finalSorted,\n        recipientCounts: recipientMap2Counts(finalRecipientMap)\n    };\n}\nfunction recipientMap2Counts(recipientMap) {\n    const recipientCounts = {};\n    for (const name in recipientMap) {\n        recipientCounts[name] = recipientMap[name].size;\n    }\n    return recipientCounts;\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n    const visited = new Set();\n    const sorted = [];\n    const recipientMap = {};\n    // Put keys of the feedDict into visited first, so they don't have to be\n    // walked. This is needed in case where there are feeds for intermediate\n    // SymbolicTensors of the graph.\n    for (const key of feedDict.names()) {\n        visited.add(key);\n    }\n    const stack = [];\n    const marks = [];\n    // Initial population of stack and marks.\n    stack.push(fetch);\n    while (stack.length > 0) {\n        const top = stack[stack.length - 1];\n        if (visited.has(top.name)) {\n            stack.pop();\n            continue;\n        }\n        const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n        if (top.inputs.length === 0 || topIsMarked) {\n            // Input SymbolicTensor or all children have been visited.\n            stack.pop();\n            sorted.push(top);\n            visited.add(top.name);\n            if (topIsMarked) {\n                marks.pop();\n            }\n        }\n        else {\n            // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n            // been visited yet. Push them onto the stack.\n            marks.push(stack.length - 1);\n            for (const input of top.inputs) {\n                // Increment the recipient count. Note that this needs to happen\n                // regardless of whether the SymbolicTensor has been visited before.\n                if (recipientMap[input.name] == null) {\n                    recipientMap[input.name] = new Set();\n                }\n                recipientMap[input.name].add(top.name);\n                if (visited.has(input.name)) {\n                    continue; // Avoid repeated visits to the same SymbolicTensor.\n                }\n                stack.push(input);\n            }\n        }\n    }\n    return { sorted, recipientMap };\n}\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch) {\n    let layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        let nodeIndex = null;\n        for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n                .outputTensors) {\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n//# sourceMappingURL=executor.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/engine/topology.py */\nimport { tidy } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize as deserializeLayer } from '../layers/serialization';\nimport * as generic_utils from '../utils/generic_utils';\nimport { convertTsToPythonic } from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport { batchSetValue } from '../variables';\nimport { version as layersVersion } from '../version';\nimport { execute, FeedDict } from './executor';\nimport { InputLayer } from './input_layer';\nimport { Layer, Node } from './topology';\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A LayersModel\n * is simply a Container with added training routines.\n *\n */\nexport class Container extends Layer {\n    constructor(args) {\n        // No args passed to super's constructor.\n        super({});\n        this.containerNodes = new Set();\n        this.name = args.name;\n        if (this.name == null) {\n            const prefix = this.getClassName().toLowerCase();\n            this.name = getUid(prefix);\n        }\n        this.supportsMasking = false;\n        this.trainable_ = true;\n        // TODO(michaelterry): Initialize perInputLosses/Updates here.\n        // Container-specific properties.\n        if (Array.isArray(args.inputs)) {\n            this.inputs = args.inputs.slice();\n        }\n        else {\n            this.inputs = [args.inputs];\n        }\n        if (Array.isArray(args.outputs)) {\n            this.outputs = args.outputs.slice();\n        }\n        else {\n            this.outputs = [args.outputs];\n        }\n        // Check for redundancy in inputs.\n        if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n            throw new ValueError('The list of inputs passed to the model is ' +\n                'redundant. All inputs should only appear once. Found: ' +\n                `${this.inputs.map(x => x.name)}`);\n        }\n        // Check for redundancy in outputs.\n        if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' +\n                'All outputs should only appear once. Found: ' +\n                `${this.outputs.map(x => x.name)}`);\n        }\n        /*\n          List of initial layers (1 to 1 mapping with this.inputs, hence the same\n          layer might appear twice)\n        */\n        this.inputLayers = [];\n        this.inputLayersNodeIndices = [];\n        this.inputLayersTensorIndices = [];\n        /*\n          List of layers (1 to 1 mapping with this.outputs, hence the same layer\n          might appear twice)\n        */\n        this.outputLayers = [];\n        this.outputLayersNodeIndices = [];\n        this.outputLayersTensorIndices = [];\n        /*\n          All layers in order of horizontal graph traversal. Entries are unique.\n          Includes input and output layers.\n        */\n        this.layers = [];\n        /*\n          References to container layers that were constructed internally. We need\n          these to properly dispose of tensors from nested containers.\n        */\n        this.internalContainerRefs = [];\n        // TODO(michaelterry): Determine if caching still needed with eager\n        // backend.\n        /*\n          This is for performance optimization when calling the Container on new\n          inputs. Every time the Container is called on a set on input tensors,\n          we compute the output tensors, output masks and output shapes in one pass,\n          then cache them here. When one of these outputs is queried later,\n          we retrieve it from there instead of recomputing it.\n        */\n        // this.outputTensorCache = {};\n        // this.outputShapeCache = {};\n        // Build this.outputLayers:\n        for (const x of this.outputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            this.outputLayers.push(layer);\n            this.outputLayersNodeIndices.push(nodeIndex);\n            this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        // TODO(michaelterry): Add output mask cache code.\n        // Build this.inputLayers:\n        for (const x of this.inputs) {\n            const layer = x.sourceLayer;\n            const nodeIndex = x.nodeIndex;\n            const tensorIndex = x.tensorIndex;\n            /*\n              It's supposed to be an input layer, so only one node\n              and one tensor output.\n            */\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            this.inputLayers.push(layer);\n            this.inputLayersNodeIndices.push(nodeIndex);\n            this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        // Build this.inputNames and this.outputNames.\n        this.inputNames = [];\n        this.outputNames = [];\n        this.feedInputShapes = [];\n        this.feedInputNames = [];\n        this.feedOutputNames = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            // Check that layer is an InputLayer.\n            if (!(layer instanceof InputLayer)) {\n                throw new TypeError('Input layers to a LayersModel must be InputLayer objects. ' +\n                    `Received inputs: ${args.inputs}. ` +\n                    `Input ${i} (0-based) originates ` +\n                    `from layer type ${layer.getClassName()}.`);\n            }\n            this.inputNames.push(layer.name);\n            this.feedInputShapes.push(layer.batchInputShape);\n            this.feedInputNames.push(layer.name);\n        }\n        for (const layer of this.outputLayers) {\n            this.outputNames.push(layer.name);\n        }\n        this.internalInputShapes = this.inputs.map(x => x.shape);\n        this.internalOutputShapes = this.outputs.map(x => x.shape);\n        /*\n          Container_nodes: set of nodes included in the graph (not all nodes\n          included in the layers are relevant to the current graph).\n        */\n        // ids of all nodes relevant to the Container:\n        const nodesDepths = {};\n        // To recover nodes from their ID.\n        const nodeIDToNode = {};\n        const layersDepths = {};\n        // To layers from their ID.\n        const layerIDToLayer = {};\n        const layerIndices = {};\n        const nodesInDecreasingDepth = [];\n        /**\n         * Builds a map of the graph of layers.\n         *\n         * This recursively updates the map `layerIndices`,\n         * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n         *\n         * @param tensor Some tensor in a graph.\n         * @param finishedNodes Set of nodes whose subgraphs have been traversed\n         *         completely. Useful to prevent duplicated work.\n         * @param nodesInProgress Set of nodes that are currently active on the\n         *         recursion stack. Useful to detect cycles.\n         * @param layer Layer from which `tensor` comes from. If not provided,\n         *   will be obtained from tensor.sourceLayer.\n         * @param nodeIndex Node index from which `tensor` comes from.\n         * @param tensorIndex TensorIndex from which `tensor` comes from.\n         *\n         * @exception RuntimeError if a cycle is detected.\n         */\n        const buildMapOfGraph = (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) => {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            const node = layer.inboundNodes[nodeIndex];\n            // Prevent cycles.\n            if (nodesInProgress.indexOf(node) !== -1) {\n                throw new RuntimeError(`The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                    'is part of a cycle.');\n            }\n            // Don't repeat work for shared subgraphs\n            if (finishedNodes.indexOf(node) !== -1) {\n                return;\n            }\n            // Update containerNodes.\n            this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            // Store the traversal order for layer sorting.\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = Object.keys(layerIndices).length;\n            }\n            if (nodesInProgress.indexOf(node) === -1) {\n                nodesInProgress.push(node);\n            }\n            // Propagate to all previous tensors connected to this node.\n            const numInboundLayers = node.inboundLayers.length;\n            for (let i = 0; i < numInboundLayers; i++) {\n                const x = node.inputTensors[i];\n                const layer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const tensorIndex = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        const finishedNodes = [];\n        const nodesInProgress = [];\n        for (const x of this.outputs) {\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (const node of reversedNodesInDecreasingDepth) {\n            nodeIDToNode[node.id] = node;\n            // If the depth is not set, the node has no outbound nodes (depth 0).\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            let depth = nodesDepths[node.id];\n            // Update the depth of the corresponding layer\n            const previousDepth = (layersDepths[node.outboundLayer.id] == null ?\n                0 :\n                layersDepths[node.outboundLayer.id]);\n            /*\n              If we've seen this layer before at a higher depth, we should use that\n              depth instead of the node depth.  This is necessary for shared layers\n              that have inputs at different depth levels in the graph.\n            */\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            // Update the depth of inbound nodes.\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n                const inboundLayer = node.inboundLayers[i];\n                const nodeIndex = node.nodeIndices[i];\n                const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                const previousDepth = (nodesDepths[inboundNode.id] == null ? 0 :\n                    nodesDepths[inboundNode.id]);\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        // Build a dict {depth: list of nodes with this depth}\n        const nodesByDepth = {};\n        for (const nodeID in nodesDepths) {\n            const depth = nodesDepths[nodeID];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        // Build a dict {depth: list of layers with this depth}\n        const layersByDepth = {};\n        for (const layerID in layersDepths) {\n            const depth = layersDepths[layerID];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        // Get sorted list of layer depths.\n        let depthKeys = Object.keys(layersByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Set this.layers and this.layersByDepth.\n        this.layers = [];\n        for (const depth of depthKeys) {\n            const layersForDepth = layersByDepth[depth];\n            // Container.layers needs to have a deterministic order:\n            // here we order them by traversal order.\n            layersForDepth.sort((a, b) => {\n                const aIndex = layerIndices[a.id];\n                const bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (const layer of layersForDepth) {\n                if (layer instanceof Container) {\n                    this.internalContainerRefs.push(layer);\n                }\n                this.layers.push(layer);\n            }\n        }\n        this.layersByDepth = layersByDepth;\n        // Get sorted list of node depths;\n        depthKeys = Object.keys(nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Check that all tensors required are computable.\n        // computable_tensors: all tensors in the graph\n        // that can be computed from the inputs provided.\n        const computableTensors = this.inputs.slice();\n        // To provide a better error msg.\n        const layersWithCompleteInput = [];\n        for (const depth of depthKeys) {\n            for (const node of nodesByDepth[depth]) {\n                const layer = node.outboundLayer;\n                if (layer != null) {\n                    for (const x of node.inputTensors) {\n                        if (computableTensors.indexOf(x) === -1) {\n                            throw new RuntimeError(`Graph disconnected: cannot obtain value for tensor ${x}` +\n                                ` at layer \"${layer.name}\". ` +\n                                'The following previous layers were accessed without ' +\n                                `issue: ${layersWithCompleteInput}`);\n                        }\n                    }\n                    for (const x of node.outputTensors) {\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        // Set this.containerNodes and this.nodesByDepth.\n        this.nodesByDepth = nodesByDepth;\n        // Ensure name unicity, which will be crucial for serialization\n        // (since serialized nodes refer to layers by their name).\n        const allNames = this.layers.map(x => x.name);\n        for (const name of allNames) {\n            const numOccurrences = allNames.filter(x => x === name).length;\n            if (numOccurrences !== 1) {\n                throw new RuntimeError(`The name \"${name}\" is used ${numOccurrences} times ` +\n                    'in the model. All layer names should be unique. Layer names: ' +\n                    JSON.stringify(allNames));\n            }\n        }\n        // Layer parameters.\n        // The new container starts with a single inbound node\n        // for its inputs, and no outbound nodes.\n        // Will be appended to by future calls to apply().\n        this.outboundNodes = [];\n        // Will be appended to below, and by future calls to apply().\n        this.inboundNodes = [];\n        // Create the node linking internal inputs to internal outputs.\n        // (This call has side effects.)\n        // tslint:disable-next-line:no-unused-expression\n        new Node({\n            outboundLayer: this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: this.inputs,\n            outputTensors: this.outputs,\n            inputMasks: this.inputs.map(x => null),\n            outputMasks: this.outputs.map(x => null),\n            inputShapes: this.inputs.map(x => x.shape),\n            outputShapes: this.outputs.map(x => x.shape)\n        });\n        this.built = true;\n        this._refCount = 1; // The ref count of a container always start at 1.\n    }\n    assertNotDisposed() {\n        if (this._refCount === 0) {\n            throw new Error(`Container '${this.name}' is already disposed.`);\n        }\n    }\n    /**\n     * Attempt to dispose a LayersModel's weights.\n     *\n     * This method decrease the reference count of the LayersModel object by 1.\n     *\n     * A LayersModel is reference-counted. Its reference count is incremented by 1\n     * when it is first constructed and when it is used as a Layer of another\n     * LayersModel.\n     *\n     * If the reference count of a LayersModel becomes 0, the `dispose` method of\n     * all its constituent `Layer`s will be called.\n     *\n     * Note: If the reference count is greater than 0 after the decrement, the\n     * `dispose` method of its constituent `Layer`s will *not* be called.\n     *\n     * After a LayersModel is disposed, it cannot be used in calls such as\n     * 'predict`, `evaluate` or `fit` anymore.\n     *\n     * @returns A DisposeResult Object with the following fields:\n     *   - refCountAfterDispose: The reference count of the LayersModel after this\n     *     `dispose()` call.\n     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n     *     during this `dispose()` call.\n     * @throws {Error} If the layer is not built yet, or if the LayersModel has\n     *   already been disposed.\n     */\n    dispose() {\n        this.assertNotDisposed();\n        const result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n        if (--this._refCount === 0) {\n            for (const layer of this.layers) {\n                result.numDisposedVariables += layer.dispose().numDisposedVariables;\n            }\n            // Call dispose on each internally created container layer again to ensure\n            // their refCounts hit zero and their tensors are subsequently deleted.\n            for (const container of this.internalContainerRefs) {\n                result.numDisposedVariables += container.dispose().numDisposedVariables;\n            }\n        }\n        result.refCountAfterDispose = this._refCount;\n        return result;\n    }\n    get trainable() {\n        return this.trainable_;\n    }\n    set trainable(trainable) {\n        this.layers.forEach(layer => {\n            // tslint:disable-next-line:no-any\n            layer._trainableWeights\n                .forEach(w => w.trainable = trainable);\n        });\n        this.trainable_ = trainable;\n    }\n    get trainableWeights() {\n        // Porting Note: This check below is to prevent errors where the\n        //   _trainableWeights inherited from the parent class (Layer) gets\n        //   inadvertently used.\n        if (this._trainableWeights.length > 0) {\n            throw new ValueError('Container instance unexpectedly contains _trainableWeights.' +\n                'The trainable weights of a Container are a union of the ' +\n                'trainable weights of its consituent Layers. Its own ' +\n                '_trainableWeights must remain an empty Array.');\n        }\n        if (!this.trainable) {\n            return [];\n        }\n        let weights = [];\n        for (const layer of this.layers) {\n            weights = weights.concat(layer.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const layer of this.layers) {\n            weights.push(...layer.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const layer of this.layers) {\n                trainableWeights.push(...layer.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    get weights() {\n        return this.trainableWeights.concat(this.nonTrainableWeights);\n    }\n    /**\n     * Loads all layer weights from a JSON object.\n     *\n     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n     *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n     *   to convert them into JSON strings compatible with this method.\n     * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n     *\n     * @param weights A JSON mapping weight names to weight values as nested\n     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n     *   names to `tf.Tensor` objects.\n     * @param strict Require that the provided weights exactly match those\n     *   required by the container.  Default: `true`.  Passing `false` means that\n     *   extra weights and missing weights will be silently ignored.\n     */\n    loadWeights(weights, strict = true) {\n        const nameToWeight = {};\n        let totalWeightsCount = 0;\n        for (const layer of this.layers) {\n            for (const weight of layer.weights) {\n                if (nameToWeight[weight.originalName] != null) {\n                    throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n                }\n                nameToWeight[weight.originalName] = weight;\n                totalWeightsCount++;\n            }\n        }\n        const weightValueTuples = [];\n        for (const name in weights) {\n            // TF 2.2.0 added cell name to the weight name in the format of\n            // layer_name/cell_name/weight_name, we need to remove\n            // the inner cell name.\n            let validatedName = name;\n            if (nameToWeight[name] == null) {\n                const tokens = name.split('/');\n                const shortenNameArray = tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);\n                validatedName = shortenNameArray.join('/');\n            }\n            if (nameToWeight[validatedName] != null) {\n                weightValueTuples.push([nameToWeight[validatedName], weights[name]]);\n            }\n            else if (strict) {\n                throw new ValueError(`Provided weight data has no target variable: ${name}`);\n            }\n            delete nameToWeight[validatedName];\n        }\n        if (strict) {\n            // Check that all weights are set.\n            const unsetNames = [];\n            for (const name in nameToWeight) {\n                unsetNames.push(name);\n            }\n            if (unsetNames.length > 0) {\n                throw new ValueError(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ` +\n                    `${unsetNames}`);\n            }\n        }\n        batchSetValue(weightValueTuples);\n    }\n    /**\n     * Util shared between different serialization methods.\n     * @returns LayersModel config with Keras version information added.\n     */\n    updatedConfig() {\n        const theConfig = this.getConfig();\n        const modelConfig = {};\n        modelConfig['className'] = this.getClassName();\n        modelConfig['config'] = theConfig;\n        modelConfig['kerasVersion'] = `tfjs-layers ${layersVersion}`;\n        // TODO(nielsene): Replace something like K.backend() once\n        // possible.\n        modelConfig['backend'] = 'TensorFlow.js';\n        return modelConfig;\n    }\n    /**\n     * Returns a JSON string containing the network configuration.\n     *\n     * To load a network from a JSON save file, use\n     * models.modelFromJSON(jsonString);\n     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n     * @param returnString Whether the return value should be stringified\n     *    (default: `true`).\n     * @returns a JSON string if `returnString` (default), or a JSON object if\n     *   `!returnString`.\n     */\n    // tslint:disable-next-line:no-any\n    toJSON(unused, returnString = true) {\n        const modelConfig = convertTsToPythonic(this.updatedConfig());\n        return returnString ? JSON.stringify(modelConfig) : modelConfig;\n    }\n    /**\n     * Call the model on new inputs.\n     *\n     * In this case `call` just reapplies all ops in the graph to the new inputs\n     * (e.g. build a new computational graph from the provided inputs).\n     *\n     * @param inputs A tensor or list of tensors.\n     * @param mask A mask or list of masks. A mask can be either a tensor or null\n     *   (no mask).\n     *\n     * @return A tensor if there is a single output, or a list of tensors if there\n     *   are more than one outputs.\n     */\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            const feedDict = new FeedDict();\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n            return execute(this.outputs, feedDict, kwargs);\n        });\n    }\n    /**\n     * Computes an output mask tensor.\n     *\n     * @param inputs Tensor or list of tensors.\n     * @param mask Tensor or list of tensors.\n     *\n     * @return null or a tensor (or list of tensors, one per output tensor of the\n     * layer).\n     */\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            inputs = generic_utils.toList(inputs);\n            let masks;\n            if (mask == null) {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            else {\n                masks = generic_utils.toList(mask);\n            }\n            // TODO(michaelterry): Add support for mask caching.\n            return this.runInternalGraph(inputs, masks)[1];\n        });\n    }\n    /**\n     * Computes the output shape of the layer.\n     *\n     * Assumes that the layer will be built to match that input shape provided.\n     *\n     * @param inputShape A shape (tuple of integers) or a list of shape tuples\n     *   (one per output tensor of the layer). Shape tuples can include null for\n     *   free dimensions, instead of an integer.\n     */\n    computeOutputShape(inputShape) {\n        const inputShapes = types_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new ValueError(`Invalid inputShape argument ${inputShape}: ` +\n                `model has ${this.inputLayers.length} tensor inputs.`);\n        }\n        // TODO(michaelterry): Add caching\n        const layersToOutputShapes = {};\n        for (let i = 0; i < inputShapes.length; i++) {\n            const layer = this.inputLayers[i];\n            const inputShape = inputShapes[i];\n            // It's an input layer: computeOutputShape is identity,\n            // and there is only one node and one tensor output.\n            const shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape;\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        // Iterate over nodes, by depth level.\n        if (depthKeys.length > 1) {\n            for (const depth of depthKeys) {\n                const nodes = this.nodesByDepth[depth];\n                for (const node of nodes) {\n                    // This is always a single layer, never a list.\n                    const layer = node.outboundLayer;\n                    if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n                        // We've already covered the input layers a few lines above.\n                        continue;\n                    }\n                    // Potentially redundant list, same size of node.inputTensors.\n                    const inputShapes = [];\n                    for (let j = 0; j < node.inboundLayers.length; j++) {\n                        const inboundLayer = node.inboundLayers[j];\n                        const nodeIndex = node.nodeIndices[j];\n                        const tensorIndex = node.tensorIndices[j];\n                        const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n                        const inputShape = layersToOutputShapes[shapeKey];\n                        inputShapes.push(inputShape);\n                    }\n                    const outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes));\n                    const outputShapes = types_utils.normalizeShapeList(outputShape);\n                    const nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (let j = 0; j < outputShapes.length; j++) {\n                        const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n                        layersToOutputShapes[shapeKey] = outputShapes[j];\n                    }\n                }\n            }\n        }\n        // Read final output shapes from layersToOutputShapes.\n        const outputShapes = [];\n        const outputShapeKeys = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (let i = 0; i < outputShapeKeys.length; i++) {\n            const key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        // TODO(michaelterry): Update cache\n        return generic_utils.singletonOrArray(outputShapes);\n    }\n    /**\n     * Computes output tensors for new inputs.\n     *\n     * Note:\n     *   - Expects `inputs` to be a list (potentially with 1 element).\n     *\n     * @param inputs List of tensors\n     * @param masks List of masks (tensors or null).\n     * @return Three lists: outputTensors, outputMasks, outputShapes\n     */\n    runInternalGraph(inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        // Dictionary mapping reference tensors to tuples\n        // (computed tensor, compute mask)\n        // we assume a 1:1 mapping from tensor to mask\n        // TODO: raise exception when a `.computeMask()` call\n        // does not return a list the same size as `call`\n        const tensorMap = {};\n        for (let i = 0; i < this.inputs.length; ++i) {\n            const x = this.inputs[i];\n            const y = inputs[i];\n            const mask = masks[i];\n            tensorMap[x.id] = [y, mask];\n        }\n        const depthKeys = Object.keys(this.nodesByDepth)\n            .map(x => parseInt(x, 10))\n            .sort(generic_utils.reverseNumberCompare);\n        for (const depth of depthKeys) {\n            const nodes = this.nodesByDepth[depth];\n            for (const node of nodes) {\n                // This is always a single layer, never a list.\n                const layer = node.outboundLayer;\n                const referenceInputTensors = node.inputTensors;\n                const referenceOutputTensors = node.outputTensors;\n                // If all previous input tensors are available in tensorMap,\n                // then call node.inboundLayer on them.\n                // List of tuples [input, mask]:\n                const computedData = new Array();\n                for (const x of referenceInputTensors) {\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    // TODO(michaelterry): Add K.name_scope here, if we need it.\n                    let kwargs = {};\n                    let computedTensors;\n                    let computedMasks;\n                    let outputTensors;\n                    let outputMasks;\n                    // call layer\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        const [computedTensor, computedMask] = computedData[0];\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    }\n                    else {\n                        computedTensors = computedData.map(x => x[0]);\n                        computedMasks = computedData.map(x => x[1]);\n                        if (kwargs['mask'] == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors =\n                            generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new NotImplementedError('LayersModel invocation with concrete Tensor value(s) in the ' +\n                            'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    // TODO(michaelterry): Add model updates and losses\n                    // Update tensor map.\n                    for (let i = 0; i < referenceOutputTensors.length; ++i) {\n                        const x = referenceOutputTensors[i];\n                        const y = outputTensors[i];\n                        const mask = outputMasks[i];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        const outputTensors = [];\n        const outputMasks = [];\n        const outputShapes = [];\n        for (const x of this.outputs) {\n            generic_utils.assert(x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n            const [tensor, mask] = tensorMap[x.id];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        // TODO(michaelterry): Add support for caches.\n        return [outputTensors, outputMasks, outputShapes];\n    }\n    /**\n     * Builds a map of internal node keys to node ordering.\n     * Used in serializaion a node orderings may change as unused nodes are\n     * dropped. Porting Note:  This helper method was pulled out of getConfig to\n     * improve readability.\n     * @param layers An array of Layers in the model.\n     * @returns Map of Node Keys to index order within the layer.\n     */\n    buildNodeConversionMap(layers) {\n        const nodeConversionMap = {};\n        let keptNodes;\n        for (const layer of this.layers) {\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (this.containerNodes.has(nodeKey)) {\n                    // i.e. we mark it to be saved\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    }\n    /**\n     * Retrieves a layer based on either its name (unique) or index.\n     *\n     * Indices are based on order of horizontal graph traversal (bottom-up).\n     *\n     * If both `name` and `index` are specified, `index` takes precedence.\n     *\n     * @param name Name of layer.\n     * @param index Index of layer.\n     * @returns A Layer instance.\n     * @throws ValueError: In case of invalid layer name or index.\n     *\n     * @doc {\n     *    heading: 'Layers',\n     *    subheading: 'Classes',\n     *    namespace: 'layers',\n     *    subclasses: ['LayersModel']\n     * }\n     */\n    getLayer(name, index) {\n        if (index != null) {\n            if (this.layers.length <= index) {\n                throw new ValueError(`Was asked to retrieve layer at index ${index}, but model only ` +\n                    `has ${this.layers.length} layer(s).`);\n            }\n            else {\n                return this.layers[index];\n            }\n        }\n        else {\n            if (name == null) {\n                throw new ValueError('Provide either a layer name or layer index');\n            }\n        }\n        for (const layer of this.layers) {\n            if (layer.name === name) {\n                return layer;\n            }\n        }\n        throw new ValueError(`No such layer: ${name}`);\n    }\n    /**\n     * Retrieves the Container's current loss values.\n     *\n     * Used for regularizers during training.\n     */\n    calculateLosses() {\n        // Porting Node: This is an augmentation to Container.loss in PyKeras.\n        //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n        //   Tensor (specifically Scalar) values are returned. This is due to the\n        //   imperative backend.\n        return tidy(() => {\n            const losses = [];\n            for (const layer of this.layers) {\n                for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    const nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (this.containerNodes.has(nodeKey)) {\n                        losses.push(...layer.calculateLosses());\n                    }\n                }\n            }\n            // TODO(cais): Add any unconditional model-level losses?\n            return losses;\n        });\n    }\n    getConfig() {\n        const config = { name: this.name };\n        // Build a map from layer unique name (self._node_key)\n        // to the index of the nodes that are saved in the config.\n        // Only nodes in container_nodes are saved.\n        const nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        // Serialize and save the layers in layerConfigs\n        const layerConfigs = [];\n        for (const layer of this.layers) {\n            const layerClassName = layer.getClassName();\n            const layerConfig = layer.getConfig();\n            const filteredInboundNodes = [];\n            for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                const node = layer.inboundNodes[originalNodeIndex];\n                const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                let kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    // The node is relevant to the model:\n                    // add to filteredInboundNodes.\n                    if (node.callArgs) {\n                        try {\n                            JSON.stringify(node.callArgs);\n                            kwargs = node.callArgs;\n                        }\n                        catch (err) {\n                            console.warn(`Layer ${layer.name} was passed ` +\n                                `non-serializable keyword arguments: ` +\n                                `${node.callArgs}. They will not be included ` +\n                                `in the serialized model (and thus will be ` +\n                                `missing at deserialization time).`);\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        const nodeData = [];\n                        for (let i = 0; i < node.inboundLayers.length; i++) {\n                            const inboundLayer = node.inboundLayers[i];\n                            const nodeIndex = node.nodeIndices[i];\n                            const tensorIndex = node.tensorIndices[i];\n                            const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n                            let newNodeIndex = nodeConversionMap[nodeKey];\n                            if (newNodeIndex == null) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            const dict = {};\n            dict['name'] = layer.name;\n            dict['className'] = layerClassName;\n            dict['config'] = layerConfig;\n            dict['inboundNodes'] = filteredInboundNodes;\n            layerConfigs.push(dict);\n        }\n        config['layers'] = layerConfigs;\n        // Gather info about inputs and outputs\n        const modelInputs = [];\n        for (let i = 0; i < this.inputLayers.length; i++) {\n            const layer = this.inputLayers[i];\n            const nodeIndex = this.inputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        const modelOutputs = [];\n        for (let i = 0; i < this.outputLayers.length; i++) {\n            const layer = this.outputLayers[i];\n            const nodeIndex = this.outputLayersNodeIndices[i];\n            const nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            let newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            const tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    }\n    /**\n     * Instantiates a LayersModel from its config (output of `get_config()`).\n     * @param cls the class to create\n     * @param config LayersModel config dictionary.\n     * @param customObjects An optional dictionary of custom objects.\n     * @param fastWeightInit Optional flag to use fast weight initialization\n     *   during deserialization. This is applicable to cases in which\n     *   the initialization will be immediately overwritten by loaded weight\n     *   values. Default: `false`.\n     * @returns A LayersModel instance.\n     * @throws ValueError: In case of improperly formatted config dict.\n     */\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n        // Layer instances created during\n        // the graph reconstruction process\n        const createdLayers = {};\n        // Dictionary mapping layer instances to\n        // node data that specifies a layer call.\n        // It acts as a queue that maintains any unprocessed\n        // layer call until it becomes possible to process it\n        // (i.e. until the input tensors to the call all exist).\n        const unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            }\n            else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            const inputTensors = [];\n            let kwargs;\n            for (const inputData of nodeData) {\n                const inboundLayerName = inputData[0];\n                const inboundNodeIndex = inputData[1];\n                const inboundTensorIndex = inputData[2];\n                kwargs = inputData[3] == null ?\n                    {} :\n                    inputData[3];\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            // Call layer on its inputs, thus creating the node\n            // and building the layer if needed.\n            // Note: This has Eager vs Graph Implications.\n            if (inputTensors.length > 0) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs); // was ** kwargs\n            }\n        }\n        /**\n         * Deserialize a layer, then call it on appropriate inputs.\n         * @param layerData: layer config dict.\n         * @throws ValueError: In case of improperly formatted `layer_data`\n         * dict.\n         */\n        function processLayer(layerData) {\n            const layerName = layerData['name'];\n            // Instantiate layer.\n            const layer = deserializeLayer(layerData, config['customObjects'] != null ?\n                config['customObjects'] :\n                {});\n            layer.setFastWeightInitDuringBuild(fastWeightInit);\n            createdLayers[layerName] = layer;\n            // Gather layer inputs.\n            const inboundNodesData = layerData['inboundNodes'];\n            inboundNodesData.forEach(nodeData => {\n                if (!(nodeData instanceof Array)) {\n                    throw new ValueError(`Corrupted configuration, expected array for nodeData: ${nodeData}`);\n                }\n                // We don't process nodes (i.e. make layer calls)\n                // on the fly because the inbound node may not yet exist,\n                // in case of layer shared at different topological depths\n                // (e.g.a model such as A(B(A(B(x)))))\n                addUnprocessedNode(layer, nodeData);\n            });\n        }\n        // First, we create all layers and enqueue nodes to be processed.\n        const name = config['name'];\n        const layersFromConfig = config['layers'];\n        for (const layerData of layersFromConfig) {\n            processLayer(layerData);\n        }\n        // Then we process nodes in order of layer depth.\n        // Nodes that cannot yet be processed(if the inbound node\n        // does not yet exist) are re - enqueued, and the process\n        // is repeated until all nodes are processed.\n        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n            for (const layerData of layersFromConfig) {\n                const layer = createdLayers[layerData['name']];\n                if (layer.name in unprocessedNodes) {\n                    const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n                    delete unprocessedNodes[layer.name];\n                    for (const nodeData of currentUnprocessedNodesForLayer) {\n                        processNode(layer, nodeData);\n                    }\n                }\n            }\n        }\n        const inputTensors = [];\n        const outputTensors = [];\n        const inputLayersFromConfig = config['inputLayers'];\n        for (const layerData of inputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        const outputLayersFromConfig = config['outputLayers'];\n        for (const layerData of outputLayersFromConfig) {\n            const layerName = layerData[0];\n            const nodeIndex = layerData[1];\n            const tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            const layer = createdLayers[layerName];\n            const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name });\n    }\n    /**\n     * Determine whether the container is stateful.\n     *\n     * Porting Note: this is the equivalent of the stateful @property of\n     *   the Container class in PyKeras.\n     */\n    get stateful() {\n        // Porting Note: This check is to prevent inadvertent setting of the\n        //   _stateful property of the Container instance.\n        if (this._stateful) {\n            throw new ValueError('Container instance unexpectedly has _stateful = true. The ' +\n                'statefulness of a Container is determined by the Layers it ' +\n                'contains. Its _stateful property must remain the default false.');\n        }\n        for (const layer of this.layers) {\n            if (layer.stateful) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Reset the state of all stateful constituent layers (if any).\n     *\n     * Examples of stateful layers include RNN layers whose `stateful` property\n     * is set as `true`.\n     */\n    resetStates() {\n        tidy(() => {\n            this.layers.forEach(layer => {\n                // tslint:disable:no-any\n                if (layer.stateful) {\n                    layer.resetStates();\n                }\n                // tslint:enable:no-any\n            });\n        });\n    }\n}\n//# sourceMappingURL=container.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose, mul, tensor1d, tidy } from '@tensorflow/tfjs-core';\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n    const numOutputs = outputNames.length;\n    if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n        return outputNames.map(name => null);\n    }\n    if (numOutputs === 1) {\n        if (Array.isArray(xWeight) && xWeight.length === 1) {\n            return xWeight;\n        }\n        else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n            return [xWeight[outputNames[0]]];\n        }\n        else {\n            return [xWeight];\n        }\n    }\n    if (Array.isArray(xWeight)) {\n        if (xWeight.length !== numOutputs) {\n            throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` +\n                `element(s), but the model has ${numOutputs} outputs. ` +\n                `Make sure a set of weights is provided for each model output.`);\n        }\n        return xWeight;\n    }\n    else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n        typeof xWeight[Object.keys(xWeight)[0]] ===\n            'object') {\n        const output = [];\n        outputNames.forEach(outputName => {\n            if (outputName in xWeight) {\n                output.push(xWeight[outputName]);\n            }\n            else {\n                output.push(null);\n            }\n        });\n        return output;\n    }\n    else {\n        throw new Error(`The model has multiple (${numOutputs}) outputs, ` +\n            `so ${weightType} must be either an array with ` +\n            `${numOutputs} elements or an object with ${outputNames} keys. ` +\n            `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n    }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n    if (sampleWeight != null || sampleWeightMode != null) {\n        // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n        // string.\n        throw new Error('Support sampleWeight is not implemented yet');\n    }\n    if (classWeight != null) {\n        // Apply class weights per sample.\n        const yClasses = tidy(() => {\n            if (y.shape.length === 1) {\n                // Assume class indices.\n                return y.clone();\n            }\n            else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                    // Assume one-hot encoding of classes.\n                    const axis = 1;\n                    return y.argMax(axis);\n                }\n                else if (y.shape[1] === 1) {\n                    // Class index.\n                    return y.reshape([y.shape[0]]);\n                }\n                else {\n                    throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n                        `during handling of class weights. The size is expected to be ` +\n                        `>= 1.`);\n                }\n            }\n            else {\n                throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` +\n                    `handling of class weights. The rank is expected to be 1 or 2.`);\n            }\n        });\n        const yClassIndices = Array.from(await yClasses.data());\n        dispose(yClasses);\n        const classSampleWeight = [];\n        yClassIndices.forEach(classIndex => {\n            if (classWeight[classIndex] == null) {\n                throw new Error(`classWeight must contain all classes in the training data. ` +\n                    `The class ${classIndex} exists in the data but not in ` +\n                    `classWeight`);\n            }\n            else {\n                classSampleWeight.push(classWeight[classIndex]);\n            }\n        });\n        return tensor1d(classSampleWeight, 'float32');\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses, sampleWeights) {\n    return mul(losses, sampleWeights);\n}\n//# sourceMappingURL=training_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { singletonOrArray, toList } from '../utils/generic_utils';\nimport { standardizeClassWeights, standardizeWeights } from './training_utils';\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, iteratorOut) {\n    let xs;\n    let ys;\n    const iteratorOutObj = iteratorOut;\n    xs = iteratorOutObj['xs'];\n    ys = iteratorOutObj['ys'];\n    tfc.util.assert(xs != null && ys != null, () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n        'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n        'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n        'string to Tensor.  The provided Dataset instead generates ' +\n        `${iteratorOut}`);\n    const flattenedXs = flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n    const flattenedYs = flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n    const batchSize = flattenedXs[0].shape[0];\n    tfc.util.assert(flattenedXs.length === model.inputs.length, () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n        `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n        `${JSON.stringify(model.inputNames)})`);\n    tfc.util.assert(flattenedYs.length === model.outputs.length, () => `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n        `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n        `${JSON.stringify(model.outputNames)})`);\n    for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n        tfc.util.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n        tfc.util.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    return { xs: flattenedXs, ys: flattenedYs };\n}\nfunction flattenTensorOrArrayOrMap(inputOrOutput, names, values) {\n    if (values instanceof tfc.Tensor) {\n        return [values];\n    }\n    else if (Array.isArray(values)) {\n        tfc.util.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);\n        return values;\n    }\n    else {\n        const result = [];\n        // Check that all the required keys are available.\n        for (const name of names) {\n            if (values[name] == null) {\n                throw new ValueError(`The feature data generated by the dataset lacks the required ` +\n                    `${inputOrOutput} key '${name}'.`);\n            }\n            result.push(values[name]);\n        }\n        return result;\n    }\n}\nfunction standardizeTensorValidationData(data) {\n    if (data.length === 3) {\n        throw new NotImplementedError('Validation with sample weights is not implemented yet.');\n    }\n    return { xs: data[0], ys: data[1] };\n}\nexport async function fitDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n    tfc.util.assert(model.optimizer != null, () => 'You must compile a model before training/testing. Use ' +\n        'LayersModel.compile(modelCompileConfig).');\n    tfc.util.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, ` +\n        `but it is not provided in this call.`);\n    tfc.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive ` +\n        `integer, but got ${args.epochs}`);\n    tfc.util.assert(!hasBatchesPerEpoch ||\n        (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)), () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n        `positive integer if specified, but got ${args.batchesPerEpoch}`);\n    tfc.util.assert(\n    // tslint:disable-next-line:no-any\n    args['validationSplit'] == null, () => '`validationSplit` is not supported by `fitDataset()`. ' +\n        'Use validationData instead.');\n    if (model.isTraining) {\n        throw new Error('Cannot start training because another fit() call is ongoing.');\n    }\n    model.isTraining = true;\n    try {\n        const doValidation = args.validationData != null;\n        let valXs;\n        let valYs;\n        if (doValidation) {\n            if (isDatasetObject(args.validationData)) {\n                tfc.util.assert(args.validationBatches == null ||\n                    (args.validationBatches > 0 &&\n                        Number.isInteger(args.validationBatches)), () => `For fitDataset() with dataset-based validation, ` +\n                    `config.validationBatches is expected not to be provided, ` +\n                    `or to be a positive integer, ` +\n                    `but got ${args.validationBatches}`);\n            }\n            else {\n                const validationData = standardizeTensorValidationData(args.validationData);\n                valXs = validationData.xs;\n                valYs = validationData.ys;\n            }\n        }\n        const trainFunction = model.makeTrainFunction();\n        const outLabels = model.getDedupedMetricsNames();\n        let callbackMetrics;\n        if (doValidation) {\n            callbackMetrics =\n                outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n        }\n        else {\n            callbackMetrics = outLabels.slice();\n        }\n        const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n        const verbose = args.verbose == null ? 1 : args.verbose;\n        const { callbackList, history } = configureCallbacks(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null, // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n        callbackList.setModel(model);\n        model.history = history;\n        await callbackList.onTrainBegin();\n        model.stopTraining_ = false;\n        let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n        let dataIterator = await dataset.iterator();\n        while (epoch < args.epochs) {\n            const epochLogs = {};\n            await callbackList.onEpochBegin(epoch);\n            let stepsDone = 0;\n            let batchIndex = 0;\n            if (!hasBatchesPerEpoch) {\n                dataIterator = await dataset.iterator();\n            }\n            while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n                const iteratorOut = await dataIterator.next();\n                // If `batchesPerEpoch` is specified, the dataset should not be\n                // exhausted until all epoches are done.\n                if (hasBatchesPerEpoch && iteratorOut.done) {\n                    console.warn('You provided `batchesPerEpoch` as ' +\n                        `${args.batchesPerEpoch}, ` +\n                        'but your dataset iterator ran out of data after ' +\n                        `${stepsDone} batches; ` +\n                        'interrupting training. Make sure that your ' +\n                        'dataset can generate at least `batchesPerEpoch * epochs` ' +\n                        'batches (in this case, ' +\n                        `${args.batchesPerEpoch * args.epochs} batches). ` +\n                        'You may need to use the repeat() function when building ' +\n                        'your dataset.');\n                    break;\n                }\n                if (iteratorOut.value != null) {\n                    const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                    const batchLogs = {};\n                    batchLogs['batch'] = batchIndex;\n                    batchLogs['size'] = xs[0].shape[0];\n                    await callbackList.onBatchBegin(batchIndex, batchLogs);\n                    const sampleWeights = [];\n                    if (args.classWeight != null) {\n                        const standardClassWeights = standardizeClassWeights(args.classWeight, model.outputNames);\n                        for (let i = 0; i < standardClassWeights.length; ++i) {\n                            sampleWeights.push(await standardizeWeights(ys[i], null, standardClassWeights[i]));\n                        }\n                    }\n                    // Train on batch.\n                    const ins = xs.concat(ys).concat(sampleWeights);\n                    const outs = trainFunction(ins);\n                    tfc.dispose(ins);\n                    for (let i = 0; i < outLabels.length; ++i) {\n                        const label = outLabels[i];\n                        const out = outs[i];\n                        batchLogs[label] = out;\n                        tfc.keep(out);\n                    }\n                    await callbackList.onBatchEnd(batchIndex, batchLogs);\n                    disposeTensorsInLogs(batchLogs);\n                    batchIndex++;\n                    stepsDone++;\n                }\n                if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                    iteratorOut.done) {\n                    // Epoch finished. Perform validation.\n                    if (doValidation) {\n                        let valOuts;\n                        if (isDatasetObject(args.validationData)) {\n                            valOuts = toList(await model.evaluateDataset(args.validationData, { batches: args.validationBatches }));\n                        }\n                        else {\n                            valOuts = toList(model.evaluate(valXs, valYs, {\n                                batchSize: args.validationBatchSize == null ?\n                                    DEFAULT_VALIDATION_BATCH_SIZE :\n                                    args.validationBatchSize,\n                                verbose: 0\n                            }));\n                        }\n                        for (let i = 0; i < model.metricsNames.length; ++i) {\n                            epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n                        }\n                    }\n                    // Call `break` to exit one epoch lopp after validation is done. If\n                    // config.batchesPerEpoch is specified, an epoch while loop will\n                    // stop when `stepsDone >= config.batchesPerEpoch`. When\n                    // config.batchesPerEpoch is not provided, the following `break` is\n                    // required to exit the while lopp after dataset is exhausted.\n                    break;\n                }\n                if (model.stopTraining_) {\n                    break;\n                }\n            }\n            await callbackList.onEpochEnd(epoch, epochLogs);\n            epoch++;\n            if (model.stopTraining_) {\n                break;\n            }\n        }\n        await callbackList.onTrainEnd();\n        await model.history.syncData();\n        return model.history;\n    }\n    finally {\n        model.isTraining = false;\n    }\n}\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch(dataset, args) {\n    // Attempt to determine # of batches in an epoch.\n    let stepsPerEpoch = null;\n    if (args.batchesPerEpoch != null) {\n        stepsPerEpoch = args.batchesPerEpoch;\n    }\n    else if (Number.isFinite(dataset.size)) {\n        stepsPerEpoch = dataset.size;\n    }\n    return stepsPerEpoch;\n}\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject(dataset) {\n    return (typeof dataset.iterator === 'function');\n}\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject(iterator) {\n    return (typeof iterator.next === 'function');\n}\nexport async function evaluateDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    args = args || {};\n    const hasBatches = args.batches != null;\n    const f = model.testFunction;\n    let outs = [];\n    if (args.verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n    }\n    tfc.util.assert(!hasBatches || (args.batches > 0 && Number.isInteger(args.batches)), () => 'Test loop expects `batches` to be a positive integer, but ' +\n        `received ${JSON.stringify(args.batches)}`);\n    const dataIterator = isLazyIteratorObject(dataset) ?\n        dataset :\n        await dataset.iterator();\n    // Keeps track of number of examples used in this evaluation.\n    let numExamples = 0;\n    let batch = 0;\n    while (hasBatches ? batch < args.batches : true) {\n        const iteratorOut = await dataIterator.next();\n        outs = tfc.tidy(() => {\n            if (iteratorOut.value) {\n                // TODO(cais): Once real dataset is available, use\n                //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n                const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                const xsAndYs = xs.concat(ys);\n                const batchOuts = tfc.tidy(() => f(xsAndYs));\n                tfc.dispose(xsAndYs);\n                if (batch === 0) {\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        outs.push(scalar(0));\n                    }\n                }\n                const batchSize = xsAndYs[0].shape[0];\n                for (let i = 0; i < batchOuts.length; ++i) {\n                    const batchOut = batchOuts[i];\n                    const oldScalar = outs[i];\n                    outs[i] =\n                        tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n                    if (batch > 0) {\n                        tfc.dispose(oldScalar);\n                    }\n                }\n                tfc.dispose(batchOuts);\n                numExamples += batchSize;\n                ++batch;\n            }\n            return outs;\n        });\n        if (iteratorOut.done) {\n            if (hasBatches) {\n                console.warn('Your dataset iterator ran out of data during evaluateDataset(). ' +\n                    'Interrupting evalution. Make sure that your ' +\n                    'dataset can generate at least `batches` ' +\n                    `batches (in this case, ${args.batches} batches). ` +\n                    'You may need to use the repeat() function when building ' +\n                    'your dataset.');\n            }\n            break;\n        }\n    }\n    for (let i = 0; i < outs.length; ++i) {\n        const oldScalar = outs[i];\n        outs[i] = tfc.div(outs[i], numExamples);\n        tfc.dispose(oldScalar);\n    }\n    return singletonOrArray(outs);\n}\n//# sourceMappingURL=training_dataset.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport { expandDims, gather, sliceAlongFirstAxis } from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { range } from '../utils/math_utils';\nexport function checkBatchSize(batchSize) {\n    tfc.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n    }\n    else { // Tensor.\n        return sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(arrays, indices) {\n    return tfc.tidy(() => {\n        if (arrays == null) {\n            return null;\n        }\n        else if (Array.isArray(arrays)) {\n            return arrays.map(array => sliceArraysByIndices(array, indices));\n        }\n        else {\n            // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n            //   tensor1d() calls.\n            return gather(arrays, indices.dtype === 'int32' ? indices : indices.toInt());\n        }\n    });\n}\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(size, batchSize) {\n    const output = [];\n    let batchStart = 0;\n    let batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n    if (batchSize == null) {\n        batchSize = 32;\n    }\n    if (epochs == null) {\n        epochs = 1;\n    }\n    if (shuffle == null) {\n        shuffle = true;\n    }\n    if (initialEpoch == null) {\n        initialEpoch = 0;\n    }\n    // TODO(cais): Change const to let below when implementing validation.\n    let doValidation = false;\n    if (valF != null && valIns != null) {\n        doValidation = true;\n        // TODO(cais): verbose message.\n    }\n    if (validationSteps != null) {\n        doValidation = true;\n        if (stepsPerEpoch == null) {\n            throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' +\n                'i.e., `stepsPerEpoch` must be set.');\n        }\n    }\n    const numTrainSamples = model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n    let indexArray;\n    if (numTrainSamples != null) {\n        indexArray = range(0, numTrainSamples);\n    }\n    if (verbose == null) {\n        verbose = 1;\n    }\n    const { callbackList, history } = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n    // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n    for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n        await callbackList.onEpochBegin(epoch);\n        const epochLogs = {};\n        if (stepsPerEpoch != null) {\n            throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n        }\n        else {\n            if (shuffle === 'batch') {\n                throw new NotImplementedError('batch shuffling is not implemneted yet');\n            }\n            else if (shuffle) {\n                util.shuffle(indexArray);\n            }\n            // Convert the potentially shuffled indices to Tensor1D, to avoid the\n            // cost of repeated creation of Array1Ds later on.\n            const epochIndexArray1D = tensor1d(indexArray);\n            const batches = makeBatches(numTrainSamples, batchSize);\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchLogs = {};\n                await callbackList.onBatchBegin(batchIndex, batchLogs);\n                tfc.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n                    batchLogs['batch'] = batchIndex;\n                    batchLogs['size'] = batchEnd - batchStart;\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = sliceArraysByIndices(ins, batchIds);\n                    const outs = f(insBatch);\n                    for (let i = 0; i < outLabels.length; ++i) {\n                        const label = outLabels[i];\n                        const out = outs[i];\n                        batchLogs[label] = out;\n                        tfc.keep(out);\n                        // TODO(cais): Use scope() to avoid ownership.\n                    }\n                    if (batchIndex === batches.length - 1) { // Last batch.\n                        if (doValidation) {\n                            const valOuts = model.testLoop(valF, valIns, batchSize);\n                            // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                            for (let i = 0; i < outLabels.length; ++i) {\n                                const label = outLabels[i];\n                                const out = valOuts[i];\n                                tfc.keep(out);\n                                // TODO(cais): Use scope() to avoid ownership.\n                                epochLogs['val_' + label] = out;\n                            }\n                        }\n                    }\n                });\n                await callbackList.onBatchEnd(batchIndex, batchLogs);\n                disposeTensorsInLogs(batchLogs);\n                if (model.stopTraining_) {\n                    break;\n                }\n                // TODO(cais): return outs as list of Tensor.\n            }\n            epochIndexArray1D.dispose();\n        }\n        // TODO(cais): Run validation at the end of the epoch.\n        await callbackList.onEpochEnd(epoch, epochLogs);\n        if (model.stopTraining_) {\n            break;\n        }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n}\nexport async function fitTensors(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, x, y, args = {}) {\n    if (model.isTraining) {\n        throw new Error('Cannot start training because another fit() call is ongoing.');\n    }\n    model.isTraining = true;\n    let inputs;\n    let targets;\n    let inputValX;\n    let inputValY;\n    let valX;\n    let valY;\n    let sampleWeights;\n    try {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        // Validate user data.\n        // TODO(cais): Support sampleWeight.\n        const checkBatchAxis = false;\n        const standardizedOuts = await model.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n        inputs = standardizedOuts[0];\n        targets = standardizedOuts[1];\n        sampleWeights = standardizedOuts[2];\n        // Prepare validation data.\n        let doValidation = false;\n        let valIns;\n        if (args.validationData != null && args.validationData.length > 0) {\n            doValidation = true;\n            if (args.validationData.length === 2) {\n                // config.validationData consists of valX and valY.\n                inputValX = args.validationData[0];\n                inputValY = args.validationData[1];\n            }\n            else if (args.validationData.length === 3) {\n                throw new NotImplementedError('validationData including sample weights is not supported yet.');\n            }\n            else {\n                throw new ValueError(`When passing validation data, it must contain 2 (valX, valY) ` +\n                    `or 3 (valX, valY, valSampleWeight) items; ` +\n                    `${args.validationData} is invalid.`);\n            }\n            const checkBatchAxis = true;\n            const valStandardized = await model.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */ null, /** Unused class weights. */ checkBatchAxis, batchSize);\n            valX = valStandardized[0];\n            valY = valStandardized[1];\n            valIns = valX.concat(valY);\n            // TODO(cais): Add useLearningPhase data properly.\n        }\n        else if (args.validationSplit != null && args.validationSplit > 0 &&\n            args.validationSplit < 1) {\n            doValidation = true;\n            // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n            const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n            const originalBatchSize = inputs[0].shape[0];\n            valX = sliceArrays(inputs, splitAt, originalBatchSize);\n            inputs = sliceArrays(inputs, 0, splitAt);\n            valY = sliceArrays(targets, splitAt, originalBatchSize);\n            targets = sliceArrays(targets, 0, splitAt);\n            // TODO(cais): Once sampleWeights becomes available, slice it to get\n            //   valSampleWeights.\n            valIns = valX.concat(valY);\n            // TODO(cais): Add useLearningPhase data properly.\n        }\n        else if (args.validationSteps != null) {\n            doValidation = true;\n            // TODO(cais): Add useLearningPhase.\n        }\n        const ins = inputs.concat(targets).concat(sampleWeights);\n        model.checkTrainableWeightsConsistency();\n        // TODO(cais): Handle use_learning_phase and learning_phase?\n        // Porting Note: Here we see a key deviation of tfjs-layers from\n        // Keras.\n        //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n        //  we do not construct symbolic computation graphs to embody the\n        //  training process. Instead, we define a function that performs the\n        //  training action. In PyKeras, the data (inputs and targets) are fed\n        //  through graph placeholders. In tfjs-layers, the data are fed as\n        //  function arguments. Since the function are defined below in the\n        //  scope, we don't have equivalents of PyKeras's\n        //  `_make_train_funciton`.\n        const trainFunction = model.makeTrainFunction();\n        const outLabels = model.getDedupedMetricsNames();\n        let valFunction;\n        let callbackMetrics;\n        if (doValidation) {\n            model.makeTestFunction();\n            valFunction = model.testFunction;\n            callbackMetrics =\n                outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n        }\n        else {\n            valFunction = null;\n            valIns = [];\n            callbackMetrics = outLabels.slice();\n        }\n        const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n        const out = await fitLoop(model, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n        return out;\n    }\n    finally {\n        model.isTraining = false;\n        // Memory clean up.\n        disposeNewTensors(inputs, x);\n        disposeNewTensors(targets, y);\n        disposeNewTensors(valX, inputValX);\n        disposeNewTensors(valY, inputValY);\n        if (sampleWeights != null) {\n            tfc.dispose(sampleWeights);\n        }\n    }\n    // TODO(cais): Add value to outLabels.\n}\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors) {\n    const outs = [];\n    if (tensors instanceof Tensor) {\n        tensors = [tensors];\n    }\n    // Make Tensors at least 2D.\n    for (let i = 0; i < tensors.length; ++i) {\n        const tensor = tensors[i];\n        if (tensor.rank === 1) {\n            outs.push(expandDims(tensor, 1));\n        }\n        else if (tensor.rank === 0) {\n            throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' +\n                '(scalar).');\n        }\n        else {\n            outs.push(tensor);\n        }\n    }\n    return outs;\n}\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(tensors, refTensors) {\n    if (tensors == null) {\n        return;\n    }\n    const oldTensorIds = [];\n    if (refTensors instanceof Tensor) {\n        oldTensorIds.push(refTensors.id);\n    }\n    else if (Array.isArray(refTensors)) {\n        refTensors.forEach(t => oldTensorIds.push(t.id));\n    }\n    else if (refTensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in refTensors) {\n            const oldTensor = refTensors[name];\n            oldTensorIds.push(oldTensor.id);\n        }\n    }\n    const tensorsToDispose = [];\n    if (tensors instanceof Tensor) {\n        if (oldTensorIds.indexOf(tensors.id) === -1) {\n            tensorsToDispose.push(tensors);\n        }\n    }\n    else if (Array.isArray(tensors)) {\n        tensors.forEach(t => {\n            if (oldTensorIds.indexOf(t.id) === -1) {\n                tensorsToDispose.push(t);\n            }\n        });\n    }\n    else if (tensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in tensors) {\n            const tensor = tensors[name];\n            if (oldTensorIds.indexOf(tensor.id) === -1) {\n                tensorsToDispose.push(tensor);\n            }\n        }\n    }\n    tensorsToDispose.forEach(t => {\n        if (!t.isDisposed) {\n            t.dispose();\n        }\n    });\n}\n//# sourceMappingURL=training_tensors.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute, FeedDict } from './executor';\nimport { evaluateDataset, fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x) {\n    return x instanceof Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x) {\n    return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    if (names == null || names.length === 0) {\n        // Check for the case where the model expected no data, but some data got\n        // sent.\n        if (data != null) {\n            let gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (const key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                // `data` is a singleton Tensor in this case.\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` +\n                    `but got ${data}`);\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(name => null);\n    }\n    let arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (const name of names) {\n            if (data[name] == null) {\n                throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ` +\n                    `${names}`);\n            }\n            arrays.push(data[name]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `model expected. Expected to see ${names.length} Tensor(s), but ` +\n                `instead got the following list of Tensor(s): ${data}`);\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n                `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n        }\n        arrays = [data];\n    }\n    arrays = ensureTensorsRank2OrHigher(arrays);\n    // Check shape compatibility.\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s). but got array with ` +\n                    `shape ${array.shape}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    // Skip the first (batch) axis.\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                        `to have shape [${shapes[i]}], but got array with shape ` +\n                        `[${array.shape}].`);\n                }\n            }\n        }\n    }\n    return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(inputs, targets, weights) {\n    const setX = unique(inputs.map(input => input.shape[0]));\n    setX.sort();\n    const setY = unique(targets.map(target => target.shape[0]));\n    setY.sort();\n    // TODO(cais): Check `weights` as well.\n    if (setX.length > 1) {\n        throw new ValueError(`All input Tensors (x) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(inputs.map(input => input.shape))}`);\n    }\n    if (setY.length > 1) {\n        throw new ValueError(`All target Tensors (y) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(targets.map(target => target.shape))}`);\n    }\n    if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n        throw new ValueError(`Input Tensors should have the same number of samples as target ` +\n            `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n            `sample(s).`);\n    }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    // TODO(cais): Dedicated test coverage?\n    const keyLosses = [\n        losses.meanSquaredError, losses.binaryCrossentropy,\n        losses.categoricalCrossentropy\n    ];\n    for (let i = 0; i < targets.length; ++i) {\n        const y = targets[i];\n        const loss = lossFns[i];\n        const shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new ValueError(`You are passing a target array of shape ${y.shape} while using ` +\n                    `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n                    `expects targets to be binary matrices (1s and 0s) of shape ` +\n                    `[samples, classes].`);\n                // TODO(cais): Example code in error message.\n            }\n        }\n        if (keyLosses.indexOf(loss) !== -1) {\n            const slicedYShape = y.shape.slice(1);\n            const slicedShape = shape.slice(1);\n            for (let j = 0; j < slicedYShape.length; ++j) {\n                const targetDim = slicedYShape[j];\n                const outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an ` +\n                        `output of shape ${shape}, while using a loss function that ` +\n                        `expects targets to have the same shape as the output.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    let arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `the model expected. Expected to see ${names.length} Tensor(s),` +\n                ` but instead got ${data.length} Tensors(s).`);\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n                `but only received one Tensor. Found: array with shape ` +\n                `${JSON.stringify(data.shape)}.`);\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s), but got array with ` +\n                    `shape ${JSON.stringify(array.shape)}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ` +\n                            `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                            `got array with shape ${JSON.stringify(array.shape)}.`);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(name => []);\n    }\n    let wrappedMetrics;\n    if (typeof metrics === 'string' || typeof metrics === 'function') {\n        wrappedMetrics = [metrics];\n    }\n    else if (Array.isArray(metrics) || typeof metrics === 'object') {\n        wrappedMetrics = metrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an string,' +\n            `function, Array, or Object, found: ${metrics}`);\n    }\n    if (Array.isArray(wrappedMetrics)) {\n        // We then apply all metrics to all outputs.\n        return outputNames.map(name => wrappedMetrics);\n    }\n    else {\n        // In this case, metrics is a dict.\n        const nestedMetrics = [];\n        for (const name of outputNames) {\n            let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container {\n    constructor(args) {\n        super(args);\n        this.isTraining = false;\n    }\n    /**\n     * Print a text summary of the model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - If the model has non-sequential-like topology, the inputs each layer\n     *   receives\n     * - The total number of trainable and non-trainable parameters of the model.\n     *\n     * ```js\n     * const input1 = tf.input({shape: [10]});\n     * const input2 = tf.input({shape: [20]});\n     * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n     * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n     * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n     * const output =\n     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n     *\n     * const model = tf.model({inputs: [input1, input2], outputs: output});\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            throw new ValueError(`This model has never been called, thus its weights have not been ` +\n                `created yet. So no summary can be displayed. Build the model ` +\n                `first (e.g., by calling it on some test data).`);\n        }\n        printSummary(this, lineLength, positions, printFn);\n    }\n    /**\n     * Configures and prepares the model for training and evaluation.  Compiling\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n     * or `evaluate` on an un-compiled model will throw an error.\n     *\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n     * metrics to be used for fitting and evaluating this model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    compile(args) {\n        if (args.loss == null) {\n            args.loss = [];\n        }\n        this.loss = args.loss;\n        if (typeof args.optimizer === 'string') {\n            this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n            this.isOptimizerOwned = true;\n        }\n        else {\n            if (!(args.optimizer instanceof Optimizer)) {\n                throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n            }\n            this.optimizer_ = args.optimizer;\n            this.isOptimizerOwned = false;\n        }\n        // TODO(cais): Add lossWeights.\n        // TODO(cais): Add sampleWeightMode.\n        // Prepare loss functions.\n        let lossFunctions = [];\n        if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n            typeof args.loss !== 'function') {\n            args.loss = args.loss;\n            for (const name in args.loss) {\n                if (this.outputNames.indexOf(name) === -1) {\n                    throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". ` +\n                        `Only expected the following keys: ${this.outputNames}`);\n                }\n            }\n            for (const name of this.outputNames) {\n                if (args.loss[name] == null) {\n                    console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` +\n                        `this was done on purpose, and we will not be expecting data ` +\n                        `to be passed to ${name} during training`);\n                }\n                lossFunctions.push(losses.get(args.loss[name]));\n            }\n        }\n        else if (Array.isArray(args.loss)) {\n            if (args.loss.length !== this.outputs.length) {\n                throw new ValueError(`When passing an Array as loss, it should have one entry per ` +\n                    `model output. The model has ${this.outputs.length} output(s), ` +\n                    `but you passed loss=${args.loss}.`);\n            }\n            const theLosses = args.loss;\n            lossFunctions = theLosses.map(l => losses.get(l));\n        }\n        else {\n            const lossFunction = losses.get(args.loss);\n            this.outputs.forEach(_ => {\n                lossFunctions.push(lossFunction);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (let i = 0; i < this.outputs.length; ++i) {\n            // TODO(cais): Logic for skipping target(s).\n            const shape = this.internalOutputShapes[i];\n            const name = this.outputNames[i];\n            this.feedOutputNames.push(name);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        // TODO(cais): Add logic for output masks.\n        // TODO(cais): Add logic for sample weights.\n        const skipTargetIndices = [];\n        // Prepare metrics.\n        this.metrics = args.metrics;\n        // TODO(cais): Add weightedMetrics.\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        // Compute total loss.\n        // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n        //   Here, metricsTensors are TypeScript functions. This difference is due\n        //   to the difference in symbolic/imperative property of the backends.\n        nameScope('loss', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                // TODO(cais): Add weightedLoss, sampleWeight and mask.\n                //   The following line should be weightedLoss\n                const weightedLoss = this.lossFunctions[i];\n                if (this.outputs.length > 1) {\n                    this.metricsTensors.push([weightedLoss, i]);\n                    this.metricsNames.push(this.outputNames[i] + '_loss');\n                }\n            }\n            // Porting Note: Due to the imperative nature of the backend, we calculate\n            //   the regularizer penalties in the totalLossFunction, instead of here.\n        });\n        const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n        // TODO(cais): Add nestedWeightedMetrics.\n        /**\n         * Helper function used in loop below.\n         */\n        const appendMetric = (outputIndex, metricName, metricTensor) => {\n            if (this.outputNames.length > 1) {\n                metricName = this.outputNames[outputIndex] + '_' + metricName;\n            }\n            this.metricsNames.push(metricName);\n            this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        nameScope('metric', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                const outputMetrics = nestedMetrics[i];\n                // TODO(cais): Add weights and outputWeightedMetrics.\n                // TODO(cais): Add optional arg `weights` to the following function.\n                const handleMetrics = (metrics) => {\n                    const metricNamePrefix = '';\n                    let metricName;\n                    let accFn;\n                    let weightedMetricFn;\n                    //  TODO(cais): Use 'weights_' for weighted metrics.\n                    for (const metric of metrics) {\n                        if (typeof metric === 'string' &&\n                            ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                                -1) {\n                            const outputShape = this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                // case: binary accuracy/crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            }\n                            else if (this.lossFunctions[i] ===\n                                losses.sparseCategoricalCrossentropy) {\n                                // case: categorical accuracy / crossentropy with sparse\n                                // targets.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            }\n                            else {\n                                // case: categorical accuracy / crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            let suffix;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            const metricFn = Metrics.get(metric);\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = metricFn;\n                            metricName =\n                                metricNamePrefix + Metrics.getLossOrMetricName(metric);\n                        }\n                        // TODO(cais): Add weighting and masking to metricResult.\n                        let metricResult;\n                        nameScope(metricName, () => {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    }\n                };\n                handleMetrics(outputMetrics);\n                // TODO(cais): Call handleMetrics with weights.\n            }\n        });\n        // Porting Notes: Given the imperative backend of tfjs-core,\n        //   there is no need for constructing the symbolic graph and placeholders.\n        this.collectedTrainableWeights = this.trainableWeights;\n    }\n    /**\n     * Check trainable weights count consistency.\n     *\n     * This will raise a warning if `this.trainableWeights` and\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n     * numbers of parameters).\n     * Inconsistency will typically arise when one modifies `model.trainable`\n     * without calling `model.compile()` again.\n     */\n    checkTrainableWeightsConsistency() {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        // TODO(cais): Standardize `config.sampleWeights` as well.\n        // Validate user data.\n        const checkBatchAxis = true;\n        const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        try {\n            // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n            // of the input to 0.\n            const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n            this.makeTestFunction();\n            const f = this.testFunction;\n            const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n            return singletonOrArray(testOuts);\n        }\n        finally {\n            disposeNewTensors(standardizedOuts[0], x);\n            disposeNewTensors(standardizedOuts[1], y);\n        }\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        this.makeTestFunction();\n        return evaluateDataset(this, dataset, args);\n    }\n    /**\n     * Get number of samples provided for training, evaluation or prediction.\n     *\n     * @param ins Input `tf.Tensor`.\n     * @param batchSize Integer batch size, optional.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring loop finished. Optional.\n     * @param stepsName The public API's parameter name for `steps`.\n     * @returns Number of samples provided.\n     */\n    checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {\n        let numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` +\n                    `Got batchSize = ${batchSize}`);\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new ValueError(`Either the input data should have a defined shape, or ` +\n                `${stepsName} shoud be specified.`);\n        }\n        return numSamples;\n    }\n    /**\n     * Execute internal tensors of the model with input data feed.\n     * @param inputs Input data feed. Must match the inputs of the model.\n     * @param outputs Names of the output tensors to be fetched. Must match\n     *   names of the SymbolicTensors that belong to the graph.\n     * @returns Fetched values for `outputs`.\n     */\n    execute(inputs, outputs) {\n        if (Array.isArray(outputs) && outputs.length === 0) {\n            throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n        }\n        const outputsIsArray = Array.isArray(outputs);\n        const outputNames = (outputsIsArray ? outputs : [outputs]);\n        const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n        // Format the input into a FeedDict.\n        const feedDict = new FeedDict();\n        if (inputs instanceof Tensor) {\n            inputs = [inputs];\n        }\n        if (Array.isArray(inputs)) {\n            if (inputs.length !== this.inputs.length) {\n                throw new ValueError(`The number of inputs provided (${inputs.length}) ` +\n                    `does not match the number of inputs of this model ` +\n                    `(${this.inputs.length}).`);\n            }\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n        }\n        else {\n            for (const input of this.inputs) {\n                const tensorValue = inputs[input.name];\n                if (tensorValue == null) {\n                    throw new ValueError(`No value is provided for the model's input ${input.name}`);\n                }\n                feedDict.add(input, tensorValue);\n            }\n        }\n        // Run execution.\n        const executeOutputs = execute(outputSymbolicTensors, feedDict);\n        return outputsIsArray ? executeOutputs : executeOutputs[0];\n    }\n    /**\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n     */\n    retrieveSymbolicTensors(symbolicTensorNames) {\n        const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n        let outputsRemaining = symbolicTensorNames.length;\n        for (const layer of this.layers) {\n            const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n            const layerOutputNames = layerOutputs.map(output => output.name);\n            for (let i = 0; i < symbolicTensorNames.length; ++i) {\n                const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n                if (index !== -1) {\n                    outputSymbolicTensors[i] = layerOutputs[index];\n                    outputsRemaining--;\n                }\n                if (outputsRemaining === 0) {\n                    break;\n                }\n            }\n            if (outputsRemaining === 0) {\n                break;\n            }\n        }\n        if (outputsRemaining > 0) {\n            const remainingNames = [];\n            outputSymbolicTensors.forEach((tensor, i) => {\n                if (tensor == null) {\n                    remainingNames.push(symbolicTensorNames[i]);\n                }\n            });\n            throw new ValueError(`Cannot find SymbolicTensors for output name(s): ` +\n                `${JSON.stringify(remainingNames)}`);\n        }\n        return outputSymbolicTensors;\n    }\n    /**\n     * Helper method to loop over some data in batches.\n     *\n     * Porting Note: Not using the functional approach in the Python equivalent\n     *   due to the imperative backend.\n     * Porting Note: Does not support step mode currently.\n     *\n     * @param ins: input data\n     * @param batchSize: integer batch size.\n     * @param verbose: verbosity model\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n     *   `tf.Tensor` (if multipe outputs).\n     */\n    predictLoop(ins, batchSize = 32, verbose = false) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins);\n            if (verbose) {\n                throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n            }\n            // Sample-based predictions.\n            // Porting Note: Tensor currently does not support sliced assignments as\n            //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n            //   iterating over the batches.\n            const batches = makeBatches(numSamples, batchSize);\n            const outsBatches = this.outputs.map(output => []);\n            // TODO(cais): Can the scope() be pushed down inside the for loop?\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchOuts = tfc.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    // TODO(cais): Take care of the case of the last element is a flag for\n                    //   training/test.\n                    const insBatch = sliceArrays(ins, batchStart, batchEnd);\n                    // Construct the feeds for execute();\n                    const feeds = [];\n                    if (Array.isArray(insBatch)) {\n                        for (let i = 0; i < insBatch.length; ++i) {\n                            feeds.push({ key: this.inputs[i], value: insBatch[i] });\n                        }\n                    }\n                    else {\n                        feeds.push({ key: this.inputs[0], value: insBatch });\n                    }\n                    const feedDict = new FeedDict(feeds);\n                    return execute(this.outputs, feedDict);\n                });\n                batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n            }\n            return singletonOrArray(outsBatches.map(batches => tfc.concat(batches, 0)));\n        });\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param args A `ModelPredictArgs` object containing optional fields.\n     *\n     * @return Prediction results as a `tf.Tensor`(s).\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n        checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n        try {\n            // TODO(cais): Take care of stateful models.\n            //   if (this.stateful) ...\n            // TODO(cais): Take care of the learning_phase boolean flag.\n            //   if (this.useLearningPhase) ...\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            checkBatchSize(batchSize);\n            return this.predictLoop(xsRank2OrHigher, batchSize);\n        }\n        finally {\n            disposeNewTensors(xsRank2OrHigher, x);\n        }\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predictOnBatch(tf.ones([8, 10])).print();\n     * ```\n     * @param x: Input samples, as a Tensor (for models with exactly one\n     *   input) or an array of Tensors (for models with more than one input).\n     * @return Tensor(s) of predictions\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predictOnBatch(x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        // TODO(cais): Take care of the learning_phase boolean flag.\n        //   if (this.useLearningPhase) ...\n        const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n        return this.predictLoop(x, batchSize);\n    }\n    standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n        // TODO(cais): Add sampleWeight, classWeight\n        if (this.optimizer_ == null) {\n            throw new RuntimeError('You must compile a model before training/testing. Use ' +\n                'LayersModel.compile(modelCompileArgs).');\n        }\n        const outputShapes = [];\n        for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n            const outputShape = this.feedOutputShapes[i];\n            const lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                // Porting Note: Because of strong typing `lossFn` must be a function.\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        // TODO(cais): Standardize sampleWeights & classWeights.\n        checkArrayLengths(x, y, null);\n        // TODO(cais): Check sampleWeights as well.\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new ValueError(`In a stateful network, you should only pass inputs with a ` +\n                    `number of samples that is divisible by the batch size ` +\n                    `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n            }\n        }\n        return [x, y];\n    }\n    async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n        const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        // TODO(cais): Handle sampleWeights.\n        if (sampleWeight != null) {\n            throw new Error('sample weight is not supported yet.');\n        }\n        let standardSampleWeights = null;\n        if (classWeight != null) {\n            const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n            standardSampleWeights = [];\n            for (let i = 0; i < classWeights.length; ++i) {\n                standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n            }\n        }\n        // TODO(cais): Deal with the case of model.stateful == true.\n        return [standardXs, standardYs, standardSampleWeights];\n    }\n    /**\n     * Loop over some test data in batches.\n     * @param f A Function returning a list of tensors.\n     * @param ins Array of tensors to be fed to `f`.\n     * @param batchSize Integer batch size or `null` / `undefined`.\n     * @param verbose verbosity mode.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring test finished. Ignored with the default value of `null` /\n     * `undefined`.\n     * @returns Array of Scalars.\n     */\n    testLoop(f, ins, batchSize, verbose = 0, steps) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n            const outs = [];\n            if (verbose > 0) {\n                throw new NotImplementedError('Verbose mode is not implemented yet.');\n            }\n            // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n            if (steps != null) {\n                throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n            }\n            else {\n                const batches = makeBatches(numSamples, batchSize);\n                const indexArray = tensor1d(range(0, numSamples));\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = sliceArraysByIndices(ins, batchIds);\n                    const batchOuts = f(insBatch);\n                    if (batchIndex === 0) {\n                        for (let i = 0; i < batchOuts.length; ++i) {\n                            outs.push(scalar(0));\n                        }\n                    }\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        const batchOut = batchOuts[i];\n                        outs[i] =\n                            tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n                    }\n                }\n                for (let i = 0; i < outs.length; ++i) {\n                    outs[i] = tfc.div(outs[i], numSamples);\n                }\n            }\n            return outs;\n        });\n    }\n    getDedupedMetricsNames() {\n        const outLabels = this.metricsNames;\n        // Rename duplicated metrics names (can happen with an output layer\n        // shared among multiple dataflows).\n        const dedupedOutLabels = [];\n        for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            let newLabel = label;\n            if (count(outLabels, label) > 1) {\n                const dupIndex = count(outLabels.slice(0, i), label);\n                newLabel += `_${dupIndex}`;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    }\n    /**\n     * Creates a function that performs the following actions:\n     *\n     * 1. computes the losses\n     * 2. sums them to get the total loss\n     * 3. call the optimizer computes the gradients of the LayersModel's\n     *    trainable weights w.r.t. the total loss and update the variables\n     * 4. calculates the metrics\n     * 5. returns the values of the losses and metrics.\n     */\n    makeTrainFunction() {\n        return (data) => {\n            const lossValues = [];\n            const inputs = data.slice(0, this.inputs.length);\n            const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n            const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n            const metricsValues = [];\n            // Create a function that computes the total loss based on the\n            // inputs. This function is used for obtaining gradients through\n            // backprop.\n            const totalLossFunction = () => {\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict, { 'training': true });\n                // TODO(cais): Take care of the case of multiple outputs from a\n                //   single layer?\n                let totalLoss;\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    let loss = lossFunction(targets[i], outputs[i]);\n                    if (sampleWeights[i] != null) {\n                        loss = computeWeightedLoss(loss, sampleWeights[i]);\n                    }\n                    // TODO(cais): push Scalar instead.\n                    const meanLoss = tfc.mean(loss);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    lossValues.push(meanLoss);\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                }\n                // Compute the metrics.\n                // TODO(cais): These should probably be calculated outside\n                //   totalLossFunction to benefit speed?\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    let weightedMetric;\n                    if (this.outputs.length > 1 && i < this.outputs.length) {\n                        weightedMetric = lossValues[i];\n                    }\n                    else {\n                        const metric = this.metricsTensors[i][0];\n                        const outputIndex = this.metricsTensors[i][1];\n                        weightedMetric =\n                            tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    }\n                    tfc.keep(weightedMetric);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    metricsValues.push(weightedMetric);\n                }\n                totalLoss = tfc.mean(totalLoss);\n                // Add regularizer penalties.\n                this.calculateLosses().forEach(regularizerLoss => {\n                    totalLoss = tfc.add(totalLoss, regularizerLoss);\n                });\n                return totalLoss;\n            };\n            const variables = this.collectedTrainableWeights.map(param => param.read());\n            const returnCost = true;\n            const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n            return [totalLossValue].concat(metricsValues);\n        };\n    }\n    /**\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\n     * batch of inputs, returns the prespecified loss and metrics of the model\n     * under the batch of input data.\n     */\n    makeTestFunction() {\n        this.testFunction = (data) => {\n            return tfc.tidy(() => {\n                const valOutputs = [];\n                let totalLoss;\n                const inputs = data.slice(0, this.inputs.length);\n                const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict);\n                // Compute total loss.\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    // TODO(cais): Add sample weighting and replace the simple\n                    // averaging.\n                    const loss = tfc.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                // Compute the metrics.\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    const metric = this.metricsTensors[i][0];\n                    const outputIndex = this.metricsTensors[i][1];\n                    // TODO(cais): Replace K.mean() with a proper weighting function.\n                    const meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a\n     * dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * for (let i = 1; i < 5 ; ++i) {\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *       batchSize: 4,\n     *       epochs: 3\n     *   });\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n     * }\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named,\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args A `ModelFitArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input\n     * data and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        return fitTensors(this, x, y, args);\n    }\n    // TODO(cais): Add code snippet below when it's possible to instantiate\n    //   actual dataset objects.\n    /**\n     * Trains the model using a dataset object.\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for training. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs.\n     *   Of the two items in the array, the first is the input feature(s) and\n     *   the second is the output target(s).\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fitDataset(dataset, args) {\n        return fitDataset(this, dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and matric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        // TODO(cais): Support sampleWeight and classWeight.\n        // TODO(cais): Support Dataset objects.\n        const standardizeOut = await this.standardizeUserData(x, y);\n        const inputs = standardizeOut[0];\n        const targets = standardizeOut[1];\n        const trainFunction = this.makeTrainFunction();\n        const losses = trainFunction(inputs.concat(targets));\n        const lossValues = [];\n        for (const loss of losses) {\n            const v = await loss.data();\n            lossValues.push(v[0]);\n        }\n        tfc.dispose(losses);\n        return singletonOrArray(lossValues);\n    }\n    /**\n     * Extract weight values of the model.\n     *\n     * @param config: An instance of `io.SaveConfig`, which specifies\n     * model-saving options such as whether only trainable weights are to be\n     * saved.\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n     *   non-uniqueified weight names) to their values.\n     */\n    getNamedWeights(config) {\n        const namedWeights = [];\n        const trainableOnly = config != null && config.trainableOnly;\n        const weights = trainableOnly ? this.trainableWeights : this.weights;\n        const weightValues = this.getWeights(trainableOnly);\n        for (let i = 0; i < weights.length; ++i) {\n            if (trainableOnly && !weights[i].trainable) {\n                // Optionally skip non-trainable weights.\n                continue;\n            }\n            namedWeights.push({ name: weights[i].originalName, tensor: weightValues[i] });\n        }\n        return namedWeights;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const input = tf.input({shape: [10]});\n     * const output = tf.layers.dense({units: 1}).apply(input);\n     * const model = tf.model({inputs: [input], outputs: [output]});\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10\n     * values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        this.stopTraining_ = stop;\n    }\n    get stopTraining() {\n        return this.stopTraining_;\n    }\n    get optimizer() {\n        return this.optimizer_;\n    }\n    set optimizer(optimizer) {\n        if (this.optimizer_ !== optimizer) {\n            this.optimizer_ = optimizer;\n            this.isOptimizerOwned = false;\n        }\n    }\n    dispose() {\n        const result = super.dispose();\n        if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n            this.isOptimizerOwned) {\n            const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n            this.optimizer_.dispose();\n            result.numDisposedVariables +=\n                numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n        }\n        return result;\n    }\n    getLossIdentifiers() {\n        let lossNames;\n        if (typeof this.loss === 'string') {\n            lossNames = toSnakeCase(this.loss);\n        }\n        else if (Array.isArray(this.loss)) {\n            for (const loss of this.loss) {\n                if (typeof loss !== 'string') {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n            lossNames = this.loss.map(name => toSnakeCase(name));\n        }\n        else {\n            const outputNames = Object.keys(this.loss);\n            lossNames = {};\n            const losses = this.loss;\n            for (const outputName of outputNames) {\n                if (typeof losses[outputName] === 'string') {\n                    lossNames[outputName] =\n                        toSnakeCase(losses[outputName]);\n                }\n                else {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n        }\n        return lossNames;\n    }\n    getMetricIdentifiers() {\n        if (typeof this.metrics === 'string' ||\n            typeof this.metrics === 'function') {\n            return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n        }\n        else if (Array.isArray(this.metrics)) {\n            return this.metrics.map(metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n        }\n        else {\n            const metricsIdentifiers = {};\n            for (const key in this.metrics) {\n                metricsIdentifiers[key] =\n                    toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n            }\n            return metricsIdentifiers;\n        }\n    }\n    getTrainingConfig() {\n        return {\n            loss: this.getLossIdentifiers(),\n            metrics: this.getMetricIdentifiers(),\n            optimizer_config: {\n                class_name: this.optimizer.getClassName(),\n                config: this.optimizer.getConfig()\n            }\n        };\n        // TODO(cais): Add weight_metrics when they are supported.\n        // TODO(cais): Add sample_weight_mode when it's supported.\n        // TODO(cais): Add loss_weights when it's supported.\n    }\n    loadTrainingConfig(trainingConfig) {\n        if (trainingConfig.weighted_metrics != null) {\n            throw new Error('Loading weight_metrics is not supported yet.');\n        }\n        if (trainingConfig.loss_weights != null) {\n            throw new Error('Loading loss_weights is not supported yet.');\n        }\n        if (trainingConfig.sample_weight_mode != null) {\n            throw new Error('Loading sample_weight_mode is not supported yet.');\n        }\n        const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n        const optimizer = deserialize(tsConfig);\n        let loss;\n        if (typeof trainingConfig.loss === 'string') {\n            loss = toCamelCase(trainingConfig.loss);\n        }\n        else if (Array.isArray(trainingConfig.loss)) {\n            loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n        }\n        else if (trainingConfig.loss != null) {\n            loss = {};\n            for (const key in trainingConfig.loss) {\n                loss[key] = toCamelCase(trainingConfig.loss[key]);\n            }\n        }\n        let metrics;\n        if (Array.isArray(trainingConfig.metrics)) {\n            metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n        }\n        else if (trainingConfig.metrics != null) {\n            metrics = {};\n            for (const key in trainingConfig.metrics) {\n                metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n            }\n        }\n        this.compile({ loss, metrics, optimizer });\n    }\n    /**\n     * Save the configuration and/or weights of the LayersModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 2. Saving `model`'s topology and weights to browser\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('indexeddb://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 3. Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n     * browser.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('downloads://my-model-1');\n     * ```\n     *\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\n     * See the documentation of `tf.io.http` for more details\n     * including specifying request parameters and implementation of the\n     * server.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('http://my-server/model/upload');\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new ValueError(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        const weightDataAndSpecs = await io.encodeWeights(this.getNamedWeights(config));\n        const returnString = false;\n        const unusedArg = null;\n        const modelConfig = this.toJSON(unusedArg, returnString);\n        const modelArtifacts = {\n            modelTopology: modelConfig,\n            format: LAYERS_MODEL_FORMAT_NAME,\n            generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n            convertedBy: null,\n        };\n        const includeOptimizer = config == null ? false : config.includeOptimizer;\n        if (includeOptimizer && this.optimizer != null) {\n            modelArtifacts.trainingConfig = this.getTrainingConfig();\n            const weightType = 'optimizer';\n            const { data: optimizerWeightData, specs: optimizerWeightSpecs } = await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n            weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n            weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n        }\n        if (this.userDefinedMetadata != null) {\n            // Check serialized size of user-defined metadata.\n            const checkSize = true;\n            checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n            modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n        }\n        modelArtifacts.weightData = weightDataAndSpecs.data;\n        modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n        return handlerOrURL.save(modelArtifacts);\n    }\n    /**\n     * Set user-defined metadata.\n     *\n     * The set metadata will be serialized together with the topology\n     * and weights of the model during `save()` calls.\n     *\n     * @param setUserDefinedMetadata\n     */\n    setUserDefinedMetadata(userDefinedMetadata) {\n        checkUserDefinedMetadata(userDefinedMetadata, this.name);\n        this.userDefinedMetadata = userDefinedMetadata;\n    }\n    /**\n     * Get user-defined metadata.\n     *\n     * The metadata is supplied via one of the two routes:\n     *   1. By calling `setUserDefinedMetadata()`.\n     *   2. Loaded during model loading (if the model is constructed\n     *      via `tf.loadLayersModel()`.)\n     *\n     * If no user-defined metadata is available from either of the\n     * two routes, this function will return `undefined`.\n     */\n    getUserDefinedMetadata() {\n        return this.userDefinedMetadata;\n    }\n}\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n}\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);\n//# sourceMappingURL=training.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Optimizers.\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { ValueError } from './errors';\n// Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier) {\n    const optimizerMap = {\n        'Adagrad': () => train.adagrad(0.01),\n        'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n        'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n        'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n        'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n        'SGD': () => train.sgd(0.01)\n    };\n    optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n    optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n    optimizerMap['adam'] = optimizerMap['Adam'];\n    optimizerMap['adamax'] = optimizerMap['Adamax'];\n    optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n    optimizerMap['sgd'] = optimizerMap['SGD'];\n    if (identifier in optimizerMap) {\n        return optimizerMap[identifier]();\n    }\n    throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n//# sourceMappingURL=optimizers.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source keras/models.py */\nimport { dispose, io, serialization, util } from '@tensorflow/tfjs-core';\nimport { getUid } from './backend/state';\nimport { Input } from './engine/input_layer';\nimport { getSourceInputs, Node } from './engine/topology';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError, RuntimeError, ValueError } from './errors';\nimport { deserialize } from './layers/serialization';\nimport * as generic_utils from './utils/generic_utils';\nimport { convertPythonicToTs } from './utils/serialization_utils';\nimport { getExactlyOneShape } from './utils/types_utils';\n/**\n * Parses a JSON model configuration file and returns a model instance.\n *\n * ```js\n * // This example shows how to serialize a model using `toJSON()` and\n * // deserialize it as another model using `tf.models.modelFromJSON()`.\n * // Note: this example serializes and deserializes only the topology\n * // of the model; the weights of the loaded model will be different\n * // from those of the the original model, due to random weight\n * // initialization.\n * // To load the topology and weights of a model, use `tf.loadLayersModel()`.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n * // Serialize `model1` as a JSON object.\n * const model1JSON = model1.toJSON(null, false);\n * model1.summary();\n *\n * const model2 = await tf.models.modelFromJSON(model1JSON);\n * model2.summary();\n * ```\n *\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\n *       weights configuration. It can also be only the topology JSON of the\n *       model, in which case the weights will not be loaded.\n *  @param custom_objects Optional dictionary mapping names\n *       (strings) to custom classes or functions to be\n *       considered during deserialization.\n * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).\n */\nexport async function modelFromJSON(modelAndWeightsConfig, customObjects) {\n    if (!('modelTopology' in modelAndWeightsConfig)) {\n        modelAndWeightsConfig = { modelTopology: modelAndWeightsConfig };\n    }\n    modelAndWeightsConfig = modelAndWeightsConfig;\n    let modelTopology = modelAndWeightsConfig.modelTopology;\n    if (modelTopology['model_config'] != null) {\n        // If the model-topology JSON contains a 'model_config' field, then it is\n        // a full model JSON (e.g., from `keras.Model.save()`), which contains\n        // not only the model's architecture in its 'model_config' field, but\n        // additional information such as the model's optimizer. We use only the\n        // 'model_config' field currently.\n        modelTopology = modelTopology['model_config'];\n    }\n    const tsConfig = convertPythonicToTs(modelTopology);\n    const model = deserialize(tsConfig, customObjects);\n    if (modelAndWeightsConfig.weightsManifest != null) {\n        // Load the weight values keyed by the original tensor names in the model\n        // file that was loaded.  These should match the keys of the weight\n        // manifest.\n        const weightValues = await io.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(weight => weight.originalName));\n        // Map the weights to the unique tensor names generated during model loading\n        const uniqueWeightValues = {};\n        for (const weight of model.weights) {\n            uniqueWeightValues[weight.originalName] =\n                weightValues[weight.originalName];\n        }\n        model.loadWeights(uniqueWeightValues);\n        // Dispose temporary weight values.\n        dispose(weightValues);\n    }\n    return model;\n}\n/**\n * Load a model, including its topology and optionally weights.  See the\n * Tutorial named \"How to import a Keras Model\" for usage examples.\n *\n * Example 1: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 2. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * Example 4. Load a model from an HTTP server.\n *\n * ```js\n * const model = await\n *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. This path will be\n *      interpreted as a relative HTTP path, to which `fetch` will be used to\n *      request the model topology and weight manifest JSON.\n *      The content of the JSON file is assumed to be a JSON object with the\n *      following fields and values:\n *      - 'modelTopology': A JSON object that can be either of:\n *        1. a model architecture JSON consistent with the format of the return\n *            value of `keras.Model.to_json()`\n *        2. a full model JSON in the format of `keras.models.save_model()`.\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\n *      See the Python converter function `save_model()` for more details.\n *      It is also assumed that model weights can be accessed from relative\n *      paths described by the `paths` fields in weights manifest.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - `onProgress`: A progress callback of the form:\n *     `(fraction: number) => void`. This callback can be used to monitor the\n *     model-loading process.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n */\nexport async function loadLayersModelInternal(pathOrIOHandler, options) {\n    if (options == null) {\n        options = {};\n    }\n    if (typeof pathOrIOHandler === 'string') {\n        const handlers = io.getLoadHandlers(pathOrIOHandler, options);\n        if (handlers.length === 0) {\n            // For backward compatibility: if no load handler can be found,\n            // assume it is a relative http path.\n            // TODO(cais): Reformat the args into a single `LoadOptions` once the core\n            // is refactored.\n            handlers.push(io.browserHTTPRequest(pathOrIOHandler, options));\n        }\n        else if (handlers.length > 1) {\n            throw new ValueError(`Found more than one (${handlers.length}) load handlers for ` +\n                `URL '${pathOrIOHandler}'`);\n        }\n        pathOrIOHandler = handlers[0];\n    }\n    return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);\n}\n/**\n * Load a model and optionally its weights, using an IOHandler object.\n *\n * @param handler The instance of `IOHandler` to be used during the model\n *   loading.\n * @param customObjects Any optional custom objects to be used during model\n *   loading.\n * @param strict Whether the weight loading will be done in strict mode.\n *   Default: `true`.\n */\nexport async function loadLayersModelFromIOHandler(handler, customObjects, options) {\n    if (options == null) {\n        options = {};\n    }\n    if (handler.load == null) {\n        throw new ValueError('Cannot proceed with model loading because the IOHandler provided ' +\n            'does not have the `load` method implemented.');\n    }\n    const artifacts = await handler.load();\n    let modelTopology = artifacts.modelTopology;\n    if (modelTopology['model_config'] != null) {\n        modelTopology = modelTopology['model_config'];\n    }\n    const strict = options.strict == null ? true : options.strict;\n    // If weights are provided and the weight-loading mode is strict, use\n    // fast weight initialization. This skips costly initializers such as\n    // 'orthogonal' and saves unnecessary computation in cases where\n    // the initialized weight values will immediately be overwritten by\n    // loaded weight values.\n    const fastWeightInit = artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n    const model = deserialize(convertPythonicToTs(modelTopology), customObjects, fastWeightInit);\n    const trainingConfig = artifacts.trainingConfig;\n    if (trainingConfig != null) {\n        model.loadTrainingConfig(trainingConfig);\n    }\n    if (artifacts.userDefinedMetadata != null) {\n        model.setUserDefinedMetadata(artifacts.userDefinedMetadata);\n    }\n    // If weightData is present, load the weights into the model.\n    if (artifacts.weightData != null) {\n        // Loading weights requires weightSpecs.\n        if (artifacts.weightSpecs == null) {\n            throw new ValueError('LayersModel artifacts contains weight data, but not weight specs. ' +\n                'Therefore loading of weights cannot proceed.');\n        }\n        const { modelWeights, optimizerWeights } = decodeModelAndOptimizerWeights(artifacts.weightData, artifacts.weightSpecs);\n        model.loadWeights(modelWeights, strict);\n        if (model.optimizer != null && optimizerWeights.length > 0) {\n            await model.optimizer.setWeights(optimizerWeights);\n        }\n        // Dispose temporary weight values.\n        dispose(modelWeights);\n        dispose(optimizerWeights.map(w => w.tensor));\n    }\n    return model;\n}\nfunction decodeModelAndOptimizerWeights(buffer, specs) {\n    const name2Tensor = io.decodeWeights(buffer, specs);\n    const modelWeights = {};\n    const optimizerWeights = [];\n    specs.forEach(spec => {\n        if (spec.group === 'optimizer') {\n            optimizerWeights.push({ name: spec.name, tensor: name2Tensor[spec.name] });\n        }\n        else {\n            modelWeights[spec.name] = name2Tensor[spec.name];\n        }\n    });\n    return { modelWeights, optimizerWeights };\n}\n/**\n * A model with a stack of layers, feeding linearly from one to the next.\n *\n * `tf.sequential` is a factory function that creates an instance of\n * `tf.Sequential`.\n *\n * ```js\n *  // Define a model for linear regression.\n *  const model = tf.sequential();\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n *\n *  // Prepare the model for training: Specify the loss and the optimizer.\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *  // Generate some synthetic data for training.\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n *\n *  // Train the model using the data then do inference on a data point the\n *  // model hasn't seen:\n *  await model.fit(xs, ys);\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class Sequential extends LayersModel {\n    constructor(args) {\n        super({ inputs: [], outputs: [] });\n        args = args || {};\n        this.trainable = true;\n        this.built = false;\n        // Set model name.\n        this.name = (args.name != null) ? args.name : getUid('sequential_');\n        // Add to the model any layers passed to the constructor.\n        if (args.layers != null) {\n            for (const layer of args.layers) {\n                this.add(layer);\n            }\n        }\n    }\n    // Helper function to Sequential.add  Throws if the new output shape will be\n    // invalid.\n    checkShape(layer) {\n        const shape = layer.inboundNodes[0].outputTensors[0].shape;\n        if (shape.some(x => x < 0)) {\n            throw new ValueError('Negative dimension size caused by adding layer ' +\n                `${layer.name} with input shape [` +\n                `${layer.inboundNodes[0].inputTensors[0].shape}]`);\n        }\n    }\n    /**\n     * Adds a layer instance on top of the layer stack.\n     *\n     * ```js\n     *  const model = tf.sequential();\n     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n     *  // Note that the untrained model is random at this point.\n     *  model.predict(tf.randomNormal([10, 1])).print();\n     * ```\n     * @param layer Layer instance.\n     *\n     * @exception ValueError In case the `layer` argument does not know its\n     * input shape.\n     * @exception ValueError In case the `layer` argument has multiple output\n     *   tensors, or is already connected somewhere else (forbidden in\n     *   `Sequential` models).\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    add(layer) {\n        const isLayerModelInstance = layer instanceof Sequential || layer instanceof LayersModel;\n        let modelLayer;\n        if (isLayerModelInstance) {\n            modelLayer = layer;\n            if (modelLayer.outputs.length !== 1) {\n                throw new ValueError('All layers in a Sequential model ' +\n                    'should have a single output tensor. ' +\n                    'For multi-output layers, ' +\n                    'use the functional API.');\n            }\n            if (modelLayer.inputs.length !== 1) {\n                throw new ValueError('All layers in a Sequential model ' +\n                    'should have a single input tensor. ' +\n                    'For multi-input layers, ' +\n                    'use the functional API.');\n            }\n        }\n        if (this.outputs.length === 0) {\n            // first layer in model: check that it is an input layer\n            if (layer.inboundNodes.length === 0) {\n                // create an input layer\n                if (layer.batchInputShape == null) {\n                    throw new ValueError('The first layer in a Sequential model must ' +\n                        'get an `inputShape` or `batchInputShape` argument.');\n                }\n                // Instantiate the input layer.\n                const x = Input({\n                    batchShape: layer.batchInputShape,\n                    dtype: layer.dtype,\n                    name: layer.name + '_input'\n                });\n                // This will build the current layer and create the node connecting\n                // the current layer to the input layer we just created.\n                layer.apply(x);\n            }\n            if (isLayerModelInstance) {\n                this.outputs = modelLayer.outputs;\n                this.inputs = modelLayer.inputs;\n            }\n            else {\n                if (layer.inboundNodes.length !== 1) {\n                    throw new ValueError('A layer added to a Sequential model must not already be ' +\n                        `connected somewhere else. LayersModel received layer ${layer.name} ` +\n                        `which has ${layer.inboundNodes.length} pre-existing inbound ` +\n                        'connections.');\n                }\n                if (layer.inboundNodes[0].outputTensors.length !== 1) {\n                    throw new ValueError('All layers in a Sequential model ' +\n                        'should have a single output tensor. ' +\n                        'For multi-output layers, ' +\n                        'use the functional API.');\n                }\n                this.checkShape(layer);\n                this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n                this.inputs = getSourceInputs(this.outputs[0]);\n            }\n            this.inboundNodes = [];\n            // We create an input node, which we will keep updated\n            // as we add more layers.\n            // (This call has side effects.)\n            // tslint:disable-next-line:no-unused-expression\n            new Node({\n                outboundLayer: this,\n                inboundLayers: [],\n                nodeIndices: [],\n                tensorIndices: [],\n                inputTensors: this.inputs,\n                outputTensors: this.outputs,\n                // no model-level masking for now\n                inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n                outputMasks: [null],\n                inputShapes: this.inputs.map(x => x.shape),\n                outputShapes: this.outputs[0].shape\n            });\n        }\n        else {\n            const outputTensor = layer.apply(this.outputs[0]);\n            if (Array.isArray(outputTensor)) {\n                throw new TypeError('All layers in a Sequential model ' +\n                    'should have a single output tensor. ' +\n                    'For multi-output layers, ' +\n                    'use the functional API.');\n            }\n            this.checkShape(layer);\n            this.outputs = [outputTensor];\n            // update self.inbound_nodes\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n        this.layers.push(layer);\n        this.built = false;\n    }\n    /**\n     * Removes the last layer in the model.\n     *\n     * @exception TypeError if there are no layers in the model.\n     */\n    pop() {\n        if (this.layers.length === 0) {\n            throw new TypeError('There are no layers in the model.');\n        }\n        this.layers.pop();\n        if (this.layers.length === 0) {\n            this.outputs = [];\n            this.inboundNodes = [];\n            this.outboundNodes = [];\n        }\n        else {\n            const lastLayerIndex = this.layers.length - 1;\n            this.layers[lastLayerIndex].outboundNodes = [];\n            this.outputs = [this.layers[lastLayerIndex].output];\n            // update self.inbound_nodes\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n    }\n    call(inputs, kwargs) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.call(inputs, kwargs);\n    }\n    build(inputShape) {\n        // Call `getExactlyOneShape` without using its return value,\n        // to verify that exactly one input shape is provided.\n        getExactlyOneShape(inputShape);\n        if (this.inputs.length === 0 || this.outputs.length === 0) {\n            throw new TypeError('Sequential model cannot be built: model is empty.' +\n                ' Add some layers first.');\n        }\n        // actually create the model\n        this.model = new LayersModel({\n            inputs: this.inputs,\n            outputs: this.outputs[0],\n            name: this.name + '_model'\n        });\n        this.model.trainable = this.trainable;\n        // mirror model attributes\n        this.supportsMasking = this.model.supportsMasking;\n        // TODO(michaelterry): Add caches\n        this.inputLayers = this.model.inputLayers;\n        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n        this.outputLayers = this.model.outputLayers;\n        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n        this.nodesByDepth = this.model.nodesByDepth;\n        this.containerNodes = this.model.containerNodes;\n        this.outputNames = this.model.outputNames;\n        this.inputNames = this.model.inputNames;\n        // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n        // TODO(michaelterry): Add callbackModel if needed.\n        this.built = true;\n    }\n    countParams() {\n        if (!this.built) {\n            this.build();\n        }\n        return super.countParams();\n    }\n    /**\n     * Print a text summary of the Sequential model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - The total number of trainable and non-trainable parameters of the\n     * model.\n     *\n     * ```js\n     * const model = tf.sequential();\n     * model.add(\n     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\n     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n     *\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            this.build();\n        }\n        super.summary(lineLength, positions, printFn);\n    }\n    /**\n     * Sets the weights of the model.\n     *\n     * @param weights Should be a list of Tensors with shapes and types matching\n     *   the output of `model.getWeights()`.\n     */\n    setWeights(weights) {\n        if (this.model == null) {\n            this.build();\n        }\n        this.model.setWeights(weights);\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *   batchSize: 4,\n     * });\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateConfig`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before being used.');\n        }\n        return this.model.evaluate(x, y, args);\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g..\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before being used.');\n        }\n        return this.model.evaluateDataset(dataset, args);\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([2, 10])).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param conifg A `ModelPredictConfig` object containing optional fields.\n     *\n     * @return `tf.Tensor`(s) of predictions.\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predict(x, args);\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * @param x: Input samples, as a Tensor, or list of Tensors (if the model\n     *   has multiple inputs).\n     * @return Tensor(s) of predictions\n     */\n    predictOnBatch(x) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predictOnBatch(x);\n    }\n    /**\n     * See `LayersModel.compile`.\n     *\n     * @param args\n     */\n    compile(args) {\n        this.build();\n        this.model.compile(args);\n        this.optimizer_ = this.model.optimizer;\n        // tslint:disable-next-line:no-any\n        this.isOptimizerOwned = this.model.isOptimizerOwned;\n        this.loss = this.model.loss;\n        this.metrics = this.model.metrics;\n        // TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n        //   this.weightedMetrics, this.targets.\n        this.metricsTensors = this.model.metricsTensors;\n        this.metricsNames = this.model.metricsNames;\n        // TODO(cais): Add sampleWeights.\n    }\n    get optimizer() {\n        return this.model == null ? undefined : this.model.optimizer;\n    }\n    set optimizer(optimizer) {\n        this.model.optimizer = optimizer;\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *   batchSize: 4,\n     *   epochs: 3\n     * });\n     * console.log(history.history.loss[0]);\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you can\n     * also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named, you\n     *  can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args  A `ModelFitConfig`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before ' +\n                'being used.');\n        }\n        return this.model.fit(x, y, args);\n    }\n    /**\n     * Trains the model using a dataset object.\n     *\n     * ```js\n     * const xArray = [\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n     * ];\n     * const yArray = [1, 1, 1, 1];\n     * // Create a dataset from the JavaScript array.\n     * const xDataset = tf.data.array(xArray);\n     * const yDataset = tf.data.array(yArray);\n     * // Zip combines the `x` and `y` Datasets into a single Dataset, the\n     * // iterator of which will return an object containing of two tensors,\n     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle\n     * // four such samples into a single object, with the same keys now pointing\n     * // to tensors that hold 4 examples, organized along the batch dimension.\n     * // The call to `shuffle(4)` causes each iteration through the dataset to\n     * // happen in a different order.  The size of the shuffle window is 4.\n     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})\n     *     .batch(4)\n     *     .shuffle(4);\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const history = await model.fitDataset(xyDataset, {\n     *   epochs: 4,\n     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}\n     * });\n     * ```\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected to\n     *   generate a dataset iterator object, the `next()` method of which is\n     *   expected to produce data batches for evaluation. The return value of the\n     *   `next()` call ought to contain a boolean `done` field and a `value`\n     *   field.\n     *\n     *   The `value` field is expected to be an object of with fields\n     *   `xs` and `ys`, which point to the feature tensor and the target tensor,\n     *   respectively. This case is for models with exactly one input and one\n     *   output (e.g.. a sequential model). For example:\n     *   ```js\n     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}\n     *   ```\n     *\n     *   If the model has multiple inputs, the `xs` field of `value` should\n     *   be an object mapping input names to their respective feature tensors.\n     *   For example:\n     *   ```js\n     *   {\n     *     value: {\n     *       xs: {\n     *         input_1: xsTensor1,\n     *         input_2: xsTensor2\n     *       },\n     *       ys: ysTensor\n     *     },\n     *     done: false\n     *   }\n     *   ```\n     *   If the model has multiple outputs, the `ys` field of `value` should\n     *   be an object mapping output names to their respective target tensors.\n     *   For example:\n     *   ```js\n     *   {\n     *     value: {\n     *       xs: xsTensor,\n     *       ys: {\n     *         output_1: ysTensor1,\n     *         output_2: ysTensor2\n     *       },\n     *     },\n     *     done: false\n     *   }\n     *   ```\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async fitDataset(dataset, args) {\n        if (!this.built) {\n            throw new RuntimeError('The model needs to be compiled before ' +\n                'being used.');\n        }\n        return this.model.fitDataset(dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and matric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target darta. It could be either a `tf.Tensor` a multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        return this.model.trainOnBatch(x, y);\n    }\n    /* See parent class for JsDoc */\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {\n        let configArray;\n        let extraModelConfig = {};\n        if (config instanceof Array) {\n            if (!(config[0].className != null) ||\n                config[0]['className'] === 'Merge') {\n                throw new ValueError('Legacy serialization format not supported yet.');\n            }\n            configArray = config;\n        }\n        else {\n            util.assert(config['layers'] != null, () => `When the config data for a Sequential model is not an Array, ` +\n                `it must be an Object that contains the 'layers' field.`);\n            configArray = config['layers'];\n            delete config['layers'];\n            extraModelConfig = config;\n        }\n        const model = new cls(extraModelConfig);\n        if (!(model instanceof Sequential)) {\n            throw new NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${model}`);\n        }\n        for (const conf of configArray) {\n            const customObjects = undefined;\n            const layer = deserialize(conf, customObjects, fastWeightInit);\n            if (fastWeightInit) {\n                layer.setFastWeightInitDuringBuild(true);\n            }\n            model.add(layer);\n        }\n        return model;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const model = tf.sequential();\n     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10 values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        // TODO(cais): When refactoring to remove the composition pattern happens,\n        // remove this method overriding.\n        if (this.model == null) {\n            throw new ValueError('Cannot set the stopTraining property of a sequential model before ' +\n                'it is compiled.');\n        }\n        this.model.stopTraining = stop;\n    }\n    get stopTraining() {\n        if (this.model == null) {\n            throw new ValueError('Cannot get the stopTraining property of a sequential model before ' +\n                'it is compiled.');\n        }\n        return this.model.stopTraining;\n    }\n    // TODO(cais): Override get trainableWeights() here\n    // tslint:disable-next-line:no-any\n    getConfig() {\n        // NOTE(cais): We override the return type of getConfig() to `any` here,\n        //   because the `Sequential` class is a special case among `Container`\n        //   subtypes in that its getConfig() method returns an Array (not a\n        //   dict).\n        const layers = [];\n        for (const layer of this.layers) {\n            const dict = {};\n            dict['className'] = layer.getClassName();\n            dict['config'] = layer.getConfig();\n            layers.push(dict);\n        }\n        return { name: this.name, layers };\n    }\n}\n/** @nocollapse */\nSequential.className = 'Sequential';\nserialization.registerClass(Sequential);\n//# sourceMappingURL=models.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport class Activation extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x: Input.\n     * @param alpha: Scaling factor the negative section.\n     * @return Output of the ELU activation.\n     */\n    apply(x, alpha = 1) {\n        return K.elu(x, alpha);\n    }\n}\n/** @nocollapse */\nElu.className = 'elu';\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n    apply(x) {\n        return tfc.selu(x);\n    }\n}\n/** @nocollapse */\nSelu.className = 'selu';\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n    apply(x) {\n        return tfc.relu(x);\n    }\n}\n/** @nocollapse */\nRelu.className = 'relu';\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n    apply(x) {\n        return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n    }\n}\n/** @nocollapse */\nRelu6.className = 'relu6';\nserialization.registerClass(Relu6);\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n    apply(x) {\n        return x;\n    }\n}\n/** @nocollapse */\nLinear.className = 'linear';\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n    apply(x) {\n        return tfc.sigmoid(x);\n    }\n}\n/** @nocollapse */\nSigmoid.className = 'sigmoid';\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n    apply(x) {\n        return K.hardSigmoid(x);\n    }\n}\n/** @nocollapse */\nHardSigmoid.className = 'hardSigmoid';\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n    apply(x) {\n        return tfc.softplus(x);\n    }\n}\n/** @nocollapse */\nSoftplus.className = 'softplus';\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n    apply(x) {\n        return K.softsign(x);\n    }\n}\n/** @nocollapse */\nSoftsign.className = 'softsign';\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n    apply(x) {\n        return tfc.tanh(x);\n    }\n}\n/** @nocollapse */\nTanh.className = 'tanh';\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.softmax(x, axis);\n    }\n}\n/** @nocollapse */\nSoftmax.className = 'softmax';\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n    /**\n     * Calculate the activation function of log softmax:\n     * log( exp(x_i) / sum(exp(x)) )\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.logSoftmax(x, axis);\n    }\n}\n/** @nocollapse */\nLogSoftmax.className = 'logSoftmax';\nserialization.registerClass(LogSoftmax);\nexport function serializeActivation(activation) {\n    return activation.getClassName();\n}\nexport function deserializeActivation(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n    if (identifier == null) {\n        const config = {};\n        config['className'] = 'linear';\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    if (typeof identifier === 'string') {\n        const config = {};\n        config['className'] = identifier;\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    else if (identifier instanceof Activation) {\n        return identifier;\n    }\n    else {\n        return deserializeActivation(identifier);\n    }\n}\n//# sourceMappingURL=activations.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n    if (args != null && typeof args !== 'object') {\n        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` +\n            `object, but received: ${args}`);\n    }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {\n}\nexport class L1L2 extends Regularizer {\n    constructor(args) {\n        super();\n        assertObjectArgs(args);\n        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n        this.hasL1 = this.l1 !== 0;\n        this.hasL2 = this.l2 !== 0;\n    }\n    /**\n     * Porting note: Renamed from __call__.\n     * @param x Variable of which to calculate the regularization score.\n     */\n    apply(x) {\n        return tidy(() => {\n            let regularization = zeros([1]);\n            if (this.hasL1) {\n                regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n            }\n            if (this.hasL2) {\n                regularization =\n                    add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n            }\n            return regularization.asScalar();\n        });\n    }\n    getConfig() {\n        return { 'l1': this.l1, 'l2': this.l2 };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls({ l1: config['l1'], l2: config['l2'] });\n    }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nexport function l2(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeRegularizer(config);\n    }\n    else if (identifier instanceof Regularizer) {\n        return identifier;\n    }\n    else {\n        return deserializeRegularizer(identifier);\n    }\n}\n//# sourceMappingURL=regularizers.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n *  Advanced activation layers.\n */\nimport { clipByValue, elu, leakyRelu, prelu, relu, serialization } from '@tensorflow/tfjs-core';\nimport { Softmax as softmaxActivation } from '../activations';\nimport { cast } from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class ReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.supportsMasking = true;\n        if (args != null) {\n            this.maxValue = args.maxValue;\n        }\n    }\n    call(inputs, kwargs) {\n        inputs = getExactlyOneTensor(inputs);\n        let output = relu(inputs);\n        if (this.maxValue != null) {\n            output = clipByValue(output, 0, this.maxValue);\n        }\n        return output;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { maxValue: this.maxValue };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nReLU.className = 'ReLU';\nserialization.registerClass(ReLU);\nexport class LeakyReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA = 0.3;\n        if (args == null) {\n            args = {};\n        }\n        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return leakyRelu(x, this.alpha);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { alpha: this.alpha };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nLeakyReLU.className = 'LeakyReLU';\nserialization.registerClass(LeakyReLU);\nexport class PReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA_INITIALIZER = 'zeros';\n        if (args == null) {\n            args = {};\n        }\n        this.supportsMasking = true;\n        this.alphaInitializer =\n            getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n        this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n        this.alphaConstraint = getConstraint(args.alphaConstraint);\n        if (args.sharedAxes == null) {\n            this.sharedAxes = null;\n        }\n        else if (Array.isArray(args.sharedAxes)) {\n            this.sharedAxes = args.sharedAxes;\n        }\n        else if (typeof args.sharedAxes === 'number') {\n            this.sharedAxes = [args.sharedAxes];\n        }\n        else {\n            throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, ` +\n                `but got ${args.sharedAxes}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const paramShape = inputShape.slice(1);\n        if (this.sharedAxes != null) {\n            for (const i of this.sharedAxes) {\n                paramShape[i - 1] = 1;\n            }\n        }\n        this.alpha = this.addWeight('alpha', paramShape, 'float32', this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);\n        // Set input spec.\n        const axes = {};\n        if (this.sharedAxes != null) {\n            for (let i = 1; i < inputShape.length; ++i) {\n                axes[i] = inputShape[i];\n            }\n        }\n        this.inputSpec = [new InputSpec({\n                ndim: inputShape.length,\n                axes,\n            })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        inputs = getExactlyOneTensor(inputs);\n        return prelu(inputs, this.alpha.read());\n    }\n    getConfig() {\n        const config = {\n            alphaInitializer: serializeInitializer(this.alphaInitializer),\n            alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n            alphaConstraint: serializeConstraint(this.alphaConstraint),\n            sharedAxes: this.sharedAxes\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nPReLU.className = 'PReLU';\nserialization.registerClass(PReLU);\nexport class ELU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_ALPHA = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n            throw new NotImplementedError(`Non-default alpha value (${args.alpha}) is not supported by the ` +\n                `ELU layer yet.`);\n        }\n        this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return elu(x);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { alpha: this.alpha };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nELU.className = 'ELU';\nserialization.registerClass(ELU);\nexport class ThresholdedReLU extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_THETA = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return x.mul(cast(x.greater(this.theta), 'float32'));\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { theta: this.theta };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nThresholdedReLU.className = 'ThresholdedReLU';\nserialization.registerClass(ThresholdedReLU);\nexport class Softmax extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.DEFAULT_AXIS = 1.0;\n        if (args == null) {\n            args = {};\n        }\n        this.softmax = new softmaxActivation().apply;\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    }\n    call(inputs, kwargs) {\n        const x = getExactlyOneTensor(inputs);\n        return this.softmax(x, this.axis);\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const config = { axis: this.axis };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nSoftmax.className = 'Softmax';\nserialization.registerClass(Softmax);\n//# sourceMappingURL=advanced_activations.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return pyListRepeat(value, n);\n    }\n    else {\n        if (value.length !== n) {\n            throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` +\n                ` Received: ${value.length} elements.`);\n        }\n        for (let i = 0; i < n; ++i) {\n            const singleValue = value[i];\n            if (!isInteger(singleValue)) {\n                throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` +\n                    ` integers. Received: ${JSON.stringify(value)} including a` +\n                    ` non-integer number ${singleValue}`);\n            }\n        }\n        return value;\n    }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {\n    if (inputLength == null) {\n        return inputLength;\n    }\n    const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n    let outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    }\n    else { // VALID\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n    if (dimSize == null) {\n        return null;\n    }\n    if (padding === 'valid') {\n        dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n    }\n    else if (padding === 'same') {\n        dimSize = dimSize * strideSize;\n    }\n    else {\n        throw new ValueError(`Unsupport padding mode: ${padding}.`);\n    }\n    return dimSize;\n}\n//# sourceMappingURL=conv_utils.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` +\n                `${x.shape.length} instead.`);\n        }\n        if (kernel.shape.length !== 3) {\n            throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` +\n                `${kernel.shape.length} instead`);\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n                `but received ${x.rank}.`);\n        }\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias,\n            activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n                `${x.rank}.`);\n        }\n        let y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n    constructor(rank, args) {\n        super(args);\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        this.rank = rank;\n        generic_utils.assertPositiveInteger(this.rank, 'rank');\n        if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n            throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` +\n                `not implemented yet.`);\n        }\n        this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n        this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.activation = getActivation(args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (this.rank === 1 &&\n            (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n            throw new ValueError(`dilationRate must be a number or an array of a single number ` +\n                `for 1D convolution, but received ` +\n                `${JSON.stringify(this.dilationRate)}`);\n        }\n        else if (this.rank === 2) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate = [this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 2) {\n                throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n        else if (this.rank === 3) {\n            if (typeof this.dilationRate === 'number') {\n                this.dilationRate =\n                    [this.dilationRate, this.dilationRate, this.dilationRate];\n            }\n            else if (this.dilationRate.length !== 3) {\n                throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` +\n                    `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n            }\n        }\n    }\n    static verifyArgs(args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` +\n                `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n    getConfig() {\n        const config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n    constructor(rank, args) {\n        super(rank, args);\n        this.kernel = null;\n        Conv.verifyArgs(args);\n        this.filters = args.filters;\n        generic_utils.assertPositiveInteger(this.filters, 'filters');\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } }];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs;\n            const biasValue = this.bias == null ? null : this.bias.read();\n            const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n            if (fusedActivationName != null && this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n                }\n                else if (this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else if (this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n                }\n                else {\n                    throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (this.activation != null) {\n                    outputs = this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const newSpace = [];\n        const space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (let i = 0; i < space.length; ++i) {\n            const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        let outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    }\n    getConfig() {\n        const config = {\n            filters: this.filters,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    static verifyArgs(args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` +\n                `but got ${JSON.stringify(args.filters)}`);\n        }\n    }\n}\nexport class Conv2D extends Conv {\n    constructor(args) {\n        super(2, args);\n        Conv2D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` +\n                `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n    constructor(args) {\n        super(3, args);\n        Conv3D.verifyArgs(args);\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new ValueError(`Conv3D expects config.kernelSize to be number or` +\n                    ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n            }\n        }\n    }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n        if (this.padding !== 'same' && this.padding !== 'valid') {\n            throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` +\n                `and 'valid', but received padding mode ${this.padding}`);\n        }\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        const inputDim = inputShape[channelAxis];\n        const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new InputSpec({ ndim: 4, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n                    `received a tensor of rank-${input.shape.length}`);\n            }\n            const inputShape = input.shape;\n            const batchSize = inputShape[0];\n            let hAxis;\n            let wAxis;\n            if (this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            const height = inputShape[hAxis];\n            const width = inputShape[wAxis];\n            const kernelH = this.kernelSize[0];\n            const kernelW = this.kernelSize[1];\n            const strideH = this.strides[0];\n            const strideW = this.strides[1];\n            // Infer the dynamic output shape.\n            const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n            const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            const outputShape = [batchSize, outHeight, outWidth, this.filters];\n            if (this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n            if (this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        let channelAxis;\n        let heightAxis;\n        let widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        const kernelH = this.kernelSize[0];\n        const kernelW = this.kernelSize[1];\n        const strideH = this.strides[0];\n        const strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['dilationRate'];\n        return config;\n    }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class SeparableConv extends Conv {\n    constructor(rank, config) {\n        super(rank, config);\n        this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        this.depthwiseKernel = null;\n        this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` +\n                `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n        }\n        this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n        this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n        this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n        this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n        this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n        this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` +\n                `${this.rank + 2}, but received input shape: ` +\n                `${JSON.stringify(inputShape)}`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError(`The channel dimension of the inputs should be defined, ` +\n                `but found ${JSON.stringify(inputShape[channelAxis])}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        const pointwiseKernelShape = [];\n        for (let i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        const trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: this.rank + 2, axes: { [channelAxis]: inputDim } })];\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let output;\n            if (this.rank === 1) {\n                throw new NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (this.rank === 2) {\n                if (this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n            }\n            if (this.useBias) {\n                output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            if (this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            serializeConstraint(this.pointwiseConstraint);\n        return config;\n    }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n    constructor(args) {\n        super(2, args);\n    }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n    constructor(args) {\n        super(1, args);\n        Conv1D.verifyArgs(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getConfig() {\n        const config = super.getConfig();\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    }\n    static verifyArgs(args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` +\n                `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n        }\n    }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n    constructor(args) {\n        super(args);\n        if (typeof args.cropping === 'number') {\n            this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            this.cropping = args.cropping;\n        }\n        this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        this.inputSpec = [{ ndim: 4 }];\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n            }\n            else {\n                const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n            }\n        });\n    }\n    getConfig() {\n        const config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_SIZE = [2, 2];\n        this.inputSpec = [{ ndim: 4 }];\n        this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    }\n    computeOutputShape(inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            let input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            if (this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                const height = this.size[0] * inputShape[2];\n                const width = this.size[1] * inputShape[3];\n                const resized = input.resizeNearestNeighbor([height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                const height = this.size[0] * inputShape[1];\n                const width = this.size[1] * inputShape[2];\n                return input.resizeNearestNeighbor([height, width]);\n            }\n        });\n    }\n    getConfig() {\n        const config = { size: this.size, dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);\n//# sourceMappingURL=convolutional.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n                `${x.rank}-D`);\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` +\n                `${depthwiseKernel.rank}-D`);\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexport class DepthwiseConv2D extends BaseConv {\n    constructor(args) {\n        super(2, args);\n        this.depthwiseKernel = null;\n        this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n        this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` +\n                `Received input shape: ${JSON.stringify(inputShape)}.`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                `be defined, but is not (${inputShape[channelAxis]}).`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (this.useBias) {\n                outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        const outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    }\n    getConfig() {\n        const config = super.getConfig();\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);\n//# sourceMappingURL=convolutional_depthwise.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n    if (Array.isArray(inputs)) {\n        if (initialState != null || constants != null) {\n            throw new ValueError('When inputs is an array, neither initialState or constants ' +\n                'should be provided');\n        }\n        if (numConstants != null) {\n            constants = inputs.slice(inputs.length - numConstants, inputs.length);\n            inputs = inputs.slice(0, inputs.length - numConstants);\n        }\n        if (inputs.length > 1) {\n            initialState = inputs.slice(1, inputs.length);\n        }\n        inputs = inputs[0];\n    }\n    function toListOrNull(x) {\n        if (x == null || Array.isArray(x)) {\n            return x;\n        }\n        else {\n            return [x];\n        }\n    }\n    initialState = toListOrNull(initialState);\n    constants = toListOrNull(constants);\n    return { inputs, initialState, constants };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n    return tfc.tidy(() => {\n        const ndim = inputs.shape.length;\n        if (ndim < 3) {\n            throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n        }\n        // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n        // ...].\n        const axes = [1, 0].concat(math_utils.range(2, ndim));\n        inputs = tfc.transpose(inputs, axes);\n        if (constants != null) {\n            throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' +\n                'constants yet.');\n        }\n        // Porting Note: the unroll option is ignored by the imperative backend.\n        if (unroll) {\n            console.warn('Backend rnn(): the unroll = true option is not applicable to the ' +\n                'imperative deeplearn.js backend.');\n        }\n        if (mask != null) {\n            mask = mask.asType('bool').asType('float32');\n            if (mask.rank === ndim - 1) {\n                mask = tfc.expandDims(mask, -1);\n            }\n            mask = tfc.transpose(mask, axes);\n        }\n        if (goBackwards) {\n            inputs = tfc.reverse(inputs, 0);\n            if (mask != null) {\n                mask = tfc.reverse(mask, 0);\n            }\n        }\n        // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n        //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n        //   use the usual TypeScript control flow to iterate over the time steps in\n        //   the inputs.\n        // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n        // outputs.\n        //   This is not idiomatic in TypeScript. The info regarding whether we are\n        //   in a learning (i.e., training) phase for RNN is passed in a different\n        //   way.\n        const perStepOutputs = [];\n        let lastOutput;\n        let states = initialStates;\n        const timeSteps = inputs.shape[0];\n        const perStepInputs = tfc.unstack(inputs);\n        let perStepMasks;\n        if (mask != null) {\n            perStepMasks = tfc.unstack(mask);\n        }\n        for (let t = 0; t < timeSteps; ++t) {\n            const currentInput = perStepInputs[t];\n            const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n            if (mask == null) {\n                lastOutput = stepOutputs[0];\n                states = stepOutputs[1];\n            }\n            else {\n                const maskedOutputs = tfc.tidy(() => {\n                    const stepMask = perStepMasks[t];\n                    const negStepMask = tfc.onesLike(stepMask).sub(stepMask);\n                    // TODO(cais): Would tfc.where() be better for performance?\n                    const output = stepOutputs[0].mul(stepMask).add(states[0].mul(negStepMask));\n                    const newStates = states.map((state, i) => {\n                        return stepOutputs[1][i].mul(stepMask).add(state.mul(negStepMask));\n                    });\n                    return { output, newStates };\n                });\n                lastOutput = maskedOutputs.output;\n                states = maskedOutputs.newStates;\n            }\n            if (needPerStepOutputs) {\n                perStepOutputs.push(lastOutput);\n            }\n        }\n        let outputs;\n        if (needPerStepOutputs) {\n            const axis = 1;\n            outputs = tfc.stack(perStepOutputs, axis);\n        }\n        return [lastOutput, outputs, states];\n    });\n}\nexport class RNN extends Layer {\n    constructor(args) {\n        super(args);\n        let cell;\n        if (args.cell == null) {\n            throw new ValueError('cell property is missing for the constructor of RNN.');\n        }\n        else if (Array.isArray(args.cell)) {\n            cell = new StackedRNNCells({ cells: args.cell });\n        }\n        else {\n            cell = args.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +\n                'integers, one integer per RNN state).');\n        }\n        this.cell = cell;\n        this.returnSequences =\n            args.returnSequences == null ? false : args.returnSequences;\n        this.returnState = args.returnState == null ? false : args.returnState;\n        this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n        this._stateful = args.stateful == null ? false : args.stateful;\n        this.unroll = args.unroll == null ? false : args.unroll;\n        this.supportsMasking = true;\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n        this.stateSpec = null;\n        this.states_ = null;\n        // TODO(cais): Add constantsSpec and numConstants.\n        this.numConstants = null;\n        // TODO(cais): Look into the use of initial_state in the kwargs of the\n        //   constructor.\n        this.keptStates = [];\n    }\n    // Porting Note: This is the equivalent of `RNN.states` property getter in\n    //   PyKeras.\n    getStates() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return math_utils.range(0, numStates).map(x => null);\n        }\n        else {\n            return this.states_;\n        }\n    }\n    // Porting Note: This is the equivalent of the `RNN.states` property setter in\n    //   PyKeras.\n    setStates(states) {\n        this.states_ = states;\n    }\n    computeOutputShape(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        // TODO(cais): Remove the casting once stacked RNN cells become supported.\n        let stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        const outputDim = stateSize[0];\n        let outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        }\n        else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            const stateShape = [];\n            for (const dim of stateSize) {\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        }\n        else {\n            return outputShape;\n        }\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (Array.isArray(mask)) {\n                mask = mask[0];\n            }\n            const outputMask = this.returnSequences ? mask : null;\n            if (this.returnState) {\n                const stateMask = this.states.map(s => null);\n                return [outputMask].concat(stateMask);\n            }\n            else {\n                return outputMask;\n            }\n        });\n    }\n    /**\n     * Get the current state tensors of the RNN.\n     *\n     * If the state hasn't been set, return an array of `null`s of the correct\n     * length.\n     */\n    get states() {\n        if (this.states_ == null) {\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            const output = [];\n            for (let i = 0; i < numStates; ++i) {\n                output.push(null);\n            }\n            return output;\n        }\n        else {\n            return this.states_;\n        }\n    }\n    set states(s) {\n        this.states_ = s;\n    }\n    build(inputShape) {\n        // Note inputShape will be an Array of Shapes of initial states and\n        // constants if these are passed in apply().\n        const constantShape = null;\n        if (this.numConstants != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        const batchSize = this.stateful ? inputShape[0] : null;\n        const inputDim = inputShape.slice(2);\n        this.inputSpec[0] = new InputSpec({ shape: [batchSize, null, ...inputDim] });\n        // Allow cell (if RNNCell Layer) to build before we set or validate\n        // stateSpec.\n        const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        else {\n            this.cell.build(stepInputShape);\n        }\n        // Set or validate stateSpec.\n        let stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        }\n        else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n                throw new ValueError(`An initialState was passed that is not compatible with ` +\n                    `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n                    `However cell.stateSize is ${this.cell.stateSize}`);\n            }\n        }\n        else {\n            this.stateSpec =\n                stateSize.map(dim => new InputSpec({ shape: [null, dim] }));\n        }\n        if (this.stateful) {\n            this.resetStates();\n        }\n    }\n    /**\n     * Reset the state tensors of the RNN.\n     *\n     * If the `states` argument is `undefined` or `null`, will set the\n     * state tensor(s) of the RNN to all-zero tensors of the appropriate\n     * shape(s).\n     *\n     * If `states` is provided, will set the state tensors of the RNN to its\n     * value.\n     *\n     * @param states Optional externally-provided initial states.\n     * @param training Whether this call is done during training. For stateful\n     *   RNNs, this affects whether the old states are kept or discarded. In\n     *   particular, if `training` is `true`, the old states will be kept so\n     *   that subsequent backpropgataion through time (BPTT) may work properly.\n     *   Else, the old states will be discarded.\n     */\n    resetStates(states, training = false) {\n        tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const batchSize = this.inputSpec[0].shape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.states_ == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ =\n                        this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n                }\n                else {\n                    this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training === true) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const dim = Array.isArray(this.cell.stateSize) ?\n                        this.cell.stateSize[index] :\n                        this.cell.stateSize;\n                    const expectedShape = [batchSize, dim];\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    apply(inputs, kwargs) {\n        // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n        let initialState = kwargs == null ? null : kwargs['initialState'];\n        let constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        // If any of `initial_state` or `constants` are specified and are\n        // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n        // the input_spec to include them.\n        let additionalInputs = [];\n        let additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (const state of initialState) {\n                this.stateSpec.push(new InputSpec({ shape: state.shape }));\n            }\n            // TODO(cais): Use the following instead.\n            // this.stateSpec = initialState.map(state => new InputSpec({shape:\n            // state.shape}));\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            // TODO(cais): Add this.constantsSpec.\n            this.numConstants = constants.length;\n        }\n        const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n        if (isTensor) {\n            // Compute full input spec, including state and constants.\n            const fullInput = [inputs].concat(additionalInputs);\n            const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            // Perform the call with temporarily replaced inputSpec.\n            const originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            const output = super.apply(fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return super.apply(inputs, kwargs);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    call(inputs, kwargs) {\n        // Input shape: `[samples, time (padded with zeros), input_dim]`.\n        // Note that the .build() method of subclasses **must** define\n        // this.inputSpec and this.stateSpec owith complete input shapes.\n        return tidy(() => {\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            let initialState = kwargs == null ? null : kwargs['initialState'];\n            inputs = getExactlyOneTensor(inputs);\n            if (initialState == null) {\n                if (this.stateful) {\n                    initialState = this.states_;\n                }\n                else {\n                    initialState = this.getInitialState(inputs);\n                }\n            }\n            const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            if (initialState.length !== numStates) {\n                throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` +\n                    `${initialState.length} initial state(s).`);\n            }\n            if (this.unroll) {\n                console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n            }\n            const cellCallKwargs = { training };\n            // TODO(cais): Add support for constants.\n            const step = (inputs, states) => {\n                // `inputs` and `states` are concatenated to form a single `Array` of\n                // `tf.Tensor`s as the input to `cell.call()`.\n                const outputs = this.cell.call([inputs].concat(states), cellCallKwargs);\n                // Marshall the return value into output and new states.\n                return [outputs[0], outputs.slice(1)];\n            };\n            // TODO(cais): Add support for constants.\n            const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n            const lastOutput = rnnOutputs[0];\n            const outputs = rnnOutputs[1];\n            const states = rnnOutputs[2];\n            if (this.stateful) {\n                this.resetStates(states, training);\n            }\n            const output = this.returnSequences ? outputs : lastOutput;\n            // TODO(cais): Porperty set learning phase flag.\n            if (this.returnState) {\n                return [output].concat(states);\n            }\n            else {\n                return output;\n            }\n        });\n    }\n    getInitialState(inputs) {\n        return tidy(() => {\n            // Build an all-zero tensor of shape [samples, outputDim].\n            // [Samples, timeSteps, inputDim].\n            let initialState = tfc.zeros(inputs.shape);\n            // [Samples].\n            initialState = tfc.sum(initialState, [1, 2]);\n            initialState = K.expandDims(initialState); // [Samples, 1].\n            if (Array.isArray(this.cell.stateSize)) {\n                return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n            }\n            else {\n                return this.cell.stateSize > 1 ?\n                    [K.tile(initialState, [1, this.cell.stateSize])] :\n                    [initialState];\n            }\n        });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        return this.cell.trainableWeights;\n    }\n    get nonTrainableWeights() {\n        // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n        if (!this.trainable) {\n            return this.cell.weights;\n        }\n        return this.cell.nonTrainableWeights;\n    }\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.cell != null) {\n            this.cell.setFastWeightInitDuringBuild(value);\n        }\n    }\n    getConfig() {\n        const config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll,\n        };\n        if (this.numConstants != null) {\n            config['numConstants'] = this.numConstants;\n        }\n        const cellConfig = this.cell.getConfig();\n        config['cell'] = {\n            'className': this.cell.getClassName(),\n            'config': cellConfig,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cellConfig = config['cell'];\n        const cell = deserialize(cellConfig, customObjects);\n        return new cls(Object.assign(config, { cell }));\n    }\n}\n/** @nocollapse */\nRNN.className = 'RNN';\nserialization.registerClass(RNN);\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport class RNNCell extends Layer {\n}\nexport class SimpleRNNCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, `units`);\n        this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        // TODO(cais): Use regularizer.\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n    //   `inputs` and `states`. Here, the two tensors are combined into an\n    //   `Tensor[]` Array as the first input argument.\n    //   Similarly, PyKeras' equivalent of this method returns two values:\n    //    `output` and `[output]`. Here the two are combined into one length-2\n    //    `Tensor[]`, consisting of `output` repeated.\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n            }\n            let prevOutput = inputs[1];\n            inputs = inputs[0];\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(prevOutput),\n                    rate: this.recurrentDropout,\n                    training\n                });\n            }\n            let h;\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            if (dpMask != null) {\n                h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n            }\n            else {\n                h = K.dot(inputs, this.kernel.read());\n            }\n            if (this.bias != null) {\n                h = K.biasAdd(h, this.bias.read());\n            }\n            if (recDpMask != null) {\n                prevOutput = tfc.mul(prevOutput, recDpMask);\n            }\n            let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n            if (this.activation != null) {\n                output = this.activation.apply(output);\n            }\n            // TODO(cais): Properly set learning phase on output tensor?\n            return [output, output];\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport class SimpleRNN extends RNN {\n    constructor(args) {\n        args.cell = new SimpleRNNCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    // TODO(cais): Research possibility of refactoring out the tedious all\n    //   the getters that delegate to `this.cell` below.\n    get units() {\n        return this.cell.units;\n    }\n    get activation() {\n        return this.cell.activation;\n    }\n    get useBias() {\n        return this.cell.useBias;\n    }\n    get kernelInitializer() {\n        return this.cell.kernelInitializer;\n    }\n    get recurrentInitializer() {\n        return this.cell.recurrentInitializer;\n    }\n    get biasInitializer() {\n        return this.cell.biasInitializer;\n    }\n    get kernelRegularizer() {\n        return this.cell.kernelRegularizer;\n    }\n    get recurrentRegularizer() {\n        return this.cell.recurrentRegularizer;\n    }\n    get biasRegularizer() {\n        return this.cell.biasRegularizer;\n    }\n    get kernelConstraint() {\n        return this.cell.kernelConstraint;\n    }\n    get recurrentConstraint() {\n        return this.cell.recurrentConstraint;\n    }\n    get biasConstraint() {\n        return this.cell.biasConstraint;\n    }\n    get dropout() {\n        return this.cell.dropout;\n    }\n    get recurrentDropout() {\n        return this.cell.recurrentDropout;\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        const baseConfig = super.getConfig();\n        delete baseConfig['cell'];\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport class GRUCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.resetAfter) {\n            throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.implementation = args.implementation;\n        this.stateSize = this.units;\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (inputs.length !== 2) {\n                throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            inputs = inputs[0];\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2, regardless of the actual value of\n            // config.implementation.\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 3\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 3\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            let z;\n            let r;\n            let hh;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            const recurrentKernelValue = this.recurrentKernel.read();\n            const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n            const matrixInner = K.dot(hTMinus1, rk1);\n            const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n            const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n            z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n            r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n            const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n            hh = this.activation.apply(tfc.add(xH, recurrentH));\n            const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h];\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n            resetAfter: false\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport class GRU extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new GRUCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    get units() {\n        return this.cell.units;\n    }\n    get activation() {\n        return this.cell.activation;\n    }\n    get recurrentActivation() {\n        return this.cell.recurrentActivation;\n    }\n    get useBias() {\n        return this.cell.useBias;\n    }\n    get kernelInitializer() {\n        return this.cell.kernelInitializer;\n    }\n    get recurrentInitializer() {\n        return this.cell.recurrentInitializer;\n    }\n    get biasInitializer() {\n        return this.cell.biasInitializer;\n    }\n    get kernelRegularizer() {\n        return this.cell.kernelRegularizer;\n    }\n    get recurrentRegularizer() {\n        return this.cell.recurrentRegularizer;\n    }\n    get biasRegularizer() {\n        return this.cell.biasRegularizer;\n    }\n    get kernelConstraint() {\n        return this.cell.kernelConstraint;\n    }\n    get recurrentConstraint() {\n        return this.cell.recurrentConstraint;\n    }\n    get biasConstraint() {\n        return this.cell.biasConstraint;\n    }\n    get dropout() {\n        return this.cell.dropout;\n    }\n    get recurrentDropout() {\n        return this.cell.recurrentDropout;\n    }\n    get implementation() {\n        return this.cell.implementation;\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n            resetAfter: false\n        };\n        const baseConfig = super.getConfig();\n        delete baseConfig['cell'];\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport class LSTMCell extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_ACTIVATION = 'tanh';\n        this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION :\n            args.activation);\n        this.recurrentActivation = getActivation(args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n        this.useBias = args.useBias == null ? true : args.useBias;\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.unitForgetBias = args.unitForgetBias;\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n        this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n        ]);\n        this.implementation = args.implementation;\n        this.stateSize = [this.units, this.units];\n        this.dropoutMask = null;\n        this.recurrentDropoutMask = null;\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        let biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                const capturedBiasInit = this.biasInitializer;\n                const capturedUnits = this.units;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            // TODO(cais): More informative variable names?\n                            const bI = capturedBiasInit.apply([capturedUnits]);\n                            const bF = (new Ones()).apply([capturedUnits]);\n                            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n                            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n        //   of the weights and bias in the call() method, at execution time.\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            inputs = inputs;\n            if (inputs.length !== 3) {\n                throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            let hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            inputs = inputs[0];\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(inputs),\n                    rate: this.dropout,\n                    training,\n                    count: 4\n                });\n            }\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: 4\n                });\n            }\n            const dpMask = this.dropoutMask;\n            const recDpMask = this.recurrentDropoutMask;\n            // Note: For superior performance, TensorFlow.js always uses\n            // implementation 2 regardless of the actual value of\n            // config.implementation.\n            let i;\n            let f;\n            let c;\n            let o;\n            if (0 < this.dropout && this.dropout < 1) {\n                inputs = tfc.mul(inputs, dpMask[0]);\n            }\n            let z = K.dot(inputs, this.kernel.read());\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n                hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n            }\n            z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n            i = this.recurrentActivation.apply(z0);\n            f = this.recurrentActivation.apply(z1);\n            c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n            o = this.recurrentActivation.apply(z3);\n            const h = tfc.mul(o, this.activation.apply(c));\n            // TODO(cais): Add use_learning_phase flag properly.\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport class LSTM extends RNN {\n    constructor(args) {\n        if (args.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        args.cell = new LSTMCell(args);\n        super(args);\n        // TODO(cais): Add activityRegularizer.\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    get units() {\n        return this.cell.units;\n    }\n    get activation() {\n        return this.cell.activation;\n    }\n    get recurrentActivation() {\n        return this.cell.recurrentActivation;\n    }\n    get useBias() {\n        return this.cell.useBias;\n    }\n    get kernelInitializer() {\n        return this.cell.kernelInitializer;\n    }\n    get recurrentInitializer() {\n        return this.cell.recurrentInitializer;\n    }\n    get biasInitializer() {\n        return this.cell.biasInitializer;\n    }\n    get unitForgetBias() {\n        return this.cell.unitForgetBias;\n    }\n    get kernelRegularizer() {\n        return this.cell.kernelRegularizer;\n    }\n    get recurrentRegularizer() {\n        return this.cell.recurrentRegularizer;\n    }\n    get biasRegularizer() {\n        return this.cell.biasRegularizer;\n    }\n    get kernelConstraint() {\n        return this.cell.kernelConstraint;\n    }\n    get recurrentConstraint() {\n        return this.cell.recurrentConstraint;\n    }\n    get biasConstraint() {\n        return this.cell.biasConstraint;\n    }\n    get dropout() {\n        return this.cell.dropout;\n    }\n    get recurrentDropout() {\n        return this.cell.recurrentDropout;\n    }\n    get implementation() {\n        return this.cell.implementation;\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            recurrentActivation: serializeActivation(this.recurrentActivation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        const baseConfig = super.getConfig();\n        delete baseConfig['cell'];\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport class StackedRNNCells extends RNNCell {\n    constructor(args) {\n        super(args);\n        this.cells = args.cells;\n    }\n    get stateSize() {\n        // States are a flat list in reverse order of the cell stack.\n        // This allows perserving the requirement `stack.statesize[0] ===\n        // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n        // assuming one LSTM has states `[h, c]`.\n        const stateSize = [];\n        for (const cell of this.cells.slice().reverse()) {\n            if (Array.isArray(cell.stateSize)) {\n                stateSize.push(...cell.stateSize);\n            }\n            else {\n                stateSize.push(cell.stateSize);\n            }\n        }\n        return stateSize;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            let states = inputs.slice(1);\n            // Recover per-cell states.\n            const nestedStates = [];\n            for (const cell of this.cells.slice().reverse()) {\n                if (Array.isArray(cell.stateSize)) {\n                    nestedStates.push(states.splice(0, cell.stateSize.length));\n                }\n                else {\n                    nestedStates.push(states.splice(0, 1));\n                }\n            }\n            nestedStates.reverse();\n            // Call the cells in order and store the returned states.\n            const newNestedStates = [];\n            let callInputs;\n            for (let i = 0; i < this.cells.length; ++i) {\n                const cell = this.cells[i];\n                states = nestedStates[i];\n                // TODO(cais): Take care of constants.\n                if (i === 0) {\n                    callInputs = [inputs[0]].concat(states);\n                }\n                else {\n                    callInputs = [callInputs[0]].concat(states);\n                }\n                callInputs = cell.call(callInputs, kwargs);\n                newNestedStates.push(callInputs.slice(1));\n            }\n            // Format the new states as a flat list in reverse cell order.\n            states = [];\n            for (const cellStates of newNestedStates.slice().reverse()) {\n                states.push(...cellStates);\n            }\n            return [callInputs[0]].concat(states);\n        });\n    }\n    build(inputShape) {\n        if (isArrayOfShapes(inputShape)) {\n            // TODO(cais): Take care of input constants.\n            // const constantShape = inputShape.slice(1);\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        let outputDim;\n        this.cells.forEach((cell, i) => {\n            nameScope(`RNNCell_${i}`, () => {\n                // TODO(cais): Take care of input constants.\n                cell.build(inputShape);\n                if (Array.isArray(cell.stateSize)) {\n                    outputDim = cell.stateSize[0];\n                }\n                else {\n                    outputDim = cell.stateSize;\n                }\n                inputShape = [inputShape[0], outputDim];\n            });\n        });\n        this.built = true;\n    }\n    getConfig() {\n        const cellConfigs = [];\n        for (const cell of this.cells) {\n            cellConfigs.push({\n                'className': cell.getClassName(),\n                'config': cell.getConfig(),\n            });\n        }\n        const config = { 'cells': cellConfigs };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const cells = [];\n        for (const cellConfig of config['cells']) {\n            cells.push(deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells });\n    }\n    get trainableWeights() {\n        if (!this.trainable) {\n            return [];\n        }\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.trainableWeights);\n        }\n        return weights;\n    }\n    get nonTrainableWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.nonTrainableWeights);\n        }\n        if (!this.trainable) {\n            const trainableWeights = [];\n            for (const cell of this.cells) {\n                trainableWeights.push(...cell.trainableWeights);\n            }\n            return trainableWeights.concat(weights);\n        }\n        return weights;\n    }\n    /**\n     * Retrieve the weights of a the model.\n     *\n     * @returns A flat `Array` of `tf.Tensor`s.\n     */\n    getWeights() {\n        const weights = [];\n        for (const cell of this.cells) {\n            weights.push(...cell.weights);\n        }\n        return batchGetValue(weights);\n    }\n    /**\n     * Set the weights of the model.\n     *\n     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n     *     the output of `getWeights()`.\n     */\n    setWeights(weights) {\n        const tuples = [];\n        for (const cell of this.cells) {\n            const numParams = cell.weights.length;\n            const inputWeights = weights.splice(numParams);\n            for (let i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        batchSetValue(tuples);\n    }\n}\n/** @nocollapse */\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n    const { ones, rate, training = false, count = 1 } = args;\n    const droppedInputs = () => K.dropout(ones(), rate);\n    const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n    // just in case count is provided with null or undefined\n    if (!count || count <= 1) {\n        return tfc.keep(createMask().clone());\n    }\n    const masks = Array(count).fill(undefined).map(createMask);\n    return masks.map(m => tfc.keep(m.clone()));\n}\n//# sourceMappingURL=recurrent.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { Initializer } from '../initializers';\nimport { convOutputLength, normalizeArray } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\nimport { generateDropoutMask, LSTMCell, RNN, RNNCell } from './recurrent';\nclass ConvRNN2DCell extends RNNCell {\n}\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n    constructor(args) {\n        if (args.unroll) {\n            throw new NotImplementedError('Unrolling is not possible with convolutional RNNs.');\n        }\n        if (Array.isArray(args.cell)) {\n            throw new NotImplementedError('It is not possible at the moment to stack convolutional cells.');\n        }\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (this.cell.dropoutMask != null) {\n                tfc.dispose(this.cell.dropoutMask);\n                this.cell.dropoutMask = null;\n            }\n            if (this.cell.recurrentDropoutMask != null) {\n                tfc.dispose(this.cell.recurrentDropoutMask);\n                this.cell.recurrentDropoutMask = null;\n            }\n            if (kwargs && kwargs['constants']) {\n                throw new ValueError('ConvRNN2D cell does not support constants');\n            }\n            const mask = kwargs == null ? null : kwargs['mask'];\n            const training = kwargs == null ? null : kwargs['training'];\n            const initialState = kwargs == null ? null : kwargs['initialState'];\n            return super.call(inputs, { mask, training, initialState });\n        });\n    }\n    computeOutputShape(inputShape) {\n        let outShape = this.computeSingleOutputShape(inputShape);\n        if (!this.returnSequences) {\n            outShape = [outShape[0], ...outShape.slice(2)];\n        }\n        if (this.returnState) {\n            outShape =\n                [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n        }\n        return outShape;\n    }\n    getInitialState(inputs) {\n        return tfc.tidy(() => {\n            const { stateSize } = this.cell;\n            const inputShape = inputs.shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const initialState = tfc.zeros(stateShape);\n            if (Array.isArray(stateSize)) {\n                return Array(stateSize.length).fill(initialState);\n            }\n            return [initialState];\n        });\n    }\n    resetStates(states, training = false) {\n        tfc.tidy(() => {\n            if (!this.stateful) {\n                throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n            }\n            const inputShape = this.inputSpec[0].shape;\n            const outputShape = this.computeSingleOutputShape(inputShape);\n            const stateShape = [outputShape[0], ...outputShape.slice(2)];\n            const batchSize = inputShape[0];\n            if (batchSize == null) {\n                throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                    'the batch size of your input tensors: \\n' +\n                    '- If using a Sequential model, specify the batch size by ' +\n                    'passing a `batchInputShape` option to your first layer.\\n' +\n                    '- If using the functional API, specify the batch size by ' +\n                    'passing a `batchShape` option to your Input layer.');\n            }\n            // Initialize state if null.\n            if (this.getStates() == null) {\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_ = [tfc.zeros(stateShape)];\n                }\n            }\n            else if (states == null) {\n                // Dispose old state tensors.\n                tfc.dispose(this.states_);\n                // For stateful RNNs, fully dispose kept old states.\n                if (this.keptStates != null) {\n                    tfc.dispose(this.keptStates);\n                    this.keptStates = [];\n                }\n                if (Array.isArray(this.cell.stateSize)) {\n                    this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n                }\n                else {\n                    this.states_[0] = tfc.zeros(stateShape);\n                }\n            }\n            else {\n                if (!Array.isArray(states)) {\n                    states = [states];\n                }\n                if (states.length !== this.states_.length) {\n                    throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` +\n                        `but it received ${states.length} state value(s). Input ` +\n                        `received: ${states}`);\n                }\n                if (training) {\n                    // Store old state tensors for complete disposal later, i.e., during\n                    // the next no-arg call to this method. We do not dispose the old\n                    // states immediately because that BPTT (among other things) require\n                    // them.\n                    this.keptStates.push(this.states_.slice());\n                }\n                else {\n                    tfc.dispose(this.states_);\n                }\n                for (let index = 0; index < this.states_.length; ++index) {\n                    const value = states[index];\n                    const expectedShape = stateShape;\n                    if (!util.arraysEqual(value.shape, expectedShape)) {\n                        throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` +\n                            `expected shape=${expectedShape}, received shape=${value.shape}`);\n                    }\n                    this.states_[index] = value;\n                }\n            }\n            this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n        });\n    }\n    getConfig() {\n        const _a = super.getConfig(), { 'cell': _ } = _a, config = __rest(_a, ['cell']);\n        const cellConfig = this.cell.getConfig();\n        // this order is necessary, to prevent cell name from replacing layer name\n        return Object.assign({}, cellConfig, config);\n    }\n    computeSingleOutputShape(inputShape) {\n        const { dataFormat, filters, kernelSize, padding, strides, dilationRate } = this.cell;\n        const isChannelsFirst = dataFormat === 'channelsFirst';\n        const h = inputShape[isChannelsFirst ? 3 : 2];\n        const w = inputShape[isChannelsFirst ? 4 : 3];\n        const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n        const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n        const outShape = [\n            ...inputShape.slice(0, 2),\n            ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n        ];\n        return outShape;\n    }\n}\n/** @nocollapse */\nConvRNN2D.className = 'ConvRNN2D';\nexport class ConvLSTM2DCell extends LSTMCell {\n    constructor(args) {\n        const { filters, kernelSize, strides, padding, dataFormat, dilationRate, } = args;\n        super(Object.assign({}, args, { units: filters }));\n        this.filters = filters;\n        assertPositiveInteger(this.filters, 'filters');\n        this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n        this.kernelSize.map(size => assertPositiveInteger(size, 'kernelSize'));\n        this.strides = normalizeArray(strides || 1, 2, 'strides');\n        this.strides.map(stride => assertPositiveInteger(stride, 'strides'));\n        this.padding = padding || 'valid';\n        checkPaddingMode(this.padding);\n        this.dataFormat = dataFormat || 'channelsLast';\n        checkDataFormat(this.dataFormat);\n        this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n        this.dilationRate.map(rate => assertPositiveInteger(rate, 'dilationRate'));\n    }\n    build(inputShape) {\n        var _a;\n        inputShape = getExactlyOneShape(inputShape);\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new ValueError(`The channel dimension of the input should be defined. ` +\n                `Found ${inputShape[channelAxis]}`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const numOfKernels = 4;\n        const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            let biasInitializer;\n            if (this.unitForgetBias) {\n                const init = this.biasInitializer;\n                const filters = this.filters;\n                biasInitializer = new (_a = class CustomInit extends Initializer {\n                        apply(shape, dtype) {\n                            const biasI = init.apply([filters]);\n                            const biasF = tfc.ones([filters]);\n                            const biasCAndO = init.apply([filters * 2]);\n                            return K.concatenate([biasI, biasF, biasCAndO]);\n                        }\n                    },\n                    /** @nocollapse */\n                    _a.className = 'CustomInit',\n                    _a)();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tfc.tidy(() => {\n            if (inputs.length !== 3) {\n                throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n                    `${inputs.length}.`);\n            }\n            const training = kwargs['training'] || false;\n            const x = inputs[0]; // Current input\n            const hTMinus1 = inputs[1]; // Previous memory state.\n            const cTMinus1 = inputs[2]; // Previous carry state.\n            const numOfKernels = 4;\n            if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n                this.dropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(x),\n                    rate: this.dropout,\n                    training,\n                    count: numOfKernels\n                });\n            }\n            const dropoutMask = this.dropoutMask;\n            const applyDropout = (x, mask, index) => {\n                if (!mask || !mask[index]) {\n                    return x;\n                }\n                return tfc.mul(mask[index], x);\n            };\n            let xI = applyDropout(x, dropoutMask, 0);\n            let xF = applyDropout(x, dropoutMask, 1);\n            let xC = applyDropout(x, dropoutMask, 2);\n            let xO = applyDropout(x, dropoutMask, 3);\n            if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n                this.recurrentDropoutMask == null) {\n                this.recurrentDropoutMask = generateDropoutMask({\n                    ones: () => tfc.onesLike(hTMinus1),\n                    rate: this.recurrentDropout,\n                    training,\n                    count: numOfKernels\n                });\n            }\n            const recDropoutMask = this.recurrentDropoutMask;\n            let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n            let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n            let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n            let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n            const kernelChannelAxis = 3;\n            const [kernelI, kernelF, kernelC, kernelO] = tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n            const [biasI, biasF, biasC, biasO] = this.useBias ?\n                tfc.split(this.bias.read(), numOfKernels) :\n                [null, null, null, null];\n            xI = this.inputConv(xI, kernelI, biasI, this.padding);\n            xF = this.inputConv(xF, kernelF, biasF, this.padding);\n            xC = this.inputConv(xC, kernelC, biasC, this.padding);\n            xO = this.inputConv(xO, kernelO, biasO, this.padding);\n            const [recKernelI, recKernelF, recKernelC, recKernelO] = tfc.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n            hI = this.recurrentConv(hI, recKernelI);\n            hF = this.recurrentConv(hF, recKernelF);\n            hC = this.recurrentConv(hC, recKernelC);\n            hO = this.recurrentConv(hO, recKernelO);\n            const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n            const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n            const c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n            const h = tfc.mul(this.recurrentActivation.apply(tfc.add(xO, hO)), this.activation.apply(c));\n            return [h, h, c];\n        });\n    }\n    getConfig() {\n        const _a = super.getConfig(), { 'units': _ } = _a, baseConfig = __rest(_a, ['units']);\n        const config = {\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n        };\n        return Object.assign({}, baseConfig, config);\n    }\n    inputConv(x, w, b, padding) {\n        const out = tfc.conv2d(x, w, this.strides, (padding || 'valid'), this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);\n        if (b) {\n            return K.biasAdd(out, b, this.dataFormat);\n        }\n        return out;\n    }\n    recurrentConv(x, w) {\n        const strides = 1;\n        return tfc.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n    }\n}\n/** @nocollapse */\nConvLSTM2DCell.className = 'ConvLSTM2DCell';\ntfc.serialization.registerClass(ConvLSTM2DCell);\nexport class ConvLSTM2D extends ConvRNN2D {\n    constructor(args) {\n        const cell = new ConvLSTM2DCell(args);\n        super(Object.assign({}, args, { cell }));\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/** @nocollapse */\nConvLSTM2D.className = 'ConvLSTM2D';\ntfc.serialization.registerClass(ConvLSTM2D);\n//# sourceMappingURL=convolutional_recurrent.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, notEqual, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Dropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.rate = Math.max(Math.min(args.rate, 1), 0);\n        // So that the scalar doesn't get tidied up between executions.\n        this.noiseShape = args.noiseShape;\n        this.seed = args.seed;\n        this.supportsMasking = true;\n    }\n    getNoiseShape(input) {\n        if (this.noiseShape == null) {\n            return this.noiseShape;\n        }\n        const inputShape = input.shape;\n        const noiseShape = [];\n        for (let i = 0; i < this.noiseShape.length; ++i) {\n            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n        }\n        return noiseShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (0 < this.rate && this.rate < 1) {\n                const training = kwargs['training'] == null ? false : kwargs['training'];\n                const noiseShape = this.getNoiseShape(input);\n                const output = K.inTrainPhase(() => K.dropout(input, this.rate, noiseShape, this.seed), () => input, training);\n                return output;\n            }\n            return inputs;\n        });\n    }\n    getConfig() {\n        const config = {\n            rate: this.rate,\n            noiseShape: this.noiseShape,\n            seed: this.seed,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    dispose() {\n        return super.dispose();\n    }\n}\n/** @nocollapse */\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport class SpatialDropout1D extends Dropout {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [{ ndim: 3 }];\n    }\n    getNoiseShape(input) {\n        const inputShape = input.shape;\n        return [inputShape[0], 1, inputShape[2]];\n    }\n}\n/** @nocollapse */\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport class Dense extends Layer {\n    constructor(args) {\n        super(args);\n        // Default activation: Linear (none).\n        this.activation = null;\n        this.useBias = true;\n        this.kernel = null;\n        this.bias = null;\n        this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (args.batchInputShape == null && args.inputShape == null &&\n            args.inputDim != null) {\n            // This logic is copied from Layer's constructor, since we can't\n            // do exactly what the Python constructor does for Dense().\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            this.batchInputShape = [batchSize, args.inputDim];\n        }\n        this.units = args.units;\n        assertPositiveInteger(this.units, 'units');\n        this.activation = getActivation(args.activation);\n        if (args.useBias != null) {\n            this.useBias = args.useBias;\n        }\n        this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.biasInitializer =\n            getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n        this.kernelConstraint = getConstraint(args.kernelConstraint);\n        this.biasConstraint = getConstraint(args.biasConstraint);\n        this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n        this.biasRegularizer = getRegularizer(args.biasRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.supportsMasking = true;\n        this.inputSpec = [{ minNDim: 2 }];\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const inputLastDim = inputShape[inputShape.length - 1];\n        if (this.kernel == null) {\n            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n            if (this.useBias) {\n                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n            }\n        }\n        this.inputSpec = [{ minNDim: 2, axes: { [-1]: inputLastDim } }];\n        this.built = true;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        outputShape[outputShape.length - 1] = this.units;\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Dense layer accepts only a single input.\n            const input = getExactlyOneTensor(inputs);\n            const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n            let output;\n            if (fusedActivationName != null) {\n                output = K.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);\n            }\n            else {\n                output = K.dot(input, this.kernel.read());\n                if (this.bias != null) {\n                    output = K.biasAdd(output, this.bias.read());\n                }\n                if (this.activation != null) {\n                    output = this.activation.apply(output);\n                }\n            }\n            return output;\n        });\n    }\n    getConfig() {\n        const config = {\n            units: this.units,\n            activation: serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: serializeInitializer(this.kernelInitializer),\n            biasInitializer: serializeInitializer(this.biasInitializer),\n            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: serializeConstraint(this.kernelConstraint),\n            biasConstraint: serializeConstraint(this.biasConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport class Flatten extends Layer {\n    constructor(args) {\n        args = args || {};\n        super(args);\n        this.inputSpec = [{ minNDim: 3 }];\n        this.dataFormat = args.dataFormat;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        for (const dim of inputShape.slice(1)) {\n            if (dim == null) {\n                throw new ValueError(`The shape of the input to \"Flatten\" is not fully defined ` +\n                    `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n                    `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n                    `layer in your model.`);\n            }\n        }\n        return [inputShape[0], arrayProd(inputShape, 1)];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            let input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n                const permutation = [0];\n                for (let i = 2; i < input.rank; ++i) {\n                    permutation.push(i);\n                }\n                permutation.push(1);\n                input = input.transpose(permutation);\n            }\n            return K.batchFlatten(input);\n        });\n    }\n    getConfig() {\n        const config = {};\n        if (this.dataFormat != null) {\n            config['dataFormat'] = this.dataFormat;\n        }\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport class Activation extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.activation = getActivation(args.activation);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            return this.activation.apply(input);\n        });\n    }\n    getConfig() {\n        const config = { activation: serializeActivation(this.activation) };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport class RepeatVector extends Layer {\n    constructor(args) {\n        super(args);\n        this.n = args.n;\n        this.inputSpec = [{ ndim: 2 }];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], this.n, inputShape[1]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            return K.repeat(inputs, this.n);\n        });\n    }\n    getConfig() {\n        const config = {\n            n: this.n,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport class Reshape extends Layer {\n    constructor(args) {\n        super(args);\n        this.targetShape = args.targetShape;\n        // Make sure that all unknown dimensions are represented as `null`.\n        for (let i = 0; i < this.targetShape.length; ++i) {\n            if (this.isUnknown(this.targetShape[i])) {\n                this.targetShape[i] = null;\n            }\n        }\n    }\n    isUnknown(dim) {\n        return dim < 0 || dim == null;\n    }\n    /**\n     * Finds and replaces a missing dimension in output shape.\n     *\n     * This is a near direct port of the internal Numpy function\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n     *\n     * @param inputShape: Original shape of array begin reshape.\n     * @param outputShape: Target shape of the array, with at most a single\n     * `null` or negative number, which indicates an underdetermined dimension\n     * that should be derived from `inputShape` and the known dimensions of\n     *   `outputShape`.\n     * @returns: The output shape with `null` replaced with its computed value.\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n     */\n    fixUnknownDimension(inputShape, outputShape) {\n        const errorMsg = 'Total size of new array must be unchanged.';\n        const finalShape = outputShape.slice();\n        let known = 1;\n        let unknown = null;\n        for (let i = 0; i < finalShape.length; ++i) {\n            const dim = finalShape[i];\n            if (this.isUnknown(dim)) {\n                if (unknown === null) {\n                    unknown = i;\n                }\n                else {\n                    throw new ValueError('Can only specifiy one unknown dimension.');\n                }\n            }\n            else {\n                known *= dim;\n            }\n        }\n        const originalSize = arrayProd(inputShape);\n        if (unknown !== null) {\n            if (known === 0 || originalSize % known !== 0) {\n                throw new ValueError(errorMsg);\n            }\n            finalShape[unknown] = originalSize / known;\n        }\n        else if (originalSize !== known) {\n            throw new ValueError(errorMsg);\n        }\n        return finalShape;\n    }\n    computeOutputShape(inputShape) {\n        let anyUnknownDims = false;\n        for (let i = 0; i < inputShape.length; ++i) {\n            if (this.isUnknown(inputShape[i])) {\n                anyUnknownDims = true;\n                break;\n            }\n        }\n        if (anyUnknownDims) {\n            return inputShape.slice(0, 1).concat(this.targetShape);\n        }\n        else {\n            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n            return input.reshape(outputShape);\n        });\n    }\n    getConfig() {\n        const config = {\n            targetShape: this.targetShape,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport class Permute extends Layer {\n    constructor(args) {\n        super(args);\n        if (args.dims == null) {\n            throw new Error('Required configuration field `dims` is missing during Permute ' +\n                'constructor call.');\n        }\n        if (!Array.isArray(args.dims)) {\n            throw new Error('Permute constructor requires `dims` to be an Array, but received ' +\n                `${args.dims} instead.`);\n        }\n        // Check the validity of the permutation indices.\n        const expectedSortedIndices = range(1, args.dims.length + 1);\n        if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n            throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n                ' `dims` must contain consecutive integers starting from 1.');\n        }\n        this.dims = args.dims;\n        this.dimsIncludingBatch = [0].concat(this.dims);\n        this.inputSpec = [new InputSpec({ ndim: this.dims.length + 1 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const outputShape = inputShape.slice();\n        this.dims.forEach((dim, i) => {\n            outputShape[i + 1] = inputShape[dim];\n        });\n        return outputShape;\n    }\n    call(inputs, kwargs) {\n        return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n    }\n    getConfig() {\n        const config = {\n            dims: this.dims,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport class Masking extends Layer {\n    constructor(args) {\n        super(args == null ? {} : args);\n        this.supportsMasking = true;\n        if (args != null) {\n            this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n        }\n        else {\n            this.maskValue = 0;\n        }\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { maskValue: this.maskValue };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeMask(inputs, mask) {\n        const input = getExactlyOneTensor(inputs);\n        const axis = -1;\n        return any(notEqual(input, this.maskValue), axis);\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const axis = -1;\n            const keepDims = true;\n            const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n            const output = input.mul(booleanMask.asType(input.dtype));\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMasking.className = 'Masking';\nserialization.registerClass(Masking);\n//# sourceMappingURL=core.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), input.as1D());\n            return output.reshape(getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);\n//# sourceMappingURL=embeddings.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport class Merge extends Layer {\n    constructor(args) {\n        super(args || {});\n        this.supportsMasking = true;\n    }\n    /**\n     * Logic for merging multiple tensors, to be overridden by subclasses.\n     * @param inputs\n     */\n    mergeFunction(inputs) {\n        throw new NotImplementedError();\n    }\n    /**\n     * Computes the shape of the result of an elementwise operation.\n     *\n     * @param shape1: Shape of the first tensor.\n     * @param shape2: Shape of the second tensor.\n     * @returns Expected output shape when an elementwise operation is carried\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\n     *   element-wise operations.\n     */\n    computeElementwiseOpOutputShape(shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        }\n        else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        }\n        else if (shape2.length === 0) {\n            return shape1;\n        }\n        const outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (let k = 0; k < shape2.length; ++k) {\n            const i = shape1[shape1.length - shape2.length + k];\n            const j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            }\n            else if (i === 1) {\n                outputShape.push(j);\n            }\n            else if (j === 1) {\n                outputShape.push(i);\n            }\n            else {\n                if (i !== j) {\n                    throw new ValueError('Operands could not be broadcast together with shapes ' +\n                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            // Make sure that inputShape is an Array of shape.\n            inputShape = [getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' +\n                ` Got ${inputShape.length} input(s).`);\n        }\n        // Make sure that there is at most one unique batch size among the input\n        // shapes.\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new ValueError(`Can not merge tensors with different batch sizes. ` +\n                `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n        }\n        let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        // If the inputs have different ranks, we have to reshape them to make them\n        // broadcastable.\n        const allRanks = inputShape.map(shape => shape.length);\n        if (inputShape.indexOf(null) === -1 &&\n            generic_utils.unique(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        }\n        else {\n            this.reshapeRequired = true;\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (this.reshapeRequired) {\n                const reshapedInputs = [];\n                const inputDims = inputs.map(input => input.rank);\n                if (inputDims.indexOf(null) === -1) {\n                    // If ranks of all inputs are available, we simply expand each of them\n                    // at axis=1 until all of them have the same rank.\n                    const maxNDim = mathUtils.max(inputDims);\n                    for (let x of inputs) {\n                        const xNDim = x.rank;\n                        for (let k = 0; k < maxNDim - xNDim; ++k) {\n                            x = K.expandDims(x, 1);\n                        }\n                        reshapedInputs.push(x);\n                    }\n                    return this.mergeFunction(reshapedInputs);\n                }\n                else {\n                    // Transpose all inputs so that batch size is the last dimension.\n                    // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n                    let transposed = false;\n                    for (const x of inputs) {\n                        const xNDim = x.rank;\n                        if (xNDim == null) {\n                            const xShape = x.shape;\n                            const batchSize = xShape[0];\n                            const newShape = xShape.slice(1).concat([batchSize]);\n                            let xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                            xTransposed = xTransposed.reshape(newShape);\n                            reshapedInputs.push(xTransposed);\n                            transposed = true;\n                        }\n                        else if (xNDim > 1) {\n                            const dims = mathUtils.range(1, xNDim).concat([0]);\n                            reshapedInputs.push(tfc.transpose(x, dims));\n                            transposed = true;\n                        }\n                        else {\n                            // We don't transpose inputs if they are 1D vectors or scalars.\n                            reshapedInputs.push(x);\n                        }\n                    }\n                    let y = this.mergeFunction(reshapedInputs);\n                    const yNDim = y.rank;\n                    if (transposed) {\n                        // If inputs have been transposed, we have to transpose the output\n                        // too.\n                        if (yNDim == null) {\n                            const yShape = y.shape;\n                            const yNDim = yShape.length;\n                            const batchSize = yShape[yNDim - 1];\n                            const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                            y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0])\n                                .reshape(newShape);\n                        }\n                        else if (yNDim > 1) {\n                            const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                            y = tfc.transpose(y, dims);\n                        }\n                    }\n                    return y;\n                }\n            }\n            else {\n                return this.mergeFunction(inputs);\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        let outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        }\n        else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        }\n        else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (mask == null) {\n                return null;\n            }\n            if (!Array.isArray(mask)) {\n                throw new ValueError('`mask` should be an Array');\n            }\n            if (!Array.isArray(inputs)) {\n                throw new ValueError('`inputs` should be an Array');\n            }\n            if (mask.length !== inputs.length) {\n                throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` +\n                    `length, but have different lengths ` +\n                    `(${inputs.length} vs ${mask.length})`);\n            }\n            if (mask.every(m => m == null)) {\n                return null;\n            }\n            mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n            let output = mask[0];\n            for (let i = 1; i < mask.length - 1; ++i) {\n                output = tfc.logicalAnd(output, mask[i]);\n            }\n            return output;\n        });\n    }\n}\nexport class Add extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nAdd.className = 'Add';\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config) {\n    if (Array.isArray(config)) {\n        const layer = new Add({});\n        return layer.apply(config);\n    }\n    else {\n        return new Add(config);\n    }\n}\nexport class Multiply extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.mul(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMultiply.className = 'Multiply';\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config) {\n    if (Array.isArray(config)) {\n        const layer = new Multiply({});\n        return layer.apply(config);\n    }\n    else {\n        return new Multiply(config);\n    }\n}\nexport class Average extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return tfc.mul(1 / inputs.length, output);\n        });\n    }\n}\n/** @nocollapse */\nAverage.className = 'Average';\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config) {\n    if (Array.isArray(config)) {\n        const layer = new Average({});\n        return layer.apply(config);\n    }\n    else {\n        return new Average(config);\n    }\n}\nexport class Maximum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.maximum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMaximum.className = 'Maximum';\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Maximum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Maximum(config);\n    }\n}\nexport class Minimum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.minimum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMinimum.className = 'Minimum';\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Minimum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Minimum(config);\n    }\n}\nexport class Concatenate extends Merge {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_AXIS = -1;\n        if (args == null) {\n            args = {};\n        }\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.]\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n            inputShape.length === 1) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +\n                'inputs');\n        }\n        inputShape = inputShape;\n        let allNoneShape = true;\n        for (const shape of inputShape) {\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        const shapeSet = [];\n        for (let i = 0; i < inputShape.length; ++i) {\n            const shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            let exists = false;\n            for (const shape of shapeSet) {\n                if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' +\n                'except for the concat axis. Got input shapes: ' +\n                JSON.stringify(inputShape));\n        }\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            return K.concatenate(inputs, this.axis);\n        });\n    }\n    computeOutputShape(inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        const inputShapes = inputShape;\n        const outputShape = inputShapes[0].slice();\n        const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        // Porting Note: the line above is because TypeScript doesn't support\n        //   negative indices.\n        for (const shape of inputShapes.slice(1)) {\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        if (mask == null) {\n            return null;\n        }\n        if (!Array.isArray(mask)) {\n            throw new ValueError('`mask` should be an array for Concatenate');\n        }\n        if (!Array.isArray(inputs)) {\n            throw new ValueError('`inputs` should be an array for Concatenate');\n        }\n        if (mask.length !== inputs.length) {\n            throw new ValueError(`Mismatch in the length of mask (${mask.length}) ` +\n                `and the legnth of inputs (${inputs.length})`);\n        }\n        return tfc.tidy(() => {\n            let allNullMasks = true;\n            mask.forEach(m => {\n                if (m != null) {\n                    allNullMasks = false;\n                    return;\n                }\n            });\n            if (allNullMasks) {\n                return null;\n            }\n            const outputMasks = [];\n            for (let i = 0; i < inputs.length; ++i) {\n                if (mask[i] == null) {\n                    // Input is unmasked. Append all 1's to masks.\n                    outputMasks.push(tfc.onesLike(inputs[i]).asType('bool'));\n                }\n                else if (mask[i].rank < inputs[i].rank) {\n                    // Mask is smaller than the input, expand it.\n                    outputMasks.push(tfc.expandDims(mask[i], -1));\n                }\n                else {\n                    outputMasks.push(mask[i]);\n                }\n            }\n            const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n            return tfc.all(concatenatedMasks, -1, false);\n        });\n    }\n    getConfig() {\n        const config = {\n            'axis': this.axis,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nConcatenate.className = 'Concatenate';\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config) {\n    if (Array.isArray(config)) {\n        const layer = new Concatenate({});\n        return layer.apply(config);\n    }\n    else {\n        return new Concatenate(config);\n    }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis, dim) {\n    while (axis < 0) {\n        axis += dim;\n    }\n    return axis;\n}\nfunction batchDot(x, y, axes) {\n    if (x.shape.length > 3 || y.shape.length > 3) {\n        throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n    }\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` +\n        `but got ${x.shape.length}`);\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` +\n        `but got ${y.shape.length}`);\n    if (typeof axes === 'number') {\n        axes = [axes, axes];\n    }\n    if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n        throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n    }\n    const xNDim = x.shape.length;\n    const yNDim = y.shape.length;\n    if (axes == null) {\n        // Behave like batchMatmul by default.\n        axes = [xNDim - 1, yNDim - 2];\n    }\n    const axesArray = axes;\n    return tfc.tidy(() => {\n        let diff;\n        if (xNDim > yNDim) {\n            diff = xNDim - yNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            y = y.reshape(y.shape.concat(diffShape));\n        }\n        else if (yNDim > xNDim) {\n            diff = yNDim - xNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            x = x.reshape(x.shape.concat(diffShape));\n        }\n        else {\n            diff = 0;\n        }\n        let out;\n        if (x.shape.length === 2 && y.shape.length === 2) {\n            if (axesArray[0] === axesArray[1]) {\n                out = x.mul(y).sum(axesArray[0]);\n            }\n            else {\n                out = x.transpose([1, 0]).mul(y).sum(axesArray[1]);\n            }\n        }\n        else {\n            const adjX = axesArray[0] !== x.shape.length - 1;\n            const adjY = axesArray[1] === y.shape.length - 1;\n            out = x.matMul(y, adjX, adjY);\n        }\n        if (diff > 0) {\n            let idx;\n            if (xNDim > yNDim) {\n                idx = xNDim + yNDim - 3;\n            }\n            else {\n                idx = xNDim - 1;\n            }\n            const squeezeAxes = [];\n            for (let i = idx; i < idx + diff; ++i) {\n                squeezeAxes.push(i);\n            }\n            out = out.squeeze(squeezeAxes);\n        }\n        if (out.shape.length === 1) {\n            out = out.expandDims(1);\n        }\n        return out;\n    });\n}\nexport class Dot extends Merge {\n    constructor(args) {\n        super(args);\n        this.axes = args.axes;\n        this.normalize = args.normalize == null ? false : args.normalize;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0];\n        const shape2 = inputShape[1];\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        if (shape1[axes[0]] !== shape2[axes[1]]) {\n            throw new ValueError(`Dimension incompatibility: ` +\n                `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n        }\n    }\n    mergeFunction(inputs) {\n        if (inputs.length !== 2) {\n            throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' +\n                `but received ${inputs.length} input(s).`);\n        }\n        let x1 = inputs[0];\n        let x2 = inputs[1];\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            axes = [\n                interpretAxis(this.axes, x1.shape.length),\n                interpretAxis(this.axes, x2.shape.length)\n            ];\n        }\n        else {\n            axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n        }\n        if (this.normalize) {\n            x1 = l2Normalize(x1, axes[0]);\n            x2 = l2Normalize(x2, axes[1]);\n        }\n        return batchDot(x1, x2, axes);\n    }\n    interpretAxes(shape1, shape2) {\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            // `this.axes` is a single integer.\n            axes = [\n                interpretAxis(this.axes, shape1.length),\n                interpretAxis(this.axes, shape2.length)\n            ];\n        }\n        else {\n            // `this.axes` is an Array of integers.\n            axes = this.axes;\n        }\n        return axes;\n    }\n    computeOutputShape(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0].slice();\n        const shape2 = inputShape[1].slice();\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        shape1.splice(axes[0], 1);\n        shape2.splice(axes[1], 1);\n        shape2.splice(0, 1);\n        const outputShape = shape1.concat(shape2);\n        if (outputShape.length === 1) {\n            outputShape.push(1);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return null;\n    }\n    getConfig() {\n        const config = {\n            'axes': this.axes,\n            'normalize': this.normalize\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDot.className = 'Dot';\nserialization.registerClass(Dot);\n// TODO(cais): Add functional interfaces for the merge layers.\n//# sourceMappingURL=merge.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.stddev = args.stddev;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { stddev: this.stddev };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const noised = () => K.randomNormal(input.shape, 0, this.stddev).add(input);\n            const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (this.rate > 0 && this.rate < 1) {\n                const noised = () => {\n                    const stddev = Math.sqrt(this.rate / (1 - this.rate));\n                    return input.mul(K.randomNormal(input.shape, 1, stddev));\n                };\n                return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            }\n            return input;\n        });\n    }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n        this.noiseShape = args.noiseShape;\n    }\n    _getNoiseShape(inputs) {\n        return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.rate < 1 && this.rate > 0) {\n                const noiseShape = this._getNoiseShape(inputs);\n                const droppedInputs = () => {\n                    const input = getExactlyOneTensor(inputs);\n                    const alpha = 1.6732632423543772848170429916717;\n                    const scale = 1.0507009873554804934193349852946;\n                    const alphaP = -alpha * scale;\n                    let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n                    keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n                    // Get affine transformation params.\n                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n                    const b = -a * alphaP * this.rate;\n                    // Apply mask.\n                    const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n                    return x.mul(a).add(b);\n                };\n                return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n            }\n            return inputs;\n        });\n    }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);\n//# sourceMappingURL=noise.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Normalization layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { moments, serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {\n    let out;\n    if (x.rank === 2) {\n        out = tfc.batchNorm2d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else if (x.rank === 3) {\n        // TODO(cais): Check rank; give proper error message.\n        out = tfc.batchNorm3d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else if (x.rank === 4) {\n        out = tfc.batchNorm4d(x, mean, variance, beta, gamma, epsilon);\n    }\n    else {\n        throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} ` +\n            `yet`);\n    }\n    return out;\n}\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    return tidy(() => {\n        const meanAndVariance = tfc.moments(x, reductionAxes);\n        const mean = meanAndVariance.mean;\n        const variance = meanAndVariance.variance;\n        const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);\n        return [normed, mean, variance];\n    });\n}\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    return tidy(() => {\n        const meanAndVariance = tfc.moments(x, reductionAxes);\n        const mean = meanAndVariance.mean;\n        const variance = meanAndVariance.variance;\n        const targetShape = [];\n        for (const axis of math_utils.range(0, x.rank)) {\n            if (reductionAxes.indexOf(axis) !== -1) {\n                targetShape.push(1);\n            }\n            else {\n                targetShape.push(x.shape[axis]);\n            }\n        }\n        const broadcastMean = mean.reshape(targetShape);\n        const broadcastVariance = variance.reshape(targetShape);\n        const broadcastGamma = gamma == null ? null : gamma.reshape(targetShape);\n        const broadcastBeta = beta == null ? null : beta.reshape(targetShape);\n        const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);\n        return [normed, mean, variance];\n    });\n}\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n    if (util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n        return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n    }\n    else {\n        return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n    }\n}\nexport class BatchNormalization extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.supportsMasking = true;\n        this.axis = args.axis == null ? -1 : args.axis;\n        this.momentum = args.momentum == null ? 0.99 : args.momentum;\n        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n        this.center = args.center == null ? true : args.center;\n        this.scale = args.scale == null ? true : args.scale;\n        this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n        this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n        this.movingMeanInitializer =\n            getInitializer(args.movingMeanInitializer || 'zeros');\n        this.movingVarianceInitializer =\n            getInitializer(args.movingVarianceInitializer || 'ones');\n        this.betaConstraint = getConstraint(args.betaConstraint);\n        this.gammaConstraint = getConstraint(args.gammaConstraint);\n        this.betaRegularizer = getRegularizer(args.betaRegularizer);\n        this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n        const dim = inputShape[axis];\n        if (dim == null) {\n            throw new ValueError(`Axis ${axis} of input tensor should have a defined dimension but ` +\n                `the layer received an input with shape ` +\n                `${JSON.stringify(inputShape)}.`);\n        }\n        this.inputSpec =\n            [new InputSpec({ ndim: inputShape.length, axes: { [axis]: dim } })];\n        const shape = [dim];\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n        }\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const training = kwargs['training'] == null ? false : kwargs['training'];\n            const input = getExactlyOneTensor(inputs);\n            const inputShape = input.shape;\n            const ndim = inputShape.length;\n            const reductionAxes = math_utils.range(0, ndim);\n            const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n            reductionAxes.splice(axis, 1);\n            const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n            broadcastShape[axis] = inputShape[axis];\n            const sortedReductionAxes = reductionAxes.slice();\n            sortedReductionAxes.sort();\n            const needsBroadcasting = !util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n            const normalizeInference = () => {\n                if (needsBroadcasting) {\n                    const broadcastMovingMean = this.movingMean.read().reshape(broadcastShape);\n                    const broadcastMovingVariance = this.movingVariance.read().reshape(broadcastShape);\n                    const broadcastBeta = this.center ? this.beta.read().reshape(broadcastShape) : null;\n                    const broadcastGamma = this.scale ? this.gamma.read().reshape(broadcastShape) : null;\n                    return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);\n                }\n                else {\n                    return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);\n                }\n            };\n            if (!training) {\n                return normalizeInference();\n            }\n            const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);\n            const doMovingAverage = (variable, value, momentum) => {\n                tfc.tidy(() => {\n                    const decay = 1 - momentum;\n                    const origValue = variable.read();\n                    const updateDelta = origValue.sub(value).mul(decay);\n                    variable.write(origValue.sub(updateDelta));\n                });\n            };\n            // Perform updates to moving mean and moving variance for training.\n            // Porting Note: In PyKeras, these updates to `movingMean` and\n            //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n            //   `update`s using the `add_update()` method. Here we do it imperatively\n            //   and encapsulate the updates in a function that is invoked\n            //   immediately.\n            const updateMovingMeanAndVariance = () => {\n                doMovingAverage(this.movingMean, mean, this.momentum);\n                doMovingAverage(this.movingVariance, variance, this.momentum);\n            };\n            updateMovingMeanAndVariance();\n            return normedTraining;\n        });\n    }\n    getConfig() {\n        const config = {\n            axis: this.axis,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: serializeInitializer(this.betaInitializer),\n            gammaInitializer: serializeInitializer(this.gammaInitializer),\n            movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n            movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n            betaRegularizer: serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n            betaConstraint: serializeConstraint(this.betaConstraint),\n            gammaConstraint: serializeConstraint(this.gammaConstraint)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nBatchNormalization.className = 'BatchNormalization';\nserialization.registerClass(BatchNormalization);\nexport class LayerNormalization extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.axis = args.axis == null ? -1 : args.axis;\n        if (typeof this.axis === 'number') {\n            if (!Number.isInteger(this.axis)) {\n                throw new Error(`Expected axis to be an integer, but received ${this.axis}`);\n            }\n        }\n        else if (Array.isArray(this.axis)) {\n            for (const axis of this.axis) {\n                if (!Number.isInteger(axis)) {\n                    throw new Error(`Expected axis to be an array of integers, ` +\n                        `but received ${JSON.stringify(this.axis)}`);\n                }\n            }\n        }\n        else {\n            throw new Error(`Expected axis to be an integer or an array of integers, ` +\n                `but received ${JSON.stringify(this.axis)}`);\n        }\n        this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n        this.center = args.center == null ? true : args.center;\n        this.scale = args.scale == null ? true : args.scale;\n        this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n        this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n        this.betaRegularizer = getRegularizer(args.betaRegularizer);\n        this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n        this.supportsMasking = true;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const nDims = inputShape.length;\n        // Convert axis to array and resolve negatives.\n        if (typeof this.axis === 'number') {\n            this.axis = [this.axis];\n        }\n        for (let i = 0; i < this.axis.length; ++i) {\n            if (this.axis[i] < 0) {\n                this.axis[i] += nDims;\n            }\n        }\n        // Further validate axes.\n        for (const axis of this.axis) {\n            if (axis < 0 || axis >= nDims) {\n                throw new Error(`Invalid axis: ${axis}`);\n            }\n        }\n        if (this.axis.length !== generic_utils.unique(this.axis).length) {\n            throw new Error(`Found duplicate axes in: ${this.axis}`);\n        }\n        const paramShape = this.axis.map(axis => inputShape[axis]);\n        const trainable = true;\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);\n        }\n        else {\n            this.gamma = null;\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);\n        }\n        else {\n            this.beta = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        const input = getExactlyOneTensor(inputs);\n        const inputShape = input.shape;\n        const nDims = inputShape.length;\n        return tidy(() => {\n            const keepDims = true;\n            let { mean, variance } = moments(input, this.axis, keepDims);\n            const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n            for (const dim of this.axis) {\n                broadcastShape[dim] = inputShape[dim];\n            }\n            const broadcast = (v) => {\n                if (v != null && v.shape.length !== nDims &&\n                    this.axis !== [nDims - 1]) {\n                    return v.reshape(broadcastShape);\n                }\n                else {\n                    return v;\n                }\n            };\n            let scale = broadcast(this.gamma.read());\n            let offset = broadcast(this.beta.read());\n            // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n            // is a workaround for the limitation of core's batchNormalization?d don't\n            // support broadcasting in their gradients. In addition, the tiling is\n            // necessary to ensure correctness on the browser CPU backend regardless\n            // of forward or backward computation. Remove this workaround once the\n            // limitation is addressed. See .\n            const momentsTiling = [];\n            const scaleOffsetTiling = [];\n            for (let i = 0; i < nDims; ++i) {\n                if (this.axis.indexOf(i) !== -1) {\n                    momentsTiling.push(inputShape[i]);\n                    scaleOffsetTiling.push(1);\n                }\n                else {\n                    momentsTiling.push(1);\n                    scaleOffsetTiling.push(inputShape[i]);\n                }\n            }\n            mean = mean.tile(momentsTiling);\n            variance = variance.tile(momentsTiling);\n            scale = scale.tile(scaleOffsetTiling);\n            offset = offset.tile(scaleOffsetTiling);\n            return batchNormalization(input, mean, variance, offset, scale, this.epsilon);\n        });\n    }\n    getConfig() {\n        const config = {\n            axis: this.axis,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: serializeInitializer(this.betaInitializer),\n            gammaInitializer: serializeInitializer(this.gammaInitializer),\n            betaRegularizer: serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nLayerNormalization.className = 'LayerNormalization';\nserialization.registerClass(LayerNormalization);\n//# sourceMappingURL=normalization.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x, padding) {\n    return tidy(() => {\n        if (x.rank !== 3) {\n            throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [1, 1];\n        }\n        if (padding.length !== 2) {\n            throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` +\n                `array, but received a length-${padding.length} array.`);\n        }\n        const pattern = [[0, 0], padding, [0, 0]];\n        return tfc.pad(x, pattern);\n    });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(x, padding, dataFormat) {\n    return tidy(() => {\n        if (x.rank !== 4) {\n            throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [[1, 1], [1, 1]];\n        }\n        if (padding.length !== 2 || padding[0].length !== 2 ||\n            padding[1].length !== 2) {\n            throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n                'each of which is an Array of two integers.');\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n            throw new ValueError(`Unknown data format: ${dataFormat}. ` +\n                `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n        }\n        let pattern;\n        if (dataFormat === 'channelsFirst') {\n            pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n        }\n        else {\n            pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n        }\n        return tfc.pad(x, pattern);\n    });\n}\nexport class ZeroPadding2D extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n        // TODO(cais): Maybe refactor the following logic surrounding `padding`\n        //   into a helper method.\n        if (args.padding == null) {\n            this.padding = [[1, 1], [1, 1]];\n        }\n        else if (typeof args.padding === 'number') {\n            this.padding =\n                [[args.padding, args.padding], [args.padding, args.padding]];\n        }\n        else {\n            args.padding = args.padding;\n            if (args.padding.length !== 2) {\n                throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` +\n                    `received a length-${args.padding.length} array.`);\n            }\n            let heightPadding;\n            let widthPadding;\n            if (typeof args.padding[0] === 'number') {\n                heightPadding = [args.padding[0], args.padding[0]];\n                widthPadding = [args.padding[1], args.padding[1]];\n            }\n            else {\n                args.padding = args.padding;\n                if (args.padding[0].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[0].length} array.`);\n                }\n                heightPadding = args.padding[0];\n                if (args.padding[1].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[1].length} array.`);\n                }\n                widthPadding = args.padding[1];\n            }\n            this.padding = [heightPadding, widthPadding];\n        }\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows;\n        let cols;\n        if (this.dataFormat === 'channelsFirst') {\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[3] != null && inputShape[3] >= 0) {\n                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            if (inputShape[1] != null && inputShape[1] >= 0) {\n                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n    }\n    getConfig() {\n        const config = {\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);\n//# sourceMappingURL=padding.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = preprocessConv3DInput(x, dataFormat);\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport class Pooling1D extends Layer {\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        super(args);\n        if (typeof args.poolSize === 'number') {\n            this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            this.poolSize = args.poolSize;\n        }\n        else {\n            throw new ValueError(`poolSize for 1D convolutional layer must be a number or an ` +\n                `Array of a single number, but received ` +\n                `${JSON.stringify(args.poolSize)}`);\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                this.strides = args.strides;\n            }\n            else {\n                throw new ValueError(`strides for 1D convolutional layer must be a number or an ` +\n                    `Array of a single number, but received ` +\n                    `${JSON.stringify(args.strides)}`);\n            }\n        }\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n            const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling1D.className = 'MaxPooling1D';\nserialization.registerClass(MaxPooling1D);\nexport class AveragePooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling1D.className = 'AveragePooling1D';\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport class Pooling2D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new ValueError(`If the strides property of a 2D pooling layer is an Array, ` +\n                    `it is expected to have a length of 2, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling2D.className = 'MaxPooling2D';\nserialization.registerClass(MaxPooling2D);\nexport class AveragePooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling2D.className = 'AveragePooling2D';\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport class Pooling3D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new ValueError(`If the strides property of a 3D pooling layer is an Array, ` +\n                    `it is expected to have a length of 3, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class MaxPooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling3D.className = 'MaxPooling3D';\nserialization.registerClass(MaxPooling3D);\nexport class AveragePooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling3D.className = 'AveragePooling3D';\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport class GlobalPooling1D extends Layer {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n}\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nserialization.registerClass(GlobalAveragePooling1D);\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport class GlobalPooling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n    getConfig() {\n        const config = { dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nserialization.registerClass(GlobalAveragePooling2D);\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nserialization.registerClass(GlobalMaxPooling2D);\n//# sourceMappingURL=pooling.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Layers that augment the functionality of a base layer.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { InputSpec, Layer, SymbolicTensor } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { VALID_BIDIRECTIONAL_MERGE_MODES } from '../keras_format/common';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { rnn, standardizeArgs } from './recurrent';\nimport { deserialize } from './serialization';\n/**\n * Abstract wrapper base class.\n *\n * Wrappers take another layer and augment it in various ways.\n * Do not use this class as a layer, it is only an abstract base class.\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\n */\nexport class Wrapper extends Layer {\n    constructor(args) {\n        // Porting Note: In PyKeras, `self.layer` is set prior to the calling\n        //   `super()`. But we can't do that here due to TypeScript's restriction.\n        //   See: https://github.com/Microsoft/TypeScript/issues/8277\n        //   As a result, we have to add checks in `get trainable()` and\n        //   `set trainable()` below in order to prevent using `this.layer` when\n        //   its value is `undefined`. The super constructor does use the getter\n        //   and the setter of `this.layer`.\n        super(args);\n        this.layer = args.layer;\n    }\n    build(inputShape) {\n        this.built = true;\n    }\n    // TODO(cais): Implement activityRegularizer getter.\n    get trainable() {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        if (this.layer != null) {\n            return this.layer.trainable;\n        }\n        else {\n            return false;\n        }\n    }\n    set trainable(value) {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        if (this.layer != null) {\n            this.layer.trainable = value;\n        }\n    }\n    get trainableWeights() {\n        return this.layer.trainableWeights;\n    }\n    // TODO(cais): Implement setter for trainableWeights.\n    get nonTrainableWeights() {\n        return this.layer.nonTrainableWeights;\n    }\n    // TODO(cais): Implement setter for nonTrainableWeights.\n    get updates() {\n        // tslint:disable-next-line:no-any\n        return this.layer._updates;\n    }\n    // TODO(cais): Implement getUpdatesFor().\n    get losses() {\n        return this.layer.losses;\n    }\n    // TODO(cais): Implement getLossesFor().\n    getWeights() {\n        return this.layer.getWeights();\n    }\n    setWeights(weights) {\n        this.layer.setWeights(weights);\n    }\n    getConfig() {\n        const config = {\n            'layer': {\n                'className': this.layer.getClassName(),\n                'config': this.layer.getConfig(),\n            }\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.layer != null) {\n            this.layer.setFastWeightInitDuringBuild(value);\n        }\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config, customObjects = {}) {\n        const layerConfig = config['layer'];\n        const layer = deserialize(layerConfig, customObjects);\n        delete config['layer'];\n        const newConfig = { layer };\n        Object.assign(newConfig, config);\n        return new cls(newConfig);\n    }\n}\nexport class TimeDistributed extends Wrapper {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 3) {\n            throw new ValueError(`TimeDistributed layer expects an input shape >= 3D, but received ` +\n                `input shape ${JSON.stringify(inputShape)}`);\n        }\n        this.inputSpec = [{ shape: inputShape }];\n        const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (!this.layer.built) {\n            this.layer.build(childInputShape);\n            this.layer.built = true;\n        }\n        super.build(inputShape);\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        const childOutputShape = this.layer.computeOutputShape(childInputShape);\n        const timesteps = inputShape[1];\n        return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\n            inputs = getExactlyOneTensor(inputs);\n            // Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n            // values. Hence the inputs can't have an undetermined first (batch)\n            // dimension, which is why we always use the K.rnn approach here.\n            const step = (inputs, states) => {\n                // TODO(cais): Add useLearningPhase.\n                // NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n                //   some cases (e.g., `layer` is a `Sequential` instance), which is\n                //   why `getExactlyOneTensor` is used below.\n                const output = getExactlyOneTensor(this.layer.call(inputs, kwargs));\n                return [output, []];\n            };\n            const rnnOutputs = rnn(step, inputs, [], false /* goBackwards */, null /* mask */, null /* constants */, false /* unroll */, true /* needPerStepOutputs */);\n            const y = rnnOutputs[1];\n            // TODO(cais): Add activity regularization.\n            // TODO(cais): Add useLearningPhase.\n            return y;\n        });\n    }\n}\n/** @nocollapse */\nTimeDistributed.className = 'TimeDistributed';\nserialization.registerClass(TimeDistributed);\nexport function checkBidirectionalMergeMode(value) {\n    generic_utils.checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);\n}\nconst DEFAULT_BIDIRECTIONAL_MERGE_MODE = 'concat';\nexport class Bidirectional extends Wrapper {\n    constructor(args) {\n        super(args);\n        // Note: When creating `this.forwardLayer`, the original Layer object\n        //   (`config.layer`) ought to be cloned. This is why we call\n        //   `getConfig()` followed by `deserialize()`. Without this cloning,\n        //   the layer names saved during serialization will incorrectly contain\n        //   the 'forward_' prefix. In Python Keras, this is done using\n        //   `copy.copy` (shallow copy), which does not have a simple equivalent\n        //   in JavaScript. JavaScript's `Object.assign()` does not copy\n        //   methods.\n        const layerConfig = args.layer.getConfig();\n        const forwDict = {};\n        forwDict['className'] = args.layer.getClassName();\n        forwDict['config'] = layerConfig;\n        this.forwardLayer = deserialize(forwDict);\n        layerConfig['goBackwards'] =\n            layerConfig['goBackwards'] === true ? false : true;\n        const backDict = {};\n        backDict['className'] = args.layer.getClassName();\n        backDict['config'] = layerConfig;\n        this.backwardLayer = deserialize(backDict);\n        this.forwardLayer.name = 'forward_' + this.forwardLayer.name;\n        this.backwardLayer.name = 'backward_' + this.backwardLayer.name;\n        this.mergeMode = args.mergeMode === undefined ?\n            DEFAULT_BIDIRECTIONAL_MERGE_MODE :\n            args.mergeMode;\n        checkBidirectionalMergeMode(this.mergeMode);\n        if (args.weights) {\n            throw new NotImplementedError('weights support is not implemented for Bidirectional layer yet.');\n        }\n        this._stateful = args.layer.stateful;\n        this.returnSequences = args.layer.returnSequences;\n        this.returnState = args.layer.returnState;\n        this.supportsMasking = true;\n        this._trainable = true;\n        this.inputSpec = args.layer.inputSpec;\n        this.numConstants = null;\n    }\n    get trainable() {\n        return this._trainable;\n    }\n    set trainable(value) {\n        // Porting Note: the check of `this.layer` here is necessary due to the\n        //   way the `constructor` of this class is written (see Porting Note\n        //   above).\n        this._trainable = value;\n        if (this.forwardLayer != null) {\n            this.forwardLayer.trainable = value;\n        }\n        if (this.backwardLayer != null) {\n            this.backwardLayer.trainable = value;\n        }\n    }\n    getWeights() {\n        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());\n    }\n    setWeights(weights) {\n        const numWeights = weights.length;\n        const numeightsOver2 = Math.floor(numWeights / 2);\n        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n        this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n    }\n    computeOutputShape(inputShape) {\n        let layerShapes = this.forwardLayer.computeOutputShape(inputShape);\n        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n            layerShapes = [layerShapes];\n        }\n        layerShapes = layerShapes;\n        let outputShape;\n        let outputShapes;\n        let stateShape;\n        if (this.returnState) {\n            stateShape = layerShapes.slice(1);\n            outputShape = layerShapes[0];\n        }\n        else {\n            outputShape = layerShapes[0];\n        }\n        outputShape = outputShape;\n        if (this.mergeMode === 'concat') {\n            outputShape[outputShape.length - 1] *= 2;\n            outputShapes = [outputShape];\n        }\n        else if (this.mergeMode == null) {\n            outputShapes = [outputShape, outputShape.slice()];\n        }\n        else {\n            outputShapes = [outputShape];\n        }\n        if (this.returnState) {\n            if (this.mergeMode == null) {\n                return outputShapes.concat(stateShape).concat(stateShape.slice());\n            }\n            return [outputShape].concat(stateShape).concat(stateShape.slice());\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    }\n    apply(inputs, kwargs) {\n        let initialState = kwargs == null ? null : kwargs['initialState'];\n        let constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        if (Array.isArray(inputs)) {\n            initialState = inputs.slice(1);\n            inputs = inputs[0];\n        }\n        if ((initialState == null || initialState.length === 0) &&\n            constants == null) {\n            return super.apply(inputs, kwargs);\n        }\n        const additionalInputs = [];\n        const additionalSpecs = [];\n        if (initialState != null) {\n            const numStates = initialState.length;\n            if (numStates % 2 > 0) {\n                throw new ValueError('When passing `initialState` to a Bidrectional RNN, ' +\n                    'the state should be an Array containing the states of ' +\n                    'the underlying RNNs.');\n            }\n            kwargs['initialState'] = initialState;\n            additionalInputs.push(...initialState);\n            const stateSpecs = initialState\n                .map(state => new InputSpec({ shape: state.shape }));\n            this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n            this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n            additionalSpecs.push(...stateSpecs);\n        }\n        if (constants != null) {\n            throw new NotImplementedError('Support for constants in Bidirectional layers is not ' +\n                'implemented yet.');\n        }\n        const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n        for (const tensor of additionalInputs) {\n            if (tensor instanceof SymbolicTensor !== isSymbolicTensor) {\n                throw new ValueError('The initial state of a Bidirectional layer cannot be ' +\n                    'specified as a mix of symbolic and non-symbolic tensors');\n            }\n        }\n        if (isSymbolicTensor) {\n            // Compute the full input and specs, including the states.\n            const fullInput = [inputs].concat(additionalInputs);\n            const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            // Perform the call temporarily and replace inputSpec.\n            // Note: with initial states symbolic calls and non-symbolic calls to\n            // this method differ in how the initial states are passed. For\n            // symbolic calls, the initial states are passed in the first arg, as\n            // an Array of SymbolicTensors; for non-symbolic calls, they are\n            // passed in the second arg as a part of the kwargs. Hence the need to\n            // temporarily modify inputSpec here.\n            // TODO(cais): Make refactoring so that this hacky code below is no\n            // longer needed.\n            const originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            const output = super.apply(fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return super.apply(inputs, kwargs);\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const initialState = kwargs['initialState'];\n            let y;\n            let yRev;\n            if (initialState == null) {\n                y = this.forwardLayer.call(inputs, kwargs);\n                yRev = this.backwardLayer.call(inputs, kwargs);\n            }\n            else {\n                const forwardState = initialState.slice(0, initialState.length / 2);\n                const backwardState = initialState.slice(initialState.length / 2);\n                y = this.forwardLayer.call(inputs, Object.assign(kwargs, { initialState: forwardState }));\n                yRev = this.backwardLayer.call(inputs, Object.assign(kwargs, { initialState: backwardState }));\n            }\n            let states;\n            if (this.returnState) {\n                if (Array.isArray(y)) {\n                    states = y.slice(1).concat(yRev.slice(1));\n                }\n                else {\n                }\n                y = y[0];\n                yRev = yRev[0];\n            }\n            if (this.returnSequences) {\n                yRev = tfc.reverse(yRev, 1);\n            }\n            let output;\n            if (this.mergeMode === 'concat') {\n                output = K.concatenate([y, yRev]);\n            }\n            else if (this.mergeMode === 'sum') {\n                output = tfc.add(y, yRev);\n            }\n            else if (this.mergeMode === 'ave') {\n                output = tfc.mul(.5, tfc.add(y, yRev));\n            }\n            else if (this.mergeMode === 'mul') {\n                output = tfc.mul(y, yRev);\n            }\n            else if (this.mergeMode == null) {\n                output = [y, yRev];\n            }\n            // TODO(cais): Properly set learning phase.\n            if (this.returnState) {\n                if (this.mergeMode == null) {\n                    return output.concat(states);\n                }\n                return [output].concat(states);\n            }\n            return output;\n        });\n    }\n    resetStates(states) {\n        this.forwardLayer.resetStates();\n        this.backwardLayer.resetStates();\n    }\n    build(inputShape) {\n        nameScope(this.forwardLayer.name, () => {\n            this.forwardLayer.build(inputShape);\n        });\n        nameScope(this.backwardLayer.name, () => {\n            this.backwardLayer.build(inputShape);\n        });\n        this.built = true;\n    }\n    computeMask(inputs, mask) {\n        if (Array.isArray(mask)) {\n            mask = mask[0];\n        }\n        let outputMask;\n        if (this.returnSequences) {\n            if (this.mergeMode == null) {\n                outputMask = [mask, mask];\n            }\n            else {\n                outputMask = mask;\n            }\n        }\n        else {\n            if (this.mergeMode == null) {\n                outputMask = [null, null];\n            }\n            else {\n                outputMask = null;\n            }\n        }\n        if (this.returnState) {\n            const states = this.forwardLayer.states;\n            const stateMask = states.map(state => null);\n            if (Array.isArray(outputMask)) {\n                return outputMask.concat(stateMask).concat(stateMask);\n            }\n            else {\n                return [outputMask].concat(stateMask).concat(stateMask);\n            }\n        }\n        else {\n            return outputMask;\n        }\n    }\n    get trainableWeights() {\n        return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);\n    }\n    get nonTrainableWeights() {\n        return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);\n    }\n    // TODO(cais): Implement constraints().\n    setFastWeightInitDuringBuild(value) {\n        super.setFastWeightInitDuringBuild(value);\n        if (this.forwardLayer != null) {\n            this.forwardLayer.setFastWeightInitDuringBuild(value);\n        }\n        if (this.backwardLayer != null) {\n            this.backwardLayer.setFastWeightInitDuringBuild(value);\n        }\n    }\n    getConfig() {\n        const config = {\n            'mergeMode': this.mergeMode,\n        };\n        // TODO(cais): Add logic for `numConstants` once the property is added.\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        const rnnLayer = deserialize(config['layer']);\n        delete config['layer'];\n        // TODO(cais): Add logic for `numConstants` once the property is added.\n        if (config['numConstants'] != null) {\n            throw new NotImplementedError(`Deserialization of a Bidirectional layer with numConstants ` +\n                `present is not supported yet.`);\n        }\n        // tslint:disable-next-line:no-any\n        const newConfig = config;\n        newConfig['layer'] = rnnLayer;\n        return new cls(newConfig);\n    }\n}\n/** @nocollapse */\nBidirectional.className = 'Bidirectional';\nserialization.registerClass(Bidirectional);\n//# sourceMappingURL=wrappers.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/** DataType enum. */\nexport var DataType;\n(function (DataType) {\n    DataType[DataType[\"DT_INVALID\"] = 0] = \"DT_INVALID\";\n    DataType[DataType[\"DT_FLOAT\"] = 1] = \"DT_FLOAT\";\n    DataType[DataType[\"DT_DOUBLE\"] = 2] = \"DT_DOUBLE\";\n    DataType[DataType[\"DT_INT32\"] = 3] = \"DT_INT32\";\n    DataType[DataType[\"DT_UINT8\"] = 4] = \"DT_UINT8\";\n    DataType[DataType[\"DT_INT16\"] = 5] = \"DT_INT16\";\n    DataType[DataType[\"DT_INT8\"] = 6] = \"DT_INT8\";\n    DataType[DataType[\"DT_STRING\"] = 7] = \"DT_STRING\";\n    DataType[DataType[\"DT_COMPLEX64\"] = 8] = \"DT_COMPLEX64\";\n    DataType[DataType[\"DT_INT64\"] = 9] = \"DT_INT64\";\n    DataType[DataType[\"DT_BOOL\"] = 10] = \"DT_BOOL\";\n    DataType[DataType[\"DT_QINT8\"] = 11] = \"DT_QINT8\";\n    DataType[DataType[\"DT_QUINT8\"] = 12] = \"DT_QUINT8\";\n    DataType[DataType[\"DT_QINT32\"] = 13] = \"DT_QINT32\";\n    DataType[DataType[\"DT_BFLOAT16\"] = 14] = \"DT_BFLOAT16\";\n    DataType[DataType[\"DT_FLOAT_REF\"] = 101] = \"DT_FLOAT_REF\";\n    DataType[DataType[\"DT_DOUBLE_REF\"] = 102] = \"DT_DOUBLE_REF\";\n    DataType[DataType[\"DT_INT32_REF\"] = 103] = \"DT_INT32_REF\";\n    DataType[DataType[\"DT_UINT8_REF\"] = 104] = \"DT_UINT8_REF\";\n    DataType[DataType[\"DT_INT16_REF\"] = 105] = \"DT_INT16_REF\";\n    DataType[DataType[\"DT_INT8_REF\"] = 106] = \"DT_INT8_REF\";\n    DataType[DataType[\"DT_STRING_REF\"] = 107] = \"DT_STRING_REF\";\n    DataType[DataType[\"DT_COMPLEX64_REF\"] = 108] = \"DT_COMPLEX64_REF\";\n    DataType[DataType[\"DT_INT64_REF\"] = 109] = \"DT_INT64_REF\";\n    DataType[DataType[\"DT_BOOL_REF\"] = 110] = \"DT_BOOL_REF\";\n    DataType[DataType[\"DT_QINT8_REF\"] = 111] = \"DT_QINT8_REF\";\n    DataType[DataType[\"DT_QUINT8_REF\"] = 112] = \"DT_QUINT8_REF\";\n    DataType[DataType[\"DT_QINT32_REF\"] = 113] = \"DT_QINT32_REF\";\n    DataType[DataType[\"DT_BFLOAT16_REF\"] = 114] = \"DT_BFLOAT16_REF\";\n})(DataType || (DataType = {}));\nexport var SaverDef;\n(function (SaverDef) {\n    /** CheckpointFormatVersion enum. */\n    let CheckpointFormatVersion;\n    (function (CheckpointFormatVersion) {\n        CheckpointFormatVersion[CheckpointFormatVersion[\"LEGACY\"] = 0] = \"LEGACY\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V1\"] = 1] = \"V1\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V2\"] = 2] = \"V2\";\n    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));\n})(SaverDef || (SaverDef = {}));\n//# sourceMappingURL=compiled_api.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Add',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'AddV2',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'AddN',\n        'category': 'arithmetic',\n        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]\n    },\n    {\n        'tfOpName': 'BiasAdd',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sub',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'RealDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Div',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'DivNoNan',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'FloorDiv',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Mul',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Maximum',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' }\n        ]\n    },\n    {\n        'tfOpName': 'Minimum',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' }\n        ]\n    },\n    {\n        'tfOpName': 'Pow',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'SquaredDifference',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Mod',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'FloorMod',\n        'category': 'arithmetic',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    }\n];\n//# sourceMappingURL=arithmetic.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Abs',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Acos',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Asin',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Atan',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Atan2',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'y', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Ceil',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'ClipByValue',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number' },\n            { 'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'Complex',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'real', 'type': 'tensor' },\n            { 'start': 1, 'name': 'imag', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'ComplexAbs',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Cos',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Cosh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Elu',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Exp',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Floor',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Log',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Imag',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Neg',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Real',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {\n                'tfName': 'Tout',\n                'name': 'outputType',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Prelu',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'alpha', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Relu',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Relu6',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {\n                'tfName': 'clipValueMin',\n                'name': 'clipValueMin',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'clipValueMax',\n                'name': 'clipValueMax',\n                'type': 'number',\n                'defaultValue': 6\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Selu',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sigmoid',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sin',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sinh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sqrt',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Rsqrt',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Square',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Tan',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Tanh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Sign',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Round',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Expm1',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Log1p',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Reciprocal',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Softplus',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Asinh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Acosh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Atanh',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Erf',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Prod',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axes', 'type': 'number[]' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'keep_dims',\n                'name': 'keepDims',\n                'type': 'bool',\n                'notSupported': true\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'LeakyRelu',\n        'category': 'basic_math',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 0.2\n            },\n            {\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=basic_math.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'LoopCond',\n        'category': 'control',\n        'inputs': [{ 'start': 0, 'name': 'pred', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'Switch',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'data', 'type': 'tensor' },\n            { 'start': 1, 'name': 'pred', 'type': 'tensor' }\n        ]\n    },\n    {\n        'tfOpName': 'Merge',\n        'category': 'control',\n        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]\n    },\n    {\n        'tfOpName': 'Enter',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },\n            { 'tfName': 'frame_name', 'name': 'frameName', 'type': 'string' },\n            { 'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool' }\n        ]\n    },\n    {\n        'tfOpName': 'Exit',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'NextIteration',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'size', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },\n            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },\n            { 'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool' },\n            { 'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool' },\n            {\n                'tfName': 'identical_element_shapes',\n                'name': 'identicalElementShapes',\n                'type': 'bool'\n            },\n            { 'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayWriteV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'index', 'type': 'number' },\n            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 3, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayReadV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'index', 'type': 'number' },\n            { 'start': 2, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [{\n                'tfName': 'dtype',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }]\n    },\n    {\n        'tfOpName': 'TensorArrayGatherV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'number[]' },\n            { 'start': 2, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },\n            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayScatterV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'number[]' },\n            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 3, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorArrayConcatV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }, {\n                'tfName': 'element_shape_except0',\n                'name': 'elementShapeExcept0',\n                'type': 'shape',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArraySplitV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },\n            { 'start': 3, 'name': 'flowIn', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorArraySizeV3',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'flowIn', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorArrayCloseV3',\n        'category': 'control',\n        'inputs': [{ 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'StatelessIf',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'cond', 'type': 'tensor' },\n            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }\n        ],\n        'attrs': [\n            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },\n            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }\n        ]\n    },\n    {\n        'tfOpName': 'If',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'cond', 'type': 'tensor' },\n            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }\n        ],\n        'attrs': [\n            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },\n            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }\n        ]\n    },\n    {\n        'tfOpName': 'StatelessWhile',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },\n            { 'tfName': 'body', 'name': 'body', 'type': 'func' }\n        ]\n    },\n    {\n        'tfOpName': 'While',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },\n            { 'tfName': 'body', 'name': 'body', 'type': 'func' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListScatter',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'number[]' },\n            { 'start': 2, 'name': 'elementShape', 'type': 'shape' }\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListScatterV2',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'number[]' },\n            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },\n            { 'start': 3, 'name': 'numElements', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListGather',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'number[]' },\n            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListGetItem',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'index', 'type': 'number' },\n            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListSetItem',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'index', 'type': 'number' },\n            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListReserve',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'elementShape', 'type': 'shape' },\n            { 'start': 1, 'name': 'numElements', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListFromTensor',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 1, 'name': 'elementShape', 'type': 'shape' }\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListStack',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },\n        ],\n        'attrs': [\n            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' },\n            { 'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListSplit',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },\n            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListConcat',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },\n            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }\n        ]\n    },\n    {\n        'tfOpName': 'TensorListPopBack',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TensorListPushBack',\n        'category': 'control',\n        'inputs': [\n            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },\n            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]\n    },\n];\n//# sourceMappingURL=control.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'AvgPool',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPoolWithArgmax',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },\n            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' }, {\n                'tfName': 'include_batch_in_index',\n                'name': 'includeBatchInIndex',\n                'type': 'bool'\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'AvgPool3D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'MaxPool3D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Conv1D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'stride', 'name': 'stride', 'type': 'number' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NWC'\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {\n                'tfName': 'dilation',\n                'name': 'dilation',\n                'type': 'number',\n                'defaultValue': 1\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv2D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },\n            { 'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': '_FusedConv2D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'use_cudnn_on_gpu',\n                'name': 'useCudnnOnGpu',\n                'type': 'bool',\n                'defaultValue': true\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [1, 1, 1, 1]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n        ]\n    },\n    {\n        'tfOpName': 'Conv2DBackpropInput',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 2, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n            { 'start': 0, 'name': 'outputShape', 'type': 'number[]' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2d',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'input', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'DepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'input', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'explicit_paddings',\n                'name': 'explicitPaddings',\n                'type': 'number[]',\n                'defaultValue': []\n            },\n            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'FusedDepthwiseConv2dNative',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            {\n                'tfName': 'dilations',\n                'name': 'dilations',\n                'type': 'number[]',\n                'defaultValue': [1, 1, 1, 1]\n            },\n            {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Conv3D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'defaultValue': 'NHWC'\n            },\n            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }\n        ],\n    },\n    {\n        'tfOpName': 'Dilation2D',\n        'category': 'convolution',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'filter', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },\n            { 'tfName': 'rates', 'name': 'dilations', 'type': 'number[]' },\n            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }\n        ]\n    }\n];\n//# sourceMappingURL=convolution.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Fill',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'shape', 'type': 'number[]' },\n            { 'start': 1, 'name': 'value', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'LinSpace',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'start', 'type': 'number' },\n            { 'start': 1, 'name': 'stop', 'type': 'number' },\n            { 'start': 2, 'name': 'num', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'OneHot',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'indices', 'type': 'tensor' },\n            { 'start': 1, 'name': 'depth', 'type': 'number' },\n            { 'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1 },\n            { 'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0 },\n        ],\n        'attrs': [\n            {\n                'tfName': 'axis',\n                'name': 'axis',\n                'type': 'number',\n                'notSupported': true\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Ones',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'shape', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'OnesLike',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [{ 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'RandomUniform',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'shape', 'type': 'number[]' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'minval',\n                'name': 'minval',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'maxval',\n                'name': 'maxval',\n                'type': 'number',\n                'defaultValue': 1\n            },\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },\n            { 'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0 }, {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Range',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'start', 'type': 'number' },\n            { 'start': 1, 'name': 'stop', 'type': 'number' },\n            { 'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0 },\n        ],\n        'attrs': [{ 'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'TruncatedNormal',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'shape', 'type': 'number[]' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'means',\n                'name': 'mean',\n                'type': 'number',\n                'defaultValue': 0.0\n            },\n            {\n                'tfName': 'stddev',\n                'name': 'stdDev',\n                'type': 'number',\n                'defaultValue': 1.0\n            },\n            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' }, {\n                'tfName': 'seed2',\n                'name': 'seed2',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            },\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },\n            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Zeros',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'shape', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'ZerosLike',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]\n    },\n    {\n        'tfOpName': 'Multinomial',\n        'category': 'creation',\n        'inputs': [\n            { 'start': 0, 'name': 'logits', 'type': 'tensor' },\n            { 'start': 1, 'name': 'numSamples', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' },\n            { 'tfName': 'seed2', 'name': 'seed2', 'type': 'number' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' },\n            { 'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype' }\n        ]\n    }\n];\n//# sourceMappingURL=creation.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'NonMaxSuppressionV2',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scores', 'type': 'tensor' },\n            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },\n            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV3',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scores', 'type': 'tensor' },\n            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },\n            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },\n            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV4',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scores', 'type': 'tensor' },\n            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },\n            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },\n            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {\n                'tfName': 'T_threshold',\n                'name': 'threshold',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            {\n                'tfName': 'pad_to_max_output_size',\n                'name': 'padToMaxOutputSize',\n                'type': 'bool'\n            }\n        ]\n    },\n    {\n        'tfOpName': 'NonMaxSuppressionV5',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scores', 'type': 'tensor' },\n            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },\n            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },\n            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' },\n            { 'start': 5, 'name': 'softNmsSigma', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'Where',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'condition', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'ListDiff',\n        'category': 'dynamic',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'y', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=dynamic.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n        'tfOpName': 'TopKV2',\n        'category': 'evaluation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'k', 'type': 'number' },\n        ],\n        'attrs': [{ 'tfName': 'sorted', 'name': 'sorted', 'type': 'bool' }]\n    }];\n//# sourceMappingURL=evaluation.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'PlaceholderWithDefault',\n        'category': 'graph',\n        'inputs': [\n            { 'start': 0, 'name': 'default', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }\n        ]\n    },\n    {\n        'tfOpName': 'Placeholder',\n        'category': 'graph',\n        'attrs': [\n            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },\n            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }\n        ]\n    },\n    { 'tfOpName': 'Const', 'category': 'graph' }, {\n        'tfOpName': 'Identity',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'IdentityN',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]\n    },\n    {\n        'tfOpName': 'Snapshot',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'Rank',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'Size',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'Shape',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'ShapeN',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]\n    },\n    {\n        'tfOpName': 'Print',\n        'category': 'graph',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'data', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'message', 'name': 'message', 'type': 'string' }, {\n                'tfName': 'first_n',\n                'name': 'firstN',\n                'type': 'number',\n                'notSupported': true\n            },\n            {\n                'tfName': 'summarize',\n                'name': 'summarize',\n                'type': 'number',\n                'defaultValue': 3\n            }\n        ]\n    },\n    { 'tfOpName': 'NoOp', 'category': 'graph', 'inputs': [] }, {\n        'tfOpName': 'StopGradient',\n        'category': 'graph',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'FakeQuantWithMinMaxVars',\n        'category': 'graph',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'min', 'name': 'min', 'type': 'number' },\n            { 'tfName': 'max', 'name': 'max', 'type': 'number' }\n        ]\n    }\n];\n//# sourceMappingURL=graph.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ResizeBilinear',\n        'category': 'image',\n        'inputs': [\n            { 'start': 0, 'name': 'images', 'type': 'tensor' },\n            { 'start': 1, 'name': 'size', 'type': 'number[]' },\n        ],\n        'attrs': [\n            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'ResizeNearestNeighbor',\n        'category': 'image',\n        'inputs': [\n            { 'start': 0, 'name': 'images', 'type': 'tensor' },\n            { 'start': 1, 'name': 'size', 'type': 'number[]' },\n        ],\n        'attrs': [\n            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'CropAndResize',\n        'category': 'image',\n        'inputs': [\n            { 'start': 0, 'name': 'image', 'type': 'tensor' },\n            { 'start': 1, 'name': 'boxes', 'type': 'tensor' },\n            { 'start': 2, 'name': 'boxInd', 'type': 'tensor' },\n            { 'start': 3, 'name': 'cropSize', 'type': 'number[]' },\n        ],\n        'attrs': [\n            { 'tfName': 'method', 'name': 'method', 'type': 'string' }, {\n                'tfName': 'extrapolation_value',\n                'name': 'extrapolationValue',\n                'type': 'number'\n            }\n        ]\n    }\n];\n//# sourceMappingURL=image.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Equal',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'NotEqual',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Greater',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'GreaterEqual',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Less',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'LessEqual',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalAnd',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalNot',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'LogicalOr',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Select',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'condition', 'type': 'tensor' },\n            { 'start': 1, 'name': 'a', 'type': 'tensor' },\n            { 'start': 2, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'SelectV2',\n        'category': 'logical',\n        'inputs': [\n            { 'start': 0, 'name': 'condition', 'type': 'tensor' },\n            { 'start': 1, 'name': 'a', 'type': 'tensor' },\n            { 'start': 2, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=logical.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': '_FusedMatMul',\n        'category': 'matrices',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' }, {\n                'tfName': 'fused_ops',\n                'name': 'fusedOps',\n                'type': 'string[]',\n                'defaultValue': []\n            },\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.0001\n            },\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'MatMul',\n        'category': 'matrices',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'transpose_a',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'transpose_b',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMul',\n        'category': 'matrices',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'BatchMatMulV2',\n        'category': 'matrices',\n        'inputs': [\n            { 'start': 0, 'name': 'a', 'type': 'tensor' },\n            { 'start': 1, 'name': 'b', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'adj_x',\n                'name': 'transposeA',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            {\n                'tfName': 'adj_y',\n                'name': 'transposeB',\n                'type': 'bool',\n                'defaultValue': false\n            },\n            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'Transpose',\n        'category': 'matrices',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'perm', 'type': 'number[]' },\n        ],\n        'attrs': [{\n                'tfName': 'T',\n                'name': 'dtype',\n                'type': 'dtype',\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=matrices.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'FusedBatchNorm',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV2',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'FusedBatchNormV3',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'epsilon',\n                'name': 'epsilon',\n                'type': 'number',\n                'defaultValue': 0.001\n            },\n            {\n                'tfName': 'data_format',\n                'name': 'dataFormat',\n                'type': 'string',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'LRN',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'depth_radius',\n                'name': 'radius',\n                'type': 'number',\n                'defaultValue': 5\n            },\n            { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },\n            {\n                'tfName': 'alpha',\n                'name': 'alpha',\n                'type': 'number',\n                'defaultValue': 1.0\n            },\n            {\n                'tfName': 'beta',\n                'name': 'beta',\n                'type': 'number',\n                'defaultValue': 0.5\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Softmax',\n        'category': 'normalization',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'LogSoftmax',\n        'category': 'normalization',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'SparseToDense',\n        'category': 'normalization',\n        'inputs': [\n            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },\n            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },\n            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },\n            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'defaultValue': true,\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=normalization.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Max',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'Mean',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'Min',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'Sum',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'All',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'Any',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'ArgMax',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'ArgMin',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'Prod',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' },\n        ],\n        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]\n    },\n    {\n        'tfOpName': 'Cumsum',\n        'category': 'reduction',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number' },\n        ],\n        'attrs': [\n            { 'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool' },\n            { 'tfName': 'reverse', 'name': 'reverse', 'type': 'bool' }\n        ]\n    }\n];\n//# sourceMappingURL=reduction.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'ConcatV2',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors' },\n            { 'start': -1, 'name': 'axis', 'type': 'number' }\n        ],\n        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]\n    },\n    {\n        'tfOpName': 'Concat',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors' },\n            { 'start': 0, 'name': 'axis', 'type': 'number' }\n        ],\n        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]\n    },\n    {\n        'tfOpName': 'GatherV2',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'tensor' },\n            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }\n        ]\n    },\n    {\n        'tfOpName': 'Gather',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reverse',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true }\n        ]\n    },\n    {\n        'tfOpName': 'ReverseV2',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'Slice',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'begin', 'type': 'number[]' },\n            { 'start': 2, 'name': 'size', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'StridedSlice',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'begin', 'type': 'number[]' },\n            { 'start': 2, 'name': 'end', 'type': 'number[]' },\n            { 'start': 3, 'name': 'strides', 'type': 'number[]' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'begin_mask',\n                'name': 'beginMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'end_mask',\n                'name': 'endMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'new_axis_mask',\n                'name': 'newAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'ellipsis_mask',\n                'name': 'ellipsisMask',\n                'type': 'number',\n                'defaultValue': 0\n            },\n            {\n                'tfName': 'shrink_axis_mask',\n                'name': 'shrinkAxisMask',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Pack',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' },\n        ],\n        'attrs': [\n            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }\n        ]\n    },\n    {\n        'tfOpName': 'Unpack',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {\n                'tfName': 'num',\n                'name': 'num',\n                'type': 'number',\n                'defaultValue': 0,\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Tile',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'reps', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'Split',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0 },\n            { 'start': 1, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'num_split',\n                'name': 'numOrSizeSplits',\n                'type': 'number',\n                'defaultValue': 1\n            }]\n    },\n    {\n        'tfOpName': 'SplitV',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]' },\n            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }\n        ]\n    },\n    {\n        'tfOpName': 'ScatterNd',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'indices', 'type': 'tensor' },\n            { 'start': 1, 'name': 'values', 'type': 'tensor' },\n            { 'start': 2, 'name': 'shape', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'GatherNd',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'indices', 'type': 'tensor' }\n        ]\n    },\n    {\n        'tfOpName': 'SparseToDense',\n        'category': 'slice_join',\n        'inputs': [\n            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },\n            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },\n            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },\n            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'validate_indices',\n                'name': 'validateIndices',\n                'type': 'bool',\n                'defaultValue': false,\n                'notSupported': true\n            }]\n    }\n];\n//# sourceMappingURL=slice_join.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'FFT',\n        'category': 'spectral',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'IFFT',\n        'category': 'spectral',\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\n    },\n    {\n        'tfOpName': 'RFFT',\n        'category': 'spectral',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    },\n    {\n        'tfOpName': 'IRFFT',\n        'category': 'spectral',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {\n                'start': 1,\n                'name': 'fft_length',\n                'type': 'number',\n                'notSupported': true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=spectral.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        'tfOpName': 'Cast',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            {\n                'tfName': 'SrcT',\n                'name': 'sdtype',\n                'type': 'dtype',\n                'notSupported': true\n            },\n            { 'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype' }\n        ]\n    },\n    {\n        'tfOpName': 'ExpandDims',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'axis', 'type': 'number' }\n        ]\n    },\n    {\n        'tfOpName': 'Pad',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'padding', 'type': 'number[]' },\n        ],\n        'attrs': [{\n                'tfName': 'constant_value',\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }]\n    },\n    {\n        'tfOpName': 'PadV2',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'padding', 'type': 'number[]' }, {\n                'start': 2,\n                'name': 'constantValue',\n                'type': 'number',\n                'defaultValue': 0\n            }\n        ]\n    },\n    {\n        'tfOpName': 'Reshape',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'shape', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'Squeeze',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [{\n                'tfName': 'axis',\n                'tfDeprecatedName': 'squeeze_dims',\n                'name': 'axis',\n                'type': 'number[]'\n            }]\n    },\n    {\n        'tfOpName': 'SpaceToBatchND',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },\n            { 'start': 2, 'name': 'paddings', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'BatchToSpaceND',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },\n            { 'start': 2, 'name': 'crops', 'type': 'number[]' }\n        ]\n    },\n    {\n        'tfOpName': 'DepthToSpace',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n        ],\n        'attrs': [\n            { 'tfName': 'block_size', 'name': 'blockSize', 'type': 'number' },\n            { 'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string' }\n        ]\n    },\n    {\n        'tfOpName': 'BroadcastTo',\n        'category': 'transformation',\n        'inputs': [\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\n            { 'start': 1, 'name': 'shape', 'type': 'number[]' },\n        ],\n        'attrs': []\n    }\n];\n//# sourceMappingURL=transformation.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input, mapFn) {\n    return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n    if (input == null) {\n        return null;\n    }\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    if (seen.has(input)) {\n        return seen.get(input);\n    }\n    const result = mapFn(input);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep map function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        seen.set(input, result.value);\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const child = input[k];\n            const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(inputs, zipFn = zipToList) {\n    return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n    // The recursion follows the structure of input 0; it's assumed that all the\n    // other inputs have the same structure.\n    const input = inputs[0];\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    const result = zipFn(inputs);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep zip function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const children = inputs.map(x => x[k]);\n            const childResult = deepZipInternal(children, zipFn, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// tslint:disable-next-line:no-any\nexport function zipToList(x) {\n    if (x === null) {\n        return null;\n    }\n    // TODO(soergel): validate array type?\n    if (isIterable(x[0])) {\n        return { value: null, recurse: true };\n    }\n    else {\n        return { value: x, recurse: false };\n    }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(input, mapFn) {\n    const seen = new Map();\n    // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n    deepMapInternal(input, mapFn, seen);\n    // Replace the Promises in 'seen' in place.\n    // Note TypeScript provides no async map iteration, and regular map iteration\n    // is broken too, so sadly we have to do Array.from() to make it work.\n    // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n    for (const key of Array.from(seen.keys())) {\n        const value = seen.get(key);\n        if (value instanceof Promise) {\n            const mappedValue = await value;\n            seen.set(key, mappedValue);\n        }\n    }\n    // Normal deepMap again, this time filling in the resolved values.\n    // It's unfortunate that we have to do two passes.\n    // TODO(soergel): test performance and think harder about a fast solution.\n    const result = deepMapInternal(input, mapFn, seen);\n    return result;\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj) {\n    return obj != null && (!ArrayBuffer.isView(obj)) &&\n        (Array.isArray(obj) ||\n            (typeof obj === 'object' && !(obj instanceof tf.Tensor)));\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj) {\n    return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n        (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n        tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value) {\n    return (value === null ||\n        (typeof value !== 'object' && typeof value !== 'function'));\n}\n//# sourceMappingURL=deep_map.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { deepMap, isIterable } from './deep_map';\nexport function deepClone(container) {\n    return deepMap(container, cloneIfTensor);\n}\n// tslint:disable-next-line: no-any\nfunction cloneIfTensor(item) {\n    if (item instanceof tf.Tensor) {\n        return ({ value: item.clone(), recurse: false });\n    }\n    else if (isIterable(item)) {\n        return { value: null, recurse: true };\n    }\n    else {\n        return { value: item, recurse: false };\n    }\n}\n//# sourceMappingURL=deep_clone.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n    /**\n     * Constructs a `RingBuffer`.\n     * @param capacity The number of items that the buffer can accomodate.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n        // Note we store the indices in the range 0 <= index < 2*capacity.\n        // This allows us to distinguish the full from the empty case.\n        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n        this.begin = 0; // inclusive\n        this.end = 0; // exclusive\n        if (capacity == null) {\n            throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n        }\n        if (capacity < 1) {\n            throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n        }\n        this.data = new Array(capacity);\n        this.doubledCapacity = 2 * capacity;\n    }\n    /**\n     * Map any index into the range 0 <= index < 2*capacity.\n     */\n    wrap(index) {\n        // don't trust % on negative numbers\n        while (index < 0) {\n            index += this.doubledCapacity;\n        }\n        return index % this.doubledCapacity;\n    }\n    get(index) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t get item at a negative index.');\n        }\n        return this.data[index % this.capacity];\n    }\n    set(index, value) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t set item at a negative index.');\n        }\n        this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n    length() {\n        let length = this.end - this.begin;\n        if (length < 0) {\n            length = this.doubledCapacity + length;\n        }\n        return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n    isFull() {\n        return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n    isEmpty() {\n        return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n    push(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.set(this.end, value);\n        this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n    pushAll(values) {\n        for (const value of values) {\n            this.push(value);\n        }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n    pop() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        this.end = this.wrap(this.end - 1);\n        const result = this.get(this.end);\n        this.set(this.end, undefined);\n        return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n    unshift(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.begin = this.wrap(this.begin - 1);\n        this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n    shift() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const result = this.get(this.begin);\n        this.set(this.begin, undefined);\n        this.begin = this.wrap(this.begin + 1);\n        return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n    shuffleExcise(relativeIndex) {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const index = this.wrap(this.begin + relativeIndex);\n        const result = this.get(index);\n        this.set(index, this.pop());\n        return result;\n    }\n}\n//# sourceMappingURL=ring_buffer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n//# sourceMappingURL=growing_ring_buffer.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { deepClone } from '../util/deep_clone';\nimport { deepMapAndAwaitAll, deepZip, zipToList } from '../util/deep_map';\nimport { GrowingRingBuffer } from '../util/growing_ring_buffer';\nimport { RingBuffer } from '../util/ring_buffer';\n// Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n/**\n * Create a `LazyIterator` from an array of items.\n */\nexport function iteratorFromItems(items) {\n    return new ArrayIterator(items);\n}\n/**\n * Create a `LazyIterator` of incrementing integers.\n */\nexport function iteratorFromIncrementing(start) {\n    let i = start;\n    return iteratorFromFunction(() => ({ value: i++, done: false }));\n}\n/**\n * Create a `LazyIterator` from a function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * await iter.forEachAsync(e => console.log(e));\n * ```\n *\n * @param func A function that produces data on each call.\n */\nexport function iteratorFromFunction(func) {\n    return new FunctionCallIterator(func);\n}\n/**\n * Create a `LazyIterator` by concatenating underlying streams, which are\n * themselves provided as a stream.\n *\n * This can also be thought of as a \"stream flatten\" operation.\n *\n * @param baseIterators A stream of streams to be concatenated.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenated(baseIterators, baseErrorHandler) {\n    return new ChainedIterator(baseIterators, baseErrorHandler);\n}\n/**\n * Create a `LazyIterator` by concatenating streams produced by calling a\n * stream-generating function a given number of times.\n *\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\n * function can be used to achieve a similar effect:\n *\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\n *\n * @param iteratorFunc: A function that produces a new stream on each call.\n * @param count: The number of times to call the function.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenatedFunction(iteratorFunc, count, baseErrorHandler) {\n    return iteratorFromConcatenated(iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);\n}\n/**\n * Create a `LazyIterator` by zipping together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nexport function iteratorFromZipped(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n    return new ZipIterator(iterators, mismatchMode);\n}\n/**\n * An asynchronous iterator, providing lazy access to a potentially\n * unbounded stream of elements.\n *\n * Iterator can be obtained from a dataset:\n * `const iter = await dataset.iterator();`\n */\nexport class LazyIterator {\n    /**\n     * Collect all remaining elements of a bounded stream into an array.\n     * Obviously this will succeed only for small streams that fit in memory.\n     * Useful for testing.\n     *\n     * @returns A Promise for an array of stream elements, which will resolve\n     *   when the stream is exhausted.\n     */\n    async toArray() {\n        const result = [];\n        let x = await this.next();\n        while (!x.done) {\n            result.push(x.value);\n            x = await this.next();\n        }\n        return result;\n    }\n    /**\n     * Collect all elements of this dataset into an array with prefetching 100\n     * elements. This is useful for testing, because the prefetch changes the\n     * order in which the Promises are resolved along the processing pipeline.\n     * This may help expose bugs where results are dependent on the order of\n     * Promise resolution rather than on the logical order of the stream (i.e.,\n     * due to hidden mutable state).\n     *\n     * @returns A Promise for an array of stream elements, which will resolve\n     *   when the stream is exhausted.\n     */\n    async toArrayForTest() {\n        const stream = this.prefetch(100);\n        const result = [];\n        let x = await stream.next();\n        while (!x.done) {\n            result.push(x.value);\n            x = await stream.next();\n        }\n        return result;\n    }\n    /**\n     * Draw items from the stream until it is exhausted.\n     *\n     * This can be useful when the stream has side effects but no output.  In\n     * that case, calling this function guarantees that the stream will be\n     * fully processed.\n     */\n    async resolveFully() {\n        let x = await this.next();\n        while (!x.done) {\n            x = await this.next();\n        }\n    }\n    /**\n     * Draw items from the stream until it is exhausted, or a predicate fails.\n     *\n     * This can be useful when the stream has side effects but no output.  In\n     * that case, calling this function guarantees that the stream will be\n     * fully processed.\n     */\n    async resolveWhile(predicate) {\n        let x = await this.next();\n        let shouldContinue = predicate(x.value);\n        while ((!x.done) && shouldContinue) {\n            x = await this.next();\n            shouldContinue = predicate(x.value);\n        }\n    }\n    /**\n     * Handles errors thrown on this stream using a provided handler function.\n     *\n     * @param handler A function that handles any `Error` thrown during a `next()`\n     *   call and returns true if the stream should continue (dropping the failed\n     *   call) or false if the stream should quietly terminate.  If the handler\n     *   itself throws (or rethrows) an `Error`, that will be propagated.\n     *\n     * @returns A `LazyIterator` of elements passed through from upstream,\n     *   possibly filtering or terminating on upstream `next()` calls that\n     *   throw an `Error`.\n     */\n    handleErrors(handler) {\n        return new ErrorHandlingLazyIterator(this, handler);\n    }\n    // TODO(soergel): Implement reduce() etc.\n    /**\n     * Filters this stream according to `predicate`.\n     *\n     * @param predicate A function mapping a stream element to a boolean or a\n     * `Promise` for one.\n     *\n     * @returns A `LazyIterator` of elements for which the predicate was true.\n     */\n    filter(predicate) {\n        return new FilterIterator(this, predicate);\n    }\n    /**\n     * Maps this stream through a 1-to-1 transform.\n     *\n     * @param transform A function mapping a stream element to a transformed\n     *   element.\n     *\n     * @returns A `LazyIterator` of transformed elements.\n     */\n    map(transform) {\n        return new MapIterator(this, transform);\n    }\n    /**\n     * Maps this stream through an async 1-to-1 transform.\n     *\n     * @param transform A function mapping a stream element to a `Promise` for a\n     *   transformed stream element.\n     *\n     * @returns A `LazyIterator` of transformed elements.\n     */\n    mapAsync(transform) {\n        return new AsyncMapIterator(this, transform);\n    }\n    /**\n     * Maps this stream through a 1-to-1 transform, forcing serial execution.\n     *\n     * @param transform A function mapping a stream element to a transformed\n     *   element.\n     *\n     * @returns A `LazyIterator` of transformed elements.\n     */\n    serialMapAsync(transform) {\n        return new AsyncMapIterator(this, transform).serial();\n    }\n    /**\n     * Maps this stream through a 1-to-many transform.\n     *\n     * @param transform A function mapping a stream element to an array of\n     *   transformed elements.\n     *\n     * @returns A `DataStream` of transformed elements.\n     */\n    flatmap(transform) {\n        return new FlatmapIterator(this, transform);\n    }\n    /**\n     * Apply a function to every element of the stream.\n     *\n     * @param f A function to apply to each stream element.\n     */\n    async forEachAsync(f) {\n        return this.map(f).resolveFully();\n    }\n    /**\n     * Apply a function to every element of the stream, forcing serial execution.\n     *\n     * @param f A function to apply to each stream element.  Should return 'true'\n     *   to indicate that the stream should continue, or 'false' to cause it to\n     *   terminate.\n     */\n    async serialForEach(f) {\n        return this.serialMapAsync(f).resolveWhile(x => (x === true));\n    }\n    /**\n     * Groups elements into batches, represented as arrays of elements.\n     *\n     * We can think of the elements of this iterator as 'rows' (even if they are\n     * nested structures).  By the same token, consecutive values for a given\n     * key within the elements form a 'column'.  This matches the usual sense of\n     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n     *\n     * Thus, \"Row-major\" means that the resulting batch is simply a collection of\n     * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\n     * form, which is needed for vectorized computation.\n     *\n     * @param batchSize The number of elements desired per batch.\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\n     *   than batchSize elements. Default true.\n     * @returns A `LazyIterator` of batches of elements, represented as arrays\n     *   of the original element type.\n     */\n    rowMajorBatch(batchSize, smallLastBatch = true) {\n        return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n    }\n    /**\n     * Groups elements into batches, represented in column-major form.\n     *\n     * We can think of the elements of this iterator as 'rows' (even if they are\n     * nested structures).  By the same token, consecutive values for a given\n     * key within the elements form a 'column'.  This matches the usual sense of\n     * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n     *\n     * Thus, \"column-major\" means that the resulting batch is a (potentially\n     * nested) structure representing the columns.  Each column entry, then,\n     * contains a collection of the values found in that column for a range of\n     * input elements.  This representation allows for vectorized computation, in\n     * contrast to the row-major form.\n     *\n     * The inputs should all have the same nested structure (i.e., of arrays and\n     * dicts).  The result is a single object with the same nested structure,\n     * where the leaves are arrays collecting the values of the inputs at that\n     * location (or, optionally, the result of a custom function applied to those\n     * arrays).\n     *\n     * @param batchSize The number of elements desired per batch.\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\n     *   than batchSize elements. Default true.\n     * @param zipFn: (optional) A function that expects an array of elements at a\n     *   single node of the object tree, and returns a `DeepMapResult`.  The\n     *   `DeepMapResult` either provides a result value for that node (i.e.,\n     *   representing the subtree), or indicates that the node should be processed\n     *   recursively.  The default zipFn recurses as far as possible and places\n     *   arrays at the leaves.\n     * @returns A `LazyIterator` of batches of elements, represented as an object\n     *   with collections at the leaves.\n     */\n    columnMajorBatch(batchSize, smallLastBatch = true, \n    // tslint:disable-next-line:no-any\n    zipFn = zipToList) {\n        // First collect the desired number of input elements as a row-major batch.\n        const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n        // Now 'rotate' or 'pivot' the data, collecting all values from each column\n        // in the batch (i.e., for each key within the elements) into an array.\n        return rowBatches.map(x => deepZip(x, zipFn));\n    }\n    /**\n     * Concatenate this `LazyIterator` with another.\n     *\n     * @param iterator A `LazyIterator` to be concatenated onto this one.\n     * @param baseErrorHandler An optional function that can intercept `Error`s\n     *   raised during a `next()` call on the base stream.  This function can\n     *   decide whether the error should be propagated, whether the error should\n     *   be ignored, or whether the base stream should be terminated.\n     * @returns A `LazyIterator`.\n     */\n    concatenate(iterator, baseErrorHandler) {\n        return new ChainedIterator(iteratorFromItems([this, iterator]), baseErrorHandler);\n    }\n    /**\n     * Limits this stream to return at most `count` items.\n     *\n     * @param count The maximum number of items to provide from the stream. If\n     * a negative or undefined value is given, the entire stream is returned\n     *   unaltered.\n     */\n    take(count) {\n        if (count < 0 || count == null) {\n            return this;\n        }\n        return new TakeIterator(this, count);\n    }\n    /**\n     * Skips the first `count` items in this stream.\n     *\n     * @param count The number of items to skip.  If a negative or undefined\n     * value is given, the entire stream is returned unaltered.\n     */\n    skip(count) {\n        if (count < 0 || count == null) {\n            return this;\n        }\n        return new SkipIterator(this, count);\n    }\n    /**\n     * Prefetch the first `bufferSize` items in this stream.\n     *\n     * Note this prefetches Promises, but makes no guarantees about when those\n     * Promises resolve.\n     *\n     * @param bufferSize: An integer specifying the number of elements to be\n     *   prefetched.\n     */\n    prefetch(bufferSize) {\n        return new PrefetchIterator(this, bufferSize);\n    }\n    // TODO(soergel): deep sharded shuffle, where supported\n    /**\n     * Randomly shuffles the elements of this stream.\n     *\n     * @param bufferSize: An integer specifying the number of elements from\n     * this stream from which the new stream will sample.\n     * @param seed: (Optional.) An integer specifying the random seed that\n     * will be used to create the distribution.\n     */\n    shuffle(windowSize, seed) {\n        return new ShuffleIterator(this, windowSize, seed);\n    }\n    /**\n     * Force an iterator to execute serially: each next() call will await the\n     * prior one, so that they cannot execute concurrently.\n     */\n    serial() {\n        return new SerialIterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// Iterators that just extend LazyIterator directly\n// ============================================================================\nclass ArrayIterator extends LazyIterator {\n    constructor(items) {\n        super();\n        this.items = items;\n        this.trav = 0;\n    }\n    summary() {\n        return `Array of ${this.items.length} items`;\n    }\n    async next() {\n        if (this.trav >= this.items.length) {\n            return { value: null, done: true };\n        }\n        const item = this.items[this.trav];\n        this.trav++;\n        return { value: deepClone(item), done: false };\n    }\n}\nclass FunctionCallIterator extends LazyIterator {\n    constructor(nextFn) {\n        super();\n        this.nextFn = nextFn;\n    }\n    summary() {\n        return `Function call`;\n    }\n    async next() {\n        try {\n            return this.nextFn();\n        }\n        catch (e) {\n            // Modify the error message but leave the stack trace intact\n            e.message =\n                `Error thrown while iterating through a dataset: ${e.message}`;\n            throw e;\n        }\n    }\n}\nclass SerialIterator extends LazyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Serial`;\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        return this.upstream.next();\n    }\n}\nclass SkipIterator extends LazyIterator {\n    constructor(upstream, maxCount) {\n        super();\n        this.upstream = upstream;\n        this.maxCount = maxCount;\n        // Local state that should not be clobbered by out-of-order execution.\n        this.count = 0;\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Skip`;\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        // TODO(soergel): consider tradeoffs of reading in parallel, eg.\n        // collecting next() promises in an Array and then waiting for\n        // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:\n        // maybe delayed GC.\n        while (this.count++ < this.maxCount) {\n            const skipped = await this.upstream.next();\n            // short-circuit if upstream is already empty\n            if (skipped.done) {\n                return skipped;\n            }\n            tf.dispose(skipped.value);\n        }\n        return this.upstream.next();\n    }\n}\nclass TakeIterator extends LazyIterator {\n    constructor(upstream, maxCount) {\n        super();\n        this.upstream = upstream;\n        this.maxCount = maxCount;\n        this.count = 0;\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Take`;\n    }\n    async next() {\n        if (this.count++ >= this.maxCount) {\n            return { value: null, done: true };\n        }\n        return this.upstream.next();\n    }\n}\n// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nclass RowMajorBatchIterator extends LazyIterator {\n    constructor(upstream, batchSize, enableSmallLastBatch = true) {\n        super();\n        this.upstream = upstream;\n        this.batchSize = batchSize;\n        this.enableSmallLastBatch = enableSmallLastBatch;\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    summary() {\n        return `${this.upstream.summary()} -> RowMajorBatch`;\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        const batch = [];\n        while (batch.length < this.batchSize) {\n            const item = await this.upstream.next();\n            if (item.done) {\n                if (this.enableSmallLastBatch && batch.length > 0) {\n                    return { value: batch, done: false };\n                }\n                return { value: null, done: true };\n            }\n            batch.push(item.value);\n        }\n        return { value: batch, done: false };\n    }\n}\nclass FilterIterator extends LazyIterator {\n    constructor(upstream, predicate) {\n        super();\n        this.upstream = upstream;\n        this.predicate = predicate;\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Filter`;\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        while (true) {\n            const item = await this.upstream.next();\n            if (item.done || this.predicate(item.value)) {\n                return item;\n            }\n            tf.dispose(item.value);\n        }\n    }\n}\nclass MapIterator extends LazyIterator {\n    constructor(upstream, transform) {\n        super();\n        this.upstream = upstream;\n        this.transform = transform;\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Map`;\n    }\n    async next() {\n        const item = await this.upstream.next();\n        if (item.done) {\n            return { value: null, done: true };\n        }\n        const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n        // Careful: the transform may mutate the item in place.\n        // That's why we have to remember the input Tensors above, and then\n        // below dispose only those that were not passed through to the output.\n        // Note too that the transform function is responsible for tidying\n        // any intermediate Tensors.  Here we are concerned only about the\n        // inputs.\n        const mapped = this.transform(item.value);\n        const outputTensors = tf.tensor_util.getTensorsInContainer(mapped);\n        // TODO(soergel) faster intersection\n        // TODO(soergel) move to tf.disposeExcept(in, out)?\n        for (const t of inputTensors) {\n            if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n                t.dispose();\n            }\n        }\n        return { value: mapped, done: false };\n    }\n}\nclass ErrorHandlingLazyIterator extends LazyIterator {\n    constructor(upstream, handler) {\n        super();\n        this.upstream = upstream;\n        this.handler = handler;\n        this.count = 0;\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    summary() {\n        return `${this.upstream.summary()} -> handleErrors`;\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        while (true) {\n            try {\n                return await this.upstream.next();\n            }\n            catch (e) {\n                if (!this.handler(e)) {\n                    return { value: null, done: true };\n                }\n                // If the handler returns true, loop and fetch the next upstream item.\n                // If the upstream iterator throws an endless stream of errors, and if\n                // the handler says to ignore them, then we loop forever here.  That is\n                // the correct behavior-- it's up to the handler to decide when to stop.\n            }\n        }\n    }\n}\nclass AsyncMapIterator extends LazyIterator {\n    constructor(upstream, transform) {\n        super();\n        this.upstream = upstream;\n        this.transform = transform;\n    }\n    summary() {\n        return `${this.upstream.summary()} -> AsyncMap`;\n    }\n    async next() {\n        const item = await this.upstream.next();\n        if (item.done) {\n            return { value: null, done: true };\n        }\n        const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n        // Careful: the transform may mutate the item in place.\n        // That's why we have to remember the input Tensors above, and then\n        // below dispose only those that were not passed through to the output.\n        // Note too that the transform function is responsible for tidying\n        // any intermediate Tensors.  Here we are concerned only about the\n        // inputs.\n        const mapped = await this.transform(item.value);\n        const outputTensors = tf.tensor_util.getTensorsInContainer(mapped);\n        // TODO(soergel) faster intersection\n        // TODO(soergel) move to tf.disposeExcept(in, out)?\n        for (const t of inputTensors) {\n            if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n                t.dispose();\n            }\n        }\n        return { value: mapped, done: false };\n    }\n}\n// Iterators that maintain a queue of pending items\n// ============================================================================\n/**\n * A base class for transforming streams that operate by maintaining an\n * output queue of elements that are ready to return via next().  This is\n * commonly required when the transformation is 1-to-many:  A call to next()\n * may trigger a call to the underlying stream, which will produce many\n * mapped elements of this stream-- of which we need to return only one, so\n * we have to queue the rest.\n */\nexport class OneToManyIterator extends LazyIterator {\n    constructor() {\n        super();\n        this.outputQueue = new GrowingRingBuffer();\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    async serialNext() {\n        // Fetch so that the queue contains at least one item if possible.\n        // If the upstream source is exhausted, AND there are no items left in\n        // the output queue, then this stream is also exhausted.\n        while (this.outputQueue.length() === 0) {\n            // TODO(soergel): consider parallel reads.\n            if (!await this.pump()) {\n                return { value: null, done: true };\n            }\n        }\n        return { value: this.outputQueue.shift(), done: false };\n    }\n}\nclass FlatmapIterator extends OneToManyIterator {\n    constructor(upstream, transform) {\n        super();\n        this.upstream = upstream;\n        this.transform = transform;\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Flatmap`;\n    }\n    async pump() {\n        const item = await this.upstream.next();\n        if (item.done) {\n            return false;\n        }\n        const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n        // Careful: the transform may mutate the item in place.\n        // that's why we have to remember the input Tensors above, and then\n        // below dispose only those that were not passed through to the output.\n        // Note too that the transform function is responsible for tidying any\n        // intermediate Tensors.  Here we are concerned only about the inputs.\n        const mappedArray = this.transform(item.value);\n        const outputTensors = tf.tensor_util.getTensorsInContainer(mappedArray);\n        this.outputQueue.pushAll(mappedArray);\n        // TODO(soergel) faster intersection, and deduplicate outputTensors\n        // TODO(soergel) move to tf.disposeExcept(in, out)?\n        for (const t of inputTensors) {\n            if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n                t.dispose();\n            }\n        }\n        return true;\n    }\n}\n/**\n * Provides a `LazyIterator` that concatenates a stream of underlying\n * streams.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n */\nexport class ChainedIterator extends LazyIterator {\n    constructor(iterators, baseErrorHandler) {\n        super();\n        this.baseErrorHandler = baseErrorHandler;\n        // Strict Promise execution order:\n        // a next() call may not even begin until the previous one completes.\n        this.lastRead = null;\n        // Local state that should not be clobbered by out-of-order execution.\n        this.iterator = null;\n        this.moreIterators = iterators;\n    }\n    summary() {\n        const upstreamSummaries = 'TODO: fill in upstream of chained summaries';\n        return `${upstreamSummaries} -> Chained`;\n    }\n    async next() {\n        this.lastRead = this.readFromChain(this.lastRead);\n        return this.lastRead;\n    }\n    async readFromChain(lastRead) {\n        // Must await on the previous read since the previous read may have advanced\n        // the stream of streams, from which we need to read.\n        // This is unfortunate since we can't parallelize reads. Which means\n        // prefetching of chained streams is a no-op.\n        // One solution is to prefetch immediately upstream of this.\n        await lastRead;\n        if (this.iterator == null) {\n            const iteratorResult = await this.moreIterators.next();\n            if (iteratorResult.done) {\n                // No more streams to stream from.\n                return { value: null, done: true };\n            }\n            this.iterator = iteratorResult.value;\n            if (this.baseErrorHandler != null) {\n                this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n            }\n        }\n        const itemResult = await this.iterator.next();\n        if (itemResult.done) {\n            this.iterator = null;\n            return this.readFromChain(lastRead);\n        }\n        return itemResult;\n    }\n}\nexport var ZipMismatchMode;\n(function (ZipMismatchMode) {\n    ZipMismatchMode[ZipMismatchMode[\"FAIL\"] = 0] = \"FAIL\";\n    ZipMismatchMode[ZipMismatchMode[\"SHORTEST\"] = 1] = \"SHORTEST\";\n    ZipMismatchMode[ZipMismatchMode[\"LONGEST\"] = 2] = \"LONGEST\"; // use nulls for exhausted streams; use up the longest stream.\n})(ZipMismatchMode || (ZipMismatchMode = {}));\n/**\n * Provides a `LazyIterator` that zips together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nclass ZipIterator extends LazyIterator {\n    constructor(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n        super();\n        this.iterators = iterators;\n        this.mismatchMode = mismatchMode;\n        this.count = 0;\n        this.currentPromise = null;\n    }\n    summary() {\n        const upstreamSummaries = 'TODO: fill in upstream of zip summaries';\n        return `{${upstreamSummaries}} -> Zip`;\n    }\n    async nextState(afterState) {\n        // This chaining ensures that the underlying next() are not even called\n        // before the previous ones have resolved.\n        await afterState;\n        // Collect underlying iterator \"done\" signals as a side effect in\n        // getNext()\n        let numIterators = 0;\n        let iteratorsDone = 0;\n        function getNext(container) {\n            if (container instanceof LazyIterator) {\n                const result = container.next();\n                return {\n                    value: result.then(x => {\n                        numIterators++;\n                        if (x.done) {\n                            iteratorsDone++;\n                        }\n                        return x.value;\n                    }),\n                    recurse: false\n                };\n            }\n            else {\n                return { value: null, recurse: true };\n            }\n        }\n        const mapped = await deepMapAndAwaitAll(this.iterators, getNext);\n        if (numIterators === iteratorsDone) {\n            // The streams have all ended.\n            return { value: null, done: true };\n        }\n        if (iteratorsDone > 0) {\n            switch (this.mismatchMode) {\n                case ZipMismatchMode.FAIL:\n                    throw new Error('Zipped streams should have the same length. ' +\n                        `Mismatched at element ${this.count}.`);\n                case ZipMismatchMode.SHORTEST:\n                    return { value: null, done: true };\n                case ZipMismatchMode.LONGEST:\n                default:\n                // Continue.  The exhausted streams already produced value: null.\n            }\n        }\n        this.count++;\n        return { value: mapped, done: false };\n    }\n    async next() {\n        this.currentPromise = this.nextState(this.currentPromise);\n        return this.currentPromise;\n    }\n}\n// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n/**\n * A stream that prefetches a given number of items from an upstream source,\n * returning them in FIFO order.\n *\n * Note this prefetches Promises, but makes no guarantees about when those\n * Promises resolve.\n */\nexport class PrefetchIterator extends LazyIterator {\n    constructor(upstream, bufferSize) {\n        super();\n        this.upstream = upstream;\n        this.bufferSize = bufferSize;\n        this.buffer = new RingBuffer(bufferSize);\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Prefetch`;\n    }\n    /**\n     * Refill the prefetch buffer.  Returns only after the buffer is full, or\n     * the upstream source is exhausted.\n     */\n    refill() {\n        while (!this.buffer.isFull()) {\n            const v = this.upstream.next();\n            this.buffer.push(v);\n        }\n    }\n    next() {\n        this.refill();\n        // This shift will never throw an error because the buffer is always\n        // full after a refill. If the stream is exhausted, the buffer will be\n        // full of Promises that will resolve to the end-of-stream signal.\n        return this.buffer.shift();\n    }\n}\n/**\n * A stream that performs a sliding-window random shuffle on an upstream\n * source. This is like a `PrefetchIterator` except that the items are\n * returned in randomized order.  Mixing naturally improves as the buffer\n * size increases.\n */\nexport class ShuffleIterator extends PrefetchIterator {\n    constructor(upstream, windowSize, seed) {\n        super(upstream, windowSize);\n        this.upstream = upstream;\n        this.windowSize = windowSize;\n        // Local state that should not be clobbered by out-of-order execution.\n        this.upstreamExhausted = false;\n        this.random = seedrandom.alea(seed || tf.util.now().toString());\n        this.lastRead = Promise.resolve({ value: null, done: false });\n    }\n    async next() {\n        // This sets this.lastRead to a new Promise right away, as opposed to\n        // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n        // would not work because this.nextRead would be updated only after the\n        // promise resolves.\n        this.lastRead = this.lastRead.then(() => this.serialNext());\n        return this.lastRead;\n    }\n    randomInt(max) {\n        return Math.floor(this.random() * max);\n    }\n    chooseIndex() {\n        return this.randomInt(this.buffer.length());\n    }\n    async serialNext() {\n        // TODO(soergel): consider performance\n        if (!this.upstreamExhausted) {\n            this.refill();\n        }\n        while (!this.buffer.isEmpty()) {\n            const chosenIndex = this.chooseIndex();\n            const result = await this.buffer.shuffleExcise(chosenIndex);\n            if (result.done) {\n                this.upstreamExhausted = true;\n            }\n            else {\n                this.refill();\n                return result;\n            }\n        }\n        return { value: null, done: true };\n    }\n}\n//# sourceMappingURL=lazy_iterator.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map';\n// TODO(soergel): consider vectorized operations within the pipeline.\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class Dataset {\n    constructor() {\n        this.size = null;\n    }\n    // TODO(soergel): Make Datasets report whether repeated iterator() calls\n    // produce the same result (e.g., reading from a file) or different results\n    // (e.g., from the webcam).  Currently we don't make this distinction but it\n    // could be important for the user to know.\n    // abstract isDeterministic(): boolean;\n    /**\n     * Groups elements into batches.\n     *\n     * It is assumed that each of the incoming dataset elements has the same\n     * structure-- i.e. the same set of keys at each location in an object\n     * hierarchy.  For each key, the resulting `Dataset` provides a batched\n     * element collecting all of the incoming values for that key.\n     *\n     *  * Incoming primitives are grouped into a 1-D Tensor.\n     *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n     *    the batch dimension.\n     *  * Incoming arrays are converted to Tensor and then batched.\n     *  * A nested array is interpreted as an n-D Tensor, so the batched result\n     *    has n+1 dimensions.\n     *  * An array that cannot be converted to Tensor produces an error.\n     *\n     * If an array should not be batched as a unit, it should first be converted\n     * to an object with integer keys.\n     *\n     * Here are a few examples:\n     *\n     * Batch a dataset of numbers:\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n     * await a.forEachAsync(e => e.print());\n     * ```\n     *\n     * Batch a dataset of arrays:\n     * ```js\n     * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n     * await b.forEachAsync(e => e.print());\n     * ```\n     *\n     * Batch a dataset of objects:\n     * ```js\n     * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n     *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n     *   {a: 8, b: 18}]).batch(4);\n     * await c.forEachAsync(e => {\n     *   console.log('{');\n     *   for(var key in e) {\n     *     console.log(key+':');\n     *     e[key].print();\n     *   }\n     *   console.log('}');\n     * })\n     * ```\n     *\n     * @param batchSize The number of elements desired per batch.\n     * @param smallLastBatch Whether to emit the final batch when it has fewer\n     *   than batchSize elements. Default true.\n     * @returns A `Dataset`, from which a stream of batches can be obtained.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    batch(batchSize, smallLastBatch = true) {\n        const base = this;\n        tf.util.assert(batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n        let size;\n        if (this.size === Infinity || this.size == null) {\n            // If the size of this dataset is infinity or null, the new size keeps the\n            // same.\n            size = this.size;\n        }\n        else if (smallLastBatch) {\n            // If the size of this dataset is known and include small last batch, the\n            // new size is full batch count plus last batch.\n            size = Math.ceil(this.size / batchSize);\n        }\n        else {\n            // If the size of this dataset is known and not include small last batch,\n            // the new size is full batch count.\n            size = Math.floor(this.size / batchSize);\n        }\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator())\n                .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n        }, size);\n    }\n    /**\n     * Concatenates this `Dataset` with another.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * const b = tf.data.array([4, 5, 6]);\n     * const c = a.concatenate(b);\n     * await c.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param dataset A `Dataset` to be concatenated onto this one.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    concatenate(dataset) {\n        const base = this;\n        let size;\n        if (this.size === Infinity || dataset.size === Infinity) {\n            // If the size of any of these two dataset is infinity, new size is\n            // infinity.\n            size = Infinity;\n        }\n        else if (this.size != null && dataset.size != null) {\n            // If the size of both datasets are known and not infinity, new size is\n            // sum the size of these two datasets.\n            size = this.size + dataset.size;\n        }\n        else {\n            // If neither of these two datasets has infinite size and any of these two\n            // datasets' size is null, the new size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).concatenate(await dataset.iterator()), size);\n    }\n    /**\n     * Filters this dataset according to `predicate`.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     *   .filter(x => x%2 === 0);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param predicate A function mapping a dataset element to a boolean or a\n     * `Promise` for one.\n     *\n     * @returns A `Dataset` of elements for which the predicate was true.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    filter(predicate) {\n        const base = this;\n        let size;\n        if (this.size === Infinity) {\n            // If the size of this dataset is infinity, new size is infinity\n            size = Infinity;\n        }\n        else {\n            // If this dataset has limited elements, new size is null because it might\n            // exhausted randomly.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n        }, size);\n    }\n    /**\n     * Apply a function to every element of the dataset.\n     *\n     * After the function is applied to a dataset element, any Tensors contained\n     * within that element are disposed.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param f A function to apply to each dataset element.\n     * @returns A `Promise` that resolves after all elements have been processed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async forEachAsync(f) {\n        return (await this.iterator()).forEachAsync(f);\n    }\n    /**\n     * Maps this dataset through a 1-to-1 transform.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a transformed\n     *   dataset element.\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    map(transform) {\n        const base = this;\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n        }, this.size);\n    }\n    /**\n     * Maps this dataset through an async 1-to-1 transform.\n     *\n     * ```js\n     * const a =\n     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n     *    setTimeout(() => {\n     *      resolve(x * x);\n     *    }, Math.random()*1000 + 500);\n     *  }));\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a `Promise` for a\n     *   transformed dataset element.  This transform is responsible for disposing\n     *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n     *   `map()` case).\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    mapAsync(transform) {\n        const base = this;\n        return datasetFromIteratorFn(async () => {\n            return (await base.iterator()).mapAsync(transform);\n        }, this.size);\n    }\n    /**\n     *  Creates a `Dataset` that prefetches elements from this dataset.\n     *\n     * @param bufferSize: An integer specifying the number of elements to be\n     *   prefetched.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    prefetch(bufferSize) {\n        if (bufferSize == null) {\n            throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n        }\n        const base = this;\n        return datasetFromIteratorFn(async () => (await base.iterator()).prefetch(bufferSize), this.size);\n    }\n    /**\n     * Repeats this dataset `count` times.\n     *\n     * NOTE: If this dataset is a function of global state (e.g. a random number\n     * generator), then different repetitions may produce different elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).repeat(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: (Optional) An integer, representing the number of times\n     *   the dataset should be repeated. The default behavior (if `count` is\n     *   `undefined` or negative) is for the dataset be repeated indefinitely.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    repeat(count) {\n        const base = this;\n        let size;\n        if (this.size != null && count > 0) {\n            // If this dataset has size and count is positive, new size is current\n            // size multiply count. This also covers the case that current size is\n            // infinity.\n            size = this.size * count;\n        }\n        else if (count === 0) {\n            // If count is 0, new size is 0.\n            size = 0;\n        }\n        else if (this.size != null && (count === undefined || count < 0)) {\n            // If this dataset has size and count is undefined or negative, the\n            // dataset will be repeated indefinitely and new size is infinity.\n            size = Infinity;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => {\n            const iteratorIterator = iteratorFromFunction(async () => ({ value: await base.iterator(), done: false }));\n            return iteratorFromConcatenated(iteratorIterator.take(count));\n        }, size);\n    }\n    /**\n     * Creates a `Dataset` that skips `count` initial elements from this dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be skipped\n     *   to form the new dataset.  If `count` is greater than the size of this\n     *   dataset, the new dataset will contain no elements.  If `count`\n     *   is `undefined` or negative, skips the entire dataset.\n     *\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    skip(count) {\n        const base = this;\n        let size;\n        if (this.size != null && count >= 0 && this.size >= count) {\n            // If the size of this dataset is greater than count, the new dataset's\n            // size is current size minus skipped size.This also covers the case that\n            // current size is infinity.\n            size = this.size - count;\n        }\n        else if (this.size != null &&\n            (this.size < count || count === undefined || count < 0)) {\n            // If the size of this dataset is smaller than count, or count is\n            // undefined or negative, skips the entire dataset and the new size is 0.\n            size = 0;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).skip(count), size);\n    }\n    /**\n     * Pseudorandomly shuffles the elements of this dataset. This is done in a\n     * streaming manner, by sampling from a given number of prefetched elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param bufferSize: An integer specifying the number of elements from this\n     *   dataset from which the new dataset will sample.\n     * @param seed: (Optional) An integer specifying the random seed that will\n     *   be used to create the distribution.\n     * @param reshuffleEachIteration: (Optional) A boolean, which if true\n     *   indicates that the dataset should be pseudorandomly reshuffled each time\n     *   it is iterated over. If false, elements will be returned in the same\n     *   shuffled order on each iteration. (Defaults to `true`.)\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    shuffle(bufferSize, seed, reshuffleEachIteration = true) {\n        if (bufferSize == null || bufferSize < 0) {\n            if (this.size == null) {\n                throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n            }\n            else {\n                throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n                    'If your data fits in main memory (for regular JS objects), ' +\n                    'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n                    `bufferSize to the dataset size (${this.size} elements)`);\n            }\n        }\n        const base = this;\n        const random = seedrandom.alea(seed || tf.util.now().toString());\n        return datasetFromIteratorFn(async () => {\n            let seed2 = random.int32();\n            if (reshuffleEachIteration) {\n                seed2 += random.int32();\n            }\n            return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n        }, this.size);\n    }\n    /**\n     * Creates a `Dataset` with at most `count` initial elements from this\n     * dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be taken\n     *   to form the new dataset.  If `count` is `undefined` or negative, or if\n     *   `count` is greater than the size of this dataset, the new dataset will\n     *   contain all elements of this dataset.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    take(count) {\n        const base = this;\n        let size;\n        if (this.size != null && this.size > count) {\n            // If the size of this dataset is greater than count, the new dataset's\n            // size is count.\n            size = count;\n        }\n        else if (this.size != null && this.size <= count) {\n            // If the size of this dataset is equal or smaller than count, the new\n            // dataset's size is the size of this dataset.\n            size = this.size;\n        }\n        else {\n            // If the size of this dataset is null, the new dataset's size is null.\n            size = null;\n        }\n        return datasetFromIteratorFn(async () => (await base.iterator()).take(count), size);\n    }\n    /**\n     * Collect all elements of this dataset into an array.\n     *\n     * Obviously this will succeed only for small datasets that fit in memory.\n     * Useful for testing and generally should be avoided if possible.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async toArray() {\n        if (this.size === Infinity) {\n            throw new Error('Can not convert infinite data stream to array.');\n        }\n        return (await this.iterator()).toArray();\n    }\n    /**\n     * Collect all elements of this dataset into an array with prefetching 100\n     * elements. This is useful for testing, because the prefetch changes the\n     * order in which the Promises are resolved along the processing pipeline.\n     * This may help expose bugs where results are dependent on the order of\n     * Promise resolution rather than on the logical order of the stream (i.e.,\n     * due to hidden mutable state).\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     */\n    async toArrayForTest() {\n        if (this.size === Infinity) {\n            throw new Error('Can not convert infinite data stream to array.');\n        }\n        return (await this.iterator()).toArrayForTest();\n    }\n}\n// TODO(soergel): deep sharded shuffle, where supported\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn(iteratorFn, size = null) {\n    return new class extends Dataset {\n        constructor() {\n            super(...arguments);\n            this.size = size;\n        }\n        /*\n         * Provide a new stream of elements.  Note this will also start new streams\n         * from any underlying `Dataset`s.\n         */\n        async iterator() {\n            return iteratorFn();\n        }\n    }();\n}\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array(items) {\n    return datasetFromIteratorFn(async () => iteratorFromItems(items), items.length);\n}\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip(datasets) {\n    // manually type-check the argument for JS users\n    if (!isIterable(datasets)) {\n        throw new Error('The argument to zip() must be an object or array.');\n    }\n    let size;\n    if (Array.isArray(datasets)) {\n        for (let i = 0; i < datasets.length; i++) {\n            size = size == null ? datasets[i].size :\n                Math.min(size, datasets[i].size);\n        }\n    }\n    else if (datasets instanceof Object) {\n        for (const ds in datasets) {\n            size = size == null ? datasets[ds].size :\n                Math.min(size, datasets[ds].size);\n        }\n    }\n    return datasetFromIteratorFn(async () => {\n        const streams = await deepMapAndAwaitAll(datasets, d => {\n            if (d instanceof Dataset) {\n                return { value: d.iterator(), recurse: false };\n            }\n            else if (isIterable(d)) {\n                return { value: null, recurse: true };\n            }\n            else {\n                throw new Error('Leaves of the structure passed to zip() must be Datasets, ' +\n                    'not primitives.');\n            }\n        });\n        return iteratorFromZipped(streams, ZipMismatchMode.SHORTEST);\n    }, size);\n}\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows) {\n    if (rows === null) {\n        return null;\n    }\n    // use the first item to decide whether to recurse or batch here.\n    const exampleRow = rows[0];\n    if (canTensorify(exampleRow)) {\n        // rows is an array of primitives, Tensors, or arrays.  Batch them.\n        const value = batchConcat(rows);\n        return { value, recurse: false };\n    }\n    // the example row is an object, so recurse into it.\n    return { value: null, recurse: true };\n}\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat(arrays) {\n    if (arrays.length === 0) {\n        // We can't return an empty Tensor because we don't know the element shape.\n        throw new Error('Can\\'t make a batch of zero elements.');\n    }\n    if (arrays[0] instanceof tf.Tensor) {\n        // Input is an array of Tensors\n        return tf.stack(arrays);\n    }\n    else {\n        // Input is a possibly-nested array of numbers.\n        return tf.tensor(arrays);\n    }\n}\n//# sourceMappingURL=dataset.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Dataset } from '../dataset';\nimport { TextLineDataset } from './text_line_dataset';\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset {\n    /**\n     * Create a `CSVDataset`.\n     *\n     * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n     * @param csvConfig (Optional) A CSVConfig object that contains configurations\n     *     of reading and decoding from CSV file(s).\n     *\n     *     hasHeader: (Optional) A boolean value that indicates whether the first\n     *     row of provided CSV file is a header line with column names, and should\n     *     not be included in the data. Defaults to `true`.\n     *\n     *     columnNames: (Optional) A list of strings that corresponds to\n     *     the CSV column names, in order. If provided, it ignores the column\n     *     names inferred from the header row. If not provided, infers the column\n     *     names from the first row of the records. If hasHeader is false and\n     *     columnNames is not provided, this method throws an error.\n     *\n     *     columnConfigs: (Optional) A dictionary whose key is column names, value\n     *     is an object stating if this column is required, column's data type,\n     *     default value, and if this column is label. If provided, keys must\n     *     correspond to names provided in columnNames or inferred from the file\n     *     header lines. If isLabel is true any column, returns an array of two\n     *     items: the first item is a dict of features key/value pairs, the second\n     *     item is a dict of labels key/value pairs. If no feature is marked as\n     *     label, returns a dict of features only.\n     *\n     *     configuredColumnsOnly (Optional) If true, only columns provided in\n     *     columnConfigs will be parsed and provided during iteration.\n     *\n     *     delimiter (Optional) The string used to parse each line of the input\n     *     file. Defaults to `,`.\n     */\n    constructor(input, csvConfig) {\n        super();\n        this.input = input;\n        this.hasHeader = true;\n        this.fullColumnNames = null;\n        this.columnNamesValidated = false;\n        this.columnConfigs = null;\n        this.configuredColumnsOnly = false;\n        this.delimiter = ',';\n        this.delimWhitespace = false;\n        this.base = new TextLineDataset(input);\n        if (!csvConfig) {\n            csvConfig = {};\n        }\n        this.hasHeader = csvConfig.hasHeader === false ? false : true;\n        this.fullColumnNames = csvConfig.columnNames;\n        this.columnConfigs = csvConfig.columnConfigs;\n        this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n        if (csvConfig.delimWhitespace) {\n            util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');\n            this.delimWhitespace = true;\n            this.delimiter = ' ';\n        }\n        else {\n            this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n        }\n    }\n    /**\n     * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n     * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n     * false and `columnNames` is provided, `columnNames`. If\n     * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n     * all column names parsed from the csv file. For example usage please go to\n     * `tf.data.csv`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n    async columnNames() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n            this.fullColumnNames;\n    }\n    /* 1) If `columnNames` is provided as string[], use this string[] as output\n     * keys in corresponding order. The length must match the number of inferred\n     * columns if `hasHeader` is true .\n     * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n     * hasHeader is true. If `hasHeader` is false, throw an error.\n     * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n     * exist in parsed `columnNames`.\n     */\n    async setColumnNames() {\n        const columnNamesFromFile = await this.maybeReadHeaderLine();\n        if (!this.fullColumnNames && !columnNamesFromFile) {\n            // Throw an error if columnNames is not provided and no header line.\n            throw new Error('Column names must be provided if there is no header line.');\n        }\n        else if (this.fullColumnNames && columnNamesFromFile) {\n            // Check provided columnNames match header line.\n            util.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => 'The length of provided columnNames (' +\n                this.fullColumnNames.length.toString() +\n                ') does not match the length of the header line read from ' +\n                'file (' + columnNamesFromFile.length.toString() + ').');\n        }\n        if (!this.fullColumnNames) {\n            this.fullColumnNames = columnNamesFromFile;\n        }\n        // Check if there are duplicate column names.\n        const counts = this.fullColumnNames.reduce((countAcc, name) => {\n            countAcc[name] = (countAcc[name] + 1) || 1;\n            return countAcc;\n        }, {});\n        const duplicateNames = Object.keys(counts).filter((name) => (counts[name] > 1));\n        util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString());\n        // Check if keys in columnConfigs match columnNames.\n        if (this.columnConfigs) {\n            for (const key of Object.keys(this.columnConfigs)) {\n                const index = this.fullColumnNames.indexOf(key);\n                if (index === -1) {\n                    throw new Error('The key \"' + key +\n                        '\" provided in columnConfigs does not match any of the column ' +\n                        'names (' + this.fullColumnNames.toString() + ').');\n                }\n            }\n        }\n        this.columnNamesValidated = true;\n    }\n    async maybeReadHeaderLine() {\n        if (this.hasHeader) {\n            const iter = await this.base.iterator();\n            const firstElement = await iter.next();\n            if (firstElement.done) {\n                throw new Error('No data was found for CSV parsing.');\n            }\n            const firstLine = firstElement.value;\n            const headers = this.parseRow(firstLine, false);\n            return headers;\n        }\n        else {\n            return null;\n        }\n    }\n    async iterator() {\n        if (!this.columnNamesValidated) {\n            await this.setColumnNames();\n        }\n        let lines = await this.base.iterator();\n        if (this.hasHeader) {\n            // We previously read the first line to get the columnNames.\n            // Now that we're providing data, skip it.\n            lines = lines.skip(1);\n        }\n        return lines.map(x => this.makeDataElement(x));\n    }\n    makeDataElement(line) {\n        const values = this.parseRow(line);\n        const features = {};\n        const labels = {};\n        for (let i = 0; i < this.fullColumnNames.length; i++) {\n            const key = this.fullColumnNames[i];\n            const config = this.columnConfigs ? this.columnConfigs[key] : null;\n            if (this.configuredColumnsOnly && !config) {\n                // This column is not selected.\n                continue;\n            }\n            else {\n                const value = values[i];\n                let parsedValue = null;\n                if (value === '') {\n                    // If default value is provided, use it. If default value is not\n                    // provided, set as undefined.\n                    if (config && config.default !== undefined) {\n                        parsedValue = config.default;\n                    }\n                    else if (config && (config.required || config.isLabel)) {\n                        throw new Error(`Required column ${key} is empty in this line: ${line}`);\n                    }\n                    else {\n                        parsedValue = undefined;\n                    }\n                }\n                else {\n                    // A value is present, so parse it based on type\n                    const valueAsNum = Number(value);\n                    if (isNaN(valueAsNum)) {\n                        // The value is a string and this column is declared as boolean\n                        // in config, parse it as boolean.\n                        if (config && config.dtype === 'bool') {\n                            parsedValue = this.getBoolean(value);\n                        }\n                        else {\n                            // Set value as string\n                            parsedValue = value;\n                        }\n                    }\n                    else if (!config || !config.dtype) {\n                        // If this value is a number and no type config is provided, return\n                        // it as number.\n                        parsedValue = valueAsNum;\n                    }\n                    else {\n                        // If this value is a number and data type is provided, parse it\n                        // according to provided data type.\n                        switch (config.dtype) {\n                            case 'float32':\n                                parsedValue = valueAsNum;\n                                break;\n                            case 'int32':\n                                parsedValue = Math.floor(valueAsNum);\n                                break;\n                            case 'bool':\n                                parsedValue = this.getBoolean(value);\n                                break;\n                            default:\n                                parsedValue = valueAsNum;\n                        }\n                    }\n                }\n                // Check if this column is label.\n                (config && config.isLabel) ? labels[key] = parsedValue :\n                    features[key] = parsedValue;\n            }\n        }\n        // If label exists, return an object of features and labels as {xs:features,\n        // ys:labels}, otherwise return features only.\n        if (Object.keys(labels).length === 0) {\n            return features;\n        }\n        else {\n            return { xs: features, ys: labels };\n        }\n    }\n    getBoolean(value) {\n        if (value === '1' || value.toLowerCase() === 'true') {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n    parseRow(line, validateElementCount = true) {\n        const result = [];\n        let readOffset = 0;\n        const readLength = line.length;\n        let currentState = STATE_OUT;\n        // Goes through the line to parse quote.\n        for (let i = 0; i < readLength; i++) {\n            switch (currentState) {\n                // Before enter a new field\n                case STATE_OUT:\n                    switch (line.charAt(i)) {\n                        // Enter a quoted field\n                        case CODE_QUOTE:\n                            readOffset = i + 1;\n                            currentState = STATE_QUOTE;\n                            break;\n                        // Read an empty field\n                        case this.delimiter:\n                            readOffset = i + 1;\n                            // If delimiter is white space and configured to collapse\n                            // multiple white spaces, ignore this white space.\n                            if (this.delimiter === ' ' && this.delimWhitespace) {\n                                break;\n                            }\n                            result.push('');\n                            currentState = STATE_OUT;\n                            break;\n                        // Enter an unquoted field\n                        default:\n                            currentState = STATE_FIELD;\n                            readOffset = i;\n                            break;\n                    }\n                    break;\n                // In an unquoted field\n                case STATE_FIELD:\n                    switch (line.charAt(i)) {\n                        // Exit an unquoted field, add it to result\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        default:\n                    }\n                    break;\n                // In a quoted field\n                case STATE_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Read a quote after a quote\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE_AFTER_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                // This state means it's right after a second quote in a field\n                case STATE_QUOTE_AFTER_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Finished a quoted field\n                        case this.delimiter:\n                            result.push(line.substring(readOffset, i - 1));\n                            currentState = STATE_OUT;\n                            readOffset = i + 1;\n                            break;\n                        // Finished a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        // In a quoted part in a quoted field\n                        default:\n                            currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n                            break;\n                    }\n                    break;\n                case STATE_WITHIN_QUOTE_IN_QUOTE:\n                    switch (line.charAt(i)) {\n                        // Exit a quoted part in a quoted field\n                        case CODE_QUOTE:\n                            currentState = STATE_QUOTE;\n                            break;\n                        default:\n                    }\n                    break;\n                default:\n            }\n        }\n        // Adds last item based on if it is quoted.\n        if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n            result.push(line.substring(readOffset, readLength - 1));\n        }\n        else {\n            result.push(line.substring(readOffset));\n        }\n        // Check if each row has the same number of elements as column names.\n        if (validateElementCount && result.length !== this.fullColumnNames.length) {\n            throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n        }\n        return result;\n    }\n}\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n//# sourceMappingURL=csv_dataset.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n//# sourceMappingURL=cpu_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function pool(xValues, xShape, dtype, strides, convInfo, poolType) {\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n        Number.POSITIVE_INFINITY);\n    const output = buffer(convInfo.outShape, dtype);\n    const outputVals = output.values;\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n    const outputColStrides = convInfo.outShape[3];\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const outputBatchOffset = b * outputBatchStrides;\n        const inputBatchOffset = b * strides[0];\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    const xCMin = Math.max(0, xCCorner);\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let minMaxValue = initialValue;\n                    let avgValue = 0;\n                    let count = 0;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const xROffset = inputBatchOffset + xR * strides[1];\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const xCOffset = xROffset + xC * strides[2];\n                            const pixel = xValues[xCOffset + d];\n                            if ((poolType === 'max' && pixel > minMaxValue)) {\n                                minMaxValue = pixel;\n                            }\n                            else if (poolType === 'avg') {\n                                avgValue += pixel;\n                                count++;\n                            }\n                        }\n                        if (isNaN(minMaxValue)) {\n                            break;\n                        }\n                    }\n                    const outputOffset = outputRowOffset + yC * outputColStrides + d;\n                    outputVals[outputOffset] =\n                        poolType === 'avg' ? avgValue / count : minMaxValue;\n                }\n            }\n        }\n    }\n    return output;\n}\nexport function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {\n    const maxPositions = buffer(convInfo.outShape, 'int32');\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const xBuf = buffer(xShape, dtype, xValues);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const xRCorner = yR * strideHeight - padTop;\n                let xRMin = xRCorner;\n                while (xRMin < 0) {\n                    xRMin += dilationHeight;\n                }\n                // const xRMin = Math.max(0, xRCorner);\n                const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const xCCorner = yC * strideWidth - padLeft;\n                    let xCMin = xCCorner;\n                    while (xCMin < 0) {\n                        xCMin += dilationWidth;\n                    }\n                    const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n                    let maxValue = Number.NEGATIVE_INFINITY;\n                    let maxPosition = -1;\n                    for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n                        const wR = xR - xRCorner;\n                        for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                            const wC = xC - xCCorner;\n                            const pixel = xBuf.get(b, xR, xC, d);\n                            if (pixel > maxValue) {\n                                maxValue = pixel;\n                                if (flattenPositions) {\n                                    maxPosition = includeBatchInIndex ?\n                                        ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                                            convInfo.inChannels +\n                                            d :\n                                        (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                                }\n                                else {\n                                    maxPosition = wR * effectiveFilterWidth + wC;\n                                }\n                            }\n                        }\n                    }\n                    maxPositions.set(maxPosition, b, yR, yC, d);\n                }\n            }\n        }\n    }\n    return maxPositions;\n}\n//# sourceMappingURL=pool_utils.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, max, slice_util, TensorBuffer, upcastType, util } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from './cpu_util';\nimport { maxPoolPositions, pool } from './utils/pool_utils';\nfunction mapActivation(backend, x, activation, preluActivationWeights) {\n    if (activation === 'linear') {\n        return backend.linear(x);\n    }\n    else if (activation === 'relu') {\n        return backend.relu(x);\n    }\n    else if (activation === 'elu') {\n        return backend.elu(x);\n    }\n    else if (activation === 'relu6') {\n        return backend.relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return backend.prelu(x, preluActivationWeights);\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = {};\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n        return dataId;\n    }\n    /** Increase refCount of a `TensorData`. */\n    incRef(dataId) {\n        const tensorData = this.data.get(dataId);\n        tensorData.refCount++;\n    }\n    /** Decrease refCount of a `TensorData`. */\n    decRef(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype) {\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensors } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensors.real.dataId);\n            const imagValues = this.readSync(complexTensors.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return tf.buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    disposeData(dataId) {\n        if (this.data.has(dataId)) {\n            const { complexTensors } = this.data.get(dataId);\n            if (complexTensors != null) {\n                complexTensors.real.dispose();\n                complexTensors.imag.dispose();\n            }\n            this.data.delete(dataId);\n        }\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        const dataId = tensorInfo.dataId;\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n            if (tensorData.refCount < 1) {\n                this.disposeData(dataId);\n            }\n        }\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(null, real.shape, 'complex64');\n        const resultData = this.data.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        assertNotComplex(x, 'slice');\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isContinous) {\n            const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n            const length = util.sizeFromShape(size);\n            const vals = this.readSync(x.dataId);\n            return tf.tensor(vals.subarray(flatOffset, flatOffset + length), size, x.dtype);\n        }\n        const buffer = tf.buffer(size, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; ++i) {\n            const loc = buffer.indexToLoc(i);\n            const xLoc = loc.map((idx, j) => idx + begin[j]);\n            buffer.values[i] = xBuf.get(...xLoc);\n        }\n        return buffer.toTensor();\n    }\n    stridedSlice(x, begin, end, strides) {\n        assertNotComplex(x, 'stridedSlice');\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tf.tensor([], outShape);\n        }\n        const buffer = tf.buffer(outShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const loc = buffer.indexToLoc(i);\n            const newLoc = new Array(loc.length);\n            for (let j = 0; j < newLoc.length; j++) {\n                newLoc[j] = loc[j] * strides[j] + begin[j];\n            }\n            buffer.set(xBuf.get(...newLoc), ...loc);\n        }\n        return buffer.toTensor();\n    }\n    diag(x) {\n        const xVals = this.readSync(x.dataId);\n        const buffer = tf.buffer([x.size, x.size], x.dtype);\n        const vals = buffer.values;\n        for (let i = 0; i < xVals.length; i++) {\n            vals[i * x.size + i] = xVals[i];\n        }\n        return buffer.toTensor();\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    reverse(x, axis) {\n        assertNotComplex(x, 'reverse');\n        const buffer = tf.buffer(x.shape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const outLoc = buffer.indexToLoc(i);\n            const inLoc = outLoc.slice();\n            axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n            buffer.set(xBuf.get(...inLoc), ...outLoc);\n        }\n        return buffer.toTensor();\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => tf.real(t));\n            const imags = tensors.map((t) => tf.imag(t));\n            return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        const tensors2D = tensors.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            return t.as2D(-1, innerSize);\n        });\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n          */);\n        const values = tf.buffer(outShape, tensors[0].dtype)\n            .values;\n        if (tensors2D[0].shape[0] === 1) {\n            // Use built-in TypedArray.set() method for speed.\n            let offset = 0;\n            tensors2D.forEach(t => {\n                values.set(this.readSync(t.dataId), offset);\n                offset += t.size;\n            });\n        }\n        else {\n            let colOffset = 0;\n            tensors2D.forEach(t => {\n                const tVals = this.readSync(t.dataId);\n                let tIdx = 0;\n                for (let row = 0; row < t.shape[0]; ++row) {\n                    const resIdx = row * outShape[1] + colOffset;\n                    for (let col = 0; col < t.shape[1]; ++col) {\n                        values[resIdx + col] = tVals[tIdx++];\n                    }\n                }\n                colOffset += t.shape[1];\n            });\n        }\n        const finalOutShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        return tf.tensor(values, finalOutShape, tensors[0].dtype);\n    }\n    neg(x) {\n        assertNotComplex(x, 'neg');\n        return this.multiply(tf.scalar(-1), x);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal + bReal, imag: aImag + bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue + bValue);\n    }\n    addN(tensors) {\n        assertNotComplex(tensors, 'addN');\n        const vals = tensors.map(t => this.readSync(t.dataId));\n        const result = tf.buffer(tensors[0].shape, tensors[0].dtype);\n        const resultVals = result.values;\n        for (let i = 0; i < tensors.length; i++) {\n            const currVals = vals[i];\n            for (let j = 0; j < resultVals.length; j++) {\n                resultVals[j] += currVals[j];\n            }\n        }\n        return result.toTensor();\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n        // kernel modularization.\n        return tf.div(b, sumExp);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal - bReal, imag: aImag - bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue - bValue);\n    }\n    pow(a, b) {\n        assertNotComplex([a, b], 'pow');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue));\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        assertNotComplex([a, b], 'matMul');\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const leftDim = transposeA ? a.shape[2] : a.shape[1];\n        const rightDim = transposeB ? b.shape[1] : b.shape[2];\n        const batchDim = a.shape[0];\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n            [a.strides[0], 1, a.strides[1]] :\n            [a.strides[0], a.strides[1], 1];\n        const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n            [1, b.strides[1], b.strides[0]] :\n            [b.strides[1], 1, b.strides[0]];\n        const size = leftDim * rightDim;\n        const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n        const resVals = result.values;\n        const blockSize = this.blockSize;\n        for (let b = 0; b < batchDim; b++) {\n            for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n                for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                    for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                        // for when blockSize doesn't evenly divide the input\n                        const iBlock = Math.min(i0 + blockSize, leftDim);\n                        const jBlock = Math.min(j0 + blockSize, rightDim);\n                        const kBlock = Math.min(k0 + blockSize, sharedDim);\n                        for (let i = i0; i < iBlock; i++) {\n                            for (let j = j0; j < jBlock; j++) {\n                                let sum = 0.0;\n                                for (let k = k0; k < kBlock; k++) {\n                                    sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                                        bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                                }\n                                resVals[b * size + (i * rightDim + j)] += sum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result.toTensor();\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        let result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return {\n                    real: aReal * bReal - aImag * bImag,\n                    imag: aReal * bImag + aImag * bReal\n                };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue * bValue);\n    }\n    floorDiv(a, b) {\n        assertNotComplex([a, b], 'floorDiv');\n        const op = (a, b) => Math.floor(a / b);\n        const outputDtype = 'int32';\n        return this.broadcastedBinaryOp(a, b, outputDtype, op);\n    }\n    sum(x, axes) {\n        assertNotComplex(x, 'sum');\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let sum = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                sum += aVals[offset + j];\n            }\n            vals[i] = sum;\n        }\n        return result;\n    }\n    prod(x, axes) {\n        assertNotComplex(x, 'sum');\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let prod = 1;\n            for (let j = 0; j < reduceSize; ++j) {\n                prod *= aVals[offset + j];\n            }\n            vals[i] = prod;\n        }\n        return result;\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        assertNotComplex(x, 'unsortedSegmentSum');\n        const res = [];\n        // Reshape the segment id's so that they can be broadcast with\n        // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n        const numIters = x.rank - segmentIds.rank;\n        for (let i = 0; i < numIters; ++i) {\n            segmentIds = segmentIds.expandDims(i + 1);\n        }\n        for (let i = 0; i < numSegments; ++i) {\n            const segmentId = tf.scalar(i, 'int32');\n            const mask = tf.equal(segmentId, segmentIds).asType('float32');\n            const sum = mask.mul(x).sum(0);\n            res.push(sum);\n        }\n        return tf.stack(res);\n    }\n    argMin(x, axis) {\n        assertNotComplex(x, 'argMin');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            let minIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                    minIndex = j;\n                }\n            }\n            vals[i] = minIndex;\n        }\n        return result;\n    }\n    argMax(x, axis) {\n        assertNotComplex(x, 'argMax');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let max = aVals[offset];\n            let maxIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value > max) {\n                    max = value;\n                    maxIndex = j;\n                }\n            }\n            vals[i] = maxIndex;\n        }\n        return result;\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        assertNotComplex(x, 'cumsum');\n        if (axis !== x.rank - 1) {\n            throw new Error(`backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(x.shape, resultDtype);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        const finalDim = x.shape[x.rank - 1];\n        const indexAdjuster = reverse ?\n            (i, j) => i + finalDim - j - 1 :\n            (i, j) => i + j;\n        for (let i = 0; i < aVals.length; i += finalDim) {\n            for (let j = 0; j < finalDim; j++) {\n                const idx = indexAdjuster(i, j);\n                if (j === 0) {\n                    vals[idx] = exclusive ? 0 : aVals[idx];\n                }\n                else {\n                    const prevIdx = indexAdjuster(i, j - 1);\n                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                        aVals[idx] + vals[prevIdx];\n                }\n            }\n        }\n        return result;\n    }\n    equal(a, b) {\n        assertNotComplex([a, b], 'equal');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal === bVal) ? 1 : 0;\n        });\n    }\n    notEqual(a, b) {\n        assertNotComplex([a, b], 'notEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal !== bVal) ? 1 : 0;\n        });\n    }\n    less(a, b) {\n        assertNotComplex([a, b], 'less');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal < bVal) ? 1 : 0;\n        });\n    }\n    lessEqual(a, b) {\n        assertNotComplex([a, b], 'lessEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal <= bVal) ? 1 : 0;\n        });\n    }\n    greater(a, b) {\n        assertNotComplex([a, b], 'greater');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal > bVal) ? 1 : 0;\n        });\n    }\n    greaterEqual(a, b) {\n        assertNotComplex([a, b], 'greaterEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal >= bVal) ? 1 : 0;\n        });\n    }\n    logicalNot(x) {\n        assertNotComplex(x, 'logicalNot');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = values[i] ? 0 : 1;\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    logicalAnd(a, b) {\n        assertNotComplex([a, b], 'logicalAnd');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal && bVal;\n        });\n    }\n    logicalOr(a, b) {\n        assertNotComplex([a, b], 'logicalOr');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal || bVal;\n        });\n    }\n    select(condition, a, b) {\n        assertNotComplex([condition, a, b], 'select');\n        const values = this.readSync(condition.dataId);\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n        const newValues = this.readSync(result.dataId);\n        let index = 0;\n        const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n            1 :\n            util.sizeFromShape(a.shape.slice(1));\n        for (let i = 0; i < values.length; i++) {\n            for (let j = 0; j < offset; j++) {\n                if (values[i] === 1) {\n                    newValues[index++] = aValues[i];\n                }\n                else {\n                    newValues[index++] = bValues[i];\n                }\n            }\n        }\n        return result;\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        assertNotComplex(x, 'topk');\n        const xVals = this.readSync(x.dataId);\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        assertNotComplex(x, 'min');\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                }\n            }\n            vals[i] = min;\n        }\n        return result;\n    }\n    minimum(a, b) {\n        assertNotComplex([a, b], 'minimum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n    }\n    mod(a, b) {\n        assertNotComplex([a, b], 'mod');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const rem = aVal % bVal;\n            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n                return rem;\n            }\n            else {\n                return (rem + bVal) % bVal;\n            }\n        });\n    }\n    maximum(a, b) {\n        assertNotComplex([a, b], 'maximum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n    }\n    all(x, axes) {\n        assertNotComplex(x, 'all');\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let all = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                all = all && value;\n            }\n            vals[i] = all;\n        }\n        return result;\n    }\n    any(x, axes) {\n        assertNotComplex(x, 'any');\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let anyVal = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                anyVal = anyVal || value;\n            }\n            vals[i] = anyVal;\n        }\n        return result;\n    }\n    squaredDifference(a, b) {\n        assertNotComplex([a, b], 'squaredDifference');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const diff = aVal - bVal;\n            return diff * diff;\n        });\n    }\n    ceil(x) {\n        assertNotComplex(x, 'ceil');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.ceil(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    floor(x) {\n        assertNotComplex(x, 'floor');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.floor(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sign(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (values[i] < 0) {\n                newValues[i] = -1;\n            }\n            else if (values[i] > 0) {\n                newValues[i] = 1;\n            }\n            else {\n                newValues[i] = 0;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    isNaN(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isNaN(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isInf(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Math.abs(values[i]) === Infinity) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isFinite(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isFinite(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    round(x) {\n        assertNotComplex(x, 'round');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            // The algorithm is based on banker's rounding.\n            const base = Math.floor(values[i]);\n            if (values[i] - base < 0.5) {\n                newValues[i] = Math.floor(values[i]);\n            }\n            else if (values[i] - base > 0.5) {\n                newValues[i] = Math.ceil(values[i]);\n            }\n            else {\n                if (base % 2.0 === 0.0) {\n                    newValues[i] = base;\n                }\n                else {\n                    newValues[i] = base + 1.0;\n                }\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    exp(x) {\n        assertNotComplex(x, 'exp');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.exp(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    expm1(x) {\n        assertNotComplex(x, 'expm1');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.expm1(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log(x) {\n        assertNotComplex(x, 'log');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log1p(x) {\n        assertNotComplex(x, 'log1p');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log1p(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sqrt(x) {\n        assertNotComplex(x, 'sqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    rsqrt(x) {\n        assertNotComplex(x, 'rsqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = 1 / Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    reciprocal(x) {\n        assertNotComplex(x, 'reciprocal');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = 1 / values[i];\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    linear(x) {\n        return x;\n    }\n    relu(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.max(0, inVals[i]);\n        }\n        return res;\n    }\n    relu6(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n        }\n        return res;\n    }\n    prelu(x, a) {\n        assertNotComplex([x, a], 'prelu');\n        return this.broadcastedBinaryOp(x, a, x.dtype, (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\n    }\n    elu(x) {\n        assertNotComplex(x, 'elu');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            }\n            else {\n                resultValues[i] = (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    eluDer(dy, y) {\n        assertNotComplex([dy, y], 'eluDer');\n        const resultValues = new Float32Array(y.size);\n        const values = this.readSync(y.dataId);\n        const dyValues = this.readSync(dy.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 1) {\n                resultValues[i] = dyValues[i];\n            }\n            else {\n                resultValues[i] = dyValues[i] * (v + 1);\n            }\n        }\n        return this.makeOutput(resultValues, y.shape, 'float32');\n    }\n    selu(x) {\n        assertNotComplex(x, 'selu');\n        // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n        // see: https://arxiv.org/abs/1706.02515\n        const scaleAlpha = backend_util.SELU_SCALEALPHA;\n        const scale = backend_util.SELU_SCALE;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = scale * v;\n            }\n            else {\n                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    clip(x, min, max) {\n        assertNotComplex(x, 'clip');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            resultValues[i] = v > max ? max : (v < min ? min : v);\n        }\n        return this.makeOutput(resultValues, x.shape, x.dtype);\n    }\n    abs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.abs(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    complexAbs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < x.size; ++i) {\n            const real = values[i * 2];\n            const imag = values[i * 2 + 1];\n            resultValues[i] = Math.hypot(real, imag);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    int(x) {\n        assertNotComplex(x, 'int');\n        const resultValues = new Int32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = values[i];\n        }\n        return this.makeOutput(resultValues, x.shape, 'int32');\n    }\n    sigmoid(x) {\n        assertNotComplex(x, 'sigmoid');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    softplus(x) {\n        assertNotComplex(x, 'softplus');\n        // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n        // epsilon is the difference between 1.0 and the next representable float.\n        // For a single precision 32 bit float this should be 2^-23, see:\n        // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n        const epsilon = 1.1920928955078125e-7;\n        const threshold = Math.log(epsilon) + 2.0;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            // Value above which exp(x) may overflow, but softplus(x) == x\n            // is within machine epsilon.\n            const tooLarge = values[i] > -threshold;\n            // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n            // is within machine epsilon.\n            const tooSmall = values[i] < threshold;\n            const expX = Math.exp(values[i]);\n            let result;\n            if (tooSmall) {\n                result = expX;\n            }\n            else if (tooLarge) {\n                result = values[i];\n            }\n            else {\n                result = Math.log(1.0 + expX);\n            }\n            resultValues[i] = result;\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    sin(x) {\n        assertNotComplex(x, 'sin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tan(x) {\n        assertNotComplex(x, 'tan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.tan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asin(x) {\n        assertNotComplex(x, 'asin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acos(x) {\n        assertNotComplex(x, 'acos');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acos(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan(x) {\n        assertNotComplex(x, 'atan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan2(a, b) {\n        assertNotComplex([a, b], 'atan2');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue));\n    }\n    sinh(x) {\n        assertNotComplex(x, 'sinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    cosh(x) {\n        assertNotComplex(x, 'cosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tanh(x) {\n        assertNotComplex(x, 'tanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = util.tanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asinh(x) {\n        assertNotComplex(x, 'asinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acosh(x) {\n        assertNotComplex(x, 'acosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atanh(x) {\n        assertNotComplex(x, 'atanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    erf(x) {\n        assertNotComplex(x, 'erf');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        const p = backend_util.ERF_P;\n        const a1 = backend_util.ERF_A1;\n        const a2 = backend_util.ERF_A2;\n        const a3 = backend_util.ERF_A3;\n        const a4 = backend_util.ERF_A4;\n        const a5 = backend_util.ERF_A5;\n        for (let i = 0; i < values.length; ++i) {\n            const sign = Math.sign(values[i]);\n            const v = Math.abs(values[i]);\n            const t = 1.0 / (1.0 + p * v);\n            resultValues[i] = sign *\n                (1.0 -\n                    (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n                        Math.exp(-v * v));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    step(x, alpha = 0) {\n        assertNotComplex(x, 'step');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            if (isNaN(value)) {\n                resultValues[i] = NaN;\n            }\n            else {\n                resultValues[i] = value > 0 ? 1 : alpha;\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.conv2d(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    conv2d(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'conv2d');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xBatchStride = x.strides[0];\n        const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n        const xColStride = isChannelsLast ? x.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n        const yBatchStride = y.strides[0];\n        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n        const yColStride = isChannelsLast ? y.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * xBatchStride;\n            const yOffset1 = b * yBatchStride;\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * yRowStride;\n                const xRCorner = yR * convInfo.strideHeight - padTop;\n                for (let wR = 0; wR < filterHeight; wR++) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * xRowStride;\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * yColStride;\n                        const xCCorner = yC * convInfo.strideWidth - padLeft;\n                        for (let wC = 0; wC < filterWidth; wC++) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * xColStride;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                    yVals[yOffset3 + d2 * yChannelStride] +=\n                                        xVal * wVals[wOffset3 + d2];\n                                }\n                                wOffset3 += convInfo.outChannels;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv3d(x, filter, convInfo) {\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padFront = convInfo.padInfo.front;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n                const yOffset2 = yOffset1 + yF * y.strides[1];\n                const xFCorner = yF * convInfo.strideDepth - padFront;\n                for (let wF = 0; wF < filterDepth; wF++) {\n                    const xF = xFCorner + wF * dilationDepth;\n                    if (xF < 0 || xF >= convInfo.inDepth) {\n                        continue;\n                    }\n                    const wOffset1 = wF * filter.strides[0];\n                    const xOffset2 = xOffset1 + xF * x.strides[1];\n                    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                        const yOffset3 = yOffset2 + yR * y.strides[2];\n                        const xRCorner = yR * convInfo.strideHeight - padTop;\n                        for (let wR = 0; wR < filterHeight; wR++) {\n                            const xR = xRCorner + wR * dilationHeight;\n                            if (xR < 0 || xR >= convInfo.inHeight) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wR * filter.strides[1];\n                            const xOffset3 = xOffset2 + xR * x.strides[2];\n                            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                                for (let wC = 0; wC < filterWidth; wC++) {\n                                    const xC = xCCorner + wC * dilationWidth;\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\n                                        continue;\n                                    }\n                                    const wOffset3 = wOffset2 + wC * filter.strides[2];\n                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                    let wOffset4 = wOffset3;\n                                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                        const xVal = xVals[xOffset4 + d1];\n                                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                            yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                        }\n                                        wOffset4 += convInfo.outChannels;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'conv2dDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const dyValues = this.readSync(dy.dataId);\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth, dataFormat } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const xBatchStride = dx.strides[0];\n        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n        const xColStride = isChannelsLast ? dx.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n        const yBatchStride = dy.strides[0];\n        const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n        const yColStride = isChannelsLast ? dy.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let d2 = 0; d2 < outChannels; ++d2) {\n                                    const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                    const weight = fltValues[fltOffset + d2];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        const dxOffset = xBatchStride * b + xRowStride * xR +\n                            xColStride * xC + xChannelStride * d1;\n                        dxValues[dxOffset] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n        const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n        const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                // Frames of depth\n                for (let xF = 0; xF < inDepth; ++xF) {\n                    const xFCorner = xF - frontPad;\n                    const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                    const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                    // Rows as per standard 2d matrix notation\n                    for (let xR = 0; xR < inHeight; ++xR) {\n                        const xRCorner = xR - topPad;\n                        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                        // Columns as per standard 2d matrix notation\n                        for (let xC = 0; xC < inWidth; ++xC) {\n                            const xCCorner = xC - leftPad;\n                            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                            let dotProd = 0;\n                            for (let yF = xFMin; yF < yFMax; ++yF) {\n                                const wF = yF * strideDepth - xFCorner;\n                                for (let yR = xRMin; yR < yRMax; ++yR) {\n                                    const wR = yR * strideHeight - xRCorner;\n                                    for (let yC = xCMin; yC < yCMax; ++yC) {\n                                        const wC = yC * strideWidth - xCCorner;\n                                        const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                        const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                            fltS1 * (filterHeight - 1 - wR) +\n                                            fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                        for (let d2 = 0; d2 < outChannels; ++d2) {\n                                            const pixel = dyValues[dyOffset + d2];\n                                            const weight = fltValues[fltOffset + d2];\n                                            dotProd += pixel * weight;\n                                        }\n                                    }\n                                }\n                            }\n                            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                                dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'conv2dDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        // Need to convolve.\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            for (let yR = yRMin; yR < yRMax; ++yR) {\n                                const xR = wR + yR * strideHeight - topPad;\n                                for (let yC = yCMin; yC < yCMax; ++yC) {\n                                    const xC = wC + yC * strideWidth - leftPad;\n                                    if (isChannelsLast) {\n                                        dotProd +=\n                                            xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                                    }\n                                    else {\n                                        dotProd +=\n                                            xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                                    }\n                                }\n                            }\n                        }\n                        dW.set(dotProd, wR, wC, d1, d2);\n                    }\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dw = tf.buffer(convInfo.filterShape, 'float32');\n        const dwValues = dw.values;\n        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const xValues = this.readSync(x.dataId);\n        const [xS0, xS1, xS2, xS3] = x.strides;\n        const frontPad = convInfo.padInfo.front;\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        for (let wF = 0; wF < filterDepth; ++wF) {\n            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n            const wOffset1 = wF * dwS0;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n                const wOffset2 = wR * dwS1 + wOffset1;\n                for (let wC = 0; wC < filterWidth; ++wC) {\n                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                    const wOffset3 = wC * dwS2 + wOffset2;\n                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                        const wOffset4 = d1 * dwS3 + wOffset3;\n                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                            let dotProd = 0;\n                            for (let b = 0; b < convInfo.batchSize; ++b) {\n                                const xOffset1 = b * xS0;\n                                const yOffset1 = b * dyS0;\n                                for (let yF = yFMin; yF < yFMax; ++yF) {\n                                    const xF = wF + yF * strideDepth - frontPad;\n                                    const xOffset2 = xF * xS1 + xOffset1;\n                                    const yOffset2 = yF * dyS1 + yOffset1;\n                                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                                        const xR = wR + yR * strideHeight - topPad;\n                                        const xOffset3 = xR * xS2 + xOffset2;\n                                        const yOffset3 = yR * dyS2 + yOffset2;\n                                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                                            const xC = wC + yC * strideWidth - leftPad;\n                                            const xOffset4 = xC * xS3 + xOffset3;\n                                            const yOffset4 = yC * dyS3 + yOffset3;\n                                            dotProd +=\n                                                xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                        }\n                                    }\n                                }\n                            }\n                            dwValues[wOffset4 + d2] = dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dw.toTensor();\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'depthwiseConv2D');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * y.strides[1];\n                const xRCorner = yR * convInfo.strideHeight - padLeft;\n                for (let wR = 0; wR < filterHeight; ++wR) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * x.strides[1];\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * y.strides[2];\n                        const xCCorner = yC * convInfo.strideWidth - padTop;\n                        for (let wC = 0; wC < filterWidth; ++wC) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                            let yOffset4 = yOffset3;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1];\n                                for (let q = 0; q < chMul; ++q) {\n                                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                                }\n                                yOffset4 += chMul;\n                                wOffset3 += chMul;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const chMul = outChannels / inChannels;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let dm = 0; dm < chMul; ++dm) {\n                                    const d2 = d1 * chMul + dm;\n                                    const pixel = dyValues[dyOffset + d2];\n                                    const weight = fltValues[fltOffset + dm];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    const d1 = Math.trunc(d2 / chMul);\n                    const dm = d2 % chMul;\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, dm);\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    tile(x, reps) {\n        assertNotComplex(x, 'tile');\n        return tile(this.bufferSync(x), reps);\n    }\n    gather(x, indices, axis) {\n        assertNotComplex([x, indices], 'gather');\n        const newShape = x.shape.slice();\n        const indicesValues = this.readSync(indices.dataId);\n        newShape[axis] = indicesValues.length;\n        const result = tf.buffer(newShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < result.size; ++i) {\n            const newLoc = result.indexToLoc(i);\n            const originalLoc = newLoc.slice();\n            originalLoc[axis] = indicesValues[newLoc[axis]];\n            const originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        assertNotComplex([x], 'batchToSpaceND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return tf.transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    maxPool(x, convInfo) {\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n            .toTensor();\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPoolBackprop');\n        const xValues = this.readSync(x.dataId);\n        const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                                    1 - maxPosBuf.get(b, dyR, dyC, d);\n                                const curPos = wR * effectiveFilterWidth + wC;\n                                const mask = maxPos === curPos ? 1 : 0;\n                                if (mask === 0) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel * mask;\n                            }\n                        }\n                        dx.set(dotProd, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPoolBackprop');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel;\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    pool3d(x, convInfo, poolType) {\n        assertNotComplex(x, 'pool3d');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n            Number.POSITIVE_INFINITY);\n        const xValues = this.readSync(x.dataId);\n        const output = tf.buffer(convInfo.outShape, x.dtype);\n        const outputVals = output.values;\n        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n            convInfo.outShape[3] * convInfo.outShape[4];\n        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n        const outputColStrides = convInfo.outShape[4];\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            const outputBatchOffset = batch * outputBatchStrides;\n            const inputBatchOffset = batch * x.strides[0];\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                            let minMaxValue = initialValue;\n                            let avgValue = 0;\n                            let count = 0;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const xColOffset = xRowOffset + xCol * x.strides[3];\n                                        const pixel = xValues[xColOffset + channel];\n                                        if ((poolType === 'max' && pixel > minMaxValue)) {\n                                            minMaxValue = pixel;\n                                        }\n                                        else if (poolType === 'avg') {\n                                            avgValue += pixel;\n                                            count++;\n                                        }\n                                        if (isNaN(minMaxValue)) {\n                                            break;\n                                        }\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            const outputOffset = outputColOffset + channel;\n                            outputVals[outputOffset] =\n                                poolType === 'avg' ? avgValue / count : minMaxValue;\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    avgPool3d(x, convInfo) {\n        assertNotComplex(x, 'avgPool3d');\n        return this.pool3d(x, convInfo, 'avg').toFloat();\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPool3dBackprop');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins.\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    maxPool3d(x, convInfo) {\n        assertNotComplex(x, 'maxPool3d');\n        return this.pool3d(x, convInfo, 'max').toFloat();\n    }\n    maxPool3dPositions(x, convInfo) {\n        const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const xBuf = this.bufferSync(x);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            let maxValue = Number.NEGATIVE_INFINITY;\n                            let maxPosition = -1;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const wDepth = xDepth - xDepthCorner;\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const wRow = xRow - xRowCorner;\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const wCol = xCol - xColCorner;\n                                        const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                        if (pixel >= maxValue) {\n                                            maxValue = pixel;\n                                            maxPosition = wDepth * effectiveFilterHeight *\n                                                effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                        }\n                                    }\n                                }\n                            }\n                            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return maxPositions.toTensor();\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPool3dBackprop');\n        const maxPositions = this.maxPool3dPositions(x, convInfo);\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const maxPosBuf = this.bufferSync(maxPositions);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const maxPos = effectiveFilterDepth *\n                                            effectiveFilterHeight * effectiveFilterWidth -\n                                            1 -\n                                            maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                            wRow * effectiveFilterWidth + wCol;\n                                        const mask = maxPos === curPos ? 1 : 0;\n                                        if (mask === 0) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel * mask;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    avgPool(x, convInfo) {\n        assertNotComplex(x, 'avgPool');\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n            .toTensor()\n            .toFloat();\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeBilinear');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let outputIdx = 0;\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        for (let b = 0; b < batch; b++) {\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceRowFloor = Math.floor(sourceFracRow);\n                const rowFrac = sourceFracRow - sourceRowFloor;\n                const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n                const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n                const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceColFloor = Math.floor(sourceFracCol);\n                    const colFrac = sourceFracCol - sourceColFloor;\n                    const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                    const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n                    const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n                    const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n                    const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const topLeft = xValues[topLeftOffest + d];\n                        const bottomLeft = xValues[botLeftOffset + d];\n                        const topRight = xValues[topRightOffset + d];\n                        const bottomRight = xValues[botRightOffest + d];\n                        const top = topLeft + (topRight - topLeft) * colFrac;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                        const newValue = top + (bottom - top) * rowFrac;\n                        result[outputIdx++] = newValue;\n                    }\n                }\n            }\n        }\n        return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeBilinearBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass and add the\n        // corresponding coefficient from dy to the gradient (with some\n        // interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n        const dyValues = this.readSync(dy.dataId);\n        let offset = 0;\n        for (let b = 0; b < batch; b++) {\n            const bOffset = b * x.strides[0];\n            for (let r = 0; r < yHeight; r++) {\n                const dxR = r * heightScale;\n                const topDxRIndex = Math.floor(dxR);\n                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n                const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n                const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n                const dxRLerp = dxR - topDxRIndex;\n                const inverseDxRLerp = 1.0 - dxRLerp;\n                for (let c = 0; c < yWidth; c++) {\n                    const dxC = c * widthScale;\n                    const leftDxCIndex = Math.floor(dxC);\n                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                    const dxCLerp = dxC - leftDxCIndex;\n                    const inverseDxCLerp = 1.0 - dxCLerp;\n                    const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n                    const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];\n                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];\n                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                    for (let d = 0; d < depth; d++) {\n                        const dyVal = dyValues[offset++];\n                        output[topLeftRCOffset + d] +=\n                            dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                        output[bottomLeftRCOffset + d] +=\n                            dyVal * dxRLerpTimesInverseDxCLerp;\n                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeNearestNeighbor');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        let outputOffset = 0;\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                    Math.floor(sourceFracRow));\n                const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                        Math.floor(sourceFracCol));\n                    const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const newVal = xValues[colOffset + d];\n                        output[outputOffset++] = newVal;\n                    }\n                }\n            }\n        }\n        return tf.tensor(output, [batch, newHeight, newWidth, numChannels], x.dtype);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        const dyValues = this.readSync(dy.dataId);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        // Loop over the output space.\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < xHeight; r++) {\n                const rowOffset = batchOffset + r * x.strides[1];\n                // Compute bounds for where in dy we will look\n                const startRLerp = Math.floor(r * invHeightScale);\n                const startDyR = Math.floor(startRLerp - (winHeight / 2));\n                for (let c = 0; c < xWidth; c++) {\n                    const colOffset = rowOffset + c * x.strides[2];\n                    // Compute bounds for where in dy we will look\n                    const startCLerp = Math.floor(c * invWidthScale);\n                    const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                    for (let d = 0; d < depth; d++) {\n                        let accum = 0;\n                        // loop over dy\n                        for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                            const dyR = dyRIndex + startDyR;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyR < 0 || dyR >= yHeight) {\n                                continue;\n                            }\n                            const dyROffset = batchOffset + dyR * dy.strides[1];\n                            const sourceFracRow = dyR * heightScale;\n                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                                Math.floor(sourceFracRow));\n                            if (r !== sourceNearestRow) {\n                                continue;\n                            }\n                            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                                const dyC = dyCIndex + startDyC;\n                                // Guard against the window exceeding the bounds of dy\n                                if (dyC < 0 || dyC >= yWidth) {\n                                    continue;\n                                }\n                                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                                const sourceFracCol = dyC * widthScale;\n                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                    Math.floor(sourceFracCol));\n                                if (c === sourceNearestCol) {\n                                    accum += dyValues[dyCOffset + d];\n                                }\n                            }\n                        }\n                        output[colOffset + d] = accum;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, x.shape, x.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n        const xVals = this.readSync(x.dataId);\n        const mVals = this.readSync(mean.dataId);\n        const varVals = this.readSync(variance.dataId);\n        const sVals = scale ? this.readSync(scale.dataId) :\n            new Float32Array([1]);\n        const offVals = offset ? this.readSync(offset.dataId) :\n            new Float32Array([0]);\n        const outVals = new Float32Array(xVals.length);\n        const offValsLength = offVals.length;\n        const sValsLength = sVals.length;\n        const varValsLength = varVals.length;\n        const mValsLength = mVals.length;\n        let offi = 0;\n        let mi = 0;\n        let si = 0;\n        let vi = 0;\n        for (let i = 0; i < xVals.length; ++i) {\n            outVals[i] = offVals[offi++] +\n                (xVals[i] - mVals[mi++]) * sVals[si++] /\n                    Math.sqrt(varVals[vi++] + varianceEpsilon);\n            if (offi >= offValsLength) {\n                offi = 0;\n            }\n            if (mi >= mValsLength) {\n                mi = 0;\n            }\n            if (si >= sValsLength) {\n                si = 0;\n            }\n            if (vi >= varValsLength) {\n                vi = 0;\n            }\n        }\n        return tf.tensor4d(outVals, x.shape);\n    }\n    localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {\n        assertNotComplex(x, 'localResponseNormalization4D');\n        const channels = x.shape[3];\n        const maxD = channels - 1;\n        const xValues = this.readSync(x.dataId);\n        const size = x.size;\n        const result = new Float32Array(size);\n        function sumAcrossChannels(offset) {\n            const currentChannel = offset % channels;\n            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n            const endSumOffset = offset - currentChannel +\n                Math.min(currentChannel + depthRadius, maxD);\n            let sum = 0.0;\n            for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n                const z = xValues[beginSumOffset];\n                sum += z * z;\n            }\n            return sum;\n        }\n        for (let offset = 0; offset < size; offset++) {\n            const sum = sumAcrossChannels(offset);\n            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n            result[offset] = val;\n        }\n        return tf.tensor4d(result, x.shape);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        assertNotComplex(dy, 'LRNGrad');\n        const channels = dy.shape[3];\n        const dyValues = this.readSync(dy.dataId);\n        const inputImageValues = this.readSync(inputImage.dataId);\n        const outputImageValues = this.readSync(outputImage.dataId);\n        const result = new Float32Array(dy.size);\n        const size = dy.size;\n        for (let offset = 0; offset < size; offset++) {\n            const currentChannel = offset % channels;\n            const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n            const depthEnd = (offset - currentChannel) +\n                Math.min(channels, currentChannel + depthRadius + 1);\n            let norm = 0;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                norm += Math.pow(inputImageValues[k], 2);\n            }\n            norm = alpha * norm + bias;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                let dyi = -2 * alpha * beta * inputImageValues[k] *\n                    outputImageValues[offset] / norm;\n                if (offset === k) {\n                    dyi += Math.pow(norm, -beta);\n                }\n                dyi *= dyValues[offset];\n                result[k] += dyi;\n            }\n        }\n        return tf.tensor4d(result, dy.shape);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        assertNotComplex(logits, 'multinomial');\n        const probabilities = normalized ? logits : tf.softmax(logits);\n        const batchSize = probabilities.shape[0];\n        const numEvents = probabilities.shape[1];\n        const res = tf.zeros([batchSize, numSamples], 'int32');\n        const resVals = this.readSync(res.dataId);\n        const probVals = this.readSync(probabilities.dataId);\n        for (let b = 0; b < batchSize; ++b) {\n            const offset = b * numEvents;\n            // The cdf won't include the last event. It will be implicit if no other\n            // event happened.\n            const cdf = new Float32Array(numEvents - 1);\n            cdf[0] = probVals[offset];\n            for (let event = 1; event < cdf.length; ++event) {\n                cdf[event] = cdf[event - 1] + probVals[offset + event];\n            }\n            const random = seedrandom.alea(seed.toString());\n            const outOffset = b * numSamples;\n            for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n                const r = random();\n                // Assume last event happened by default.\n                resVals[outOffset + sampleId] = cdf.length;\n                for (let event = 0; event < cdf.length; event++) {\n                    if (r < cdf[event]) {\n                        resVals[outOffset + sampleId] = event;\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        assertNotComplex(indices, 'oneHot');\n        const res = new Float32Array(indices.size * depth);\n        res.fill(offValue);\n        const indicesVal = this.readSync(indices.dataId);\n        for (let event = 0; event < indices.size; ++event) {\n            if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n                res[event * depth + indicesVal[event]] = onValue;\n            }\n        }\n        return tf.tensor2d(res, [indices.size, depth], 'int32');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        assertNotComplex(boxes, 'nonMaxSuppression');\n        const boxesVals = this.readSync(boxes.dataId);\n        const scoresVals = this.readSync(scores.dataId);\n        return nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    }\n    fft(x) {\n        return this.fftBatch(x, false);\n    }\n    ifft(x) {\n        return this.fftBatch(x, true);\n    }\n    /**\n     * Calculate FFT of inner most elements of batch tensor.\n     */\n    fftBatch(x, inverse) {\n        const batch = x.shape[0];\n        const innerDim = x.shape[1];\n        // Collects real and imaginary values separately.\n        const realResult = tf.buffer(x.shape, 'float32');\n        const imagResult = tf.buffer(x.shape, 'float32');\n        const real = tf.real(x).as2D(batch, innerDim);\n        const imag = tf.imag(x).as2D(batch, innerDim);\n        for (let b = 0; b < batch; b++) {\n            // TODO: Support slice ops for complex type.\n            const r = real.slice([b, 0], [1, innerDim]);\n            const i = imag.slice([b, 0], [1, innerDim]);\n            const input = tf.complex(r, i);\n            // Run FFT by batch element.\n            const res = this.readSync(this.fftImpl(input, inverse).dataId);\n            for (let d = 0; d < innerDim; d++) {\n                const c = backend_util.getComplexWithIndex(res, d);\n                realResult.values[b * innerDim + d] = c.real;\n                imagResult.values[b * innerDim + d] = c.imag;\n            }\n        }\n        const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n        return t.as2D(batch, innerDim);\n    }\n    fftImpl(x, inverse) {\n        const x1D = x.as1D();\n        const n = x1D.size;\n        if (this.isExponentOf2(n)) {\n            let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n            if (inverse) {\n                result = tf.complex(tf.real(result).div(tf.scalar(n)), tf.imag(result).div(tf.scalar(n)));\n            }\n            return result;\n        }\n        else {\n            const data = this.readSync(x.dataId);\n            const rawOutput = this.fourierTransformByMatmul(data, n, inverse);\n            const output = backend_util.splitRealAndImagArrays(rawOutput);\n            return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n        }\n    }\n    isExponentOf2(size) {\n        return (size & size - 1) === 0;\n    }\n    // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n    fftRadix2(input, size, inverse) {\n        if (size === 1) {\n            return input;\n        }\n        const data = this.readSync(input.dataId);\n        const half = size / 2;\n        const evenComplex = backend_util.complexWithEvenIndex(data);\n        let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n        const oddComplex = backend_util.complexWithOddIndex(data);\n        let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n        // Recursive call for half part of original input.\n        evenTensor = this.fftRadix2(evenTensor, half, inverse);\n        oddTensor = this.fftRadix2(oddTensor, half, inverse);\n        const e = backend_util.exponents(size, inverse);\n        const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n        const addPart = evenTensor.add(exponent);\n        const subPart = evenTensor.sub(exponent);\n        const realTensor = tf.real(addPart).concat(tf.real(subPart));\n        const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n        return tf.complex(realTensor, imagTensor).as1D();\n    }\n    // Calculate fourier transform by multplying sinusoid matrix.\n    fourierTransformByMatmul(data, size, inverse) {\n        const ret = new Float32Array(size * 2);\n        // TODO: Use matmul instead once it supports complex64 type.\n        for (let r = 0; r < size; r++) {\n            let real = 0.0;\n            let imag = 0.0;\n            for (let c = 0; c < size; c++) {\n                const e = backend_util.exponent(r * c, size, inverse);\n                const term = backend_util.getComplexWithIndex(data, c);\n                real += term.real * e.real - term.imag * e.imag;\n                imag += term.real * e.imag + term.imag * e.real;\n            }\n            if (inverse) {\n                real /= size;\n                imag /= size;\n            }\n            backend_util.assignToTypedArray(ret, real, imag, r);\n        }\n        return ret;\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = x.shape[1];\n        const inputWidth = x.shape[2];\n        const inputDepth = x.shape[3];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n        let outputIdx = 0;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let h = 0; h < outputHeight; ++h) {\n                const inH = Math.floor(h / blockSize);\n                const offsetH = (h % blockSize);\n                for (let w = 0; w < outputWidth; ++w) {\n                    const inW = Math.floor(w / blockSize);\n                    const offsetW = (w % blockSize);\n                    const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                    for (let d = 0; d < outputDepth; ++d) {\n                        const inD = d + offsetD;\n                        const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                        result[outputIdx++] = xValues[inputIdx];\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(result, [batchSize, outputHeight, outputWidth, outputDepth]);\n    }\n    broadcastedBinaryOp(a, b, dtype, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const result = tf.buffer(newShape, dtype);\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const resVals = result.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resVals.length; ++i) {\n                resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            const aBuf = this.bufferSync(a);\n            const bBuf = this.bufferSync(b);\n            for (let i = 0; i < resVals.length; ++i) {\n                const loc = result.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bBuf.locToIndex(bLoc);\n                resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return result.toTensor();\n    }\n    broadcastedBinaryComplexOp(a, b, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const realResult = tf.buffer(newShape, 'float32');\n        const imagResult = tf.buffer(newShape, 'float32');\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const realVals = realResult.values;\n        const imagVals = imagResult.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < realVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                realVals[i] = result.real;\n                imagVals[i] = result.imag;\n            }\n        }\n        else {\n            const aRealBuf = this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n            const bRealBuf = this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n            for (let i = 0; i < realVals.length; i++) {\n                const loc = realResult.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aRealBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bRealBuf.locToIndex(bLoc);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                realVals[i] = opResult.real;\n                imagVals[i] = opResult.imag;\n            }\n        }\n        return this.complex(realResult.toTensor(), imagResult.toTensor());\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n    cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n        const numBoxes = boxes.shape[0];\n        const [cropHeight, cropWidth] = cropSize;\n        const output = tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n        const boxVals = this.readSync(boxes.dataId);\n        const boxIndVals = this.readSync(boxIndex.dataId);\n        const imageVals = this.readSync(images.dataId);\n        const inStride = images.strides; // to calculate flat indexes into image\n        const outStride = output.strides; // to calculate flat indexes into output\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n        for (let b = 0; b < numBoxes; b++) {\n            const startInd = b * 4;\n            const y1 = boxVals[startInd];\n            const x1 = boxVals[startInd + 1];\n            const y2 = boxVals[startInd + 2];\n            const x2 = boxVals[startInd + 3];\n            const bInd = boxIndVals[b];\n            if (bInd >= batch) {\n                continue;\n            }\n            const heightScale = (cropHeight > 1) ?\n                (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n                0;\n            const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n            for (let y = 0; y < cropHeight; y++) {\n                const yInd = (cropHeight > 1) ?\n                    y1 * (imageHeight - 1) + y * (heightScale) :\n                    0.5 * (y1 + y2) * (imageHeight - 1);\n                if (yInd < 0 || yInd > imageHeight - 1) {\n                    for (let x = 0; x < cropWidth; x++) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                    }\n                    continue;\n                }\n                if (method === 'bilinear') {\n                    const topInd = Math.floor(yInd);\n                    const bottomInd = Math.ceil(yInd);\n                    const yLerp = yInd - topInd;\n                    for (let x = 0; x < cropWidth; x++) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const leftInd = Math.floor(xInd);\n                        const rightInd = Math.ceil(xInd);\n                        const xLerp = xInd - leftInd;\n                        for (let c = 0; c < numChannels; c++) {\n                            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topRight = imageVals[ind];\n                            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomRight = imageVals[ind];\n                            const top = topLeft + (topRight - topLeft) * xLerp;\n                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = top + ((bottom - top) * yLerp);\n                        }\n                    }\n                }\n                else { // method == \"nearest\"\n                    for (let x = 0; x < cropWidth; ++x) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const closestX = Math.round(xInd);\n                        const closestY = Math.round(yInd);\n                        for (let c = 0; c < numChannels; c++) {\n                            const inInd = c + closestX * inStride[2] +\n                                closestY * inStride[1] + bInd * inStride[0];\n                            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[outInd] = imageVals[inInd];\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        if (numSlices === 0) {\n            return tf.tensor([], resultShape, x.dtype);\n        }\n        const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n        const indicesData = this.readSync(indices.dataId);\n        const xData = this.readSync(x.dataId);\n        for (let i = 0; i < numSlices; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                flattenIndex += dim * strides[j];\n                index.push(dim);\n            }\n            if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${x.shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n            }\n        }\n        return buffer.toTensor().reshape(resultShape);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const defaultValue = tf.scalar(0);\n        const sumDupeIndices = true;\n        return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return engine().makeTensor(values, shape, dtype, this);\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported for string tensors');\n        }\n        else {\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        const values = util.getArrayFromDType(x.dtype, util.sizeFromShape(x.shape));\n        return this.makeOutput(values, x.shape, x.dtype);\n    }\n    linspace(start, stop, num) {\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const indicesData = this.readSync(indices.dataId);\n        const updatesData = this.readSync(updates.dataId);\n        if (outputSize === 0) {\n            return tf.tensor([], shape, updates.dtype);\n        }\n        const buffer = new TensorBuffer(flattenShape, updates.dtype);\n        buffer.values.fill(this.readSync(defaultValue.dataId)[0]);\n        for (let i = 0; i < numUpdates; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                index.push(dim);\n                flattenIndex += dim * strides[j];\n            }\n            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                if (sumDupeIndices) {\n                    buffer.values[flattenIndex * sliceSize + k] +=\n                        updatesData[i * sliceSize + k];\n                }\n                else {\n                    buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                        updatesData[0] :\n                        updatesData[i * sliceSize + k];\n                }\n            }\n        }\n        return buffer.toTensor().reshape(shape);\n    }\n}\n//# sourceMappingURL=backend_cpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport { registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendCPU } from './backend_cpu';\nimport * as shared from './shared';\nexport { MathBackendCPU } from './backend_cpu';\nexport { version as version_cpu } from './version';\nexport { shared };\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n//# sourceMappingURL=base.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport const cosConfig = {\n    kernelName: Cos,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend }) => {\n        const { x } = inputs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'cos');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const newValues = new Float32Array(xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = Math.cos(values[i]);\n        }\n        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Cos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2dConfig = {\n    kernelName: Dilation2D,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const xVals = cpuBackend.data.get(x.dataId).values;\n        const xRank = x.shape.length;\n        const filterVals = cpuBackend.data.get(filter.dataId).values;\n        const filterRank = filter.shape.length;\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        const outSize = util.sizeFromShape(outShape);\n        const outRank = outShape.length;\n        const outputVals = util.getArrayFromDType(x.dtype, outSize);\n        // Upsampling the input by fill in `dilation size - 1` values between each\n        // input value.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                                        const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                                        const val = xVals[xIndex] + filterVals[filterIndex];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n                        outputVals[outputIndex] = curVal;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropFilterConfig = {\n    kernelName: Dilation2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed filter gradients has the same dimensions as the filter:\n        // [filterHeight, filterWidth, depth]\n        const gradients = util.makeZerosNestedTypedArray(filter.shape, filter.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hMax = 0;\n                        let wMax = 0;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hMax = h;\n                                            wMax = w;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n        return { dataId, shape: filter.shape, dtype: filter.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropInputConfig = {\n    kernelName: Dilation2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed gradients has the same dimensions as the input:\n        // [batch, inputHeight, inputCols, inChannel]\n        const gradients = util.makeZerosNestedTypedArray(x.shape, x.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hInMax = (hBeg < 0) ? 0 : hBeg;\n                        let wInMax = (wBeg < 0) ? 0 : wBeg;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hInMax = hIn;\n                                            wInMax = wIn;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function createBinaryKernelConfig(name, op) {\n    return {\n        kernelName: name,\n        backendName: 'cpu',\n        kernelFunc: ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const [resultData, resultShape] = op(a.shape, b.shape, aVals, bVals, a.dtype);\n            const dataId = cpuBackend.write(resultData, resultShape, a.dtype);\n            return { dataId, shape: resultShape, dtype: a.dtype };\n        }\n    };\n}\nexport function createBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=kernel_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { createBinaryKernelImpl } from '../utils/kernel_utils';\nexport const divImpl = createBinaryKernelImpl((a, b) => a / b);\n//# sourceMappingURL=Div_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Div } from '@tensorflow/tfjs-core';\nimport { createBinaryKernelConfig } from '../utils/kernel_utils';\nimport { divImpl } from './Div_impl';\nexport const divConfig = createBinaryKernelConfig(Div, divImpl);\n//# sourceMappingURL=Div.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const coordX = Math.round(imageWidth - x);\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        let outputValue = imageVals[outIdx];\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n//# sourceMappingURL=Identity.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { reductionIndices, keepDims } = attrs;\n        const cpuBackend = backend;\n        let xShape = x.shape;\n        const xRank = xShape.length;\n        const origAxes = util.parseAxisParam(reductionIndices, xShape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        let xVals = cpuBackend.data.get(x.dataId).values;\n        if (permutedAxes != null) {\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = xShape[permutedAxes[i]];\n            }\n            xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n            xShape = newShape;\n        }\n        assertNotComplex(x, 'max');\n        backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n        const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n        const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n        let outShape = maxOutShape;\n        if (keepDims) {\n            // reshape\n            const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n            outShape = newShape;\n        }\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'MaxPoolWithArgmax');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n        const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n        return [\n            { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n            { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }\n        ];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { maxPoolPositions, pool } from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {\n    const strides = util.computeStrides(xShape);\n    const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n    const maxPositions = maxPoolPositions(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n    return [maxPools.values, maxPositions.values];\n}\n//# sourceMappingURL=MaxPoolWithArgmax_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n        const boxesVals = cpuBackend.data.get(boxes.dataId).values;\n        const scoresVals = cpuBackend.data.get(scores.dataId).values;\n        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [selectedIndices, validOutputs];\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n        const boxesVals = cpuBackend.data.get(boxes.dataId).values;\n        const scoresVals = cpuBackend.data.get(scores.dataId).values;\n        const maxOutputSizeVal = maxOutputSize;\n        const iouThresholdVal = iouThreshold;\n        const scoreThresholdVal = scoreThreshold;\n        const softNmsSigmaVal = softNmsSigma;\n        const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n        return [selectedIndices, selectedScores];\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV5.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    assertNotComplex(x, 'pad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xVals = backend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    if (constantValue !== 0) {\n        resVals.fill(constantValue);\n    }\n    for (let i = 0; i < xSize; i++) {\n        const coords = util.indexToLoc(i, xRank, xStrides);\n        const outCoords = coords.map((c, i) => c + start[i]);\n        const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n        resVals[outIndex] = xVals[i];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'cpu',\n    kernelFunc: padV2\n};\n//# sourceMappingURL=PadV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'cpu',\n    kernelFunc: reshape\n};\n//# sourceMappingURL=Reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const fullOpacityValue = 255;\n        const sinFactor = Math.sin(radians);\n        const cosFactor = Math.cos(radians);\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const y = coords[1];\n                        // coordX/coordY are the result of rotating and translating x/y.\n                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n                        coordX = Math.round(coordX + centerX);\n                        coordY = Math.round(coordY + centerY);\n                        let outputValue = fillValue;\n                        if (typeof fillValue !== 'number') {\n                            if (channel === 3) {\n                                outputValue = fullOpacityValue;\n                            }\n                            else {\n                                outputValue = fillValue[channel];\n                            }\n                        }\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                            coordY < imageHeight) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedRowOffset = coordY * (imageWidth * numChannels);\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    assertNotComplex([x], 'spaceToBatchND');\n    const prod = util.sizeFromShape(blockShape);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const paddedX = padV2Config.kernelFunc({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapeInputs = { x: paddedX };\n    const reshapeAttrs = { shape: reshapedPaddedShape };\n    const paddedXReshaped = reshape({ inputs: reshapeInputs, backend, attrs: reshapeAttrs });\n    const transposeInputs = { x: paddedXReshaped };\n    const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n    const paddedXT = transpose({ inputs: transposeInputs, backend, attrs: transposeAttrs });\n    const resultReshapeInputs = { x: paddedXT };\n    const resultReshapeAttrs = { shape: flattenShape };\n    const result = reshape({ inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs });\n    backend.disposeIntermediateTensorInfo(paddedX);\n    backend.disposeIntermediateTensorInfo(paddedXReshaped);\n    backend.disposeIntermediateTensorInfo(paddedXT);\n    return result;\n}\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'cpu',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend }) => {\n        const { x } = inputs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'square');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = value * value;\n        }\n        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createBinaryKernelImpl } from '../utils/kernel_utils';\nimport { createBinaryKernelConfig } from '../utils/kernel_utils';\nconst squaredDifferenceImpl = createBinaryKernelImpl((aVal, bVal) => {\n    const diff = aVal - bVal;\n    return diff * diff;\n});\nexport const squaredDifferenceConfig = createBinaryKernelConfig(SquaredDifference, squaredDifferenceImpl);\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { cosConfig } from './kernels/Cos';\nimport { dilation2dConfig } from './kernels/Dilation2D';\nimport { dilation2dBackpropFilterConfig } from './kernels/Dilation2DBackpropFilter';\nimport { dilation2dBackpropInputConfig } from './kernels/Dilation2DBackpropInput';\nimport { divConfig } from './kernels/Div';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { identityConfig } from './kernels/Identity';\nimport { maxConfig } from './kernels/Max';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { padV2Config } from './kernels/PadV2';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { transposeConfig } from './kernels/Transpose';\n// List all kernel configs here\nconst kernelConfigs = [\n    cosConfig, dilation2dConfig, dilation2dBackpropInputConfig,\n    dilation2dBackpropFilterConfig, divConfig, flipLeftRightConfig,\n    identityConfig, maxPoolWithArgmaxConfig, maxConfig, nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config, padV2Config, reshapeConfig, rotateWithOffsetConfig,\n    spaceToBatchNDConfig, squareConfig, squaredDifferenceConfig, transposeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n};\nexport function setWebGLContext(webGLVersion, gl) {\n    contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion) {\n    if (!(webGLVersion in contexts)) {\n        contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);\n    }\n    const gl = contexts[webGLVersion];\n    if (gl.isContextLost()) {\n        delete contexts[webGLVersion];\n        return getWebGLContext(webGLVersion);\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.BLEND);\n    gl.disable(gl.DITHER);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SAMPLE_COVERAGE);\n    gl.enable(gl.SCISSOR_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n    if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n        return new OffscreenCanvas(300, 150);\n    }\n    else if (typeof document !== 'undefined') {\n        return document.createElement('canvas');\n    }\n    else {\n        throw new Error('Cannot create a canvas in this context');\n    }\n}\nfunction getWebGLRenderingContext(webGLVersion) {\n    if (webGLVersion !== 1 && webGLVersion !== 2) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    const canvas = createCanvas(webGLVersion);\n    canvas.addEventListener('webglcontextlost', (ev) => {\n        ev.preventDefault();\n        delete contexts[webGLVersion];\n    }, false);\n    if (webGLVersion === 1) {\n        return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n    }\n    return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n//# sourceMappingURL=canvas_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n//# sourceMappingURL=tex_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { getTextureConfig } from './tex_util';\nexport function callAndCheck(gl, func) {\n    const returnValue = func();\n    if (env().getBool('DEBUG')) {\n        checkWebGLError(gl);\n    }\n    return returnValue;\n}\nfunction checkWebGLError(gl) {\n    const error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n        throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n    }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nexport function canBeRepresented(num) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n        (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n        return true;\n    }\n    return false;\n}\nexport function getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return `Unknown error code ${status}`;\n    }\n}\nexport function getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexport function createVertexShader(gl, vertexShaderSource) {\n    const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n    callAndCheck(gl, () => gl.compileShader(vertexShader));\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nexport function createFragmentShader(gl, fragmentShaderSource) {\n    const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n    callAndCheck(gl, () => gl.compileShader(fragmentShader));\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n        console.log(shaderSource);\n        return;\n    }\n    const lineNumber = +lineNumberRegexResult[1];\n    const shaderLines = shaderSource.split('\\n');\n    const pad = shaderLines.length.toString().length + 2;\n    const linesWithLineNumbers = shaderLines.map((line, lineNumber) => util.rightPad((lineNumber + 1).toString(), pad) + line);\n    let maxLineLength = 0;\n    for (let i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(`%c ${util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nexport function createProgram(gl) {\n    return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nexport function linkProgram(gl, program) {\n    callAndCheck(gl, () => gl.linkProgram(program));\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nexport function validateProgram(gl, program) {\n    callAndCheck(gl, () => gl.validateProgram(program));\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nexport function createStaticVertexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function createStaticIndexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function getNumChannels() {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nexport function createTexture(gl) {\n    return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nexport function validateTextureSize(width, height) {\n    const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if ((width <= 0) || (height <= 0)) {\n        const requested = `[${width}x${height}]`;\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if ((width > maxTextureSize) || (height > maxTextureSize)) {\n        const requested = `[${width}x${height}]`;\n        const max = `[${maxTextureSize}x${maxTextureSize}]`;\n        throw new Error('Requested texture size ' + requested +\n            ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nexport function createFramebuffer(gl) {\n    return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nexport function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    const loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        // The GPU compiler decided to strip out this attribute because it's unused,\n        // thus no need to bind.\n        return false;\n    }\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n    callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n    return true;\n}\nexport function bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nexport function unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nexport function getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nexport function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n    callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nexport function bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n    callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nexport function bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nexport function unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nexport function validateFramebuffer(gl) {\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nexport function getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return `unknown error ${status}`;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    const tOrNull = callAndCheck(gl, () => returnTOrNull());\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    const glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n        throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n    }\n}\nexport function getBatchDim(shape, dimsToSkip = 2) {\n    return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nexport function getRowsCols(shape) {\n    if (shape.length === 0) {\n        throw Error('Cannot get rows and columns of an empty shape array.');\n    }\n    return [\n        shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n    ];\n}\nexport function getShapeAs3D(shape) {\n    let shapeAs3D = [1, 1, 1];\n    const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n    if (!isScalar) {\n        shapeAs3D =\n            [getBatchDim(shape), ...getRowsCols(shape)];\n    }\n    return shapeAs3D;\n}\nexport function getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n    let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if (isPacked) {\n        maxTexSize = maxTexSize * 2;\n        // This logic ensures we accurately count the number of packed texels needed\n        // to accommodate the tensor. We can only pack values in the same texel if\n        // they are from adjacent pairs of rows/cols within the same batch. So if a\n        // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n        // fact that the texels containing the third row are half empty.\n        logShape = logShape.map((d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n        // Packed texture height is at least 2 (the channel height of a single\n        // texel).\n        if (logShape.length === 1) {\n            logShape = [2, logShape[0]];\n        }\n    }\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n        const squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    let size = util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [1, size];\n    }\n    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&\n        logShape[1] <= maxTexSize) {\n        return logShape;\n    }\n    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n        logShape[2] <= maxTexSize) {\n        return [logShape[0] * logShape[1], logShape[2]];\n    }\n    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    }\n    else if (logShape.length === 4 &&\n        logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n        logShape[3] <= maxTexSize) {\n        return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    }\n    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    }\n    else {\n        if (isPacked) {\n            // For packed textures size equals the number of channels required to\n            // accommodate the texture data. However in order to squarify such that\n            // inner dimensions stay even, we rewrite size to equal the number of\n            // texels. Then in the return statement we rehydrate the squarified\n            // dimensions to channel units.\n            const batchDim = getBatchDim(logShape);\n            let rows = 2, cols = 2;\n            if (logShape.length) {\n                [rows, cols] = getRowsCols(logShape);\n            }\n            size = batchDim * (rows / 2) * (cols / 2);\n            return util.sizeToSquarishShape(size).map(d => d * 2);\n        }\n        return util.sizeToSquarishShape(size);\n    }\n}\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1, shape2) {\n    shape1 = shape1.slice(-2);\n    shape2 = shape2.slice(-2);\n    if (util.arraysEqual(shape1, shape2)) {\n        return true;\n    }\n    if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.\n        return true;\n    }\n    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n        shape2[1] === 0) {\n        return true;\n    }\n    if (shape1.length !== shape2.length) { // One of the shapes is a vector.\n        const shape1Cols = shape1.slice(-1)[0];\n        const shape2Cols = shape2.slice(-1)[0];\n        if (shape1Cols === shape2Cols) {\n            return true;\n        }\n        if (isEven(shape1Cols) && isEven(shape2Cols) &&\n            (shape1[0] === 1 || shape2[0] === 1)) {\n            return true;\n        }\n    }\n    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nexport function getWebGLMaxTextureSize(webGLVersion) {\n    if (MAX_TEXTURE_SIZE == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n    return MAX_TEXTURE_SIZE;\n}\nexport function resetMaxTextureSize() {\n    MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n    MAX_TEXTURES_IN_SHADER = null;\n}\nexport function getMaxTexturesInShader(webGLVersion) {\n    if (MAX_TEXTURES_IN_SHADER == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n    return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    let queryTimerVersion;\n    const gl = getWebGLContext(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n        webGLVersion === 2) {\n        queryTimerVersion = 2;\n    }\n    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    }\n    else {\n        queryTimerVersion = 0;\n    }\n    return queryTimerVersion;\n}\nexport function hasExtension(gl, extensionName) {\n    const ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nexport function isWebGLVersionEnabled(webGLVersion) {\n    try {\n        const gl = getWebGLContext(webGLVersion);\n        if (gl != null) {\n            return true;\n        }\n    }\n    catch (e) {\n        return false;\n    }\n    return false;\n}\nexport function isCapableOfRenderingToFloatTexture(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    }\n    else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n        if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n            return false;\n        }\n    }\n    else {\n        if (hasExtension(gl, 'EXT_color_buffer_float')) {\n            return createFloatTextureAndBindToFramebuffer(gl);\n        }\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n        }\n        return false;\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n    const texConfig = getTextureConfig(gl);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nexport function isWebGLFenceEnabled(webGLVersion) {\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    // tslint:disable-next-line:no-any\n    const isEnabled = gl.fenceSync != null;\n    return isEnabled;\n}\n//# sourceMappingURL=webgl_util.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n//# sourceMappingURL=flags_webgl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=addn_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport function getVecChannels(name, rank) {\n    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nexport function getChannels(name, rank) {\n    if (rank === 1) {\n        return [name];\n    }\n    return getVecChannels(name, rank);\n}\nexport function getSourceCoords(rank, dims) {\n    if (rank === 1) {\n        return 'rc';\n    }\n    let coords = '';\n    for (let i = 0; i < rank; i++) {\n        coords += dims[i];\n        if (i < rank - 1) {\n            coords += ',';\n        }\n    }\n    return coords;\n}\n//# sourceMappingURL=packing_util.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly.\n        defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n//# sourceMappingURL=glsl_version.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nfunction buildVec(x) {\n    if (x.length === 1) {\n        return `${x[0]}`;\n    }\n    return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n    if (x.length !== y.length) {\n        throw new Error(`Vectors to be dotted must be of the same length -` +\n            `got ${x.length} and ${y.length}`);\n    }\n    const slices = [];\n    const nearestVec4 = Math.floor(x.length / 4);\n    const nearestVec4Remainder = x.length % 4;\n    for (let i = 0; i < nearestVec4; i++) {\n        const xSlice = x.slice(i * 4, i * 4 + 4);\n        const ySlice = y.slice(i * 4, i * 4 + 4);\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    if (nearestVec4Remainder !== 0) {\n        let xSlice = x.slice(nearestVec4 * 4);\n        let ySlice = y.slice(nearestVec4 * 4);\n        if (xSlice.length === 1) {\n            xSlice = xSlice.map(d => `float(${d})`);\n            ySlice = ySlice.map(d => `float(${d})`);\n        }\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n    const strides = util.computeStrides(shape).map(d => d.toString());\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n//# sourceMappingURL=shader_compiler_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n    });\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (usesPackedTextures) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo);\n        case 2:\n            return getPackedSampler2D(inInfo);\n        case 3:\n            return getPackedSampler3D(inInfo);\n        default:\n            return getPackedSamplerND(inInfo);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n//# sourceMappingURL=shader_compiler.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=argminmax_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=avg_pool_backprop_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=batchnorm_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n    REAL: 'return areal * breal - aimag * bimag;',\n    IMAG: 'return areal * bimag + aimag * breal;'\n};\nexport class BinaryOpComplexProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_complex_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nexport const DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport const EQUAL = `return float(a == b);`;\nexport const NOT_EQUAL = `return float(a != b);`;\nexport const LESS = `return float(a < b);`;\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const GREATER = `return float(a > b);`;\nexport const GREATER_EQUAL = `return float(a >= b);`;\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nexport const ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport class BinaryOpProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nexport const DIV = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const ATAN2 = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\nexport class BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = getCoordsDataType(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                }\n                else {\n                    const channels = getChannels('coords', rank);\n                    checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=binaryop_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipPackedProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n    }\n    getCustomSetupFunc(min, max) {\n        return (gpgpu, webGLProgram) => {\n            if (this.minLoc == null) {\n                this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n                this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n            }\n            gpgpu.gl.uniform1f(this.minLoc, min);\n            gpgpu.gl.uniform1f(this.maxLoc, max);\n        };\n    }\n}\n//# sourceMappingURL=clip_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ComplexAbsProgram {\n    constructor(shape) {\n        this.variableNames = ['real', 'imag'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n    }\n}\n//# sourceMappingURL=complex_abs_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n//# sourceMappingURL=concat_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n//# sourceMappingURL=concat_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = filterDepth - 1 - convInfo.padInfo.front;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class DepthwiseConv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_backprop_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivationWeights) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivationWeights) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\nexport class Conv3DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = convInfo.outShape;\n        const xNumRows = convInfo.inHeight;\n        const xNumCols = convInfo.inWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `int xR; int xC; int xCOffset;`;\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n            }\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        for (let r = 0; r < filterHeight; r++) {\n            for (let texelC = 0; texelC < texelsAcross; texelC++) {\n                const c = texelC * 2;\n                mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n                if (strideWidth === 1) {\n                    if (c < filterWidth) {\n                        // If padding is odd, the outer texels have to be composed.\n                        if (padLeft % 2 === 1) {\n                            // TODO: Ensure vec4 previous does not result in redundant sample,\n                            // and avoid setting xTexelRC's that exceed the boundary in the\n                            // first place rather than resetting them to vec4(0)).\n                            // To compute xCOffset:\n                            // - If padding is odd, we must add 1 to ensure we ask for an\n                            // even-numbered row.\n                            // - We subtract 2 to access the previous texel.\n                            mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n                        }\n                        else {\n                            // Padding is even, so xRC corresponds to a single texel.\n                            mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n                        }\n                        if (c + 1 < filterWidth) {\n                            // If dilation is even, the second entry should match the first\n                            // (either both are composed or both are single samples). But if\n                            // dilation is odd, then the second entry should be the opposite\n                            // of the first (if the first is composed, the second is a single\n                            // sample, and vice versa.)\n                            const nextTexelOffset = padLeft % 2 === 0 ?\n                                util.nearestLargerEven(dilationWidth) :\n                                dilationWidth;\n                            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n                                // If dilation > 1 then the xRC's will not be able to share any\n                                // values, so each xRC will require two unique calls to getX.\n                                if (dilationWidth > 1) {\n                                    mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                                }\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n                            }\n                            else {\n                                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n                            }\n                        }\n                    }\n                }\n                else { // stride > 1\n                    if (c < filterWidth) {\n                        mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n                        // Depending on whether padLeft is even or odd, we want either the\n                        // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n                        // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n                        // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n                        // need to come from the xy channels of a new texel, hence the `vec4\n                        // final` initialized below.\n                        if (padLeft % 2 === 1) {\n                            mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n                            }\n                        }\n                        else {\n                            mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n                            if (c + 1 < filterWidth) {\n                                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n                            }\n                        }\n                        mainLoop += `}`;\n                    }\n                }\n                if (c < filterWidth) {\n                    mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n                    if (c + 1 < filterWidth) {\n                        mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n                    }\n                }\n            }\n        }\n        for (let r = 0; r < filterHeight; r++) {\n            for (let c = 0; c < filterWidth; c++) {\n                mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n            }\n        }\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=conv_packed_gpu_depthwise.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class CropAndResizeProgram {\n    constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n        this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n        this.outputShape = [];\n        const [batch, imageHeight, imageWidth, depth] = imageShape;\n        const [numBoxes,] = boxShape;\n        const [cropHeight, cropWidth] = cropSize;\n        this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n        const methodId = method === 'bilinear' ? 1 : 0;\n        const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n        const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n            [\n                `${(imageHeight - 1) / (cropHeight - 1)}`,\n                '(y2-y1) * height_ratio',\n                `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (y1+y2) * ${inputHeightFloat}`,\n            ];\n        const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n            [\n                `${(imageWidth - 1) / (cropWidth - 1)}`,\n                '(x2-x1) * width_ratio',\n                `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (x1+x2) * ${inputWidthFloat}`,\n            ];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n        this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=crop_and_resize_gpu.js.map","import { getCoordsDataType } from './shader_compiler';\nexport class CumSumProgram {\n    constructor(shape, exclusive, reverse) {\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        const rank = shape.length;\n        const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n        const length = shape[shape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cumsum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n    getCustomSetupFunc(index) {\n        return (gpgpu, webGLProgram) => {\n            if (this.index == null) {\n                this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n            }\n            gpgpu.gl.uniform1f(this.index, index);\n        };\n    }\n}\nfunction getCoords(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=cumsum_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        const texShape = getDenseTexShape(outputShape);\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        const texShape = getDenseTexShape(outputShape);\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=decode_matrix_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n    constructor(outputShape, blockSize, dataFormat) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.blockSize = blockSize;\n        this.dataFormat = dataFormat;\n        this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n    }\n    getHeightCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[1]`;\n        }\n        else {\n            return `coords[2]`;\n        }\n    }\n    getWidthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[2]`;\n        }\n        else {\n            return `coords[3]`;\n        }\n    }\n    getDepthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[3]`;\n        }\n        else {\n            return `coords[1]`;\n        }\n    }\n    getOutputDepthSize() {\n        if (this.dataFormat === 'NHWC') {\n            return this.outputShape[3];\n        }\n        else {\n            return this.outputShape[1];\n        }\n    }\n    getInputSamplingString() {\n        if (this.dataFormat === 'NHWC') {\n            return `getX(b, in_h, in_w, in_d)`;\n        }\n        else {\n            return `getX(b, in_d, in_h, in_w)`;\n        }\n    }\n}\n//# sourceMappingURL=depth_to_space_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DiagProgram {\n    constructor(size) {\n        this.variableNames = ['X'];\n        this.outputShape = [size, size];\n        this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=diag_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_float_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let output = `result`;\n        if (inputIsUnsignedByte) {\n            output = `floor(result * 255. + 0.5)`;\n        }\n        this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width] = texShape;\n        this.outputShape = outputShape;\n        let mainLoop = '';\n        let output = 'result';\n        if (inputIsUnsignedByte) {\n            output = 'floor(result * 255. + 0.5)';\n        }\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                const channel = row * 2 + col;\n                mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n    }\n}\n//# sourceMappingURL=encode_matrix_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const COMPLEX_FFT = {\n    REAL: 'return real * expR - imag * expI;',\n    IMAG: 'return real * expI + imag * expR;'\n};\nexport class FFTProgram {\n    constructor(op, inputShape, inverse) {\n        this.variableNames = ['real', 'imag'];\n        const innerDim = inputShape[1];\n        this.outputShape = inputShape;\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n        this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=fft_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FillProgram {\n    constructor(shape, value) {\n        this.outputShape = [];\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n    }\n    getCustomSetupFunc(value) {\n        return (gpgpu, webGLProgram) => {\n            if (this.valueLoc == null) {\n                this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n            }\n            gpgpu.gl.uniform1f(this.valueLoc, value);\n        };\n    }\n}\n//# sourceMappingURL=fill_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n    constructor(aShape, indicesLength, axis) {\n        this.variableNames = ['A', 'indices'];\n        const outputShape = aShape.slice();\n        outputShape[axis] = indicesLength;\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape, axis);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape, axis) {\n    const rank = aShape.length;\n    if (rank > 4) {\n        throw Error(`Gather for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `int(getIndices(resRC))`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === axis) {\n            sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=gather_gpu.js.map","import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=gather_nd_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return texture;\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n//# sourceMappingURL=gpgpu_util.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShaderSource) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n        const vertexShader = gpgpu_util.createVertexShader(gl);\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        });\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n//# sourceMappingURL=gpgpu_context.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const userCode = program.userCode;\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);\n    const webGLProgram = gpgpu.createProgram(source);\n    // Add special uniforms (NAN, INFINITY)\n    let infLoc = null;\n    const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const uniformLocations = {};\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        const shouldThrow = false;\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    }\n    return {\n        program,\n        source,\n        webGLProgram,\n        uniformLocations,\n        inShapeInfos,\n        outShapeInfo,\n        infLoc,\n        nanLoc,\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n    });\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n        keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\n//# sourceMappingURL=gpgpu_math.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, inputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\n        const { left, top } = padInfo;\n        const itemsPerBlockRow = inChannels * filterWidth;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 0 : 1;\n        const colDim = isChannelsLast ? 1 : 2;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=im2col_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNGradProgram {\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        this.depth = inputShape[3];\n        this.depthRadius = depthRadius;\n        this.bias = bias;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_grad_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNPackedProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=lrn_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class MaxPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=max_pool_backprop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MatMulPackedProgram {\n    constructor(aShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false) {\n        this.variableNames = ['matrixA', 'matrixB'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        const sharedDim = transposeA ? aShape[1] : aShape[2];\n        const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n        const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n        const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n        const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n        const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=mulmat_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n    getCustomSetupFunc(seed) {\n        return (gpgpu, webGLProgram) => {\n            if (this.seedLoc == null) {\n                this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n            }\n            gpgpu.gl.uniform1f(this.seedLoc, seed);\n        };\n    }\n}\n//# sourceMappingURL=multinomial_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class OneHotProgram {\n    constructor(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=onehot_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        if (rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = getChannels('rc', rank);\n            const dtype = getCoordsDataType(rank);\n            const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n            const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n            const output = getOutput(outputShape, channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n}\nfunction getSourceCoordsArr(rank, dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n            let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n            for (let d = 2; d < rank; d++) {\n                coord = `${dims[dims.length - 1 - d]},` + coord;\n            }\n            coords.push(coord);\n        }\n    }\n    return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n    if (rank === 1) {\n        return `rc > ${shape[0]}`;\n    }\n    let cond = '';\n    for (let i = rank - 2; i < rank; i++) {\n        cond += `${dims[i]} >= ${shape[i]}`;\n        if (i < rank - 1) {\n            cond += '||';\n        }\n    }\n    return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n    if (rank === 1) {\n        return '';\n    }\n    const innerDims = dims.slice(-2);\n    return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n    const rank = shape.length;\n    const sourceCoords = getSourceCoordsArr(rank, dims);\n    if (rank === 1) {\n        return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n//# sourceMappingURL=pack_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const componentSetup = [\n            `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n            rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n            rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n        ];\n        const paddingArea = rank === 1 ?\n            'rc < start || rc >= end' :\n            'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n        let mainLoop = '';\n        for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n            mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        mainLoop += (rank === 1 ? `} ` : `}}`);\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pad_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nexport class Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=pool_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reduce_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n//# sourceMappingURL=reshape_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearBackpropProgram {\n    constructor(dy, x, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = x.shape;\n        const [, xHeight, xWidth,] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_backprop_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_bilinear_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeigborBackpropProgram {\n    constructor(dy, x, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = x.shape;\n        const [, xHeight, xWidth,] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_backprop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=reverse_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = getChannels('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = getCoordsDataType(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n//# sourceMappingURL=reverse_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=scatter_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class SegmentOpProgram {\n    constructor(segOpInfo, segOpType) {\n        this.variableNames = ['x', 'segmentIds'];\n        const windowSize = segOpInfo.windowSize;\n        const batchSize = segOpInfo.batchSize;\n        const inSize = segOpInfo.inSize;\n        const numSegments = segOpInfo.numSegments;\n        const outSize = numSegments * Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        const initializationValue = '0.0';\n        const returnValue = `sumValue`;\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n        let checkValueOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        let checkSegmentIdOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n//# sourceMappingURL=segment_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n//# sourceMappingURL=select_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const uniformPart = `uniform int start[${this.rank}];`;\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=slice_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        const coords = getChannels('coords', this.rank);\n        const sourceLoc = getChannels('sourceLoc', this.rank);\n        const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n        const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n        const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n        const sourceLocSetup = this.rank <= 4 ?\n            `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n            destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n                .join('\\n');\n        this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n    }\n    getCustomSetupFunc(start) {\n        if (start.length !== this.rank) {\n            throw Error(`The rank (${this.rank}) of the program must match the ` +\n                `length of start (${start.length})`);\n        }\n        return (gpgpu, webGLProgram) => {\n            if (this.startLoc == null) {\n                this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (this.startLoc == null) {\n                    // This means the compiler has optimized and realized it doesn't need\n                    // the uniform.\n                    return;\n                }\n            }\n            gpgpu.gl.uniform1iv(this.startLoc, start);\n        };\n    }\n}\n//# sourceMappingURL=slice_packed_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=strided_slice_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport class TextureManager {\n    constructor(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0; // How many bytes that have been allocated\n        // are available for reuse.\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    acquireTexture(shapeRC, usage, isPacked) {\n        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this._numBytesFree -= texBytes;\n            this.log();\n            const newTexture = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture);\n            return newTexture;\n        }\n        let newTexture;\n        if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        this.numUsedTextures++;\n        this._numBytesAllocated += texBytes;\n        this.log();\n        return newTexture;\n    }\n    releaseTexture(texture, shape, logicalTexType, isPacked) {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n        if (deleteTexThreshold !== -1 &&\n            this._numBytesAllocated > deleteTexThreshold) {\n            this.gpgpu.deleteMatrixTexture(texture);\n            this._numBytesAllocated -= texBytes;\n        }\n        else {\n            this.freeTextures[shapeKey].push(texture);\n            this.numFreeTextures++;\n            this._numBytesFree += texBytes;\n        }\n        this.numUsedTextures--;\n        const texList = this.usedTextures[shapeKey];\n        const texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    }\n    log() {\n        if (!this.logEnabled) {\n            return;\n        }\n        const total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n        const freeRatio = this._numBytesFree / this._numBytesAllocated;\n        console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n        console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n    }\n    get numBytesAllocated() {\n        return this._numBytesAllocated;\n    }\n    get numBytesFree() {\n        return this._numBytesFree;\n    }\n    getNumUsedTextures() {\n        return this.numUsedTextures;\n    }\n    getNumFreeTextures() {\n        return this.numFreeTextures;\n    }\n    dispose() {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        for (const texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        for (const texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0;\n    }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    if (internalFormat === glany.R32F) {\n        return 4;\n    }\n    else if (internalFormat === glany.R16F) {\n        return 2;\n    }\n    else if (internalFormat === glany.RGBA32F) {\n        return 16;\n    }\n    else if (internalFormat === gl.RGBA) {\n        return 16;\n    }\n    else if (internalFormat === glany.RGBA16F) {\n        return 8;\n    }\n    throw new Error(`Unknown internal format ${internalFormat}`);\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n    // It is not possible to infer packed status from the texture type because\n    // depending on the textureConfig, different  texture types may resolve to the\n    // same internal format (e.g. in WebGL1, the internal format for\n    // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n    // explicitly.\n    const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n    let numElements;\n    if (isPacked) {\n        const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = packedWidth * packedHeight;\n    }\n    else {\n        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = width * height;\n    }\n    const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n    return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n    switch (physicalTexType) {\n        case PhysicalTextureType.PACKED_2X2_FLOAT32:\n            return getInternalFormatForPackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_2X2_FLOAT16:\n            return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT32:\n            return getInternalFormatForFloat32MatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT16:\n            return getInternalFormatForFloat16MatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n            return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n        default:\n            throw new Error(`Unknown physical texture type ${physicalTexType}`);\n    }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        if (isPacked) {\n            return PhysicalTextureType.PACKED_2X2_FLOAT32;\n        }\n        return PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    if (isPacked) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT16;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n    if (logicalTexType === TextureUsage.UPLOAD) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n        return getPhysicalTextureForRendering(isPacked);\n    }\n    else if (logicalTexType === TextureUsage.DOWNLOAD ||\n        logicalTexType === TextureUsage.PIXELS) {\n        return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n//# sourceMappingURL=texture_manager.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=tile_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class UnaryOpProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nexport function STEP(alpha = 0.0) {\n    return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const NEG = `return -x;`;\nexport const CEIL = `return ceil(x);`;\nexport const FLOOR = `return floor(x);`;\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nexport const IS_NAN = `return float(isnan(x));`;\nexport const IS_INF = `return float(isinf(x));`;\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nexport const EXP = `return exp(x);`;\nexport const EXPM1 = `return exp(x) - 1.0;`;\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\nexport const LOG1P = `return log(1.0 + x);`;\nexport const SQRT = `return sqrt(x);`;\nexport const RSQRT = `return inversesqrt(x);`;\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nexport const SIN = CHECK_NAN_SNIPPET + `\n  return sin(x);\n`;\nexport const COS = CHECK_NAN_SNIPPET + `\n  return cos(x);\n`;\nexport const TAN = `return tan(x);`;\nexport const ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nexport const ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nexport const SQUARE = `return x * x;`;\nexport const RECIPROCAL = `return 1.0 / x;`;\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\nexport const TO_INT = `return float(int(x));`;\nexport const CLONE = 'return x;';\n//# sourceMappingURL=unaryop_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const LINEAR = `return x;`;\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nexport class UnaryOpPackedProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unaryop_packed_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        const channels = getChannels('rc', rank);\n        const dtype = getCoordsDataType(rank);\n        const sourceCoords = getSourceCoords(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=unpack_gpu.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { complex, div, engine, env, imag, max, range, real, reshape, scalar, softmax, tensor, tidy, transpose } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, kernel_impls, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, upcastType } from '@tensorflow/tfjs-core';\nconst { segment_util } = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport { AddNProgram } from './addn_gpu';\nimport { AddNPackedProgram } from './addn_packed_gpu';\nimport { ArgMinMaxProgram } from './argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from './argminmax_packed_gpu';\nimport { AvgPool2DBackpropProgram, AvgPool3DBackpropProgram } from './avg_pool_backprop_gpu';\nimport { BatchNormProgram } from './batchnorm_gpu';\nimport { BatchNormPackedProgram } from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport { BinaryOpProgram } from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from './binaryop_packed_gpu';\nimport { getWebGLContext } from './canvas_util';\nimport { ClipProgram } from './clip_gpu';\nimport { ClipPackedProgram } from './clip_packed_gpu';\nimport { ComplexAbsProgram } from './complex_abs_gpu';\nimport { ConcatProgram } from './concat_gpu';\nimport { ConcatPackedProgram } from './concat_packed_gpu';\nimport { Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram } from './conv_backprop_gpu';\nimport { DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram } from './conv_backprop_gpu_depthwise';\nimport { Conv2DProgram, Conv3DProgram } from './conv_gpu';\nimport { DepthwiseConv2DProgram } from './conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from './conv_packed_gpu_depthwise';\nimport { CropAndResizeProgram } from './crop_and_resize_gpu';\nimport { CumSumProgram } from './cumsum_gpu';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { DepthToSpaceProgram } from './depth_to_space_gpu';\nimport { DiagProgram } from './diag_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport { FFTProgram } from './fft_gpu';\nimport { FillProgram } from './fill_gpu';\nimport { GatherProgram } from './gather_gpu';\nimport { GatherNDProgram } from './gather_nd_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { Im2ColPackedProgram } from './im2col_packed_gpu';\nimport { LRNProgram } from './lrn_gpu';\nimport { LRNGradProgram } from './lrn_grad_gpu';\nimport { LRNPackedProgram } from './lrn_packed_gpu';\nimport { MaxPool2DBackpropProgram, MaxPool3DBackpropProgram } from './max_pool_backprop_gpu';\nimport { MatMulPackedProgram } from './mulmat_packed_gpu';\nimport { MultinomialProgram } from './multinomial_gpu';\nimport { OneHotProgram } from './onehot_gpu';\nimport { PackProgram } from './pack_gpu';\nimport { PadProgram } from './pad_gpu';\nimport { PadPackedProgram } from './pad_packed_gpu';\nimport { Pool2DProgram, Pool3DProgram } from './pool_gpu';\nimport { ReduceProgram } from './reduce_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport { ResizeBilinearBackpropProgram } from './resize_bilinear_backprop_gpu';\nimport { ResizeBilinearProgram } from './resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from './resize_bilinear_packed_gpu';\nimport { ResizeNearestNeigborBackpropProgram } from './resize_nearest_neighbor_backprop_gpu';\nimport { ResizeNearestNeighborProgram } from './resize_nearest_neighbor_gpu';\nimport { ReverseProgram } from './reverse_gpu';\nimport { ReversePackedProgram } from './reverse_packed_gpu';\nimport { ScatterProgram } from './scatter_gpu';\nimport { SegmentOpProgram } from './segment_gpu';\nimport { SelectProgram } from './select_gpu';\nimport { SliceProgram } from './slice_gpu';\nimport { SlicePackedProgram } from './slice_packed_gpu';\nimport { StridedSliceProgram } from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport { TileProgram } from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\nfunction mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return binaryop_packed_gpu.PRELU;\n        }\n        return binaryop_gpu.PRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n        return dataId;\n    }\n    move(dataId, values, shape, dtype) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensors, slice, shape, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = complexTensors.real.dataSync();\n            const imagValues = complexTensors.imag.dataSync();\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensors, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeData(tmpDownloadTarget.dataId);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeData(tmpTarget.dataId);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeData(output.dataId);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensors } = this.texData.get(dataId);\n        if (complexTensors != null) {\n            complexTensors.real.dispose();\n            complexTensors.imag.dispose();\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!this.warnedAboutCPUBackend && cpuBackend == null &&\n            !env().getBool('IS_TEST')) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(real.shape, 'complex64');\n        const resultData = this.texData.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.slice(x, begin, size);\n        }\n        // Short-circuit computation if the slice is zero-sized.\n        if (util.sizeFromShape(size) === 0) {\n            return tensor([], size, x.dtype);\n        }\n        const { isPacked } = this.texData.get(x.dataId);\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isPacked || !isContinous) {\n            const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n                new SlicePackedProgram(size) :\n                new SliceProgram(size);\n            const customSetup = program.getCustomSetupFunc(begin);\n            return this.compileAndRun(program, [x], null, customSetup);\n        }\n        this.uploadToGPU(x.dataId);\n        return this.shallowSlice(x, begin, size);\n    }\n    shallowSlice(x, begin, size) {\n        const xTexData = this.texData.get(x.dataId);\n        const t = this.makeOutput(size, x.dtype);\n        const newTexData = this.texData.get(t.dataId);\n        // Copy texture data from the original tensor.\n        Object.assign(newTexData, xTexData);\n        newTexData.shape = size;\n        newTexData.dtype = x.dtype;\n        let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n        if (xTexData.slice) {\n            // We are slicing an already sliced tensor, so we have to accumulate\n            // the offset.\n            flatOffset += xTexData.slice.flatOffset;\n        }\n        newTexData.slice = {\n            flatOffset,\n            // Point to the original dataId, which is used to do ref counting.\n            origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n        };\n        // Increase the ref count for that data bucket.\n        const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n        this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n        return t;\n    }\n    stridedSlice(x, begin, end, strides) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.stridedSlice(x, begin, end, strides);\n        }\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tensor([], outShape);\n        }\n        const program = new StridedSliceProgram(begin, strides, outShape);\n        return this.compileAndRun(program, [x]);\n    }\n    reverse(x, axis) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new ReversePackedProgram(x.shape, axis) :\n            new ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => real(t));\n            const imags = tensors.map((t) => imag(t));\n            return complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        if (this.shouldExecuteOnCPU(tensors)) {\n            return this.cpuBackend.concat(tensors, axis);\n        }\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n            const rightSide = this.concat(tensors.slice(midIndex), axis);\n            return this.concat([leftSide, rightSide], axis);\n        }\n        if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n            const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n            return this.compileAndRun(program, tensors);\n        }\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const outShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        const tensors2D = tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n        const program = new ConcatProgram(tensors2D.map(t => t.shape));\n        const res = this.compileAndRun(program, tensors2D);\n        return res.reshape(outShape);\n    }\n    neg(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.neg(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.NEG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const [batch, ,] = a.shape;\n        // Since the matrices are vectors, it is faster to call mul().sum()\n        // because sum() is O(sqrt(N)) due to divide-and-conquer.\n        if ((outerShapeA === 1 || outerShapeB === 1) &&\n            sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n            if (transposeA) {\n                a = transpose(a, [0, 2, 1]);\n            }\n            if (transposeB) {\n                b = transpose(b, [0, 2, 1]);\n            }\n            const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n            const axis = outerShapeB === 1 ? 2 : 1;\n            const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n            return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const [batch, ,] = a.shape;\n        const dtype = upcastType(a.dtype, b.dtype);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [a, b];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs, dtype);\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64') {\n            const aData = this.texData.get(a.dataId);\n            const bData = this.texData.get(b.dataId);\n            const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n            const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n            const inputs = [\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n            ];\n            const real = this.compileAndRun(realProgram, inputs);\n            const imag = this.compileAndRun(imagProgram, inputs);\n            const complex = this.complex(real, imag);\n            real.dispose();\n            imag.dispose();\n            return complex;\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.multiply(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], a.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        const inputs = [x, mean, variance];\n        let offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        let scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n            const batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n            return this.compileAndRun(batchNormPackedProgram, inputs);\n        }\n        const batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(batchNormProgram, inputs);\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n            new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n            new LRNProgram(x.shape, radius, bias, alpha, beta);\n        return this.compileAndRun(program, [x]);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        const program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n        return this.compileAndRun(program, [inputImage, outputImage, dy]);\n    }\n    tile(x, reps) {\n        if (x.dtype === 'string') {\n            const data = this.readSync(x.dataId);\n            const decodedData = data.map(d => util.decodeString(d));\n            const buf = buffer(x.shape, x.dtype, decodedData);\n            return tile(buf, reps);\n        }\n        const program = new TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    }\n    pad(x, paddings, constantValue) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new PadPackedProgram(x.shape, paddings, constantValue) :\n            new PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    }\n    gather(x, indices, axis) {\n        if (this.shouldExecuteOnCPU([x, indices])) {\n            return this.cpuBackend.gather(x, indices, axis);\n        }\n        const program = new GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        util.assert(x.rank <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        util.assert(x.rank <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const completePaddings = [[0, 0]];\n        completePaddings.push(...paddings);\n        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n            completePaddings.push([0, 0]);\n        }\n        const paddedX = x.pad(completePaddings);\n        const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n        const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n        const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n        const paddedXT = transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n        return reshape(paddedXT, flattenShape);\n    }\n    reduce(x, reduceType, dtype) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const outSize = Math.ceil(inSize / windowSize);\n        const reduceInfo = { windowSize, inSize, batchSize, outSize };\n        const program = new ReduceProgram(reduceInfo, reduceType);\n        const output = this.compileAndRun(program, [x], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    }\n    argReduce(x, reduceType, bestIndicesA = null) {\n        let batchSize = x.shape[0];\n        let inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const reduceInfo = {\n            windowSize,\n            inSize,\n            batchSize,\n            outSize: Math.ceil(inSize / windowSize)\n        };\n        const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        const inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        const output = this.compileAndRun(program, inputs, 'int32');\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    }\n    argReducePacked(x, reduceType, bestIndicesA = null) {\n        const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n        const inSize = inShape[inShape.length - 1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n        const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n        const output = this.compileAndRun(program, inputs, 'int32');\n        if (output.rank === x.rank) {\n            return this.argReducePacked(x, reduceType, output);\n        }\n        return output;\n    }\n    sum(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    }\n    prod(x, axes) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.prod(x, axes);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        let axis = 0;\n        const permutation = backend_util.getAxesPermutation([axis], x.rank);\n        let permutedX = x;\n        if (permutation != null) {\n            permutedX = transpose(x, permutation);\n            axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n        }\n        const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n        const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n        const a2D = permutedX.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        let result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n        if (permutation != null) {\n            result =\n                transpose(result, backend_util.getUndoAxesPermutation(permutation));\n        }\n        return result;\n    }\n    segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = this.compileAndRun(program, [x, segmentIds], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n        return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n    }\n    argMinMaxReduce(x, axis, reduceType) {\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);\n        if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n            const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n            const inSize = util.sizeFromShape(reduceShape);\n            const a2D = x.as2D(-1, inSize);\n            return this.argReduce(a2D, reduceType).reshape(outShape);\n        }\n        return this.argReducePacked(x, reduceType);\n    }\n    argMin(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'min');\n    }\n    argMax(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'max');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        if (axis !== x.rank - 1) {\n            throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const size = x.shape[axis];\n        let result = x;\n        // Use cumsum parallel algorithm, ref:\n        // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n        for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n            const program = new CumSumProgram(x.shape, false, reverse);\n            const customSetup = program.getCustomSetupFunc(i);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result], result.dtype, customSetup);\n            prevResult.dispose();\n        }\n        // For exclusive cumsum, shift the end result in the direction of sum and\n        // add 0 to the front index.\n        if (exclusive) {\n            const program = new CumSumProgram(x.shape, exclusive, reverse);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result]);\n            prevResult.dispose();\n        }\n        return result;\n    }\n    equal(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    notEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    less(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.less(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    lessEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greater(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.greater(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greaterEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalNot(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    }\n    logicalAnd(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalOr(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    select(condition, a, b) {\n        const program = new SelectProgram(condition.rank, a.shape, a.rank);\n        return this.compileAndRun(program, [condition, a, b], upcastType(a.dtype, b.dtype));\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        const xVals = x.dataSync();\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    }\n    minimum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.minimum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    mod(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    maximum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.maximum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    all(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n    }\n    any(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n    }\n    floorDiv(a, b) {\n        const op = binaryop_gpu.INT_DIV;\n        const outputDtype = 'int32';\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n        }\n        const program = new BinaryOpProgram(op, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], outputDtype);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.add(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {\n        const program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    /**\n     * Computes a complex binary operation that can be decomposed into a simple\n     * binary operation on both the real and imagary parts.\n     */\n    complexSeparableBinaryOp(a, b, op) {\n        const aData = this.texData.get(a.dataId);\n        const bData = this.texData.get(b.dataId);\n        const [real, imag] = [\n            [aData.complexTensors.real, bData.complexTensors.real],\n            [aData.complexTensors.imag, bData.complexTensors.imag]\n        ].map(complexParts => {\n            const [aPart, bPart] = complexParts;\n            const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n            const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n            const program = new BinaryOpProgram(op, a.shape, b.shape);\n            return this.compileAndRun(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        });\n        const complex = this.complex(real, imag);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    // Returns a TensorInfo with the complex shape and the dataId of the\n    // underlying part. We need to do this because a reshaped complex tensor is\n    // not reflected in its parts.\n    makeComplexComponentTensorInfo(complexTensor, complexPart) {\n        return {\n            dataId: complexPart.dataId,\n            dtype: complexPart.dtype,\n            shape: complexTensor.shape\n        };\n    }\n    addN(tensors) {\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        // Limit the number of uploaded textures for optimization.\n        if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.addN(tensors.slice(0, midIndex));\n            const rightSide = this.addN(tensors.slice(midIndex));\n            return this.addN([leftSide, rightSide]);\n        }\n        const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n        const shapes = tensors.map(t => t.shape);\n        // We can make sure shapes are identical in op level.\n        const usePackedOp = env().getBool('WEBGL_PACK');\n        const program = usePackedOp ?\n            new AddNPackedProgram(tensors[0].shape, shapes) :\n            new AddNProgram(tensors[0].shape, shapes);\n        return this.compileAndRun(program, tensors, dtype);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.subtract(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    pow(a, b) {\n        const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n        const program = usePackedOp ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        const dtype = upcastType(a.dtype, b.dtype);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    ceil(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.ceil(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    }\n    floor(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.floor(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    }\n    sign(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n        return this.compileAndRun(program, [x]);\n    }\n    isNaN(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isInf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isFinite(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    round(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n        return this.compileAndRun(program, [x]);\n    }\n    exp(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.exp(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXP, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    }\n    expm1(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.expm1(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n        return this.compileAndRun(program, [x]);\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n        // modularization.\n        return div(b, sumExp);\n    }\n    log(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.log(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    }\n    log1p(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    }\n    sqrt(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    rsqrt(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.rsqrt(x);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    reciprocal(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n        return this.compileAndRun(program, [x]);\n    }\n    relu(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    relu6(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    prelu(x, alpha) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n            new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n        return this.compileAndRun(program, [x, alpha]);\n    }\n    elu(x) {\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    }\n    eluDer(dy, y) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n            new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n        return this.compileAndRun(program, [dy, y]);\n    }\n    selu(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    }\n    int(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n        return this.compileAndRun(program, [x], 'int32');\n    }\n    clip(x, min, max) {\n        let program;\n        if (env().getBool('WEBGL_PACK_CLIP')) {\n            program = new ClipPackedProgram(x.shape);\n        }\n        else {\n            program = new ClipProgram(x.shape);\n        }\n        const customSetup = program.getCustomSetupFunc(min, max);\n        return this.compileAndRun(program, [x], null, customSetup);\n    }\n    abs(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.abs(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    complexAbs(x) {\n        const xData = this.texData.get(x.dataId);\n        const program = new ComplexAbsProgram(x.shape);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        return this.compileAndRun(program, inputs);\n    }\n    sigmoid(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    }\n    softplus(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n        return this.compileAndRun(program, [x]);\n    }\n    sin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    }\n    cos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    }\n    tan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    }\n    asin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    }\n    acos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    }\n    atan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n        return this.compileAndRun(program, [x]);\n    }\n    atan2(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    sinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    }\n    cosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    }\n    tanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    }\n    asinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n        return this.compileAndRun(program, [x]);\n    }\n    acosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n        return this.compileAndRun(program, [x]);\n    }\n    atanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n        return this.compileAndRun(program, [x]);\n    }\n    erf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n        return this.compileAndRun(program, [x]);\n    }\n    step(x, alpha) {\n        const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    }\n    conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n        // result from 2D to 4D.\n        const xShape = x.shape;\n        const xTexData = this.texData.get(x.dataId);\n        const sharedMatMulDim = convInfo.inChannels;\n        const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n        const outerShapeFilter = convInfo.outChannels;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const transposeA = false;\n        const transposeB = false;\n        // TODO: Once reduction ops are packed, batchMatMul will always be packed\n        // and we can remove this condition.\n        const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n            sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n        const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n        if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n            !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n            !reshapeWillBeExpensive) {\n            const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                xShape[0] * xShape[2] * xShape[3];\n            const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n            const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n            return this.reshape(this.fusedBatchMatMul({\n                a: xReshaped,\n                b: filterReshaped,\n                transposeA,\n                transposeB,\n                bias,\n                activation,\n                preluActivationWeights\n            }), convInfo.outShape);\n        }\n        // Following optimization is specific to packed |x| with odd row count\n        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n        // we avoid expensive packed 2x2 reshape by padding row count to next,\n        // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n        // even-rows tensor before the operation and, after the batchMatMul,\n        // fix the even-rows result to have odd number of rows.\n        const targetShape = isChannelsLast ?\n            xShape[0] * xShape[1] * (xShape[2] + 1) :\n            xShape[0] * xShape[2] * (xShape[3] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing row count, after batchMatMul->...->compileProgram leads to\n        // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even row count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n        const pointwiseConv = this.fusedBatchMatMul({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n        });\n        const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        return engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);\n    }\n    conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Rearranges conv2d input so each block to be convolved over forms the\n        // column of a new matrix with shape [filterWidth * filterHeight *\n        // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n        // output channel forms a row of a new matrix with shape [outChannels,\n        // filterWidth * filterHeight * inChannels]. The convolution is then\n        // computed by multiplying these matrices and reshaping the result.\n        const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const sharedDim = filterWidth * filterHeight * inChannels;\n        const numCols = outHeight * outWidth;\n        const x2ColShape = [sharedDim, numCols];\n        const transposeA = true;\n        const transposeB = false;\n        const xSqueezed = x.squeeze([0]);\n        const w2Row = filter.reshape([1, sharedDim, -1]);\n        const im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n        const im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([\n            1, x2ColShape[0], x2ColShape[1]\n        ]);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [im2Col, w2Row];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        const product = this.compileAndRun(matmulProgram, inputs);\n        if (isChannelsLast) {\n            return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n        }\n        else {\n            return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n        }\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n            return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [input, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs);\n    }\n    conv2d(x, filter, convInfo) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(x, filter, convInfo);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n            return this.conv2dWithIm2Row(x, filter, convInfo);\n        }\n        const program = new Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        const program = new Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        const program = new Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1;\n        const fusedActivation = activation ?\n            mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n            null;\n        const inputs = [input, filter];\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        if (hasBias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        let program;\n        if (shouldPackDepthwiseConv) {\n            program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n            return this.compileAndRun(program, inputs);\n        }\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        return this.compileAndRun(program, inputs);\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        let program;\n        if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1) {\n            program = new DepthwiseConvPacked2DProgram(convInfo);\n            return this.compileAndRun(program, [x, filter]);\n        }\n        program = new DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        const program = new DepthwiseConv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    conv3d(x, filter, convInfo) {\n        const program = new Conv3DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const program = new Conv3DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const program = new Conv3DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    maxPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x]);\n    }\n    avgPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n        const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n        maxPoolPositions.dispose();\n        return result;\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    avgPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n    }\n    maxPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);\n        const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);\n        const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n        maxPool3dPositions.dispose();\n        return result;\n    }\n    reshape(x, shape) {\n        const texData = this.texData.get(x.dataId);\n        if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n            !(texData.texture !== null &&\n                webgl_util.isReshapeFree(texData.shape, shape))) {\n            const info = this.packedReshape(x, shape);\n            return engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);\n        }\n        return backend_util.reshapeTensor(x, shape);\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n            new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) :\n            new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        const program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        const program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        const probs = normalized ? logits : softmax(logits);\n        const batchSize = probs.shape[0];\n        const numOutcomes = probs.shape[1];\n        const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n        const customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], 'int32', customSetup);\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    }\n    diag(x) {\n        const program = new DiagProgram(x.size);\n        return this.compileAndRun(program, [x]);\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n        return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n        const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n        const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const outputShape = (dataFormat === 'NHWC') ?\n            [batchSize, outputHeight, outputWidth, outputDepth] :\n            [batchSize, outputDepth, outputHeight, outputWidth];\n        const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n        return this.compileAndRun(program, [x]);\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n        const flattenX = updates.reshape([numUpdates, sliceSize]);\n        if (outputSize === 0) {\n            return backend_util.reshapeTensor(tensor([]), shape);\n        }\n        const defaultValue = scalar(0);\n        const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n        return res.reshape(shape);\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);\n        const res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);\n        return res.reshape(outputShape);\n    }\n    fft(x) {\n        const inverse = false;\n        return this.fftImpl(x, inverse);\n    }\n    ifft(x) {\n        const inverse = true;\n        return this.fftImpl(x, inverse);\n    }\n    fftImpl(x, inverse) {\n        const xData = this.texData.get(x.dataId);\n        const realProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n        const imagProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        const real = this.compileAndRun(realProgram, inputs);\n        const imag = this.compileAndRun(imagProgram, inputs);\n        const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        const flattenIndices = indices.reshape([numSlices, sliceRank]);\n        const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n        const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices]);\n        return res.reshape(resultShape);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        if (dtype === 'string') {\n            // String type should be handled in CPU memory.\n            const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n            values.fill(value);\n            return engine().makeTensor(values, shape, dtype, this);\n        }\n        else {\n            const program = new FillProgram(shape, value);\n            const customSetup = program.getCustomSetupFunc(value);\n            return this.compileAndRun(program, [], dtype, customSetup);\n        }\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported under string dtype');\n        }\n        else {\n            // TODO(cais, smilkov): Add WebGL shader for onesLike:\n            //   https://github.com/tensorflow/tfjs/issues/1293\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n    }\n    linspace(start, stop, num) {\n        // TODO: Use CPU implementation due to the precision problem in Safari.\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    makeTensorInfo(shape, dtype) {\n        const dataId = this.write(null /* values */, shape, dtype);\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype) {\n        const { dataId } = this.makeTensorInfo(shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeData(info.dataId));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeData(output.dataId);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeData(tempDenseInputHandle.dataId);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is the webgl backend without auto kernel registration.\nimport { device_util, registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendWebGL } from './backend_webgl';\nexport { version as version_webgl } from './version';\nif (device_util.isBrowser()) {\n    registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n// Export webgl utilities\nexport * from './webgl';\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport { forceHalfFloat } from './webgl';\nexport const webgl = { forceHalfFloat };\n//# sourceMappingURL=base.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Div } from '@tensorflow/tfjs-core';\nimport { divImpl } from './Div_impl';\nexport const divConfig = {\n    kernelName: Div,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        return divImpl(a, b, webglBackend);\n    }\n};\n//# sourceMappingURL=Div.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as binaryop_gpu from '../binaryop_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport * as binaryop_packed_gpu from '../binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport function divImpl(a, b, backend) {\n    let program = new BinaryOpProgram(binaryop_gpu.DIV, a.shape, b.shape);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new BinaryOpPackedProgram(binaryop_packed_gpu.DIV, a.shape, b.shape, true);\n    }\n    const output = backend.runWebGLProgram(program, [a, b], 'float32');\n    return output;\n}\n//# sourceMappingURL=Div_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FlipLeftRightProgram {\n    constructor(imageShape) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=flip_left_right_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nimport { FlipLeftRightProgram } from '../flip_left_right_gpu';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { image } = inputs;\n        const webglBackend = backend;\n        const program = new FlipLeftRightProgram(image.shape);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_gpu.js.map","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=from_pixels_packed_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n//# sourceMappingURL=FromPixels.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        const program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        const previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeData(previousResult.dataId);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=reduce.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols, isReshapeFree } from '../webgl_util';\nfunction packedReshape(input, afterShape, backend) {\n    const input3DShape = [getBatchDim(input.shape),\n        ...getRowsCols(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [getBatchDim(afterShape),\n        ...getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\nexport function reshape(x, afterShape, backend) {\n    const xTexData = backend.texData.get(x.dataId);\n    if (xTexData.isPacked && !isReshapeFree(x.shape, afterShape) &&\n        !(xTexData.texture !== null &&\n            isReshapeFree(xTexData.shape, afterShape))) {\n        return packedReshape(x, afterShape, backend);\n    }\n    return { dataId: x.dataId, shape: afterShape, dtype: x.dtype };\n}\n//# sourceMappingURL=reshape.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n//# sourceMappingURL=transpose_gpu.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = getCoordsDataType(this.rank);\n        const outputOrder = getVecChannels('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n//# sourceMappingURL=transpose_packed_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU } from '../kernel_utils/shared';\nimport { TransposeProgram } from '../transpose_gpu';\nimport { TransposePackedProgram } from '../transpose_packed_gpu';\nexport function transposeImpl(x, perm, backend) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new TransposePackedProgram(x.shape, perm) :\n        new TransposeProgram(x.shape, perm);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport { transposeImplCPU };\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { reductionIndices, keepDims } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        const maxInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        let maxInput = x;\n        if (maxInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(maxInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n                maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const maxInputData = webglBackend.texData.get(maxInput.dataId);\n                maxInputData.values = maxInputValues;\n            }\n            else {\n                maxInput = transposeImpl(x, permutedAxes, webglBackend);\n            }\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n        const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n        let outShape = maxOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n        }\n        let out;\n        if (shouldExecuteOnCPU) {\n            const xTexData = webglBackend.texData.get(maxInput.dataId);\n            const values = xTexData.values;\n            const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n            out = webglBackend.makeTensorInfo(outShape, x.dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n        }\n        else {\n            out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\n        }\n        if (maxInputIsTransposed) {\n            webglBackend.disposeData(maxInput.dataId);\n        }\n        return out;\n    }\n};\n//# sourceMappingURL=Max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernel_utils/reshape';\nexport function maxImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape(x, [batchSize, inSize], backend);\n    const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n    if (reshapedInput.dataId !== x.dataId) {\n        // dispose the output of the packed reshape.\n        backend.disposeData(reshapedInput.dataId);\n    }\n    return reshape(reduced, outShape, backend);\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const webglBackend = backend;\n        util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n        const dilations = [1, 1];\n        util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n        const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n        return [result, indexes];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pool2DProgram } from '../pool_gpu';\nexport function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {\n    let program = new Pool2DProgram(convInfo, 'max', false);\n    const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n    program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n    const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n    return [poolOutput, indexOutput];\n}\n//# sourceMappingURL=MaxPoolWithArgmax_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nexport const nonMaxSuppressionV3Config = {\n    kernelName: NonMaxSuppressionV3,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n            'Call tf.nonMaxSuppressionAsync() instead');\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n        const gpuBackend = backend;\n        const boxesVals = gpuBackend.readSync(boxes.dataId);\n        const scoresVals = gpuBackend.readSync(scores.dataId);\n        const maxOutputSizeVal = maxOutputSize;\n        const iouThresholdVal = iouThreshold;\n        const scoreThresholdVal = scoreThreshold;\n        return kernel_impls.nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal);\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV3.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n            'Call tf.nonMaxSuppressionAsync() instead');\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n        const gpuBackend = backend;\n        const boxesVals = gpuBackend.readSync(boxes.dataId);\n        const scoresVals = gpuBackend.readSync(scores.dataId);\n        const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [selectedIndices, validOutputs];\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls } from '@tensorflow/tfjs-core';\nimport { NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n            'Call tf.nonMaxSuppressionAsync() instead');\n        const { boxes, scores } = inputs;\n        const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n        const gpuBackend = backend;\n        const boxesVals = gpuBackend.readSync(boxes.dataId);\n        const scoresVals = gpuBackend.readSync(scores.dataId);\n        const maxOutputSizeVal = maxOutputSize;\n        const iouThresholdVal = iouThreshold;\n        const scoreThresholdVal = scoreThreshold;\n        const softNmsSigmaVal = softNmsSigma;\n        const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n        return [selectedIndices, selectedScores];\n    }\n};\n//# sourceMappingURL=NonMaxSuppressionV5.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n    constructor(imageShape, radians, fillValue, center) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        const sinFactor = Math.sin(radians).toFixed(3);\n        const cosFactor = Math.cos(radians).toFixed(3);\n        this.outputShape = imageShape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const centerXString = centerX.toFixed(3);\n        const centerYString = centerY.toFixed(3);\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=rotate_gpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_gpu';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const webglBackend = backend;\n        const program = new RotateProgram(image.shape, radians, fillValue, center);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { divConfig } from './kernels/Div';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { fromPixelsConfig } from './kernels/FromPixels';\nimport { maxConfig } from './kernels/Max';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { transposeConfig } from './kernels/Transpose';\n// List all kernel configs here\nconst kernelConfigs = [\n    maxConfig, flipLeftRightConfig, fromPixelsConfig, divConfig,\n    maxPoolWithArgmaxConfig, nonMaxSuppressionV3Config, nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config, rotateWithOffsetConfig, squareConfig,\n    squaredDifferenceConfig, transposeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { SQUARE, UnaryOpProgram } from '../unaryop_gpu';\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const program = new UnaryOpProgram(x.shape, SQUARE);\n        return webglBackend.runWebGLProgram(program, [x], x.dtype);\n    }\n};\n//# sourceMappingURL=Square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, SquaredDifference } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n        const webGLBackend = backend;\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(SQUARED_DIFFERENCE, a.shape, b.shape) :\n            new BinaryOpProgram(SQUARED_DIFFERENCE, a.shape, b.shape);\n        return webGLBackend.compileAndRun(program, [a, b]);\n    }\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { perm } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = x.shape[perm[i]];\n        }\n        let out;\n        if (webglBackend.shouldExecuteOnCPU([x])) {\n            const xTexData = webglBackend.texData.get(x.dataId);\n            const values = xTexData.values;\n            const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n            out = webglBackend.makeTensorInfo(newShape, x.dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n        }\n        else {\n            out = transposeImpl(x, perm, webglBackend);\n        }\n        return out;\n    }\n};\n//# sourceMappingURL=Transpose.js.map","import * as tf from \"@tensorflow/tfjs\"\n{\n    const f = (n: number) =>\n        tf.fill([n], 0.9).pow(tf.range(0, n, 1, \"int32\"))\n\n    f(10).print()\n}\n\n{\n    const f = (n: number) => Math.pow(0.9, n)\n    console.log(\n        new Array(40).fill(0).map((_, idx) => f(idx))\n    )\n    const x = (n: number) => {\n        if (n == 0) return 1\n        else return 0\n    }\n\n    const g = (x: (n: number) => number) => {\n        const memory: number[] = []\n        const _g = (n: number) => {\n            if (n < 0) return 0\n            else if (memory.length > n) return memory[n]\n            else if (n == 0) return memory[n] = x(n)\n            else return memory[n] = 1.8 * Math.cos(Math.PI / 16) * _g(n - 1) - 0.81 * _g(n - 2) + x(n) + (1 / 2) * x(n - 1)\n        }\n        return _g\n    }\n\n    const _g = g(x)\n    console.log(\n        new Array(100).fill(0).map((_, idx) => _g(idx))\n    )\n}\n\n{\n    const canvas = document.createElement(\"canvas\")\n    canvas.width = 400\n    canvas.height = 200\n\n    const ctx = canvas.getContext(\"2d\")\n}\n\n{\n    const filter = (b: number[], a: number[], x: number[]) => {\n        if (a[0] != 1) {\n            console.error(\"a[0] must equal 1\")\n            return\n        }\n        const arrfn = (arr: number[]) => {\n            return (n: number) => {\n                if (arr[n] != undefined) return arr[n]\n                else return 0\n            }\n        }\n        const _b = arrfn(b)\n        const _a = arrfn(a)\n        const _x = arrfn(x)\n        const memory: number[] = []\n        const f = (n) => {\n            if (n < 0) return 0\n            else if (memory.length > n) return memory[n]\n            else {\n                let out = 0\n                for (let k = 0; k <= n; k++) {\n                    out += _x(n - k) * _b(k) - f(n - (k + 1)) * _a(k + 1)\n                }\n                memory[n] = out\n                return out\n            }\n        }\n        return f\n    }\n    let f = filter([1, 1 / 2], [1, -1.8 * Math.cos(Math.PI / 16), 0.81], [1])\n    console.log(new Array(40).fill(0).map((_, idx) => f(idx)))\n}"],"names":["$parcel$global","globalThis","self","window","global","TENSORFLOWJS_FLAGS_PREFIX","Environment","constructor","this","flags","flagRegistry","urlFlags","populateURLFlags","setPlatform","platformName","platform","console","warn","registerFlag","flagName","evaluationFn","setHook","flagValue","set","[object Object]","evaluateFlag","get","Promise","Error","getNumber","getBool","getFlags","features","value","setFlags","Object","assign","reset","location","search","urlParams","queryString","params","replace","s","t","name","decodeURIComponent","decodeParam","join","getQueryParams","split","forEach","keyValue","key","toLowerCase","parseValue","env","ENV","cachedSetTimeout","cachedClearTimeout","process","$bd46d3b3efd2320fe280e4c70db6ed0$exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","globalNameSpace","getGlobalNamespace","ns","getGlobal","init","globalMap","_tfGlobals","Map","getGlobalMap","has","singleton","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Acos","Acosh","Add","AddN","ArgMax","ArgMin","Asin","Asinh","Atan","Atanh","Atan2","AvgPool","AvgPool3D","BatchMatMul","BatchToSpaceND","BroadcastTo","Cast","Ceil","ClipByValue","Concat","Conv2D","Conv2DBackpropInput","Conv3D","Cos","Cosh","Cumsum","DepthwiseConv2dNative","Dilation2D","Dilation2DBackpropInput","Dilation2DBackpropFilter","Div","Expm1","FlipLeftRight","Floor","FloorDiv","FusedBatchNorm","GatherV2","GreaterEqual","Identity","IsFinite","IsInf","IsNan","Log1p","LogSoftmax","Max","Maximum","MaxPool","MaxPool3D","MaxPoolWithArgmax","Minimum","Multiply","Negate","NonMaxSuppressionV3","NonMaxSuppressionV4","NonMaxSuppressionV5","OnesLike","OneHot","PadV2","Prelu","Reciprocal","Relu","Reshape","ResizeNearestNeighbor","ResizeBilinear","Relu6","Reverse","Round","Rsqrt","SelectV2","Selu","Slice","Sinh","Sign","Sigmoid","Softplus","Sqrt","SpaceToBatchND","SplitV","Softmax","SquaredDifference","Square","Tanh","Tile","Transpose","Unpack","UnsortedSegmentSum","ZerosLike","Step","FromPixels","RotateWithOffset","_FusedMatMul","FusedConv2D","FusedDepthwiseConv2D","kernelRegistry","$d11b98b4c5dc7249d346113f13b7109$export$getGlobal","gradRegistry","getKernel","kernelName","backendName","makeKey","getGradient","getKernelsForBackend","it","entries","result","done","next","config","backend","registerKernel","registerGradient","$fcc83b7ad48be6641163eb99beffc2$export$env","shuffle","counter","temp","index","Math","random","clamp","min","x","max","nearestLargerEven","val","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","a","flatten","arr","skipTypedArray","isArray","isTypedArray","sizeFromShape","shape","size","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","width","ceil","sqrt","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","resolve","reject","tryCount","tryFn","nextBackoff","parseAxisParam","axis","rank","map","every","ax","squeezeShape","newShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","dtype","values","Float32Array","Int32Array","Uint8Array","getArrayFromDType","bytesPerElement","isString","String","isNumber","inferDtype","isFunction","f","nearestDivisor","start","computeStrides","strides","toTypedArray","vals","num","isNaN","isFinite","checkConversionForErrors","noConversionNeeded","bool","round","createNestedArray","offset","ret","d","rest","slice","reduce","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","now","assertNonNegativeIntegerDimensions","dimSize","Number","isInteger","decodeString","bytes","encoding","decode","locToIndex","locs","indexToLoc","floor","Profiler","backendTimer","logger","Logger","profileKernel","inputs","outputs","timer","time","output","data","then","tensorVals","checkComputationForErrors","timeMs","timing","kernelMs","extraInfo","getExtraProfileInfo","logKernelProfile","kernelProfile","all","valueContainer","$b6e32ac89c842575c3e2469b0f646$export$rightPad","paddedName","toString","inputShapesDescription","input","inputShape","inputRank","log","tensorToString","verbose","$b6e32ac89c842575c3e2469b0f646$export$computeStrides","padPerCol","n","$b6e32ac89c842575c3e2469b0f646$export$sizeFromShape","numCols","fill","valuesOrTuples","createComplexTuples","row","valToString","computeMaxSizePerColumn","valsLines","subTensorToString","lines","l","pad","valStr","parseFloat","toFixed","$b6e32ac89c842575c3e2469b0f646$export$isString","boolNumToString","v","isLast","storagePerElement","firstValsSize","firstVals","from","lastVals","subshape","substrides","stride","end","sep","newLineSep","complexTuples","TensorBuffer","$b6e32ac89c842575c3e2469b0f646$export$assert","$b6e32ac89c842575c3e2469b0f646$export$getArrayFromDType","loc","toTensor","trackerFn","makeTensor","opHandler","deprecationWarningFn","Tensor","dataId","id","kept","isDisposedInternal","rankType","buffer","bufferSync","dataSync","$b6e32ac89c842575c3e2469b0f646$export$toNestedArray","arraySync","throwIfDisposed","read","b","$b6e32ac89c842575c3e2469b0f646$export$decodeString","_a","readSync","dispose","isDisposed","disposeTensor","print","clone","$b6cea7ecd23d890187411f119d157904$export$tensorToString","cast","variable","trainable","makeVariable","defineProperty","Symbol","hasInstance","instance","Variable","initialValue","tensorId","super","newValue","$b6e32ac89c842575c3e2469b0f646$export$arraysEqual","incRef","disposeVariable","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","Function","upcastTypeMap","float32","int32","complex64","upcastType","typeA","typeB","sumOutType","type","makeTypesMatch","$b9b1823907de33217e79f57004141$export$upcastType","isTensorInList","tensor","tensorList","some","getTensorsInContainer","list","walkTensorContainer","Set","container","seen","$d50d0a88142719f69cd118c5dd29bd7a$export$Tensor","obj","iterable","k","add","EngineState","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","variableName","Engine","registry","registryFactory","pendingBackendInitId","state","pendingBackendInit","backendInstance","sortedBackends","getSortedBackends","initializeBackend","success","setBackend","asyncInit","initializeBackendsAndReturnBest","backendNames","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","$f40fa654853b44aa8c5b34314473$export$Profiler","$fb68e07a805582f8cb0494e15f3e5d72$export$getKernelsForBackend","kernel","setupFunc","disposeRegisteredKernels","disposeFunc","registryFactoryEntry","promiseId","catch","err","stack","message","removeBackend","moveData","info","srcBackend","disposeData","move","shouldCheckForMemLeaks","tidy","nameOrFn","fn","scopedRun","startScope","endScope","error","res","ex","nextTensorId","nextVariableId","y","makeTensorFromDataId","addTapeNode","activeScope","dy","gradInputs","attrs","ENGINE","runKernelFunc","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Cast","runKernel","inputsToSave","outputsToSave","checkKernelForMemLeak","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","forwardFunc","backwardsFunc","saved","isTapeOn","startingBytecount","startingNumTensors","kernelFunc","$fb68e07a805582f8cb0494e15f3e5d72$export$getKernel","out","outTensors","tensorsToSave","getTensorsForGradient","outsToSave","filter","_","saveTensorsForBackwardMode","saveFunc","tensors","keep","outs","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","item","kernelTimeMs","gradConfig","$fb68e07a805582f8cb0494e15f3e5d72$export$getGradient","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","backendVals","encode","$b6e32ac89c842575c3e2469b0f646$export$encodeString","write","$b6e32ac89c842575c3e2469b0f646$export$bytesFromStringArray","$d50d0a88142719f69cd118c5dd29bd7a$export$Variable","refCount","$b6e32ac89c842575c3e2469b0f646$export$bytesPerElement","track","delete","disposeVariables","varName","memory","unreliable","reasons","query","startBytes","startNumTensors","gradientsFunc","tapeNode","gradFunc","gradient","dys","$b6e32ac89c842575c3e2469b0f646$export$makeZerosTypedArray","activeTape","startTape","endTape","scopeInfo","tensorsToTrackInParent","$f0d0d03eb353aac620425c010d83948$export$getTensorsInContainer","tensorsToTrackInParentSet","oldScope","pop","scopeId","gradients","xs","allowNoGradients","filteredTape","tape","tensorsFromX","nodesFromX","node","nodeInputs","anyInputFromX","tensorsLeadToY","nodesToY","prunedInputs","nodeInput","prunedNode","$d1993338f608457710ddbf54f11b1$export$getFilteredNodesXToY","accumulatedGradientMap","$b6e32ac89c842575c3e2469b0f646$export$makeOnesTypedArray","ones","tensorAccumulatedGradientMap","o","gradTensor","inputGradients","dx","curGradient","$d1993338f608457710ddbf54f11b1$export$backpropagateGradients","grads","customGrad","$b6e32ac89c842575c3e2469b0f646$export$isFunction","inputMap","save","gradRes","gradMap","grad","$b6e32ac89c842575c3e2469b0f646$export$now","timingInfo","wallMs","getOrMakeEngine","$d11b98b4c5dc7249d346113f13b7109$export$getGlobalNamespace","_tfengine","environment","$fcc83b7ad48be6641163eb99beffc2$export$Environment","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Add","isMobile","navigator","userAgent","vendor","opera","test","substr","isBrowser","document","WorkerGlobalScope","debugValue","$e983227462712d78292df86bde699dd9$export$isBrowser","b64","tmp","lens","validLen","indexOf","getLens","placeHoldersLen","Arr","_byteLength","curByte","revLookup","charCodeAt","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","code","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","NaN","pow","rt","abs","LN2","customInspectSymbol","for","Buffer","K_MAX_LENGTH","createBuffer","RangeError","buf","setPrototypeOf","arg","encodingOrOffset","TypeError","allocUnsafe","string","isEncoding","byteLength","actual","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","fromArrayBuffer","SharedArrayBuffer","valueOf","isBuffer","checked","copy","undefined","numberIsNaN","fromObject","toPrimitive","assertSize","byteOffset","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","$ef1c7a00d046fec9fea505beb4$export$fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","enumerable","poolSize","alloc","allocUnsafeSlow","_isBuffer","compare","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","hexSliceLookupTable","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","$ae94f773b1930314627c7f2c352a5be9$export$write","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","$ae94f773b1930314627c7f2c352a5be9$export$read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","leadSurrogate","$ef1c7a00d046fec9fea505beb4$export$toByteArray","base64clean","src","dst","alphabet","table","i16","inferShape","firstElem","$b6e32ac89c842575c3e2469b0f646$export$isTypedArray","deepAssertShapeConsistency","indices","subShape","assertDtype","expectedDtype","actualDType","argName","functionName","convertToTensor","parseAsDtype","inferredDtype","$b6e32ac89c842575c3e2469b0f646$export$inferDtype","inferredShape","$b6e32ac89c842575c3e2469b0f646$export$toTypedArray","$b6e32ac89c842575c3e2469b0f646$export$flatten","$a867c54d6cf4668223d6e9032$export$ENGINE","convertToTensorArray","op","opName","endsWith","substring","f2","configurable","complex","$e37e5b22abbc48289e534b8410f569$export$op","complex_","real","imag","$real","$f07924dbd4234ab430f940ef125d3015$export$convertToTensor","$imag","$b6e32ac89c842575c3e2469b0f646$export$assertShapesMatch","$b6e32ac89c842575c3e2469b0f646$export$assertNonNegativeIntegerDimensions","providedSize","inferredSize","inferred","flatDimsDontMatch","$d706089ca55e68847fdc8946d45cf7$export$makeTensor","$f07924dbd4234ab430f940ef125d3015$export$inferShape","async","encodeWeights","group","specs","dataPromises","names","spec","utf8bytes","totalNumBytes","p","bytesOfLength","Uint32Array","concatenateTypedArrays","JSON","stringify","totalByteLength","normalizedXs","useNodeBuffer","Blob","atob","btoa","stringByteLength","concatenateArrayBuffers","buffers","getModelArtifactsInfoForJSON","modelArtifacts","modelTopology","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","IORouterRegistry","saveRouters","loadRouters","saveRouter","getInstance","loadRouter","url","getHandlers","loadOptions","handlerType","validHandlers","router","handler","getSaveHandlers","DATABASE_NAME","MODEL_STORE_NAME","INFO_STORE_NAME","getIndexedDBFactory","theWindow","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","createObjectStore","keyPath","BrowserIndexedDB","modelPath","databaseAction","open","onupgradeneeded","onsuccess","modelTx","transaction","getRequest","objectStore","close","onerror","oncomplete","modelArtifactsInfo","$ed947fd904b96add8891fc29d4574eb4$export$getModelArtifactsInfoForJSON","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","URL_SCHEME","indexedDBRouter","startsWith","$f44d845a60e5d5c9cb785a120c05dd$export$IORouterRegistry","registerSaveRouter","registerLoadRouter","BrowserIndexedDBManager","tx","getAllInfoRequest","getAll","path","getInfoRequest","deleteModelData","deleteModelRequest","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","getModelKeys","topology","modelMetadata","getModelPathFromKey","items","BrowserLocalStorage","localStorage","LS","setItem","$ed947fd904b96add8891fc29d4574eb4$export$arrayBufferToBase64String","format","generatedBy","convertedBy","userDefinedMetadata","removeItem","parse","getItem","metadataString","metadata","weightDataBase64","$ed947fd904b96add8891fc29d4574eb4$export$base64StringToArrayBuffer","localStorageRouter","BrowserLocalStorageManager","prefix","suffix","ModelStoreManagerRegistry","managers","scheme","manager","PlatformBrowser","fetch","performance","text","textEncoder","TextEncoder","TextDecoder","$fbe2ce3f2252e1a53e3e3352ab0aa$export$ModelStoreManagerRegistry","registerManager","$fbcbf285121b931106a2e1449bc9f$export$BrowserLocalStorage","$fbcbf285121b931106a2e1449bc9f$export$BrowserLocalStorageManager","$d5134ffb0de3fe822aa3ed7a8349d6c$export$BrowserIndexedDB","$d5134ffb0de3fe822aa3ed7a8349d6c$export$BrowserIndexedDBManager","getNodeFetch","$ef562afac10642bef8b54ea8dacc1a$init","systemFetch","PlatformNode","util","requestInits","hrtime","$d50d0a88142719f69cd118c5dd29bd7a$export$TensorBuffer","cast_","$x","$b6e32ac89c842575c3e2469b0f646$export$isValidDtype","clone_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Identity","$a867c54d6cf4668223d6e9032$export$getOrMakeEngine","$ba1b0851251cf815f3bb017a9efa047$export$buffer","$b0d93d1eb2da384cf43c81a5c18710c2$export$cast","$a01388572bed62bb4a43ccbd8edb8d2b$export$clone","defer","BrowserDownloads","fileNamePrefix","modelTopologyFileName","weightDataFileName","weightsURL","URL","createObjectURL","weightsManifest","paths","weights","modelTopologyAndWeightManifest","modelTopologyAndWeightManifestURL","jsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","monitorPromisesProgress","promises","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","promise","fraction","browserDownloads","HTTPRequest","DEFAULT_METHOD","weightPathPrefix","weightUrlConverter","fetchFunc","requestInit","body","method","FormData","append","response","ok","responses","status","modelConfigRequest","modelConfig","json","results","loadWeights","weightPath","lastSlash","lastSearchParam","parseUrl","pathPrefix","entry","fetchURLs","urlPromises","weightsGroup","$ed947fd904b96add8891fc29d4574eb4$export$concatenateArrayBuffers","requests","fetchURL","isBinary","bufferPromises","$a3f8b151e649459ce42d76e553d14f$export$monitorPromisesProgress","arrayBuffer","$cbe2ef78a39140e651cea2ef03fcfe$export$loadWeightsAsArrayBuffer","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","isHTTP","urlItem","http","reshape","reshape_","shapeProd","implicitIdx","$b6e32ac89c842575c3e2469b0f646$export$inferFromImplicitShape","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Reshape","matMul","matMul_","transposeA","transposeB","$a","$b","$f0d0d03eb353aac620425c010d83948$export$makeTypesMatch","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","outShape","a3D","$faff999762eb3f8ea4a7f70c13c0cf$export$reshape","b3D","batchMatMul","$f8ee5f6477cf13679eb6d8335c62b9ae$export$BatchMatMul","oneHot","oneHot_","depth","onValue","offValue","$indices","$f8ee5f6477cf13679eb6d8335c62b9ae$export$OneHot","transpose","transpose_","perm","reverse","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Transpose","confusionMatrix_","labels","predictions","numClasses","$labels","$predictions","oneHotLabels","$d5e316ad4877c9828395b37aa1737b0$export$oneHot","oneHotPredictions","oneHotLabelsT","$ed785b43cee845a39f8e7b2059bfbd17$export$transpose","$e1db45c90d8e0867eca7473945b00e24$export$matMul","fromPixels2DContext","fromPixels_","pixels","numChannels","isPixelData","isImageData","isVideo","isImage","isCanvasLike","ImageData","HTMLVideoElement","HTMLImageElement","getContext","HAVE_CURRENT_DATA_READY_STATE","readyState","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FromPixels","height","videoWidth","videoHeight","getImageData","canvas","drawImage","numPixels","channel","$b6e32ac89c842575c3e2469b0f646$export$assertNonNull","$e0a846e06dff42c7acffca6ba2a031ba$export$tensor3d","prepareAndValidate","indicesShape","sliceRank","nResult","resultShape","sliceSize","validateInput","updates","sliceDim","batchDim","shapeError","validateUpdateShape","calculateShapes","indicesRank","totalNd","safeSliceDim","numUpdates","outputSize","maskToAxes","mask","computeOutShape","begin","unnormalizeAxis","ellipsisInsertionIndex","numElidedAxes","normalizedAxis","getElidedAxes","elidedAxes","getNormalizedAxes","ellipsisAxes","numInterpolatedAxes","beginMask","endMask","ellipsisMask","normalizedBegin","normalizedEnd","normalizedStrides","fullIndex","originalBegin","newIndices","originalAxis","originalValue","startIndicesWithElidedDims","originalEnd","MAX_SAFE_INTEGER","axisSize","$b6e32ac89c842575c3e2469b0f646$export$clamp","stopIndicesWithElidedDims","newStrides","splice","stridesWithElidedDims","startForAxis","stopForAxis","stridesForAxis","startIndices","MIN_SAFE_INTEGER","stopIndices","stop","isSliceContinous","firstNonOneAxis","computeFlatOffset","flatOffset","parseSliceParams","begin_","size_","Serializable","getClassName","className","cls","SerializationMap","classNameMap","getMap","fromConfig","registerClass","register","deprecationWarn","engine","add_","floorDiv","floorDiv_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FloorDiv","div","div_","$d54706c56230c79a076850de78f3f34$export$floorDiv","realDivide","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Div","mul_","multiply","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Multiply","abs_","complexAbs","acos","acos_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Acos","acosh","acosh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Acosh","addN_","$tensors","firstTensor","addN","$f8ee5f6477cf13679eb6d8335c62b9ae$export$AddN","axesAreInnerMostDims","computeOutAndReduceShapes","aShape","dim","expandShapeToKeepDim","outputLoc","reduceLoc","outIdx","reduceIdx","combineLocations","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","numAxes","all_","keepDims","origAxes","$b6e32ac89c842575c3e2469b0f646$export$parseAxisParam","permutedAxes","$e36debe92af6ab0391919ee941a6c7b8$export$getAxesPermutation","$e36debe92af6ab0391919ee941a6c7b8$export$getInnerMostAxes","$e36debe92af6ab0391919ee941a6c7b8$export$expandShapeToKeepDim","any","any_","argMax","argMax_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ArgMax","argMin","argMin_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ArgMin","asin","asin_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Asin","asinh","asinh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Asinh","atan","atan_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Atan","atan2","atan2_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Atan2","atanh","atanh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Atanh","computeDilation2DInfo","filterShape","dataFormat","dilations","computeConv2DInfo","convertConv2DDataFormat","computePool2DInfo","inShape","filterSize","roundingMode","filterHeight","filterWidth","parseTupleParam","computePool3DInfo","filterDepth","parse3TupleParam","$dataFormat","computeConv3DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","padInfo","outHeight","outWidth","top","bottom","left","right","fieldSize","zeroPad","computeDefaultPad","inputRows","inputCols","outputRows","conditionalRound","$b6e32ac89c842575c3e2469b0f646$export$isInt","outputCols","computeOutputShape2D","padAlongHeight","padAlongWidth","getPadAndOutInfo","outChannels","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","outDepth","front","back","inputDepth","outputDepths","computeOutputShape4D","padAlongDepth","get3DPadAndOutInfo","dilation","effectiveFieldSize","param","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","avgPool","avgPool_","dimRoundingMode","$d03dfc1c12bbe011e12baae3e641ab15$export$eitherStridesOrDilationsAreOne","x4D","reshapedTo4D","convInfo","$d03dfc1c12bbe011e12baae3e641ab15$export$computePool2DInfo","$f8ee5f6477cf13679eb6d8335c62b9ae$export$AvgPool","avgPool3d","avgPool3d_","$c9bfe24dbd63073dcb5c5fdcb4541138$export$deprecationWarn","x5D","reshapedTo5D","$d03dfc1c12bbe011e12baae3e641ab15$export$computePool3DInfo","$f8ee5f6477cf13679eb6d8335c62b9ae$export$AvgPool3D","shapes","outputShape","concat_","$f07924dbd4234ab430f940ef125d3015$export$convertToTensorArray","$axis","$dff5f369bb5b9232fce5159c$export$computeOutShape","$ce1a32fd7597cbe8fd5a1a1ce0dce9c8$export$tensor","firstShape","r","$dff5f369bb5b9232fce5159c$export$assertParamsConsistent","attr","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Concat","sigmoid","sigmoid_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Sigmoid","slice_","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$parseSliceParams","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$assertParamsValid","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Slice","tanh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Tanh","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","h","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","combined","$df355fd95790e60b44826a42c34e74a$export$concat","weighted","$bc17586ff572e8e81ec4d7d6e097c549$export$add","sliceCols","$be78dbc68a1e8a90a26c86ac52b40059$export$slice","newC","$da15ffc00d0974b1d572412d19dfaa85$export$mul","$ffdd457d5b55063ebaefaa73c3a145e4$export$sigmoid","$e86cbbec8695b51a8ddf1af85af352$export$tanh","batchToSpaceND","batchToSpaceND_","blockShape","crops","prod","$f8ee5f6477cf13679eb6d8335c62b9ae$export$BatchToSpaceND","as1DOr4D","batchNorm","batchNorm_","mean","variance","scale","varianceEpsilon","$mean","$variance","$scale","$offset","$ab2d93d180e2918ec0a31407067456c$export$xAs4D","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FusedBatchNorm","batchNorm2d","batchNorm2d_","$ddba51585abab7041381ada53296$export$batchNorm","batchNorm3d","batchNorm3d_","batchNorm4d","batchNorm4d_","broadcastTo","broadcastTo_","xShape","unshift","reps","tile","$f8ee5f6477cf13679eb6d8335c62b9ae$export$BroadcastTo","ceil_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Ceil","clipByValue","clipByValue_","clipValueMin","clipValueMax","clip","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ClipByValue","concat1d","concat1d_","concat2d","concat2d_","concat3d","concat3d_","concat4d","concat4d_","conv2d","conv2d_","$filter","$d03dfc1c12bbe011e12baae3e641ab15$export$convertConv2DDataFormat","$d03dfc1c12bbe011e12baae3e641ab15$export$computeConv2DInfo","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Conv2D","conv1d","conv1d_","x3D","reshapedTo3D","filter4D","input4D","$ed433eabaf8858945666ee5020$export$conv2d","conv2DBackpropInput","conv2DBackpropInput_","xShape4D","dy4D","conv2dDerInput","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Conv2DBackpropInput","conv2dTranspose","conv2dTranspose_","$dab5a2cfae025d9c0dfa4ed921f5d1$export$conv2DBackpropInput","conv3d","conv3d_","$d03dfc1c12bbe011e12baae3e641ab15$export$computeConv3DInfo","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Conv3D","conv3DBackpropInput","conv3DBackpropInput_","xShape5D","dy5D","conv3dDerInput","conv3dTranspose_","$c0c3ab246755fa129b1d2760941898$export$conv3DBackpropInput","cos","cos_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Cos","cosh","cosh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Cosh","cumsum","cumsum_","exclusive","permutation","permutedX","permutedAxis","reversePermutation","$e36debe92af6ab0391919ee941a6c7b8$export$getUndoAxesPermutation","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Cumsum","depthToSpace","depthToSpace_","blockSize","inputHeight","inputWidth","depthwiseConv2d","depthwiseConv2d_","depthwiseConv2D","$f8ee5f6477cf13679eb6d8335c62b9ae$export$DepthwiseConv2dNative","diag_","flat","diag","dilation2d","dilation2d_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Dilation2D","getBroadcastDims","inRank","dims","getReductionAxes","inDim","outAxis","outDim","assertAndGetBroadcastShape","equal","equal_","$cb34c1cbc69e7983f6ad453cb85c690$export$assertAndGetBroadcastShape","where","where_","condition","$condition","broadcastShape","$broadcastedA","$b495ec05e434e8ded93bfd4cc736458d$export$broadcastTo","$broadcastedB","select","$f8ee5f6477cf13679eb6d8335c62b9ae$export$SelectV2","zerosLike","zerosLike_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ZerosLike","divNoNan","divNoNan_","divResult","$d1bdedaf844192785ae90ca709e72efc$export$div","zeros","$a1a14b32c8099a23974e54419f0aebf$export$zerosLike","bEqualsZero","$afcb299b995fe7e992e1e07147$export$equal","$c879c34a83ba3f76f427c36b7cdda9$export$where","dot","dot_","t1","t2","$t1","$t2","t1Inner","t2Inner","t12D","t22D","t1t2","elu","elu_","erf","erf_","exp_","expandDims","expandDims_","expm1","expm1_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Expm1","tile_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Tile","eye","eye_","numRows","numColumns","batchShape","buff","$b56522a3c1b029a787f58789ed39d3f$export$tile","$bbdf48a6042e4bec0f0d14fe01d7497b$export$expandDims","floor_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Floor","computeOptimalWindowSize","inSize","$b6e32ac89c842575c3e2469b0f646$export$nearestDivisor","gather","gather_","parsedAxis","shapeInfo","$d5ccbe8ddb88a364228755997ec8ee$export$collectGatherOpShapeInfo","$f8ee5f6477cf13679eb6d8335c62b9ae$export$GatherV2","greater","greater_","greaterEqual","greaterEqual_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$GreaterEqual","imag_","$input","isFinite_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$IsFinite","isInf","isInf_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$IsInf","isNaN_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$IsNan","maximum","maximum_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Maximum","scalar","leakyRelu","leakyRelu_","alpha","$f3c7ff60a2d60860dbb63b096e4f13$export$maximum","$f46b3d83417158ac3757$export$scalar","less","less_","lessEqual","lessEqual_","localResponseNormalization","localResponseNormalization_","depthRadius","bias","beta","localResponseNormalization4D","log_","log1p","log1p_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Log1p","neg","neg_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Negate","softplus","softplus_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Softplus","logSigmoid","logSigmoid_","$d3313d3cb695c5d9d6cc8c2b384691b1$export$customGrad","$bf8ecab220277ded94a6d67503c2cb1$export$neg","$e04f20797627606217e00f444be2f59$export$softplus","customOp","max_","reductionIndices","maxInput","expandedShape","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Max","sub_","subtract","sum","sum_","reductionAxes","logSoftmax","logSoftmax_","logits","$logits","xMax","$b198f36b4e2b2189583305aa7328a76$export$max","shifted","$e29855098ecf8ec1bca47fed0de3be34$export$sub","$b66fcf21f063726188bfecfff95a4cd2$export$log","$a88df6c577f653923a818027f2d479dd$export$sum","$ea8869d4eae4ce88d946bec387fc4b$export$exp","$f8ee5f6477cf13679eb6d8335c62b9ae$export$LogSoftmax","logSumExp","logSumExp_","logicalAnd","logicalAnd_","logicalNot","logicalNot_","logicalOr","logicalOr_","logicalXor","logicalXor_","$dea41b5ff2275c8abbacf974d1796cb$export$logicalAnd","$e0ac3e462a7592b525714c19d45285f$export$logicalOr","$fffd680c6f899313b5736f440f0e829$export$logicalNot","maxPool","maxPool_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$MaxPool","maxPool3d","maxPool3d_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$MaxPool3D","maxPoolWithArgmax_","includeBatchInIndex","$f8ee5f6477cf13679eb6d8335c62b9ae$export$MaxPoolWithArgmax","indexes","$c2c60b564c3ab2883b72aa11dfb383db$export$complex","$d97cfdc71e9bb6e5d3e8356104e6$export$zeros","mean_","reduceSize","$e36debe92af6ab0391919ee941a6c7b8$export$computeOutAndReduceShapes","reduceSizeScalar","xReduce","expandedDyShape","expandedDy","$fcd838485c4b414ace9bfd989c1d8b0$export$ones","min_","minInput","minimum","minimum_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Minimum","mod","mod_","square","square_","moments","moments_","xMean","$a48609a4b05355758f308b177416a$export$mean","keepDimsShape","devSquared","$a96ebb64b37020cfeb3190dbd175e4ad$export$square","multiRNNCell_","lstmCells","newStates","newH","multinomial_","numSamples","seed","normalized","numOutcomes","origRank","logits2D","multinomial","notEqual","notEqual_","real_","onesLike","onesLike_","$da01ff22ede4d68cde1afbd9d90d6fe2$export$real","$c9cdc069041f55e97bbe64f265fb0a4$export$imag","$f8ee5f6477cf13679eb6d8335c62b9ae$export$OnesLike","outerProduct_","v1","v2","$v1","$v2","v12D","v22D","pad_","paddings","constantValue","$f8ee5f6477cf13679eb6d8335c62b9ae$export$PadV2","pad1d_","$dd754828a1746f16b3243abd37572835$export$pad","pad2d_","pad3d_","pad4d_","spaceToBatchND","spaceToBatchND_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$SpaceToBatchND","pool","pool_","windowShape","poolingType","basePadding","padExtraShape","padExtraStart","padExtraEnd","withSpaceToBatchBasePaddings","isDilationOne","adjustedPadding","adjustedCrops","padStart","origPadEnd","fullInputShape","padEndExtra","padEnd","requiredSpaceToBatchPaddings","convertedPad","convertedX","$b0396206791738dad8b0c365836cc91a$export$spaceToBatchND","$f14f2c0618e2dfbf7e35c9636d62ff7$export$avgPool","$fe97551bf370810855308c3c0a6ff2f$export$maxPool","$ee298e24ae345498a0ff4bba4a8a81$export$batchToSpaceND","pow_","base","$base","$exp","prelu","prelu_","$alpha","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Prelu","prod_","rand_","randFunction","module","define","Alea","me","mash","s0","s1","s2","impl","opts","xg","prng","double","quick","exports","amd","alea","XorGen","strseed","z","w","xor128","xorwow","X","xorshift7","xor4096","tychei","math","nodecrypto","startdenom","significance","overflow","seedrandom","options","callback","shortseed","mixkey","entropy","tostring","randomBytes","crypto","msCrypto","getRandomValues","plugins","screen","autoseed","arc4","ARC4","g","S","pass","is_math_call","keylen","count","prop","typ","smear","stringseed","$da969281c2aa7e12b0935838cad734$exports","$eba8af6af3fbe4c31bcc8d87f59e0b3f$exports","$dc27e10820be91dabcb6eb9ac3d8ee9$exports","$bb3a33708bd63f2109ff8b0917c264$exports","$dcc8fd5412e8b68d4340e2c01bdf3cfd$exports","$a5076e8421ece6c5583d4f40c977$exports","$e4c88c14ac810b36226b7963a549e69f$exports","$af3e9a6d3c53209dfa639258be4ccdd2$exports","MPRandGauss","stdDeviation","truncated","stdDev","nextVal","upper","lower","seedValue","nextValue","resultX","resultY","isValid","isValidTruncated","convertValue","RandGamma","randu","randn","x2","v0","u","UniformRandom","canReturnFloat","range","randomGamma_","rgamma","$ad310ef92f42116858f41282303d54$export$RandGamma","randomNormal","randomNormal_","randGauss","$ad310ef92f42116858f41282303d54$export$MPRandGauss","randomUniform","randomUniform_","minval","maxval","$ad310ef92f42116858f41282303d54$export$UniformRandom","tensor1d","step","$b404d127fb9ea2708527850e2c166cd4$export$tensor1d","reciprocal","reciprocal_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Reciprocal","relu","relu_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Relu","relu6","relu6_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Relu6","reverse_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Reverse","reverse1d_","$f9f07947a42b1469c6fb71f8700a717$export$reverse","reverse2d_","reverse3d_","reverse4d_","round_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Round","rsqrt","rsqrt_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Rsqrt","selu","selu_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Selu","separableConv2d","separableConv2d_","depthwiseFilter","pointwiseFilter","$depthwiseFilter","$pointwiseFilter","channelMultiplier","$d0d1fe2f0c6dcc15fed3d261ca3fe$export$depthwiseConv2d","sign","sign_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Sign","sin","sin_","sinh","sinh_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Sinh","slice1d","slice1d_","slice2d","slice2d_","slice3d","slice3d_","slice4d","slice4d_","softmax","softmax_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Softmax","fft","fft_","innerDimensionSize","batch","input2D","as2D","ifft","ifft_","irfft","irfft_","complexInput","$f2017d8a2eb2ab0e3f3cad720482c5$export$ifft","realInput","imagInput","realConjugate","imagConjugate","split_","numOrSizeSplits","splitSizes","negIndex","total","$ce923e9f9042688005602de2ad8c6fa6$export$prepareSplitSize","$f8ee5f6477cf13679eb6d8335c62b9ae$export$SplitV","rfft","rfft_","fftLength","adjustedInput","zerosShape","zerosInput","$f8d40b046bd56915503c3e6d269b6546$export$fft","half","realValues","imagValues","realComplexConjugate","$a9603e91309b3fc4b6657e79f9062ccb$export$split","imagComplexConjugate","sqrt_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Sqrt","squaredDifference","squaredDifference_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$SquaredDifference","squeeze","squeeze_","$b6e32ac89c842575c3e2469b0f646$export$squeezeShape","stack_","expandedTensors","step_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Step","stridedSlice","stridedSlice_","newAxisMask","shrinkAxisMask","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$maskToAxes","expandAxes","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$getNormalizedAxes","shrinkAxes","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$computeOutShape","tan","tan_","tensor2d","tensor4d","topk","topk_","sorted","lastDim","truncatedNormal","truncatedNormal_","unsortedSegmentSum","unsortedSegmentSum_","segmentIds","numSegments","$segmentIds","$f8ee5f6477cf13679eb6d8335c62b9ae$export$UnsortedSegmentSum","unstack","unstack_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Unpack","whereImpl","condShape","condVals","inBuffer","conv2DBackpropFilter","conv2DBackpropFilter_","conv2dDerFilter","getFusedDyActivation","activation","$a5c477171cd32bce90f28243775af8e6$export$step","getFusedBiasGradient","dyActivation","reduceAxes","$cb34c1cbc69e7983f6ad453cb85c690$export$getReductionAxes","applyActivation","preluActivationWeights","$d910d8f172569457eac0bd42b126c793$export$relu","$f9fd66a6f46031f7a4418c76c61df47$export$elu","$d714725b6ade23295ce396c5153d0$export$relu6","$c564bae7df8cf6303c089606704897$export$prelu","shouldFuse","fusedConv2d_","$e20cc0963d6098ddcda7300a4b$export$shouldFuse","$e20cc0963d6098ddcda7300a4b$export$applyActivation","$bias","$preluActivationWeights","$e20cc0963d6098ddcda7300a4b$export$getFusedDyActivation","$d03dfc1c12bbe011e12baae3e641ab15$export$tupleValuesAreOne","der","$eb7c0dbb57a64ee08d70c1f7eb255f17$export$conv2DBackpropFilter","biasDer","$e20cc0963d6098ddcda7300a4b$export$getFusedBiasGradient","forward","fusedConv2d","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FusedConv2D","customOpWithBias","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropFilter_","depthwiseConv2DDerFilter","depthwiseConv2dNativeBackpropInput","depthwiseConv2dNativeBackpropInput_","depthwiseConv2DDerInput","fusedDepthwiseConv2d_","xDer","$fbb0f23ee901f4a6b9df8bcb503a2$export$depthwiseConv2dNativeBackpropInput","filterDer","$c8c6c6bb7b1d15878e6f09519e0$export$depthwiseConv2dNativeBackpropFilter","fusedDepthwiseConv2D","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FusedDepthwiseConv2D","fusedMatMul_","aDer","bDer","fusedBatchMatMul","$f8ee5f6477cf13679eb6d8335c62b9ae$export$_FusedMatMul","hammingWindow_","windowLength","$cce3d758f1c5f4e3c0528560b2ca2$export$cosineWindow","hannWindow","hannWindow_","frame","frame_","signal","frameLength","frameStep","padValue","padLen","$cb7ff9170f71d4a59bd2db9b26$export$fill","$eea2c74ee76437c1b712ff12a$export$tensor2d","stft_","windowFn","$e2598bf2f600b50a5bcaedb2539e2$export$hannWindow","framedSignal","$ccb3bb44899093388a6e7150a350af6$export$frame","windowedSignal","$c90c059845ef4f2343fd7fbc7c476bc$export$rfft","cropAndResize_","image","boxes","boxInd","cropSize","extrapolationValue","$image","$boxes","$boxInd","numBoxes","cropAndResize","flipLeftRight_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$FlipLeftRight","rotateWithOffset_","radians","fillValue","center","$f8ee5f6477cf13679eb6d8335c62b9ae$export$RotateWithOffset","nonMaxSuppSanityCheck","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","NEGATIVE_INFINITY","nonMaxSuppression_","$scores","$df20db5588810e3fb92e65960edc4568$export$nonMaxSuppSanityCheck","nonMaxSuppression","$f8ee5f6477cf13679eb6d8335c62b9ae$export$NonMaxSuppressionV3","binaryInsert","element","comparator","middle","compareResult","binarySearch_","defaultComparator","binarySearch","insertionPoint","nonMaxSuppressionV3Impl","nonMaxSuppressionImpl_","selectedIndices","nonMaxSuppressionV4Impl","padToMaxOutputSize","nonMaxSuppressionV5Impl","equalStrict","equalStrict_","greaterEqualStrict","greaterEqualStrict_","$d31c7e40a8a4345a63f0442d5f00e08d$export$greaterEqual","greaterStrict","greaterStrict_","$c75d22685a84c8c00081bba779c27$export$greater","lessEqualStrict","lessEqualStrict_","$b1adedb0f96313e36d823de2c076d8a$export$lessEqual","lessStrict","lessStrict_","$ce916d6c2957b683d1258b755b1ae619$export$less","notEqualStrict","notEqualStrict_","$c7534900cc23a6f45b5810f81f0926d2$export$notEqual","addStrict","addStrict_","divStrict","divStrict_","maximumStrict","maximumStrict_","minimumStrict","minimumStrict_","$d84abb26b684b1930707ad0f9124afac$export$minimum","modStrict","modStrict_","$d1157bd576b05bf1b3ba3091dbc71044$export$mod","mulStrict","mulStrict_","powStrict","powStrict_","$ed4d9d10af1195cdf628dff95ee8cd0$export$pow","squaredDifferenceStrict","squaredDifferenceStrict_","$d6c61c298112a2aa6aeca998563eaae8$export$squaredDifference","subStrict","subStrict_","returnScoresTensor","returnValidOutputs","candidates","score","boxIndex","suppressBeginIndex","ascendingComparator","selectedScores","candidate","originalScore","ignoreCandidate","iou","intersectionOverUnion","suppressWeight","$eddc3e9bd9f91d5367d46dbc36d$export$binaryInsert","validOutputs","elemsToPad","iCoord","jCoord","yminI","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","normImpl","$ceb6cea7a94615c92481a5a463ab18e8$export$abs","$ca518efffca425e22d2bb2fe26e099e$export$min","$e15716ebae17e09a7fb238a9d26ad626$export$sqrt","norm","norm_","ord","weight","movingAverage_","decay","zeroDebias","$v","$decay","one","oneMinusDecay","update","$step","c1","c2","scatterND_","$updates","$a3a100b2b0b78a1b509dd5b922728410$export$validateInput","scatterND","sparseToDense_","sparseIndices","sparseValues","defaultValue","$sparseIndices","$sparseValues","$defaultValue","defaultValues","numElems","numDims","numValues","$c8df632f6c00fea4d230f1f33fa05$export$validateInput","sparseToDense","gatherND_","gatherND","dropout","dropout_","rate","noiseShape","$noiseShape","newDimension","$d88f9a95331caebc176e69142d5e8cf$export$getNoiseShape","keepProb","multiplier","$d4772e103396d1f863fb764e3771e2$export$floor","$e89462687bca97ce0d2bd1951eb2d8$export$randomUniform","cosineWindow","even","newValues","cosArg","PI","nonMaxSuppressionWithScore_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$NonMaxSuppressionV5","nonMaxSuppressionPadded_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$NonMaxSuppressionV4","resizeBilinear","resizeBilinear_","images","alignCorners","$images","batchImages","newHeight","newWidth","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ResizeBilinear","resizeNearestNeighbor","resizeNearestNeighbor_","$f8ee5f6477cf13679eb6d8335c62b9ae$export$ResizeNearestNeighbor","bandPart","bandPart_","numLower","numUpper","M","N","$cdd2ece534f1cefc411d75337fb116$export$range","ij","inBand","zero","$d0c9d7ed67a27fc07198e2542d0a955$export$stack","$f2a1d1cf523b61ff3f4470075b700bcc$export$unstack","mat","gramSchmidt","gramSchmidt_","inputIsTensor2D","$f8375a3de7076d0fe9bf9f92de64758f$export$squeeze","ys","xs1d","proj","$b7fe5b629ec8d5e3b549bddac375985d$export$norm","qr2d","fullMatrices","q","$f876cc49d56ad6bd5f3234697aca7$export$eye","one2D","iters","rTemp","wTemp","qTemp","rjEnd1","normX","rjj","u1","wPre","tau","rjEndAll","tauTimesW","wT","rTimesTau","tawTimesWT","qAllJEnd","qTimesTau","$c9bfe24dbd63073dcb5c5fdcb4541138$export$dispose","qr","qr_","outerDimsProd","x2ds","q2ds","r2ds","x2d","q2d","r2d","Reduction","computeWeightedLoss","computeWeightedLoss_","losses","reduction","$b194545dea75dbda6f1cca157a1aa18$export$Reduction","SUM_BY_NONZERO_WEIGHTS","$losses","$weights","weightedLoss","NONE","SUM","MEAN","broadcastFactor","broadcastedWeights","numNonZeros","absoluteDifference_","$a5de93558eee00d749ed119d80685ebc$export$computeWeightedLoss","cosineDistance_","hingeLoss_","huberLoss_","delta","deltaScalar","quadratic","linear","logLoss_","epsilon","epsilonScalar","l1","l2","meanSquaredError_","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","maxOutput","outputXTarget","sigmoidOutput","$fc83e484222d0c859498bc729fac44$export$log1p","sigmoidCrossEntropyWithLogits_","softmaxCrossEntropy_","onehotLabels","$onehotLabels","lse","$e646cc9908d0e7d9df540b0b9a2ee7f9$export$logSumExp","logResult","costVector","dyShape","softmaxCrossEntropyWithLogits_","linalg","$c8404147d7276700fb2c1e39368ba6a3$export$bandPart","$b6056c826bf1f9dd2ff1a55223588$export$gramSchmidt","$e4f12be2b1a2fa4a8613f0edb04c696b$export$qr","Optimizer","$d8315dd30c51e4779f710c6f0488c$export$Serializable","minimize","returnCost","varList","computeGradients","gradArray","applyGradients","iterations","iterations_","incrementIterations","specifiedVarList","specifiedNonTrainable","originalVarCount","namedGrads","$d3313d3cb695c5d9d6cc8c2b384691b1$export$variableGrads","weightValues","AdadeltaOptimizer","$a116e7f4261541e8aa1a67a39e6d1db$export$Optimizer","learningRate","rho","accumulatedGrads","accumulatedUpdates","variableGradients","originalName","$c9bfe24dbd63073dcb5c5fdcb4541138$export$tidy","accumulatedGrad","accumulatedUpdate","newAccumulatedGrad","newAccumulatedUpdate","variables","saveIterations","variableCount","extractIterations","getConfig","$d8315dd30c51e4779f710c6f0488c$export$registerClass","AdagradOptimizer","initialAccumulatorValue","AdamOptimizer","beta1","beta2","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","accBeta2","varNames","oneMinusAccBeta1","oneMinusAccBeta2","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","AdamaxOptimizer","accumulatedWeightedInfNorm","iteration","variableNames","lr","weightedInfNorm","ut0","ut1","newWeightedInfNorm","SGDOptimizer","setLearningRate","$c9bfe24dbd63073dcb5c5fdcb4541138$export$keep","MomentumOptimizer","$f9a37fdf6fbc159623fa3380103$export$SGDOptimizer","momentum","useNesterov","accumulations","accumulation","newAccumulation","setMomentum","RMSPropOptimizer","centered","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","accumulatedMeanSquare","newAccumulatedMeanSquare","accumulatedMeanGrad","newAccumulatedMeanGrad","gradContribution","newAccumulatedMoments","delayCallback","requestAnimationFrame","setImmediate","nextFrame","OptimizerConstructors","$d2d669cd17e3a7da9b83cd135df87121$export$MomentumOptimizer","$ec888ff0df48da695f06fef60d0daec1$export$RMSPropOptimizer","$b0873c97bb564dda8a10f312afca$export$AdamOptimizer","$e5941374d0a3d7871e21f267569c96$export$AdadeltaOptimizer","$a1cc336da0e74f6aac773f8481e867d$export$AdamaxOptimizer","$c339e45f9c6f640baf9da18468fa22c$export$AdagradOptimizer","train","sgd","$a52b1b3323830a1799367463eb78a$export$OptimizerConstructors","adadelta","adagrad","rmsprop","adamax","adam","getImageCenter","imageHeight","imageWidth","getReshaped","batchToSpace","reshaped","spatialLength","getPermuted","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","getReshapedPermuted","reshapedPermuted","getSliceBeginCoords","sliceBeginCoords","getSliceSize","uncroppedShape","SELU_SCALEALPHA","SELU_SCALE","mergeRealAndImagArrays","getComplexWithIndex","assignToTypedArray","exponent","inverse","castTensor","zerosTensor","floatX","oldType","newType","int","reshapeTensor","linspaceImpl","sizeSplits","sliceT","xBuf","newLoc","originalLoc","originalIndex","topkImpl","xDtype","allTopKVals","$b6e32ac89c842575c3e2469b0f646$export$getTypedArrayFromDType","allTopKIndices","valAndInd","outOffset","topKVals","topKIndices","DataStorage","dataMover","dataIdsCount","KernelBackend","notYetImplemented","floatPrecision","eluDer","dY","conv3dDerFilter","maxPoolBackprop","avgPoolBackprop","avgPool3dBackprop","maxPool3dBackprop","resizeBilinearBackprop","newHEight","resizeNearestNeighborBackprop","radius","LRNGrad","inputImage","outputImage","linspace","absGradConfig","acosGradConfig","acoshGradConfig","addGradConfig","addNGradConfig","ders","argMaxGradConfig","argMinGradConfig","asinGradConfig","asinhGradConfig","atan2GradConfig","atanGradConfig","atanhGradConfig","avgPool3dBackprop_","$dy","input5D","avgPool3DGradConfig","$dilations","$c255f962be2b84e2cf939ccb5fe65$export$avgPool3dBackprop","avgPoolBackprop_","avgPoolGradConfig","$dc5fa1dab6bf02fcdd6c741d3af0d22$export$avgPoolBackprop","batchMatMulGradConfig","batchToSpaceNDGradConfig","broadcastToGradConfig","broadCastToAttrs","castGradConfig","ceilGradConfig","clipByValueGradConfig","concatGradConfig","conv2DGradConfig","conv2DBackpropInputGradConfig","ddx","conv3DBackpropFilter","conv3DBackpropFilter_","conv3DGradConfig","$f3aa562f067e5d9a08d66ccceece8bef$export$conv3DBackpropFilter","cosGradConfig","$effa987558764d5f7b9cb30a8b2d$export$sin","coshGradConfig","$dd440688d76b3dd381cd010274441b4$export$sinh","cumsumGradConfig","$a4b6ad3ca41da9745e83b5788b708296$export$cumsum","depthwiseConv2dNativeGradConfig","dilation2dGradConfig","inputInputs","filterInputs","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Dilation2DBackpropInput","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Dilation2DBackpropFilter","divGradConfig","eluGradConfig","backPropKernelFunc","erfGradConfig","expGradConfig","expm1GradConfig","floorGradConfig","floorDivGradConfig","fusedBatchNormGradConfig","scaleValue","tileShape","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","$c68f3b44fd8cb11a9e42809ed0b$export$rsqrt","minusHalfRCube","meanDer","varianceDer","xMinusMean2TimesRsqrt","scaleDer","offsetDer","gatherGradConfig","paramsShape","indicesSize","outerShape","outerDims","innerShape","innerDims","outerAxesIndices","arrayRange","innerAxesIndices","valuesShape","arrayConcat","reshapedIndices","transposeDims","valuesTranspose","paramsGrad","$c80d18ce8b2de1141f4a61e810774d7$export$unsortedSegmentSum","invertTransposeDims","arrays","greaterEqualGradConfig","identityGradConfig","isFiniteGradConfig","isInfGradConfig","isNanGradConfig","log1pGradConfig","logGradConfig","logSoftmaxGradConfig","localResponseNormalizationBackprop","localResponseNormalizationBackprop_","lrnGradConfig","$e180ca2fedc8c5db400be7eac6242$export$localResponseNormalizationBackprop","gradForMinAndMax","xOrig","maxGradConfig","maxAttrs","maxGrad","$c37f28377d2a74e1011030dc99658e1c$export$gradForMinAndMax","maximumGradConfig","maxPool3dBackprop_","$output","output5D","maxPool3DGradConfig","$b000ceb75c910e14d3f39147ba8ac714$export$maxPool3dBackprop","maxPoolBackprop_","padV2GradConfig","spaceToBatchNDGradConfig","splitVGradConfig","gradConfigs","$b700182ba3926d2728237563eda8c$export$absGradConfig","$c5dd9178c139eadf2d2ff8f5$export$acosGradConfig","$e5d33ec14efbf3fb2725fb10af9d51$export$acoshGradConfig","$db6d667d06efdaa5263d4f$export$addGradConfig","$c68e67a51c9c3ab22256cdf4b5984eed$export$addNGradConfig","$b38768c85c4f5b34ccc81244efd40c18$export$argMaxGradConfig","$ad60492764e22906bd8429ab1a0cb$export$argMinGradConfig","$e2f3dd1cbbd6b55c63b5b0e329c79029$export$asinGradConfig","$e71665bf722b0d17118ebc0b6d5c4fde$export$asinhGradConfig","$a347c4f2084819be2947a6ec70a25b97$export$atan2GradConfig","$c294a0ac72894d852be878d10a072950$export$atanGradConfig","$a1be898bea25c552e58b9e73b842385d$export$atanhGradConfig","$e857397b5f17b38c47509b57b475b80$export$avgPool3DGradConfig","$d36ad8db25103158db0cce685d8665fc$export$avgPoolGradConfig","$c4b6b61887ceb336bc77a56e46c85b5b$export$batchMatMulGradConfig","$ff29d5ac69fec2f04c06d761367d19c$export$batchToSpaceNDGradConfig","$af86e997061892da6e230a96112c44b$export$broadcastToGradConfig","$aaa6a063c40eb77492f96385536$export$castGradConfig","$f25e0b2a4532694f958804b392e24a86$export$ceilGradConfig","$eb854bfdd90e8cacf563c83c4d42885e$export$clipByValueGradConfig","$da1365c5da764c1ebbe6c0a98530127$export$concatGradConfig","$cdfc7abd39e7e4aa0a034afc577bc125$export$conv2DBackpropInputGradConfig","$abba70c96a6e7a76ab2eb6c8744$export$conv2DGradConfig","$dca5a15c6f66a13a25b32f27cf1c30f9$export$conv3DGradConfig","$ea05932d8cba978854c4b63aa6c9ca4$export$cosGradConfig","$d3e1c3b44e9257f91506b4d8aa0b37ea$export$coshGradConfig","$fe95d0014b90b507198185f2040342$export$cumsumGradConfig","$cff579d991285cadfd8b093435c99649$export$depthwiseConv2dNativeGradConfig","$fcf035c1e78a0c1251a1545dcb551b6$export$dilation2dGradConfig","$b7b0d3b431296cb9e55535e18844758$export$divGradConfig","$e20fc18b9683d2a314d61231ee06d84e$export$eluGradConfig","$e51717b0a4b89dad81862496c4f56eef$export$erfGradConfig","$c1c04fd26b3a5baf43e694b8a5109446$export$expGradConfig","$a14ef6fda0d91bb6e564340730e08d$export$expm1GradConfig","$c3819604250a63c7398f6dacf86f9abb$export$floorDivGradConfig","$f94a2ecca8d44d6c441a8e2cd75d84ec$export$floorGradConfig","$f79ad28ca4c46321ca9ffd9fd5d29edb$export$fusedBatchNormGradConfig","$b7759864e6463be089fff8e268a3$export$gatherGradConfig","$f85959323305042c3eb12a7c5e7b4b$export$greaterEqualGradConfig","$dee11d0a439cb35434c5a4ceb10$export$identityGradConfig","$e397c45a28350e377660ad4396b01$export$isFiniteGradConfig","$b35755271580e8198c907450234b80af$export$isInfGradConfig","$f46cd8e405b7a0ea4d8ba45556e843e$export$isNanGradConfig","$d9aaabc6cc2143d3ad6e966bb7cc58$export$log1pGradConfig","$bba68b9954c304df8abd7dbaed22f9$export$logGradConfig","$d944bb8992027dff118c82fd1deb9e7$export$logSoftmaxGradConfig","$c2c67d7fb60488296dd488b6d61e4$export$lrnGradConfig","$b52fde87859242819636ab44d79d2640$export$maxGradConfig","$b5d7a66baed9c2a6cf76035e338ec0$export$maximumGradConfig","$d794e459654b9fbfcb5dd0229c71a2dc$export$maxPool3DGradConfig","$a6f877485f7c3172f286cb189f9014c5$export$maxPoolBackprop","minAttrs","minGrad","$acdff7d6c28b31efaceb228dabc9e$export$padV2GradConfig","expFloat","logBase","scaleAlpha","$af7faac43afb196418358f0446545ac$export$SELU_SCALEALPHA","$af7faac43afb196418358f0446545ac$export$SELU_SCALE","greaterThanZeroDer","lessEqualZeroDer","$cda73015c2a1dc6cd867b67500a53$export$cos","$ac2d8dcc1638ff21ba49a3aa243563$export$cosh","dyTimesY","$e79c743280ea58e1ee70fc2f8ff2327d$export$spaceToBatchNDGradConfig","$a395b4f3c374238a7fd62d69719$export$splitVGradConfig","two","$f8ee5f6477cf13679eb6d8335c62b9ae$export$Square","derX","xGrad","transposeAttrs","undoPerm","unpackAttrs","zeroClippedIndices","gathered","$f39b990e44d0162d1b0eba73e4a8e2df$export$gather","isPositive","numIters","zeroSlice","gatherDropNegatives","gradientConfig","$fb68e07a805582f8cb0494e15f3e5d72$export$registerGradient","_epsilon","$dda75e50dbb8034f360c1b170b8814d4$export$acos","$a8e9c871996f01e0acbe11422522792f$export$acosh","$a18df82d9148303f1aa393c61c3bd7f2$export$addStrict","$d17777c3e2fc97d02f00c877523d2eb1$export$all","$c609d3f765a330dfd00ec7a811c4d$export$any","$aa91962792e8aaa123b4c0e66764e412$export$argMax","$fdf6c96b3ac3780bf5bb4f2be2c3c64$export$argMin","asScalar","asType","as1D","rows","columns","as3D","as4D","depth2","as5D","depth3","$bbbbe52ab3c8b6c9258535a9551ed3d$export$asin","$d208ea680c728ba79b70d5b5b9c23148$export$asinh","$ed675ce0faf8dffb6c2d65a970$export$atan","$ce841d7818fd9f517bba2a2e32c1da4$export$atan2","$b4478e06f4eb1a73b334232bb34d382e$export$atanh","$dcb129afeefdbea87f3ec2c683a84$export$ceil","$e1d38d367c6a54849d6ee05cada8a80$export$clipByValue","$c85788b3e47274e3cd370ee7ccc183$export$conv1d","$b924d7ea41d3213597d03e9e3f91a$export$conv2dTranspose","$b0aba1952b6788364c34ac5749872e6$export$depthToSpace","$f5f18d8482efb1acf8a32c09ce7fb9fa$export$dilation2d","$f87ddd01ea6cc31d8011619696b$export$divNoNan","$a18df82d9148303f1aa393c61c3bd7f2$export$divStrict","$c2cfaca9a8dd9ce33a434e113a3249cf$export$dot","$baa9b87f9d4f1997819ee425457$export$equalStrict","$b3034a9bac3167bc9396bfd85ce4a53d$export$erf","$e9824de1e3b5eefcbd200c7884071f00$export$expm1","$baa9b87f9d4f1997819ee425457$export$greaterEqualStrict","$baa9b87f9d4f1997819ee425457$export$greaterStrict","$adbfe810021597749a58ec2ecf30e0b3$export$irfft","$c51552f20e471f24311208$export$isFinite","$fd2eca6877b195cbc6c080a73dfc7722$export$isInf","$b1c5efd6aa087fff612359897f95$export$isNaN","$a5b8da8c0658e2d6fad$export$leakyRelu","$baa9b87f9d4f1997819ee425457$export$lessEqualStrict","$baa9b87f9d4f1997819ee425457$export$lessStrict","$fee5fde7b41f6e2c40568c3630bfe85b$export$localResponseNormalization","$c8123b93509933f40cc17b219a2ceca$export$logSigmoid","$f50c877d83c911c83c6be8feede34e2d$export$logSoftmax","$ee5cebfb5a0c4d1a24e7a390083e969$export$logicalXor","$a18df82d9148303f1aa393c61c3bd7f2$export$maximumStrict","$a18df82d9148303f1aa393c61c3bd7f2$export$minimumStrict","$a18df82d9148303f1aa393c61c3bd7f2$export$modStrict","$a18df82d9148303f1aa393c61c3bd7f2$export$mulStrict","$baa9b87f9d4f1997819ee425457$export$notEqualStrict","$be265036094835d70cd70d7866$export$onesLike","padding","dilationRate","$e04787fb96b86b7bae74b0cedf5f32$export$pool","$a18df82d9148303f1aa393c61c3bd7f2$export$powStrict","$ab0ad23e18766cef9dc90883b28cb3e4$export$prod","$ed431562230838c3290765cb44741a$export$reciprocal","reshapeAs","newShape2D","$fdc93b2af3d1bde38b47757262c2987f$export$resizeBilinear","$f000e9e5fb9bb8ccdef72451b2406$export$resizeNearestNeighbor","$cf16c4accacf6e1f6fef391cf6666de$export$round","$d629d41b06da35003cac049ddad4d8$export$selu","$ae77da19fd5a361f570a573241b7fcd$export$separableConv2d","$a0bd64b4cb5f03d22fa6dcd84719$export$sign","$fa3fc3694ad2added0e4f6de6a8608$export$softmax","$a18df82d9148303f1aa393c61c3bd7f2$export$squaredDifferenceStrict","tensorsToBeStacked","$d476277303b57833018113061e7$export$stridedSlice","$a18df82d9148303f1aa393c61c3bd7f2$export$subStrict","$fc6bfee2b92ca0561f486b489dd3c2$export$tan","toBool","toFloat","toInt","$ef1e3304628ccf74f8c0964ffbdf5e81$export$topk","AttributeError","RuntimeError","ValueError","NotImplementedError","AssertionError","pyListRepeat","newArray","$a6e373d5cab31a0b477b211bd77b2e1$export$AssertionError","refernce","singletonOrArray","toList","toSnakeCase","insecure","toCamelCase","identifier","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","dict","convertNDArrayScalarsInConfig","configItem","fields","field","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","$a6e373d5cab31a0b477b211bd77b2e1$export$ValueError","customObjectsCombined","backupCustomObjects","returnObj","reverseNumberCompare","numberCompare","unique","isObjectEmpty","hasOwnProperty","checkStringTypeUnionValue","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","assertPositiveInteger","formatAsFriendlyString","mapActivationToFusedKernel","activationName","calcL2Norms","Constraint","MaxNorm","defaultMaxValue","defaultAxis","maxValue","norms","desired","$f1ed2b6497eedc2936a6b2f83a13312$export$epsilon","UnitNorm","NonNeg","MinMaxNorm","defaultMinValue","defaultRate","minValue","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","maxNorm","minMaxNorm","nonNeg","unitNorm","serializeConstraint","constraint","$dc3d9733ac408828ee789f7f34df2c4$export$serializeKerasObject","deserializeConstraint","$dc3d9733ac408828ee789f7f34df2c4$export$deserializeKerasObject","$d8315dd30c51e4779f710c6f0488c$export$SerializationMap","getConstraint","VALID_DATA_FORMAT_VALUES","VALID_PADDING_MODE_VALUES","VALID_POOL_MODE_VALUES","VALID_BIDIRECTIONAL_MERGE_MODES","nameMap","checkDataFormat","$dc3d9733ac408828ee789f7f34df2c4$export$checkStringTypeUnionValue","$d3ae98c7618b97678755af15bb9741b7$export$VALID_DATA_FORMAT_VALUES","checkPaddingMode","$d3ae98c7618b97678755af15bb9741b7$export$VALID_PADDING_MODE_VALUES","checkPoolMode","$d3ae98c7618b97678755af15bb9741b7$export$VALID_POOL_MODE_VALUES","_nameScopeStack","nameScope","getScopedTensorName","tensorName","isValidTensorName","getUniqueTensorName","scopedName","tensorNameRegex","RegExp","arrayProd","toArray1D","sliceAlongFirstAxis","$abb09d3bde75018bf42887f10fde4d$export$slice1d","$a6faea472e8c104117fbe82ddf$export$slice2d","$f705954cc8a2700065faca07dd3fe4$export$slice3d","$ccd593d609d1727a88583ef64eb4feb$export$slice4d","sliceAlongLastAxis","sliceAlongAxis","concatenate","concatAlongFirstAxis","$c3721a0bf887b631f008ce328d31e22$export$concat1d","$fc46aa02ad068e8089b4d3ce351058$export$concat2d","$e1fe66c9118b46152aebe0f30feb27c2$export$concat3d","$dd81a119eee78e53189845704f5a99$export$concat4d","stddev","$ab233f3ed3730cfeaf9c7016f3511b1$export$randomNormal","$a6e373d5cab31a0b477b211bd77b2e1$export$NotImplementedError","$e28c20036884e03c8ec04ca4bd8f24a$export$matMul","reshapeBias","aFirstDims","aLastDim","bShape","bLastDim","ySecondLastDim","yOtherDims","reference","xRank","biasShape","biasAdd","$dd75c46b72a888bf316081b2947bf52a$export$checkDataFormat","level","$aaedb5b7afac7f4678226e59bcb66028$export$dropout","inTrainPhase","alt","training","VALID_FAN_MODE_VALUES","VALID_DISTRIBUTION_VALUES","Initializer","fromConfigUsesCustomObjects","Zeros","Ones","Constant","RandomUniform","DEFAULT_MINVAL","DEFAULT_MAXVAL","RandomNormal","DEFAULT_MEAN","DEFAULT_STDDEV","$ba9a2d369d3d840a83f748d34ba9d5$export$randomNormal","TruncatedNormal","$f3837fda67b66d411e28a96a49$export$truncatedNormal","gain","VarianceScaling","mode","$f46fc2259dd085cd020e8893dc1e1a$export$VALID_FAN_MODE_VALUES","distribution","$f46fc2259dd085cd020e8893dc1e1a$export$VALID_DISTRIBUTION_VALUES","checkDistribution","fans","fanIn","fanOut","receptiveFieldSize","$f899cd9e9d7fd426d58c894a87808970$export$arrayProd","computeFans","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","Orthogonal","DEFAULT_GAIN","$cb4015a2776a8097a7de53ab24c082b1$export$linalg","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","orthogonal","varianceScaling","deserializeInitializer","serializeInitializer","initializer","getInitializer","_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","isArrayOfShapes","normalizeShapeList","getExactlyOneTensor","getExactlyOneShape","countParamsInWeights","DEFAULT_VARIABLE_NAME_PREFIX","LayerVariable","$fe57ba7fdb9845706472f1559dbca9b$export$getNextUniqueTensorId","$dd75c46b72a888bf316081b2947bf52a$export$getScopedTensorName","$dd75c46b72a888bf316081b2947bf52a$export$getUniqueTensorName","trainable_","$b367eb969d47e2d37f2a3d50e875$export$variable","assertNotDisposed","newVal","checkShapesMatch","batchGetValue","batchSetValue","variablesAndValues","variableAndValue","InputSpec","ndim","maxNDim","minNDim","SymbolicTensor","sourceLayer","callArgs","outputTensorIndex","_nextNodeID","Node","outboundLayer","inboundLayers","nodeIndices","tensorIndices","inputTensors","outputTensors","inputMasks","outputMasks","layer","outboundNodes","inboundNodes","inboundNames","_nextLayerID","Layer","_callHook","_addedWeightNames","_stateful","activityRegularizer","inputSpec","supportsMasking","_trainableWeights","_nonTrainableWeights","_losses","_updates","_built","$dc3d9733ac408828ee789f7f34df2c4$export$toSnakeCase","$fe57ba7fdb9845706472f1559dbca9b$export$getUid","batchInputShape","inputDType","initialWeights","_refCount","fastWeightInitDuringBuild","nodeIndex","getNodeAtIndex","attrName","$a6e373d5cab31a0b477b211bd77b2e1$export$RuntimeError","getInputAt","$dc3d9733ac408828ee789f7f34df2c4$export$singletonOrArray","getOutputAt","$a6e373d5cab31a0b477b211bd77b2e1$export$AttributeError","calculateLosses","lossFn","built","trainableWeights","nonTrainableWeights","stateful","resetStates","assertInputCompatibility","$dc3d9733ac408828ee789f7f34df2c4$export$toList","inputIndex","xShapeAtAxis","specDim","kwargs","invokeCallHook","setCallHook","callHook","clearCallHook","inputsList","allAreSymbolic","noneAreSymbolic","$dd75c46b72a888bf316081b2947bf52a$export$nameScope","xElem","build","setWeights","outputList","outputListCopy","collectInputShape","computeOutputShape","outputDType","warnOnIncompatibleInputShape","addInboundNode","dimMismatch","dimension","allOutputShapes","shapeString","countParams","$bad9f187961ca044ce0851bf2edd53d3$export$countParamsInWeights","getWeights","trainableOnly","$ecfa3cef1c00659cf7759d2509784be3$export$batchGetValue","weightValueTuples","paramValues","pv","$ecfa3cef1c00659cf7759d2509784be3$export$batchSetValue","addWeight","regularizer","$c153b02ec588a46f2a323536c4f54$export$getInitializer","initValue","$ecfa3cef1c00659cf7759d2509784be3$export$LayerVariable","addLoss","setFastWeightInitDuringBuild","computeMask","maskElement","inputTensorList","$ca2320262e49b5c86c61259a555460f$export$normalizeShapeList","tensorIndex","disposeWeights","numDisposedVariables","refCountAfterDispose","getSourceInputs","sourceTensors","previousSources","InputLayer","$ede1d83ad0174f0ce4bc15ee397322e8$export$Layer","sparse","inputTensor","$ede1d83ad0174f0ce4bc15ee397322e8$export$SymbolicTensor","$ede1d83ad0174f0ce4bc15ee397322e8$export$Node","ModelLoggingVerbosity","resolveScalarsInLogs","logs","scalarsToDispose","valueScalar","disposeTensorsInLogs","BaseCallback","validationData","setParams","epoch","setModel","model","CallbackList","callbacks","queueLength","onEpochBegin","onEpochEnd","onBatchBegin","onBatchEnd","onTrainBegin","onTrainEnd","BaseLogger","totals","oldTotalsToDispose","History","history","valueArray","CustomCallback","yieldEvery","currentEpoch","onYield","$b6e32ac89c842575c3e2469b0f646$export$isNumber","maybeWait","waitMs","lastResult","lastTime","$dc3d9733ac408828ee789f7f34df2c4$export$debounce","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","ps","$dc9ce0eb90a19f21169bc9c6a2a860d$export$resolveScalarsInLogs","$a3e3de1d0576cc6371354d2ed4aa9ed$export$nextFrame","standardizeCallbacks","callbackConfig","CallbackConstructorRegistry","verbosityLevel","callbackConstructor","checkForDuplicate","constructors","levelName","ctor","configureCallbacks","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","createCallbacks","callbackList","samples","steps","metrics","deserialize","l2Normalize","squareSum","$ba9a2d369d3d840a83f748d34ba9d5$export$square","epsilonTensor","meanSquaredError","yTrue","yPred","meanAbsoluteError","meanAbsolutePercentageError","diff","clippedTrue","MAX_VALUE","absResult","categoricalCrossentropy","fromLogits","outputSum","sparseCategoricalCrossentropy","flatTarget","$ba9a2d369d3d840a83f748d34ba9d5$export$flatten","binaryCrossentropy","reluLogits","negAbsLogits","sigmoidCrossEntropyWithLogits","cosineProximity","trueNormalized","predNormalized","trueXPred","lossesMap","meanSquaredLogarithmicError","clippedPred","firstLog","secondLog","squaredHinge","maxResult","hinge","categoricalHinge","logcosh","log2","predictionDiff","logcoshResult","kullbackLeiblerDivergence","poisson","logPred","identifierOrFn","errMsg","binaryAccuracy","threshold","yPredThresholded","$ba9a2d369d3d840a83f748d34ba9d5$export$cast","categoricalAccuracy","$c9e56243e55eb88bc7d97ad40e4a483a$export$binaryCrossentropy","sparseCategoricalAccuracy","$c9e56243e55eb88bc7d97ad40e4a483a$export$categoricalCrossentropy","$c9e56243e55eb88bc7d97ad40e4a483a$export$sparseCategoricalCrossentropy","metricsMap","precision","tp","truePositives","fp","falsePositives","denominator","mse","$c9e56243e55eb88bc7d97ad40e4a483a$export$meanSquaredError","MSE","mae","$c9e56243e55eb88bc7d97ad40e4a483a$export$meanAbsoluteError","MAE","mape","$c9e56243e55eb88bc7d97ad40e4a483a$export$meanAbsolutePercentageError","MAPE","cosine","$c9e56243e55eb88bc7d97ad40e4a483a$export$cosineProximity","getLossOrMetricName","$dc3d9733ac408828ee789f7f34df2c4$export$assert","fnName","$c9e56243e55eb88bc7d97ad40e4a483a$export$lossesMap","MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH","checkUserDefinedMetadata","modelName","checkSize","getPrototypeOf","plainObjectCheck","xType","printSummary","lineLength","positions","printFn","sequentialLike","nodesByDepth","nodes","depthNodes","layers","flag","isModelSequentialLike","toDisplay","relevantNodes","printRow","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","collectedTrainableWeights","countTrainableParams","nonTrainableCount","line","connections","inboundLayer","inboundLayerIndex","inboundTensorIndex","firstConnection","isArrayItemInputOrOutputName","convertPythonicToTs","pythonicConfig","$dc3d9733ac408828ee789f7f34df2c4$export$toCamelCase","tsArray","arrayLength","tsDict","pythonicKey","pythonicValue","tsKey","convertTsToPythonic","tsConfig","pyArray","pyDict","tsValue","pyKey","FeedDict","feeds","id2Value","id2Mask","name2Id","feed","assertFeedCompatibility","addFeed","hasKey","getValue","getMask","disposeMasks","cachedSorted","cachedRecipientCounts","execute","fetches","feedDict","probe","arrayFetches","fetchArray","outputNames","finalOutputs","feedNames","outputName","maxNumTensors","minNumTensors","fetchAndFeedKey","recipientCounts","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","symbolicTensor","recipient","recipientMap2Counts","getTopologicalSortAndRecipientCounts","internalFeedDict","$c9bfe24dbd63073dcb5c5fdcb4541138$export$memory","symbolic","srcLayer","$d0fb523c4b35c07bd7948792e0f6720$export$InputLayer","inputValues","tensorsToDispose","maskExists","outputMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","marks","topIsMarked","outputTensor","Container","containerNodes","$dc3d9733ac408828ee789f7f34df2c4$export$unique","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","internalContainerRefs","inputNames","feedInputShapes","feedInputNames","feedOutputNames","internalInputShapes","internalOutputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","finishedNodes","nodesInProgress","nodeKey","numInboundLayers","reversedNodesInDecreasingDepth","previousDepth","inboundNode","nodeID","layersByDepth","layerID","depthKeys","$dc3d9733ac408828ee789f7f34df2c4$export$reverseNumberCompare","layersForDepth","aIndex","bIndex","computableTensors","layersWithCompleteInput","allNames","numOccurrences","strict","nameToWeight","totalWeightsCount","validatedName","tokens","unsetNames","updatedConfig","theConfig","unused","returnString","$ae9b6504d468906286ecaafebf8b98c$export$convertTsToPythonic","$d3d9e0815d156222f293a074eb7379$export$FeedDict","$d3d9e0815d156222f293a074eb7379$export$execute","masks","$dc3d9733ac408828ee789f7f34df2c4$export$pyListRepeat","runInternalGraph","layersToOutputShapes","outputShapeKeys","shapeKey","tensorMap","referenceInputTensors","referenceOutputTensors","computedData","computedTensors","computedMasks","computedTensor","computedMask","buildNodeConversionMap","nodeConversionMap","keptNodes","originalNodeIndex","getLayer","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","nodeData","newNodeIndex","modelInputs","modelOutputs","createdLayers","unprocessedNodes","addUnprocessedNode","processNode","inputData","inboundLayerName","inboundNodeIndex","processLayer","layerData","layerName","$f046f55202e5205cd76d976295c6adba$export$deserialize","layersFromConfig","$dc3d9733ac408828ee789f7f34df2c4$export$isObjectEmpty","currentUnprocessedNodesForLayer","inputLayersFromConfig","layerOutputTensors","outputLayersFromConfig","standardizeClassWeights","classWeight","xWeight","weightType","numOutputs","standardizeSampleOrClassWeights","standardizeWeights","sampleWeight","sampleWeightMode","yClasses","yClassIndices","classSampleWeight","classIndex","sampleWeights","standardizeDataIteratorOutput","iteratorOut","iteratorOutObj","flattenedXs","flattenTensorOrArrayOrMap","flattenedYs","xIndex","yIndex","inputOrOutput","fitDataset","dataset","hasBatchesPerEpoch","batchesPerEpoch","optimizer","isTraining","valXs","valYs","isDatasetObject","validationBatches","standardizeTensorValidationData","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","$bcf9e637824ce94d6824eefba9afc69$export$standardizeCallbacks","$bcf9e637824ce94d6824eefba9afc69$export$configureCallbacks","getStepsPerEpoch","stopTraining_","dataIterator","iterator","epochLogs","stepsDone","batchIndex","batchLogs","standardClassWeights","$ba8b66ae6a175090ba82dd173b2dfb6d$export$standardizeClassWeights","$ba8b66ae6a175090ba82dd173b2dfb6d$export$standardizeWeights","ins","$dc9ce0eb90a19f21169bc9c6a2a860d$export$disposeTensorsInLogs","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","syncData","checkBatchSize","sliceArrays","$ba9a2d369d3d840a83f748d34ba9d5$export$sliceAlongFirstAxis","sliceArraysByIndices","$ba9a2d369d3d840a83f748d34ba9d5$export$gather","makeBatches","batchStart","fitTensors","targets","inputValX","inputValY","valX","valY","checkBatchAxis","standardizedOuts","standardizeUserData","valIns","valStandardized","validationSplit","splitAt","originalBatchSize","validationSteps","valFunction","makeTestFunction","testFunction","valF","checkNumSamples","indexArray","$f899cd9e9d7fd426d58c894a87808970$export$range","$b6e32ac89c842575c3e2469b0f646$export$shuffle","epochIndexArray1D","batchIds","insBatch","testLoop","fitLoop","disposeNewTensors","ensureTensorsRank2OrHigher","$ba9a2d369d3d840a83f748d34ba9d5$export$expandDims","refTensors","oldTensorIds","oldTensor","isDataArray","isDataDict","isDataTensor","standardizeInputData","exceptionPrefix","gotUnexpectedData","$d279c6f406a3a8d57fafbe3efbf164$export$ensureTensorsRank2OrHigher","refDim","checkInputData","LayersModel","$de9c8a6872059eacde946b8a02f1e8af$export$Container","summary","$c375dd3e2892d46e3fde9190797a3$export$printSummary","compile","loss","optimizer_","optimizerMap","Adagrad","$f5ab719d842832f734a15bd8a5996d5$export$train","Adadelta","Adam","Adamax","RMSProp","SGD","$efa0133e0ce1f956cc49aa79255$export$getOptimizer","isOptimizerOwned","lossFunctions","theLosses","$c9e56243e55eb88bc7d97ad40e4a483a$export$get","lossFunction","feedOutputShapes","feedLossFns","skipTargetIndices","metricsTensors","nestedMetrics","wrappedMetrics","outputMetrics","collectMetrics","appendMetric","outputIndex","metricName","metricTensor","accFn","weightedMetricFn","metric","$a34e35b74a36ebdfa1faeb22a0a91ca$export$binaryAccuracy","$a34e35b74a36ebdfa1faeb22a0a91ca$export$binaryCrossentropy","$a34e35b74a36ebdfa1faeb22a0a91ca$export$sparseCategoricalAccuracy","$a34e35b74a36ebdfa1faeb22a0a91ca$export$sparseCategoricalCrossentropy","$a34e35b74a36ebdfa1faeb22a0a91ca$export$categoricalAccuracy","$a34e35b74a36ebdfa1faeb22a0a91ca$export$categoricalCrossentropy","metricFn","$a34e35b74a36ebdfa1faeb22a0a91ca$export$get","$a34e35b74a36ebdfa1faeb22a0a91ca$export$getLossOrMetricName","metricResult","handleMetrics","$d279c6f406a3a8d57fafbe3efbf164$export$checkBatchSize","standardizeUserDataXY","$d279c6f406a3a8d57fafbe3efbf164$export$disposeNewTensors","hasBatches","numExamples","xsAndYs","batchOuts","batchOut","oldScalar","$bea0f8f179d9b3ade2e1454192ba2c68$export$evaluateDataset","stepsName","outputsIsArray","retrieveSymbolicTensors","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layerOutputNames","remainingNames","predictLoop","$d279c6f406a3a8d57fafbe3efbf164$export$makeBatches","outsBatches","$d279c6f406a3a8d57fafbe3efbf164$export$sliceArrays","predict","xsRank2OrHigher","predictOnBatch","setX","setY","checkArrayLengths","lossFns","keyLosses","slicedYShape","slicedShape","targetDim","checkLossAndTargetCompatibility","standardXs","standardYs","standardSampleWeights","classWeights","$d279c6f406a3a8d57fafbe3efbf164$export$sliceArraysByIndices","dedupedOutLabels","newLabel","$dc3d9733ac408828ee789f7f34df2c4$export$count","lossValues","metricsValues","totalLoss","$ba8b66ae6a175090ba82dd173b2dfb6d$export$computeWeightedLoss","meanLoss","weightedMetric","regularizerLoss","valOutputs","meanMetric","$d279c6f406a3a8d57fafbe3efbf164$export$fitTensors","$bea0f8f179d9b3ade2e1454192ba2c68$export$fitDataset","standardizeOut","getNamedWeights","namedWeights","stopTraining","numTensorsBeforeOptmizerDisposal","getLossIdentifiers","lossNames","getMetricIdentifiers","metricsIdentifiers","getTrainingConfig","optimizer_config","class_name","loadTrainingConfig","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","$ae9b6504d468906286ecaafebf8b98c$export$convertPythonicToTs","lossEntry","handlerOrURL","handlers","$f44d845a60e5d5c9cb785a120c05dd$export$getSaveHandlers","weightDataAndSpecs","$ed947fd904b96add8891fc29d4574eb4$export$encodeWeights","includeOptimizer","optimizerWeightData","optimizerWeightSpecs","$b63b175c57bbe90dd7f94c253b$export$checkUserDefinedMetadata","setUserDefinedMetadata","getUserDefinedMetadata","Functional","Sequential","$a3fd8506f326b560cbf70d8d64f8977$export$LayersModel","checkShape","isLayerModelInstance","modelLayer","$d0fb523c4b35c07bd7948792e0f6720$export$Input","$ede1d83ad0174f0ce4bc15ee397322e8$export$getSourceInputs","lastLayerIndex","$ca2320262e49b5c86c61259a555460f$export$getExactlyOneShape","fit","trainOnBatch","configArray","extraModelConfig","conf","Activation","Elu","$ba9a2d369d3d840a83f748d34ba9d5$export$elu","Linear","HardSigmoid","$ba9a2d369d3d840a83f748d34ba9d5$export$hardSigmoid","Softsign","$ba9a2d369d3d840a83f748d34ba9d5$export$softsign","serializeActivation","deserializeActivation","getActivation","Regularizer","L1L2","assertObjectArgs","hasL1","hasL2","regularization","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","l1l2","serializeRegularizer","deserializeRegularizer","getRegularizer","ReLU","$ca2320262e49b5c86c61259a555460f$export$getExactlyOneTensor","baseConfig","LeakyReLU","DEFAULT_ALPHA","PReLU","DEFAULT_ALPHA_INITIALIZER","alphaInitializer","alphaRegularizer","$ee31ae5f2ffa808d33db0852cd1efa8e$export$getRegularizer","alphaConstraint","$c3914f61c511143ef8eacf7a1fa781af$export$getConstraint","sharedAxes","paramShape","$ede1d83ad0174f0ce4bc15ee397322e8$export$InputSpec","$c153b02ec588a46f2a323536c4f54$export$serializeInitializer","$ee31ae5f2ffa808d33db0852cd1efa8e$export$serializeRegularizer","$c3914f61c511143ef8eacf7a1fa781af$export$serializeConstraint","ELU","ThresholdedReLU","DEFAULT_THETA","theta","DEFAULT_AXIS","$f31b91cc6af1b915e73839839639830$export$Softmax","normalizeArray","singleValue","$f899cd9e9d7fd426d58c894a87808970$export$isInteger","convOutputLength","inputLength","outputLength","deconvLength","strideSize","kernelSize","$f899cd9e9d7fd426d58c894a87808970$export$max","preprocessConv2DInput","preprocessConv3DInput","conv2dWithBiasActivation","$ab2d1c45d366e2ca358303727b336df5$export$conv2d","BaseConv","DEFAULT_KERNEL_INITIALIZER","DEFAULT_BIAS_INITIALIZER","verifyArgs","$dc3d9733ac408828ee789f7f34df2c4$export$assertPositiveInteger","$e9917efab13163d08cc4fc9ffbab87ee$export$normalizeArray","$dd75c46b72a888bf316081b2947bf52a$export$checkPaddingMode","$f31b91cc6af1b915e73839839639830$export$getActivation","useBias","biasInitializer","biasConstraint","biasRegularizer","$dc3d9733ac408828ee789f7f34df2c4$export$checkArrayTypeAndLength","$f31b91cc6af1b915e73839839639830$export$serializeActivation","Conv","filters","kernelInitializer","kernelConstraint","kernelRegularizer","channelAxis","inputDim","kernelShape","biasValue","fusedActivationName","$dc3d9733ac408828ee789f7f34df2c4$export$mapActivationToFusedKernel","$ba9a2d369d3d840a83f748d34ba9d5$export$biasAdd","conv1dWithBias","$ccce1bf3917c48eeffe1a97f0f7c50bf$export$conv3d","conv3dWithBias","newSpace","space","newDim","$e9917efab13163d08cc4fc9ffbab87ee$export$convOutputLength","Conv2DTranspose","hAxis","wAxis","kernelH","kernelW","strideH","strideW","$e9917efab13163d08cc4fc9ffbab87ee$export$deconvLength","heightAxis","widthAxis","SeparableConv","DEFAULT_DEPTHWISE_INITIALIZER","DEFAULT_POINTWISE_INITIALIZER","depthwiseKernel","pointwiseKernel","depthMultiplier","depthwiseInitializer","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","SeparableConv2D","Conv1D","Cropping2D","cropping","hSliced","$ba9a2d369d3d840a83f748d34ba9d5$export$sliceAlongAxis","UpSampling2D","DEFAULT_SIZE","resized","DepthwiseConv2D","$b90dfdd2939107e15c5f4510293e9$export$BaseConv","$b90dfdd2939107e15c5f4510293e9$export$preprocessConv2DInput","cols","outFilters","outRows","outCols","standardizeArgs","initialState","constants","numConstants","toListOrNull","rnn","stepFunction","initialStates","goBackwards","unroll","needPerStepOutputs","perStepOutputs","lastOutput","states","timeSteps","perStepInputs","perStepMasks","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","RNN","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","stateSpec","states_","keptStates","getStates","setStates","$ca2320262e49b5c86c61259a555460f$export$isArrayOfShapes","outputDim","stateShape","stateMask","numStates","stepInputShape","expectedShape","standardized","additionalInputs","additionalSpecs","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","rnnOutputs","$ba9a2d369d3d840a83f748d34ba9d5$export$tile","cellConfig","RNNCell","SimpleRNNCell","DEFAULT_ACTIVATION","DEFAULT_RECURRENT_INITIALIZER","recurrentInitializer","recurrentRegularizer","recurrentConstraint","$f899cd9e9d7fd426d58c894a87808970$export$min","recurrentDropout","dropoutMask","recurrentDropoutMask","recurrentKernel","prevOutput","generateDropoutMask","dpMask","recDpMask","$ba9a2d369d3d840a83f748d34ba9d5$export$dot","SimpleRNN","GRUCell","DEFAULT_RECURRENT_ACTIVATION","resetAfter","recurrentActivation","implementation","hTMinus1","hh","matrixX","recurrentKernelValue","rk1","rk2","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","GRU","LSTMCell","unitForgetBias","capturedBiasInit","capturedUnits","$c153b02ec588a46f2a323536c4f54$export$Initializer","bI","bF","$c153b02ec588a46f2a323536c4f54$export$Ones","bCAndH","$ba9a2d369d3d840a83f748d34ba9d5$export$concatAlongFirstAxis","cTMinus1","z0","z1","z2","z3","LSTM","nestedStates","newNestedStates","callInputs","cellStates","cellConfigs","tuples","numParams","inputWeights","droppedInputs","$ba9a2d369d3d840a83f748d34ba9d5$export$dropout","createMask","$ba9a2d369d3d840a83f748d34ba9d5$export$inTrainPhase","__rest","getOwnPropertySymbols","propertyIsEnumerable","ConvRNN2D","$d37f03513b9a6dcc436e0c993701fd$export$RNN","computeSingleOutputShape","isChannelsFirst","hOut","wOut","ConvLSTM2DCell","$d37f03513b9a6dcc436e0c993701fd$export$LSTMCell","recurrentKernelShape","$ba9a2d369d3d840a83f748d34ba9d5$export$concatenate","$d37f03513b9a6dcc436e0c993701fd$export$generateDropoutMask","applyDropout","xI","xF","xC","xO","recDropoutMask","hI","hF","hC","hO","kernelI","kernelF","kernelC","kernelO","biasI","biasF","biasC","biasO","inputConv","recKernelI","recKernelF","recKernelC","recKernelO","recurrentConv","ConvLSTM2D","Dropout","getNoiseShape","SpatialDropout1D","Dense","inputLastDim","Flatten","$ba9a2d369d3d840a83f748d34ba9d5$export$batchFlatten","RepeatVector","$ba9a2d369d3d840a83f748d34ba9d5$export$repeat","targetShape","isUnknown","fixUnknownDimension","errorMsg","finalShape","known","unknown","originalSize","anyUnknownDims","Permute","expectedSortedIndices","dimsIncludingBatch","Masking","maskValue","booleanMask","Embedding","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsInitializer","embeddingsRegularizer","embeddingsConstraint","maskZero","inLens","Merge","mergeFunction","computeElementwiseOpOutputShape","shape1","shape2","batchSizes","allRanks","reshapeRequired","reshapedInputs","inputDims","xNDim","transposed","xTransposed","yNDim","yShape","Average","Concatenate","allNoneShape","shapeSet","shapeWithoutConcatAxis","exists","allNullMasks","concatenatedMasks","interpretAxis","Dot","normalize","interpretAxes","x1","$c9e56243e55eb88bc7d97ad40e4a483a$export$l2Normalize","axesArray","diffShape","adjX","adjY","idx","squeezeAxes","batchDot","GaussianNoise","GaussianDropout","AlphaDropout","_getNoiseShape","alphaP","keptIdx","batchNormalization","gamma","$f204e4e63d1a386d938e83834f5d6096$export$batchNorm2d","$c8ace7a2250b8ed69a5e8a4668d0a9fc$export$batchNorm3d","$bb2eda45e224e0df39bf7e4fb464a3a$export$batchNorm4d","normalizeBatchInTraining","meanAndVariance","$d51a3f9c840a537281d59900afa8b3e3$export$moments","regularNormalizeBatchInTraining","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","broadcastNormalizeBatchInTraining","BatchNormalization","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","movingMean","movingVariance","sortedReductionAxes","needsBroadcasting","broadcastMovingMean","broadcastMovingVariance","normalizeInference","normedTraining","doMovingAverage","origValue","updateDelta","updateMovingMeanAndVariance","LayerNormalization","nDims","broadcast","momentsTiling","scaleOffsetTiling","ZeroPadding2D","heightPadding","widthPadding","pattern","spatial2dPadding","pool2d","poolMode","$dd75c46b72a888bf316081b2947bf52a$export$checkPoolMode","paddingString","pool3d","$b90dfdd2939107e15c5f4510293e9$export$preprocessConv3DInput","$ba5741117e70d9d47c127572185f59a9$export$maxPool3d","$af125d62a5bfd6f413dd9999e9d3cee2$export$avgPool3d","Pooling1D","poolingFunction","MaxPooling1D","AveragePooling1D","Pooling2D","MaxPooling2D","AveragePooling2D","Pooling3D","depths","MaxPooling3D","AveragePooling3D","GlobalPooling1D","GlobalAveragePooling1D","GlobalMaxPooling1D","GlobalPooling2D","GlobalAveragePooling2D","GlobalMaxPooling2D","Wrapper","newConfig","TimeDistributed","childInputShape","childOutputShape","timesteps","$d37f03513b9a6dcc436e0c993701fd$export$rnn","Bidirectional","forwDict","forwardLayer","backDict","backwardLayer","mergeMode","$d3ae98c7618b97678755af15bb9741b7$export$VALID_BIDIRECTIONAL_MERGE_MODES","_trainable","numWeights","numeightsOver2","layerShapes","$d37f03513b9a6dcc436e0c993701fd$export$standardizeArgs","stateSpecs","isSymbolicTensor","yRev","forwardState","backwardState","rnnLayer","DataType","SaverDef","CheckpointFormatVersion","tfOpName","category","tfName","notSupported","tfDeprecatedName","deepMap","mapFn","deepMapInternal","containedIn","recurse","isIterable","mappedIterable","childResult","deepZip","zipFn","zipToList","deepZipInternal","cloneIfTensor","$b1abdf70c9c0ee5412e9846b56fb208c$export$isIterable","RingBuffer","capacity","doubledCapacity","wrap","isFull","isEmpty","pushAll","shift","shuffleExcise","relativeIndex","GrowingRingBuffer","$cef1d9bd67c7cf1b436e7384a76da3$export$RingBuffer","INITIAL_CAPACITY","expand","newCapacity","newData","LazyIterator","stream","prefetch","predicate","shouldContinue","handleErrors","ErrorHandlingLazyIterator","FilterIterator","transform","MapIterator","mapAsync","AsyncMapIterator","serialMapAsync","serial","flatmap","FlatmapIterator","resolveFully","resolveWhile","rowMajorBatch","smallLastBatch","RowMajorBatchIterator","columnMajorBatch","$b1abdf70c9c0ee5412e9846b56fb208c$export$zipToList","$b1abdf70c9c0ee5412e9846b56fb208c$export$deepZip","baseErrorHandler","ChainedIterator","ArrayIterator","take","TakeIterator","skip","SkipIterator","bufferSize","PrefetchIterator","windowSize","ShuffleIterator","SerialIterator","trav","$b1abdf70c9c0ee5412e9846b56fb208c$export$deepMap","FunctionCallIterator","nextFn","upstream","lastRead","serialNext","maxCount","skipped","enableSmallLastBatch","mapped","$f0d0d03eb353aac620425c010d83948$export$isTensorInList","OneToManyIterator","outputQueue","$dd8ea57cfbda0dc83e88ca0f2a8042c4$export$GrowingRingBuffer","pump","mappedArray","iterators","moreIterators","readFromChain","iteratorResult","itemResult","ZipMismatchMode","refill","upstreamExhausted","randomInt","chooseIndex","chosenIndex","Dataset","datasetFromIteratorFn","deepBatchConcat","forEachAsync","iteratorIterator","baseIterators","reshuffleEachIteration","seed2","toArray","toArrayForTest","iteratorFn","exampleRow","batchConcat","MAX_BUFFER_SIZE","assertNotComplex","xValues","poolType","padTop","padLeft","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","yR","xRCorner","xRMin","xRMax","outputRowOffset","yC","xCCorner","xCMin","xCMax","minMaxValue","avgValue","xROffset","pixel","maxPoolPositions","flattenPositions","maxPositions","maxPosition","wR","wC","$fe8d3e1200a14cd466d8$export$nonMaxSuppressionV3Impl","$cd61c1b69da118368d2a2b1a8b959$export$split","$d33f44d1b16d3f7e254edb45fc33f5d$export$tile","$c9d67b6ee0a552ef5ac10ce9649$export$topkImpl","$a237b8cb22af470622d80a09474b9131$export$whereImpl","mapActivation","MathBackendCPU","$bf4095875c65f2f8e06cf09190d2ac2d$export$KernelBackend","firstUse","$bf4095875c65f2f8e06cf09190d2ac2d$export$DataStorage","$c9bfe24dbd63073dcb5c5fdcb4541138$export$engine","$cd880c8d13e57631fd53b04578f0$export$warn","decRef","complexTensors","$cee037284bca318c9e5dcb8c257d77dc$export$mergeRealAndImagArrays","decodedData","makeOutput","disposeIntermediateTensorInfo","tensorData","$cda18a79ac44e415f0bdc8e2b1ba78e0$export$assertNotComplex","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$isSliceContinous","$b9fd0d2ba1b63de6b4fe2018fda3c23$export$computeFlatOffset","xLoc","xVals","outIndex","outLoc","inLoc","reals","imags","tensors2D","innerSize","colOffset","tVals","tIdx","resIdx","col","finalOutShape","broadcastedBinaryComplexOp","aReal","aImag","bReal","bImag","broadcastedBinaryOp","aValue","bValue","resultVals","currVals","maxLogit","sumExp","sharedDim","leftDim","rightDim","aValues","bValues","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","i0","j0","k0","iBlock","jBlock","kBlock","$e36debe92af6ab0391919ee941a6c7b8$export$assertAxesAreInnerMostDims","reduceShape","aVals","segmentId","minIndex","maxIndex","resultDtype","finalDim","indexAdjuster","prevIdx","aVal","bVal","rem","anyVal","inVals","xValue","resultValues","dyValues","hypot","tooLarge","tooSmall","expX","$b6e32ac89c842575c3e2469b0f646$export$tanh","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_P","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_A5","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_A4","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_A3","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_A2","$fc000e70cb7a99a2e2b1aad7a42142e1$export$ERF_A1","isChannelsLast","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","padFront","yF","xFCorner","wF","wOffset2","yOffset4","xOffset4","wOffset4","dxValues","fltValues","fltS0","fltS1","fltS2","topPad","leftPad","yRMax","yCMax","dotProd","dyOffset","fltOffset","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","fltS3","frontPad","xFMin","yFMax","dW","dyBuf","yRMin","yCMin","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xS0","xS1","xS2","xS3","yFMin","chMul","dm","trunc","indicesValues","$f8643205d1eb101a1b2964e49067a$export$getReshaped","$f8643205d1eb101a1b2964e49067a$export$getPermuted","$f8643205d1eb101a1b2964e49067a$export$getReshapedPermuted","$f8643205d1eb101a1b2964e49067a$export$getSliceBeginCoords","$f8643205d1eb101a1b2964e49067a$export$getSliceSize","$b1d6f951104690ba0acbe7070ea44852$export$pool","maxPosBuf","$b1d6f951104690ba0acbe7070ea44852$export$maxPoolPositions","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","avgMultiplier","outputDepthStrides","yDepth","xDepthCorner","xDepthMin","xDepthMax","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","maxPool3dPositions","$a8ea033f5ccd35b6155f9$export$castTensor","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","$cc86f5b5b8ea0af7c6f8647fdf2b0$export$tensor4d","outputOffset","batchOffset","rowOffset","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","mVals","varVals","sVals","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","inputImageValues","outputImageValues","depthBegin","depthEnd","dyi","probabilities","numEvents","probVals","cdf","event","sampleId","indicesVal","boxesVals","scoresVals","fftBatch","innerDim","realResult","imagResult","fftImpl","$cee037284bca318c9e5dcb8c257d77dc$export$getComplexWithIndex","x1D","isExponentOf2","fftRadix2","$cee037284bca318c9e5dcb8c257d77dc$export$splitRealAndImagArrays","fourierTransformByMatmul","evenComplex","$cee037284bca318c9e5dcb8c257d77dc$export$complexWithEvenIndex","evenTensor","oddComplex","$cee037284bca318c9e5dcb8c257d77dc$export$complexWithOddIndex","oddTensor","$cee037284bca318c9e5dcb8c257d77dc$export$exponents","addPart","subPart","realTensor","imagTensor","$cee037284bca318c9e5dcb8c257d77dc$export$exponent","term","$cee037284bca318c9e5dcb8c257d77dc$export$assignToTypedArray","outputHeight","outputWidth","outputDepth","inH","offsetH","inW","offsetD","inputIdx","bVals","aBroadcastDims","$cb34c1cbc69e7983f6ad453cb85c690$export$getBroadcastDims","bBroadcastDims","aBuf","bBuf","aLoc","bLoc","realVals","imagVals","aIdx","bIdx","aRealBuf","bRealBuf","opResult","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","y2","bInd","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topRight","closestX","closestY","inInd","outInd","$a3a100b2b0b78a1b509dd5b922728410$export$calculateShapes","scatter","numSlices","$f48bf28d08cd6080eb255bfe990f3$export$prepareAndValidate","indicesData","xData","flattenIndex","$a8ea033f5ccd35b6155f9$export$linspaceImpl","sumDupeIndices","flattenShape","updatesData","maxImpl","transposeImpl","xSize","xStrides","$b6e32ac89c842575c3e2469b0f646$export$indexToLoc","$b6e32ac89c842575c3e2469b0f646$export$locToIndex","$c9bfe24dbd63073dcb5c5fdcb4541138$export$registerBackend","$a8c7e26bd6e454c9cd5b7351ed$export$MathBackendCPU","cosConfig","cpuBackend","dilation2dConfig","filterVals","filterRank","$d03dfc1c12bbe011e12baae3e641ab15$export$computeDilation2DInfo","outSize","outRank","hBeg","wBeg","curVal","hIn","wIn","filterIndex","dilation2dBackpropFilterConfig","$b6e32ac89c842575c3e2469b0f646$export$makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","hInMax","wInMax","createBinaryKernelConfig","resultData","createBinaryKernelImpl","resultRank","resultStrides","aRank","bRank","aStrides","bStrides","divImpl","$a522dc13413c1080722b055365c6ff34$export$createBinaryKernelImpl","divConfig","$a522dc13413c1080722b055365c6ff34$export$createBinaryKernelConfig","$cc42ee86c715fa8f33fa87be203f8086$export$divImpl","flipLeftRightConfig","batchIdx","coordX","outputValue","identityConfig","maxConfig","$e503ad8a5a9a5ce6134f6ec542a00$export$transposeImpl","maxOutShape","$f8a8598593e7c614294e226a312bb764$export$maxImpl","maxPoolWithArgmaxConfig","pooled","maxPools","$f7d4dded61a9fad52c1e7450b842fb$export$maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","$fe8d3e1200a14cd466d8$export$nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","$fe8d3e1200a14cd466d8$export$nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","padV2Config","resultSize","reshapeConfig","rotateWithOffsetConfig","centerX","centerY","$a50a5cbf209f2484427190274$export$getImageCenter","sinFactor","cosFactor","coords","coordY","transposeConfig","spaceToBatchNDConfig","completePaddings","paddedX","$de75a9a6a8abdbb1ea111ad0eb4bbb6$export$padV2Config","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","$e565ff892842a926995dce6ddd8062bd$export$reshape","paddedXT","$acd74bfa2c9cc35de4266ee60f4c5ec$export$transpose","squareConfig","squaredDifferenceImpl","squaredDifferenceConfig","kernelConfigs","$bb3784e17976fe373a54f47143590652$export$cosConfig","$a53471162dbf3d4028ee5939b7902431$export$dilation2dConfig","$cfefe4526985015242c1fa1bb5ba$export$dilation2dBackpropInputConfig","$d6b6e126e959c16780aa3b7388a36bb$export$dilation2dBackpropFilterConfig","$d374774418b647871acb89b57344e$export$divConfig","$ab5388e00389a866b7bf5602c979839$export$flipLeftRightConfig","$c506652809c98aeada118f5853f7d$export$identityConfig","$d08916c9459e7fb55774463479b894aa$export$maxPoolWithArgmaxConfig","$ee95175cc5f44b1c5f2e7235276a8d3$export$maxConfig","$e88cf1f8d8aa65d1965bba800a0a$export$nonMaxSuppressionV4Config","$fee94f4f50483985dd3d2ddba4b75d01$export$nonMaxSuppressionV5Config","$e565ff892842a926995dce6ddd8062bd$export$reshapeConfig","$a14cf510811ea8b36ca3fe6446d6d765$export$rotateWithOffsetConfig","$e459ba37392efbcb3ec84ba0aeb31$export$spaceToBatchNDConfig","$adafa3eb7397d1c883301f257af147a4$export$squareConfig","$fb6f4d6f82963581f04f5248f489ef$export$squaredDifferenceConfig","$acd74bfa2c9cc35de4266ee60f4c5ec$export$transposeConfig","kernelConfig","$fb68e07a805582f8cb0494e15f3e5d72$export$registerKernel","contexts","WEBGL_ATTRIBUTES","antialias","premultipliedAlpha","preserveDrawingBuffer","stencil","failIfMajorPerformanceCaveat","getWebGLContext","webGLVersion","OffscreenCanvas","createCanvas","addEventListener","ev","preventDefault","getWebGLRenderingContext","gl","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","getDenseTexShape","$b6e32ac89c842575c3e2469b0f646$export$sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getError","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getWebGLErrorMessage","checkWebGLError","canBeRepresented","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createFragmentShader","fragmentShaderSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","linesWithLineNumbers","maxLineLength","beforeErrorLines","errorLine","afterErrorLines","logShaderSourceAndInfoLog","getShaderInfoLog","validateProgram","program","getProgramParameter","VALIDATE_STATUS","getProgramInfoLog","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","getAttribLocation","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","TEXTURE0","validateTextureUnit","activeTexture","bindTexture","TEXTURE_2D","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","getFramebufferErrorMessage","returnTOrNull","failureMessage","tOrNull","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","isEven","isReshapeFree","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","hasExtension","isWebGLVersionEnabled","$c0be85cf0f3b1c448341169e44b53ba$export$getWebGLContext","isDownloadFloatTextureEnabled","createFloatTextureAndBindToFramebuffer","COLOR_BUFFER_HALF_FLOAT","texConfig","$ba21f0eed4190ae92ffe9cb4b1d499$export$getTextureConfig","createTexture","texImage2D","frameBuffer","createFramebuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","$ca7f8030d3527a972cfc28fc73fd2b$export$isWebGLVersionEnabled","getParameter","$ca7f8030d3527a972cfc28fc73fd2b$export$getWebGLMaxTextureSize","MAX_TEXTURE_IMAGE_UNITS","$ca7f8030d3527a972cfc28fc73fd2b$export$getMaxTexturesInShader","queryTimerVersion","$ca7f8030d3527a972cfc28fc73fd2b$export$getWebGLDisjointQueryTimerVersion","$e983227462712d78292df86bde699dd9$export$isMobile","$ca7f8030d3527a972cfc28fc73fd2b$export$isCapableOfRenderingToFloatTexture","$ca7f8030d3527a972cfc28fc73fd2b$export$isDownloadFloatTextureEnabled","$ca7f8030d3527a972cfc28fc73fd2b$export$isWebGLFenceEnabled","fenceSync","AddNProgram","snippets","operation","userCode","AddNPackedProgram","packedInputs","packedOutput","ArgMinMaxProgram","reduceInfo","firstPass","compOp","indexSnippet","getVecChannels","getChannels","getGlslDifferences","varyingVs","varyingFs","texture2D","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","getFlatIndexFrom3D","ENCODE_FLOAT_SNIPPET","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","logicalShape","isUniform","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","getPackedSamplerFromInInfo","getSamplerFromInInfo","inputInfo","texName","texFuncSnippet","charAt","funcName","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","unpackedCoordsSnippet","isInputScalar","isOutputScalar","getPackedSamplerAtOutputCoords","outTexShape","texShape","inTexShape","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","$a0efd75dee9263bd9f8abc1df7a$export$getGlslDifferences","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","isPacked","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","$eace77cf9ff32a364baad71133b0e90$export$getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","tNumR","tNumC","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","squeezedShape","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","newInputInfo","ArgMinMaxPackedProgram","$f3da2598b48c2ddcb2e21b17cd48a4$export$getCoordsDataType","$da7ae6a30b64d8a8593ec759c4cc1b9$export$getChannels","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","AvgPool2DBackpropProgram","AvgPool3DBackpropProgram","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","offsetSnippet","scaleSnippet","BatchNormPackedProgram","COMPLEX_MULTIPLY","BinaryOpComplexProgram","ADD","SUB","MUL","PRELU","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","supportsBroadcasting","checkOutOfBoundsString","ClipProgram","getCustomSetupFunc","gpgpu","webGLProgram","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","ClipPackedProgram","ComplexAbsProgram","ConcatProgram","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","Conv2DDerFilterProgram","Conv2DDerInputProgram","rowDim","colDim","channelDim","Conv3DDerFilterProgram","Conv3DDerInputProgram","DepthwiseConv2DDerFilterProgram","channelMul","DepthwiseConv2DDerInputProgram","Conv2DProgram","addBias","hasPreluActivationWeights","inputDepthNearestVec4","inputDepthVec4Remainder","activationSnippet","applyActivationSnippet","addBiasSnippet","Conv3DProgram","DepthwiseConv2DProgram","hasPreluActivation","xNumRows","xNumCols","DepthwiseConvPacked2DProgram","texelsAcross","mainLoop","texelC","nextTexelOffset","$b6e32ac89c842575c3e2469b0f646$export$nearestLargerEven","CropAndResizeProgram","imageShape","boxShape","methodId","inputHeightFloat","inputWidthFloat","heightRatio","inY","widthRatio","inX","CumSumProgram","getCoords","idxString","getFinalCoord","getUniformLocation","DecodeMatrixProgram","outPackingScheme","$ba21f0eed4190ae92ffe9cb4b1d499$export$PackingScheme","DENSE","$ba21f0eed4190ae92ffe9cb4b1d499$export$getDenseTexShape","DecodeMatrixPackedProgram","DepthToSpaceProgram","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DiagProgram","EncodeFloatProgram","outTexUsage","$ba21f0eed4190ae92ffe9cb4b1d499$export$TextureUsage","DOWNLOAD","$eace77cf9ff32a364baad71133b0e90$export$ENCODE_FLOAT_SNIPPET","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","$eace77cf9ff32a364baad71133b0e90$export$getFlatIndexFrom3D","EncodeMatrixPackedProgram","COMPLEX_FFT","FFTProgram","exponentMultiplierSnippet","resultDenominator","FillProgram","valueLoc","GatherProgram","indicesLength","sourceCoords","currentCoords","getSourceCoords","GatherNDProgram","stridesType","strideString","createVertexShader","vertexShaderSource","vertexShader","VERTEX_SHADER","$ca7f8030d3527a972cfc28fc73fd2b$export$createVertexShader","createVertexBuffer","bufferData","STATIC_DRAW","$ca7f8030d3527a972cfc28fc73fd2b$export$createStaticVertexBuffer","createIndexBuffer","ELEMENT_ARRAY_BUFFER","$ca7f8030d3527a972cfc28fc73fd2b$export$createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","maxTextureSize","$ca7f8030d3527a972cfc28fc73fd2b$export$validateTextureSize","$ca7f8030d3527a972cfc28fc73fd2b$export$createTexture","tex2d","$ca7f8030d3527a972cfc28fc73fd2b$export$callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","getInternalFormatForFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","getInternalFormatForPackedMatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","gl2","downloadTarget","$ba21f0eed4190ae92ffe9cb4b1d499$export$getPackedRGBAArraySizeFromMatrixShape","PIXEL_PACK_BUFFER","getBufferSubData","GPGPUContext","outputTexture","disposed","vertexAttrsAreBound","itemsToPoll","glVersion","$c0be85cf0f3b1c448341169e44b53ba$export$setWebGLContext","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","$ca7f8030d3527a972cfc28fc73fd2b$export$getExtensionOrThrow","$ca7f8030d3527a972cfc28fc73fd2b$export$hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","$c060ef4ecd70e2c705a341b6d9e145$export$createVertexBuffer","indexBuffer","$c060ef4ecd70e2c705a341b6d9e145$export$createIndexBuffer","$ca7f8030d3527a972cfc28fc73fd2b$export$createFramebuffer","debug","finish","deleteBuffer","createFloat32MatrixTexture","$ba21f0eed4190ae92ffe9cb4b1d499$export$getUnpackedMatrixTextureShapeWidthHeight","$c060ef4ecd70e2c705a341b6d9e145$export$createFloat32MatrixTexture","createFloat16MatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","$c060ef4ecd70e2c705a341b6d9e145$export$createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","$c060ef4ecd70e2c705a341b6d9e145$export$uploadPixelDataToTexture","uploadDenseMatrixToTexture","dataForUpload","texelDataType","$c060ef4ecd70e2c705a341b6d9e145$export$uploadDenseMatrixToTexture","createFloat16PackedMatrixTexture","$ba21f0eed4190ae92ffe9cb4b1d499$export$getPackedMatrixTextureShapeWidthHeight","$c060ef4ecd70e2c705a341b6d9e145$export$createFloat16PackedMatrixTexture","createPackedMatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$createPackedMatrixTexture","deleteMatrixTexture","$ca7f8030d3527a972cfc28fc73fd2b$export$unbindColorTextureFromFramebuffer","downloadByteEncodedFloatMatrixFromOutputTexture","downloadMatrixDriver","readPixels","$c060ef4ecd70e2c705a341b6d9e145$export$downloadByteEncodedFloatMatrixFromOutputTexture","$c060ef4ecd70e2c705a341b6d9e145$export$downloadPackedMatrixFromBuffer","downloadFloat32MatrixFromBuffer","$c060ef4ecd70e2c705a341b6d9e145$export$downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","bufferSizeBytes","bytesPerFloat","STREAM_READ","$c060ef4ecd70e2c705a341b6d9e145$export$createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","packedRGBA","$c060ef4ecd70e2c705a341b6d9e145$export$downloadMatrixFromPackedOutputTexture","createProgram","$ca7f8030d3527a972cfc28fc73fd2b$export$createFragmentShader","$c060ef4ecd70e2c705a341b6d9e145$export$createVertexShader","$ca7f8030d3527a972cfc28fc73fd2b$export$createProgram","attachShader","linkProgram","LINK_STATUS","$ca7f8030d3527a972cfc28fc73fd2b$export$linkProgram","$ca7f8030d3527a972cfc28fc73fd2b$export$validateProgram","setProgram","$ca7f8030d3527a972cfc28fc73fd2b$export$bindVertexBufferToProgramAttribute","$c060ef4ecd70e2c705a341b6d9e145$export$bindVertexProgramAttributeStreams","deleteProgram","useProgram","uniformName","shouldThrow","$ca7f8030d3527a972cfc28fc73fd2b$export$getProgramUniformLocationOrThrow","$ca7f8030d3527a972cfc28fc73fd2b$export$getProgramUniformLocation","getAttributeLocation","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","uniformSamplerLocation","uniform1i","$ca7f8030d3527a972cfc28fc73fd2b$export$bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","startColumn","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","$ca7f8030d3527a972cfc28fc73fd2b$export$validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","$b6e32ac89c842575c3e2469b0f646$export$repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","pollItems","linearSearchLastTrue","isDoneFn","resolveFn","$ca7f8030d3527a972cfc28fc73fd2b$export$bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","validateBinaryAndProgram","shapeInfos","texShapeA","texShapeB","texData","Im2ColPackedProgram","itemsPerBlockRow","unrolled","LRNProgram","rad","powOperator","basis","LRNGradProgram","LRNPackedProgram","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","MatMulPackedProgram","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","MultinomialProgram","seedLoc","OneHotProgram","numIndices","PackProgram","outOfBoundsCondition","cond","getOutOfBoundsCondition","setup","getSetup","coord","getSourceCoordsArr","getOutput","PadProgram","unpackedCoords","PadPackedProgram","source","cLimit","componentSetup","paddingArea","Pool2DProgram","computePositions","isAvgPool","batchFlattenPositionStr","flattenPositionStr","initializationValue","compareOp","filterWidthNearestVec4","filterWidthVec4Remainder","updateSnippet","Pool3DProgram","ReduceProgram","reduceType","windowSizeNearestVec4","windowSizeVec4Remainder","vecType","ReshapePackedProgram","thisRC","ResizeBilinearBackpropProgram","ResizeBilinearProgram","effectiveInSize","effectiveOutSize","ResizeBilinearPackedProgram","ResizeNearestNeigborBackpropProgram","ResizeNearestNeighborProgram","roundBase","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextColumn","nextRow","getChannel","inCoordsArray","channels1","getR","getG","getB","getA","ScatterProgram","updateSize","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","SegmentOpProgram","segOpInfo","segOpType","checkValueOutOfBounds","checkSegmentIdOutOfBounds","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","SliceProgram","destSize","uniformPart","startLoc","uniform1iv","SlicePackedProgram","sourceLoc","upperRow","lowerRow","StridedSliceProgram","inputDtype","newCoords","outputAxis","TextureManager","numUsedTextures","numFreeTextures","_numBytesAllocated","_numBytesFree","freeTextures","logEnabled","usedTextures","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","getKeyFromTextureShape","texBytes","computeBytes","newTexture","$ba21f0eed4190ae92ffe9cb4b1d499$export$PhysicalTextureType","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","freeRatio","numBytesAllocated","numBytesFree","getNumUsedTextures","getNumFreeTextures","tex","$c060ef4ecd70e2c705a341b6d9e145$export$getInternalFormatForPackedMatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$getInternalFormatForFloat16PackedMatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$getInternalFormatForFloat32MatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$getInternalFormatForFloat16MatrixTexture","$c060ef4ecd70e2c705a341b6d9e145$export$getInternalFormatForUnsignedBytesMatrixTexture","internalFormatForPhysicalTexType","numElements","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","TileProgram","UnaryOpProgram","opSnippet","ABS","RELU","CHECK_NAN_SNIPPET","RELU6","NEG","CEIL","FLOOR","EXP","EXPM1","CLONE","UnaryOpPackedProgram","UnpackProgram","$da7ae6a30b64d8a8593ec759c4cc1b9$export$getSourceCoords","binaryCaches","mapActivationToShaderProgram","packed","$de40c82cf8c74159de791175b24e3e7$export$RELU","$c9f4792a9d883854c9990b137677c7e3$export$RELU","$de40c82cf8c74159de791175b24e3e7$export$ELU","$c9f4792a9d883854c9990b137677c7e3$export$ELU","$de40c82cf8c74159de791175b24e3e7$export$RELU6","$c9f4792a9d883854c9990b137677c7e3$export$RELU6","$dbfb29b5dc490d56a477c51afe8f27$export$PRELU","$a9a04167eae4a5283f4f7f5f8170a0f$export$PRELU","MathBackendWebGL","pendingRead","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","warnedAboutMemory","warnedAboutCPUBackend","pendingDeletes","binaryCache","$e472fa74441a6c00cdc1d08627a78bc$export$GPGPUContext","gpgpuCreatedLocally","textureManager","$fcfb50c980f8bdd66743e69bf82678b1$export$TextureManager","numMBBeforeWarning","devicePixelRatio","checkNumericalProblems","$de40c82cf8c74159de791175b24e3e7$export$UnaryOpPackedProgram","$c9f4792a9d883854c9990b137677c7e3$export$CLONE","$c9f4792a9d883854c9990b137677c7e3$export$UnaryOpProgram","runWebGLProgram","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","getValuesFromTexture","subscribers","tmpDownloadTarget","tmpData","dTypeVals","$ca7f8030d3527a972cfc28fc73fd2b$export$canBeRepresented","tmpTarget","shouldUsePackedProgram","$ca7f8030d3527a972cfc28fc73fd2b$export$getShapeAs3D","$d5b1ff52dee6869a66eacd7e7542b407$export$EncodeFloatPackedProgram","$f46d2edc06175a18ef69c0859ff$export$EncodeFloatProgram","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flattenedActiveTimerNames","$b6e32ac89c842575c3e2469b0f646$export$sum","ms","numBytesInGPUAllocated","numBytesInGPUFree","startTimer","startMs","endMs","endTimer","waitForQueryAndGetTime","timerQuery","releaseGPUData","origDataId","getTexture","uploadToGPU","getDataInfo","getCPUBackend","shouldExecuteOnCPU","sizeThreshold","getGPGPUContext","isContinous","$f7ae5608fde5876fdae036ad8$export$SlicePackedProgram","$fcb3bc412099e88746ebd1499157c89f$export$SliceProgram","customSetup","compileAndRun","shallowSlice","xTexData","newTexData","$a11cc74135f8cc83d46a4adcc9f1f16c$export$StridedSliceProgram","$c958e599bc28dd6daa9ba7d250997b6e$export$ReversePackedProgram","$a71c7392bac935578c4b899f6031e5c0$export$ReverseProgram","midIndex","leftSide","rightSide","$bf7337bbfb7fab583b4585c962ce9681$export$ConcatPackedProgram","$cd820e32b67b2e0d0c7332fba4bde70$export$ConcatProgram","packedUnaryOp","$c9f4792a9d883854c9990b137677c7e3$export$NEG","$dcfc87c952f6dc2da901276c43a6b063$export$MatMulPackedProgram","hasBias","fusedActivation","aData","bData","realProgram","$b40f0e44bd920ce37f23805f4e34957$export$BinaryOpComplexProgram","$b40f0e44bd920ce37f23805f4e34957$export$COMPLEX_MULTIPLY","imagProgram","makeComplexComponentTensorInfo","packedBinaryOp","$a9a04167eae4a5283f4f7f5f8170a0f$export$MUL","$a9a04167eae4a5283f4f7f5f8170a0f$export$BinaryOpProgram","batchNormPackedProgram","$f64e2c5e0eba6ad97ce3bfdb22ed$export$BatchNormPackedProgram","batchNormProgram","$ab9cd6c5e711727233de1488935823e9$export$BatchNormProgram","$cafaea78c156ce0c93a0851efcdae888$export$LRNPackedProgram","$fcf60cba2eaca1f9388ed172b732$export$LRNProgram","$e406e59cf538e45c3fb433c6a889a$export$LRNGradProgram","$ebf522ff6685c7a26646a85701235f$export$TileProgram","$a2fc72553fe9e800d726d0d84302a538$export$PadPackedProgram","$d9bdb3e90c49bd8002dc703db535a$export$PadProgram","$cbfa729e5bdf7859646d4e285f7513c$export$GatherProgram","$a42b4d54af3fe82dc58cea3a5ab783ee$export$computeOptimalWindowSize","$d18fb60ca8f9979ce5fa6cb$export$ReduceProgram","argReduce","bestIndicesA","$c7ecbfd97c16cc4933df9e3d845837ca$export$ArgMinMaxProgram","argReducePacked","$e24c1eb10f3b189f988cf347e881c$export$ArgMinMaxPackedProgram","a2D","$b9b1823907de33217e79f57004141$export$sumOutType","$d5ccbe8ddb88a364228755997ec8ee$export$computeOutShape","segOpCompute","$d5ccbe8ddb88a364228755997ec8ee$export$segOpComputeOptimalWindowSize","$b9f948b1549cecdd13136c9f02$export$SegmentOpProgram","argMinMaxReduce","$fcfa547e4c029d0fb649123d4a49$export$CumSumProgram","prevResult","$bf419b10fdb6c8c5391b99e662a92c0$export$SelectProgram","$dbfb29b5dc490d56a477c51afe8f27$export$BinaryOpPackedProgram","outputDtype","complexSeparableBinaryOp","$a9a04167eae4a5283f4f7f5f8170a0f$export$ADD","complexParts","aPart","bPart","aHandle","bHandle","complexTensor","complexPart","$a67972a71332598b41312ad9a3543c73$export$AddNPackedProgram","$b7ff17a0b3ef94ba9a37bcc392114cdb$export$AddNProgram","$a9a04167eae4a5283f4f7f5f8170a0f$export$SUB","$c9f4792a9d883854c9990b137677c7e3$export$CEIL","$c9f4792a9d883854c9990b137677c7e3$export$FLOOR","$c9f4792a9d883854c9990b137677c7e3$export$EXP","$c9f4792a9d883854c9990b137677c7e3$export$EXPM1","$eef1b0ff40a994ad86533c4a1d1d47e$export$ClipPackedProgram","$eeeac38c244fbd167e26042dcf6c9$export$ClipProgram","$c9f4792a9d883854c9990b137677c7e3$export$ABS","$eb7dd3d183df8d772ce6c90ca62$export$ComplexAbsProgram","$c9f4792a9d883854c9990b137677c7e3$export$STEP","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped","filterReshaped","originalXTexDataShape","$ca7f8030d3527a972cfc28fc73fd2b$export$isReshapeFree","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","$fb200fe86f8199bcc47e88519b7703e5$export$Im2ColPackedProgram","im2Col","matmulProgram","product","$e7062eaa56448d5d4807f1f208760$export$Conv2DProgram","$fbb2846e3ebc3cb49cbdffad805ed2bb$export$Conv2DDerInputProgram","$fbb2846e3ebc3cb49cbdffad805ed2bb$export$Conv2DDerFilterProgram","shouldPackDepthwiseConv","$ed0e7f2d0a7cda3801249b7ca07e2123$export$DepthwiseConvPacked2DProgram","$f18cc44f4be51718237869753612a7f4$export$DepthwiseConv2DProgram","$dd365d2ccd6a434bb96185533955b83c$export$DepthwiseConv2DDerInputProgram","$dd365d2ccd6a434bb96185533955b83c$export$DepthwiseConv2DDerFilterProgram","$e7062eaa56448d5d4807f1f208760$export$Conv3DProgram","$fbb2846e3ebc3cb49cbdffad805ed2bb$export$Conv3DDerInputProgram","$fbb2846e3ebc3cb49cbdffad805ed2bb$export$Conv3DDerFilterProgram","$e4adf479281ad9f006fdbadc19ad$export$Pool2DProgram","maxPoolPositionsProgram","maxPoolBackPropProgram","$c9e80077d814e17cc0857552141c1ab$export$MaxPool2DBackpropProgram","avgPoolBackpropProgram","$c190fc385d40bcb16ba312550e427d96$export$AvgPool2DBackpropProgram","$e4adf479281ad9f006fdbadc19ad$export$Pool3DProgram","avgPool3dBackpropProgram","$c190fc385d40bcb16ba312550e427d96$export$AvgPool3DBackpropProgram","maxPool3dPositionsProgram","maxPool3dBackPropProgram","$c9e80077d814e17cc0857552141c1ab$export$MaxPool3DBackpropProgram","packedReshape","$a8ea033f5ccd35b6155f9$export$reshapeTensor","$be3fc9cc0dc94f0bfbd8067221e1$export$ResizeBilinearPackedProgram","$fb26f45f84e817cdd519b6c17f0cdbf9$export$ResizeBilinearProgram","$cce5565fe7f002a1b6f14d27eeb806$export$ResizeBilinearBackpropProgram","$b569a7a8d181bbc4a30a02244082f9$export$ResizeNearestNeighborProgram","$cef10d297df1ec7eb7c28e31b041f$export$ResizeNearestNeigborBackpropProgram","probs","$aef1d88962a4b366dfdf1980f880b$export$MultinomialProgram","$cda9b97ecabfa14deff8b9103b391fb$export$OneHotProgram","$ad234d7aa03a7e1d82084b4d7b0de$export$DiagProgram","$cf3cdc9838cd13ca195e47e3f1623ed6$export$CropAndResizeProgram","$ace121a4e2fa2a7bbd31f28ccfe89ed$export$DepthToSpaceProgram","flattenIndices","flattenX","$cac5ec0ca91fe01bf3be37d59c0b89a$export$ScatterProgram","$e0a5b4cde1e36f52ad36d9de0abb0cb$export$FFTProgram","$e0a5b4cde1e36f52ad36d9de0abb0cb$export$COMPLEX_FFT","$dd730f01e02e285a5ed77eae4bfcf80$export$GatherNDProgram","$afbfffce53b945720d57407495a2ab1$export$FillProgram","makeTensorInfo","unpackTensor","$e5b57679103b49dc798ec6db6a370046$export$UnpackProgram","packTensor","$c7bb73f8545830581053ee60d28f$export$PackProgram","afterShape","input3DShape","$ca7f8030d3527a972cfc28fc73fd2b$export$getBatchDim","$ca7f8030d3527a972cfc28fc73fd2b$export$getRowsCols","input3D","afterShapeAs3D","$ee78c67f81b36ef937ca76b739e7108$export$ReshapePackedProgram","$b3486e4d49a8cd5be070829e6b95bf17$export$DecodeMatrixPackedProgram","$e10b5ac68d73935c1935578$export$DecodeMatrixProgram","preventEagerUnpackingOfOutput","outData","texelShape","dataToDispose","inputsData","uniformValues","savedInput","outputData","keyInputs","hasOffset","keyUserCode","$e7ac8acd87d40177adea5ccb0b8f9a1$export$makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","$f3da2598b48c2ddcb2e21b17cd48a4$export$makeShader","infLoc","nanLoc","uniformLocations","$e7ac8acd87d40177adea5ccb0b8f9a1$export$compileProgram","outTex","varLoc","varOffsetLoc","uniform1fv","$e7ac8acd87d40177adea5ccb0b8f9a1$export$runProgram","unpacked","outInfo","getBinary","getTextureManager","HTMLCanvasElement","remove","floatPrecisionValue","debugFlag","underflowCheckValue","logShape","maxTexSize","squeezeResult","$ca7f8030d3527a972cfc28fc73fd2b$export$getTextureShapeFromLogicalShape","isByteArray","$ebf5af1724a62c4ea66c73b2fed0530$export$EncodeMatrixPackedProgram","$bf99cdc573219dc9d3577eaddf31db49$export$EncodeMatrixProgram","tempDenseInputHandle","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","mb","$e46dc104ab30e576b4b816de85373bab$export$MathBackendWebGL","$a1d8bc1ec7492f3078c3353aeed076e3$export$divImpl","FlipLeftRightProgram","webglBackend","$df059babf9053febb5ed6ca60cad3a$export$FlipLeftRightProgram","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","tempPixelHandle","$f247479520fb92acf00d54316747c5d$export$FromPixelsPackedProgram","$baa44a280e80d3a5fd18396460da2792$export$FromPixelsProgram","reductionType","reductionStages","stages","getReductionStages","previousResult","TransposeProgram","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","$da7ae6a30b64d8a8593ec759c4cc1b9$export$getVecChannels","switchedOrder","getc","$a2b0b844ceb8c13ca906ef73f0a43004$export$TransposePackedProgram","$e764c6d843ebac41276e1b4d2df848$export$TransposeProgram","maxInputIsTransposed","maxInputValues","$ed7c6b57b258988c411ce87e5e432528$export$transposeImpl","outValues","reshapedInput","$e480c40407933cbb3b7f71f8b778bb$export$reshape","reduced","$f3e62ddaf7b6deef62536c3792fecdce$export$reduce","$aeefacb7ed56d45950ded264e3e46f6$export$maxImpl","poolOutput","$a67dd092cde288eb24d54320c459052$export$maxPoolWithArgmaxImpl","nonMaxSuppressionV3Config","gpuBackend","RotateProgram","centerXString","centerYString","fillSnippet","$b27c86924fad683106f7beb15e88b9$export$maxConfig","$af4b3e4ab55bff0c423dfa8216055f07$export$flipLeftRightConfig","$a7dc21d38f8fc55e92766f73d$export$fromPixelsConfig","$a6079234f21e6a2d6ece76eac6f174ae$export$divConfig","$ec495e7c11093fed97596d30248c165d$export$maxPoolWithArgmaxConfig","$f868d908bb52f03b58da84a5de0db$export$nonMaxSuppressionV3Config","$e08a67636081b596e4bc4933895d3a1a$export$nonMaxSuppressionV4Config","$d0c531250ddef33c922a033dc6d1$export$nonMaxSuppressionV5Config","$a58bfbf4a0e284b743be61b7583c43d$export$RotateProgram","SQUARED_DIFFERENCE","webGLBackend","_g","arrfn","_b","_x"],"version":3,"file":"index.ee528b11.js.map"}