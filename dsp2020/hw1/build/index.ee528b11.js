!function(){var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const e="tfjsflags";class n{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}(this.global.location.search);if(e in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}}function r(){return s}let s=null;var a,i,o={},l=o={};function u(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function h(t){if(a===setTimeout)return setTimeout(t,0);if((a===u||!a)&&setTimeout)return a=setTimeout,setTimeout(t,0);try{return a(t,0)}catch(e){try{return a.call(null,t,0)}catch(e){return a.call(this,t,0)}}}!function(){try{a="function"==typeof setTimeout?setTimeout:u}catch(t){a=u}try{i="function"==typeof clearTimeout?clearTimeout:c}catch(t){i=c}}();var p,d=[],f=!1,m=-1;function g(){f&&p&&(f=!1,p.length?d=p.concat(d):m=-1,d.length&&y())}function y(){if(!f){var t=h(g);f=!0;for(var e=d.length;e;){for(p=d,d=[];++m<e;)p&&p[m].run();m=-1,e=d.length}p=null,f=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===c||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function b(t,e){this.fun=t,this.array=e}function x(){}let w;function v(){if(null==w){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==o)e=o;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}w=e}return w}function C(t,e){const n=function(){const t=v();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new b(t,e)),1!==d.length||f||h(y)},b.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=x,l.addListener=x,l.once=x,l.off=x,l.removeListener=x,l.removeAllListeners=x,l.emit=x,l.prependListener=x,l.prependOnceListener=x,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0};const N="Acos",k="Acosh",I="Add",S="AddN",E="ArgMax",$="ArgMin",R="Asin",A="Asinh",T="Atan",D="Atanh",F="Atan2",_="AvgPool",O="AvgPool3D",M="BatchMatMul",L="BatchToSpaceND",z="BroadcastTo",B="Cast",P="Ceil",W="ClipByValue",U="Concat",V="Conv2D",G="Conv2DBackpropInput",H="Conv3D",j="Cos",q="Cosh",K="Cumsum",X="DepthwiseConv2dNative",Y="Dilation2D",J="Dilation2DBackpropInput",Z="Dilation2DBackpropFilter",Q="Div",tt="Expm1",et="FlipLeftRight",nt="Floor",rt="FloorDiv",st="FusedBatchNorm",at="GatherV2",it="GreaterEqual",ot="Identity",lt="IsFinite",ut="IsInf",ct="IsNan",ht="Log1p",pt="LogSoftmax",dt="Max",ft="Maximum",mt="MaxPool",gt="MaxPool3D",yt="MaxPoolWithArgmax",bt="Minimum",xt="Multiply",wt="Negate",vt="NonMaxSuppressionV3",Ct="NonMaxSuppressionV4",Nt="NonMaxSuppressionV5",kt="OnesLike",It="OneHot",St="PadV2",Et="Prelu",$t="Reciprocal",Rt="Relu",At="Reshape",Tt="ResizeNearestNeighbor",Dt="ResizeBilinear",Ft="Relu6",_t="Reverse",Ot="Round",Mt="Rsqrt",Lt="SelectV2",zt="Selu",Bt="Slice",Pt="Sinh",Wt="Sign",Ut="Sigmoid",Vt="Softplus",Gt="Sqrt",Ht="SpaceToBatchND",jt="SplitV",qt="Softmax",Kt="SquaredDifference",Xt="Square",Yt="Tanh",Jt="Tile",Zt="Transpose",Qt="Unpack",te="UnsortedSegmentSum",ee="ZerosLike",ne="Step",re="FromPixels",se="RotateWithOffset",ae="_FusedMatMul",ie="FusedConv2D",oe="FusedDepthwiseConv2D",le=C("kernelRegistry",(()=>new Map)),ue=C("gradRegistry",(()=>new Map));function ce(t,e){const n=me(t,e);return le.get(n)}function he(t){return ue.get(t)}function pe(t){const e=le.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function de(t){const{kernelName:e,backendName:n}=t,r=me(e,n);le.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),le.set(r,t)}function fe(t){const{kernelName:e}=t;ue.has(e)&&r().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),ue.set(e,t)}function me(t,e){return`${e}_${t}`}function ge(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function ye(t,e,n){return Math.max(t,Math.min(e,n))}function be(t){return t%2==0?t:t+1}function xe(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function we(t,e,n=""){xe(ke(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function ve(t){xe(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function Ce(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||_e(t)&&!n)for(let r=0;r<t.length;++r)Ce(t[r],e,n);else e.push(t);return e}function Ne(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function ke(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function Ie(t){return t%1==0}function Se(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function Ee(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function $e(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function Re(t,e=(t=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function Ae(t,e){const n=e.length;return xe((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t)),xe(t.every((t=>Ie(t))),(()=>"All values in axis param must be integers but got axis "+t)),t.map((t=>t<0?n+t:t))}function Te(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:Ae(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function De(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function Fe(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function _e(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function Oe(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function Me(t){return"string"==typeof t||t instanceof String}function Le(t){return"number"==typeof t}function ze(t){return Array.isArray(t)?ze(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":Le(t)?"float32":Me(t)?"string":"boolean"==typeof t?"bool":"float32"}function Be(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Pe(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function We(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Ue(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=Ce(t)),r().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function Ve(t,e,n){const r=new Array;if(1===e.length){const s=e[0];for(let e=0;e<s;e++)r[e]=n[t+e]}else{const s=e[0],a=e.slice(1),i=a.reduce(((t,e)=>t*e));for(let e=0;e<s;e++)r[e]=Ve(t+e*i,a,n)}return r}function Ge(t,e){if(0===t.length)return e[0];const n=t.reduce(((t,e)=>t*e));if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return Ve(0,t,e)}function He(t,e){const n=je(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function je(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function qe(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||"float32"===e)return Ge(t,new Float32Array(n));if("int32"===e)return Ge(t,new Int32Array(n));if("bool"===e)return Ge(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function Ke(){return r().platform.now()}function Xe(t){t.forEach((e=>{xe(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function Ye(t,e="utf-8"){return e=e||"utf-8",r().platform.decode(t,e)}function Je(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function Ze(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}class Qe{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new en)}profileKernel(t,e,n){let r;const s=this.backendTimer.time((()=>{r=n()}));for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{tn(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:s.then((t=>t.kernelMs)),extraInfo:s.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach((t=>{Promise.all([t.data(),r,a]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function tn(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class en{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?$e(r+"ms",9):r.error,o=$e(t,25),l=e.rank,u=e.size,c=$e(e.shape.toString(),14);let h="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function nn(t,e,n,r){const s=We(e),a=function(t,e,n,r){const s=Ne(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?on(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],rn(l[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=an(t,e,n,s,a),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map((t=>"    "+t)).join("\n")),l.join("\n")}function rn(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Me(t)?`'${t}'`:"bool"===n?sn(t):parseFloat(t.toFixed(7)).toString(),$e(r,e)}function sn(t){return 0===t?"false":"true"}function an(t,e,n,r,s,a=!0){const i="complex64"===n?2:1,o=e[0],l=e.length;if(0===l){if("complex64"===n){return[rn(on(t)[0],0,n)]}return"bool"===n?[sn(t[0])]:[t[0].toString()]}if(1===l){if(o>20){const e=3*i;let r=Array.from(t.slice(0,e)),a=Array.from(t.slice((o-3)*i,o*i));return"complex64"===n&&(r=on(r),a=on(a)),["["+r.map(((t,e)=>rn(t,s[e],n))).join(", ")+", ..., "+a.map(((t,e)=>rn(t,s[o-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?on(t):Array.from(t)).map(((t,e)=>rn(t,s[e],n))).join(", ")+"]"]}const u=e.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let e=0;e<3;e++){const r=e*h,a=r+h;p.push(...an(t.slice(r,a),u,n,c,s,!1))}p.push("...");for(let e=o-3;e<o;e++){const r=e*h,a=r+h;p.push(...an(t.slice(r,a),u,n,c,s,e===o-1))}}else for(let e=0;e<o;e++){const r=e*h,a=r+h;p.push(...an(t.slice(r,a),u,n,c,s,e===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let t=1;t<p.length-1;t++)p[t]=" "+p[t]+d;let f=",\n";for(let t=2;t<l;t++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function on(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class ln{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=Ne(t),null!=n){const t=n.length;xe(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Fe(e,this.size),this.strides=We(t)}set(t,...e){0===e.length&&(e=[0]),xe(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return un().makeTensor(this.values,this.shape,this.dtype)}}let un=null,cn=null,hn=null;class pn{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Ne(t),this.strides=We(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return cn.buffer(this.shape,this.dtype,t)}bufferSync(){return cn.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Ge(this.shape,t)}arraySync(){return Ge(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=un().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>Ye(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=un().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>Ye(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await un().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(un().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return cn.print(this,t)}clone(){return this.throwIfDisposed(),cn.clone(this)}toString(t=!1){return nn(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),cn.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),un().makeVariable(this,t,e,n)}}Object.defineProperty(pn,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class dn extends pn{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ke(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);un().disposeTensor(this),this.dataId=t.dataId,un().incRef(this,null)}dispose(){un().disposeVariable(this),this.isDisposedInternal=!0}}var fn,mn,gn,yn,bn,xn,wn,vn,Cn,Nn;Object.defineProperty(dn,Symbol.hasInstance,{value:t=>t instanceof pn&&null!=t.assign&&t.assign instanceof Function}),(mn=fn||(fn={})).R0="R0",mn.R1="R1",mn.R2="R2",mn.R3="R3",mn.R4="R4",mn.R5="R5",mn.R6="R6",(yn=gn||(gn={})).float32="float32",yn.int32="int32",yn.bool="int32",yn.complex64="complex64",(xn=bn||(bn={})).float32="float32",xn.int32="int32",xn.bool="bool",xn.complex64="complex64",(vn=wn||(wn={})).float32="float32",vn.int32="float32",vn.bool="float32",vn.complex64="complex64",(Nn=Cn||(Cn={})).float32="complex64",Nn.int32="complex64",Nn.bool="complex64",Nn.complex64="complex64";const kn={float32:wn,int32:gn,bool:bn,complex64:Cn};function In(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return kn[t][e]}function Sn(t){return In(t,"int32")}function En(t,e){if(t.dtype===e.dtype)return[t,e];const n=In(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function $n(t,e){return e.some((e=>e.id===t.id))}function Rn(t){const e=[];return An(t,e,new Set),e}function An(t,e,n){if(null==t)return;if(t instanceof pn)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),An(r,e,n))}}class Tn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Dn{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Tn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Qe(this.backendInstance),!0}setupRegisteredKernels(){pe(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){pe(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Dn.nextTensorId++}nextVariableId(){return Dn.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e="float32",n={x:t},r={dtype:e};return _n.runKernelFunc((n=>n.cast(t,e)),n,null,B,r)}})),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,l=[];const u=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=ce(r,this.backendName);let f,m;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map((({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n)));if(u){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter(((t,e)=>i[e]));t=(a||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{u&&(l=t.map((t=>this.keep(this.clone(t)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>t(this.backend,e)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,e,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),u&&this.addTapeNode(r,e,o,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((t=>null!=e[t]?e[t].shape:null)),outputShapes:o.map((t=>t.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=he(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(xe(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(e).map((t=>e[t]))):a=t.map((t=>e[t]));const i=n.filter(((t,e)=>s[e]));return a.concat(i)}return null}makeTensor(t,e,n,s){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=t;"string"===n&&Me(t[0])&&(a=t.map((t=>function(t,e="utf-8"){return e=e||"utf-8",r().platform.encode(t,e)}(t))));const i=s.write(a,e,n),o=new pn(e,n,i,this.nextTensorId());if(this.incRef(o,s),"string"===n){const t=this.state.tensorInfo.get(i),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(a);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,r){const s=new pn(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new dn(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*Oe(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof dn||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=he(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=je(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Rn(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(xe(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));xe(s instanceof pn,(()=>"The result y returned by f() must be a tensor."));const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach((t=>r[t.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=He(Ne(t),"float32");return _n.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach((e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[e];if(!ke(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=s;else{const e=t[i.id];t[i.id]=r(e,s),e.dispose()}}}}(t,a,(t=>this.tidy(t)),On);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return xe(Be(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;xe(e.every((t=>t instanceof pn)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return e.forEach(((t,e)=>{r[e]=t})),this.runKernelFunc(((r,s)=>(n=t(...e,s),xe(n.value instanceof pn,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),xe(Be(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];xe(a.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),xe(a.every((t=>t instanceof pn)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((t,e)=>{i[e]=()=>t})),i}))}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Ke(),n=await this.backend.time(t);return n.wallMs=Ke()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Tn;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Fn(){const t=v();if(null==t._tfengine){const e=new n(t);t._tfengine=new Dn(e)}var e;return e=t._tfengine.ENV,s=e,un=()=>t._tfengine,t._tfengine}Dn.nextTensorId=0,Dn.nextVariableId=0;const _n=Fn();function On(t,e){const n={a:t,b:e};return _n.runKernelFunc(((n,r)=>{const s=n.add(t,e);return r([t,e]),s}),n,null,I)}function Mn(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ln(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const zn=r();zn.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),zn.registerFlag("IS_BROWSER",(()=>Ln())),zn.registerFlag("IS_NODE",(()=>void 0!==o&&void 0!==o.versions&&void 0!==o.versions.node)),zn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),zn.registerFlag("PROD",(()=>!1)),zn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>zn.getBool("DEBUG"))),zn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),zn.registerFlag("IS_TEST",(()=>!1));for(var Bn=function(t){var e,n,r=function(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");-1===n&&(n=e);return[n,n===e?0:4-n%4]}(t),s=r[0],a=r[1],i=new Vn(function(t,e,n){return 3*(e+n)/4-n}(0,s,a)),o=0,l=a>0?s-4:s;for(n=0;n<l;n+=4)e=Un[t.charCodeAt(n)]<<18|Un[t.charCodeAt(n+1)]<<12|Un[t.charCodeAt(n+2)]<<6|Un[t.charCodeAt(n+3)],i[o++]=e>>16&255,i[o++]=e>>8&255,i[o++]=255&e;2===a&&(e=Un[t.charCodeAt(n)]<<2|Un[t.charCodeAt(n+1)]>>4,i[o++]=255&e);1===a&&(e=Un[t.charCodeAt(n)]<<10|Un[t.charCodeAt(n+1)]<<4|Un[t.charCodeAt(n+2)]>>2,i[o++]=e>>8&255,i[o++]=255&e);return i},Pn=function(t){for(var e,n=t.length,r=n%3,s=[],a=16383,i=0,o=n-r;i<o;i+=a)s.push(qn(t,i,i+a>o?o:i+a));1===r?(e=t[n-1],s.push(Wn[e>>2]+Wn[e<<4&63]+"==")):2===r&&(e=(t[n-2]<<8)+t[n-1],s.push(Wn[e>>10]+Wn[e>>4&63]+Wn[e<<2&63]+"="));return s.join("")},Wn=[],Un=[],Vn="undefined"!=typeof Uint8Array?Uint8Array:Array,Gn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Hn=0,jn=Gn.length;Hn<jn;++Hn)Wn[Hn]=Gn[Hn],Un[Gn.charCodeAt(Hn)]=Hn;function qn(t,e,n){for(var r,s,a=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),a.push(Wn[(s=r)>>18&63]+Wn[s>>12&63]+Wn[s>>6&63]+Wn[63&s]);return a.join("")}Un["-".charCodeAt(0)]=62,Un["_".charCodeAt(0)]=63;var Kn=function(t,e,n,r,s){var a,i,o=8*s-r-1,l=(1<<o)-1,u=l>>1,c=-7,h=n?s-1:0,p=n?-1:1,d=t[e+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+t[e+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+t[e+h],h+=p,c-=8);if(0===a)a=1-u;else{if(a===l)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),a-=u}return(d?-1:1)*i*Math.pow(2,a-r)},Xn=function(t,e,n,r,s,a){var i,o,l,u=8*a-s-1,c=(1<<u)-1,h=c>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,i=c):(i=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-i))<1&&(i--,l*=2),(e+=i+h>=1?p/l:p*Math.pow(2,1-h))*l>=2&&(i++,l/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(e*l-1)*Math.pow(2,s),i+=h):(o=e*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;t[n+d]=255&o,d+=f,o/=256,s-=8);for(i=i<<s|o,u+=s;u>0;t[n+d]=255&i,d+=f,i/=256,u-=8);t[n+d-f]|=128*m},Yn="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null,Jn=tr,Zn=2147483647;function Qn(t){if(t>Zn)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,tr.prototype),e}function tr(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return rr(t)}return er(t,e,n)}function er(t,e,n){if("string"==typeof t)return function(t,e){"string"==typeof e&&""!==e||(e="utf8");if(!tr.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var n=0|or(t,e),r=Qn(n),s=r.write(t,e);s!==n&&(r=r.slice(0,s));return r}(t,e);if(ArrayBuffer.isView(t))return sr(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(_r(t,ArrayBuffer)||t&&_r(t.buffer,ArrayBuffer))return ar(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(_r(t,SharedArrayBuffer)||t&&_r(t.buffer,SharedArrayBuffer)))return ar(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return tr.from(r,e,n);var s=function(t){if(tr.isBuffer(t)){var e=0|ir(t.length),n=Qn(e);return 0===n.length||t.copy(n,0,0,e),n}if(void 0!==t.length)return"number"!=typeof t.length||Or(t.length)?Qn(0):sr(t);if("Buffer"===t.type&&Array.isArray(t.data))return sr(t.data)}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return tr.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function nr(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function rr(t){return nr(t),Qn(t<0?0:0|ir(t))}function sr(t){for(var e=t.length<0?0:0|ir(t.length),n=Qn(e),r=0;r<e;r+=1)n[r]=255&t[r];return n}function ar(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,tr.prototype),r}function ir(t){if(t>=Zn)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Zn.toString(16)+" bytes");return 0|t}function or(t,e){if(tr.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||_r(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;for(var s=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Tr(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Dr(t).length;default:if(s)return r?-1:Tr(t).length;e=(""+e).toLowerCase(),s=!0}}function lr(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return Nr(this,e,n);case"utf8":case"utf-8":return xr(this,e,n);case"ascii":return vr(this,e,n);case"latin1":case"binary":return Cr(this,e,n);case"base64":return br(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return kr(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function ur(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function cr(t,e,n,r,s){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Or(n=+n)&&(n=s?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(s)return-1;n=t.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof e&&(e=tr.from(e,r)),tr.isBuffer(e))return 0===e.length?-1:hr(t,e,n,r,s);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):hr(t,[e],n,r,s);throw new TypeError("val must be string, number or Buffer")}function hr(t,e,n,r,s){var a,i=1,o=t.length,l=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;i=2,o/=2,l/=2,n/=2}function u(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(s){var c=-1;for(a=n;a<o;a++)if(u(t,a)===u(e,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===l)return c*i}else-1!==c&&(a-=a-c),c=-1}else for(n+l>o&&(n=o-l),a=n;a>=0;a--){for(var h=!0,p=0;p<l;p++)if(u(t,a+p)!==u(e,p)){h=!1;break}if(h)return a}return-1}function pr(t,e,n,r){n=Number(n)||0;var s=t.length-n;r?(r=Number(r))>s&&(r=s):r=s;var a=e.length;r>a/2&&(r=a/2);for(var i=0;i<r;++i){var o=parseInt(e.substr(2*i,2),16);if(Or(o))return i;t[n+i]=o}return i}function dr(t,e,n,r){return Fr(Tr(e,t.length-n),t,n,r)}function fr(t,e,n,r){return Fr(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function mr(t,e,n,r){return fr(t,e,n,r)}function gr(t,e,n,r){return Fr(Dr(e),t,n,r)}function yr(t,e,n,r){return Fr(function(t,e){for(var n,r,s,a=[],i=0;i<t.length&&!((e-=2)<0);++i)r=(n=t.charCodeAt(i))>>8,s=n%256,a.push(s),a.push(r);return a}(e,t.length-n),t,n,r)}function br(t,e,n){return 0===e&&n===t.length?Pn(t):Pn(t.slice(e,n))}function xr(t,e,n){n=Math.min(t.length,n);for(var r=[],s=e;s<n;){var a,i,o,l,u=t[s],c=null,h=u>239?4:u>223?3:u>191?2:1;if(s+h<=n)switch(h){case 1:u<128&&(c=u);break;case 2:128==(192&(a=t[s+1]))&&(l=(31&u)<<6|63&a)>127&&(c=l);break;case 3:a=t[s+1],i=t[s+2],128==(192&a)&&128==(192&i)&&(l=(15&u)<<12|(63&a)<<6|63&i)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:a=t[s+1],i=t[s+2],o=t[s+3],128==(192&a)&&128==(192&i)&&128==(192&o)&&(l=(15&u)<<18|(63&a)<<12|(63&i)<<6|63&o)>65535&&l<1114112&&(c=l)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),s+=h}return function(t){var e=t.length;if(e<=wr)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=wr));return n}(r)}tr.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),tr.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(tr.prototype,"parent",{enumerable:!0,get:function(){if(tr.isBuffer(this))return this.buffer}}),Object.defineProperty(tr.prototype,"offset",{enumerable:!0,get:function(){if(tr.isBuffer(this))return this.byteOffset}}),tr.poolSize=8192,tr.from=function(t,e,n){return er(t,e,n)},Object.setPrototypeOf(tr.prototype,Uint8Array.prototype),Object.setPrototypeOf(tr,Uint8Array),tr.alloc=function(t,e,n){return function(t,e,n){return nr(t),t<=0?Qn(t):void 0!==e?"string"==typeof n?Qn(t).fill(e,n):Qn(t).fill(e):Qn(t)}(t,e,n)},tr.allocUnsafe=function(t){return rr(t)},tr.allocUnsafeSlow=function(t){return rr(t)},tr.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==tr.prototype},tr.compare=function(t,e){if(_r(t,Uint8Array)&&(t=tr.from(t,t.offset,t.byteLength)),_r(e,Uint8Array)&&(e=tr.from(e,e.offset,e.byteLength)),!tr.isBuffer(t)||!tr.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var n=t.length,r=e.length,s=0,a=Math.min(n,r);s<a;++s)if(t[s]!==e[s]){n=t[s],r=e[s];break}return n<r?-1:r<n?1:0},tr.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},tr.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return tr.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=tr.allocUnsafe(e),s=0;for(n=0;n<t.length;++n){var a=t[n];if(_r(a,Uint8Array)&&(a=tr.from(a)),!tr.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,s),s+=a.length}return r},tr.byteLength=or,tr.prototype._isBuffer=!0,tr.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)ur(this,e,e+1);return this},tr.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)ur(this,e,e+3),ur(this,e+1,e+2);return this},tr.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)ur(this,e,e+7),ur(this,e+1,e+6),ur(this,e+2,e+5),ur(this,e+3,e+4);return this},tr.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?xr(this,0,t):lr.apply(this,arguments)},tr.prototype.toLocaleString=tr.prototype.toString,tr.prototype.equals=function(t){if(!tr.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===tr.compare(this,t)},tr.prototype.inspect=function(){var t="";return t=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(t+=" ... "),"<Buffer "+t+">"},Yn&&(tr.prototype[Yn]=tr.prototype.inspect),tr.prototype.compare=function(t,e,n,r,s){if(_r(t,Uint8Array)&&(t=tr.from(t,t.offset,t.byteLength)),!tr.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),e<0||n>t.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&e>=n)return 0;if(r>=s)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(e>>>=0),o=Math.min(a,i),l=this.slice(r,s),u=t.slice(e,n),c=0;c<o;++c)if(l[c]!==u[c]){a=l[c],i=u[c];break}return a<i?-1:i<a?1:0},tr.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},tr.prototype.indexOf=function(t,e,n){return cr(this,t,e,n,!0)},tr.prototype.lastIndexOf=function(t,e,n){return cr(this,t,e,n,!1)},tr.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-e;if((void 0===n||n>s)&&(n=s),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return pr(this,t,e,n);case"utf8":case"utf-8":return dr(this,t,e,n);case"ascii":return fr(this,t,e,n);case"latin1":case"binary":return mr(this,t,e,n);case"base64":return gr(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return yr(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},tr.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var wr=4096;function vr(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(127&t[s]);return r}function Cr(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(t[s]);return r}function Nr(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var s="",a=e;a<n;++a)s+=Mr[t[a]];return s}function kr(t,e,n){for(var r=t.slice(e,n),s="",a=0;a<r.length;a+=2)s+=String.fromCharCode(r[a]+256*r[a+1]);return s}function Ir(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function Sr(t,e,n,r,s,a){if(!tr.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function Er(t,e,n,r,s,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function $r(t,e,n,r,s){return e=+e,n>>>=0,s||Er(t,0,n,4),Xn(t,e,n,r,23,4),n+4}function Rr(t,e,n,r,s){return e=+e,n>>>=0,s||Er(t,0,n,8),Xn(t,e,n,r,52,8),n+8}tr.prototype.slice=function(t,e){var n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);var r=this.subarray(t,e);return Object.setPrototypeOf(r,tr.prototype),r},tr.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||Ir(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r},tr.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||Ir(t,e,this.length);for(var r=this[t+--e],s=1;e>0&&(s*=256);)r+=this[t+--e]*s;return r},tr.prototype.readUInt8=function(t,e){return t>>>=0,e||Ir(t,1,this.length),this[t]},tr.prototype.readUInt16LE=function(t,e){return t>>>=0,e||Ir(t,2,this.length),this[t]|this[t+1]<<8},tr.prototype.readUInt16BE=function(t,e){return t>>>=0,e||Ir(t,2,this.length),this[t]<<8|this[t+1]},tr.prototype.readUInt32LE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},tr.prototype.readUInt32BE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},tr.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||Ir(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*e)),r},tr.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||Ir(t,e,this.length);for(var r=e,s=1,a=this[t+--r];r>0&&(s*=256);)a+=this[t+--r]*s;return a>=(s*=128)&&(a-=Math.pow(2,8*e)),a},tr.prototype.readInt8=function(t,e){return t>>>=0,e||Ir(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},tr.prototype.readInt16LE=function(t,e){t>>>=0,e||Ir(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},tr.prototype.readInt16BE=function(t,e){t>>>=0,e||Ir(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},tr.prototype.readInt32LE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},tr.prototype.readInt32BE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},tr.prototype.readFloatLE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),Kn(this,t,!0,23,4)},tr.prototype.readFloatBE=function(t,e){return t>>>=0,e||Ir(t,4,this.length),Kn(this,t,!1,23,4)},tr.prototype.readDoubleLE=function(t,e){return t>>>=0,e||Ir(t,8,this.length),Kn(this,t,!0,52,8)},tr.prototype.readDoubleBE=function(t,e){return t>>>=0,e||Ir(t,8,this.length),Kn(this,t,!1,52,8)},tr.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e>>>=0,n>>>=0,r)||Sr(this,t,e,n,Math.pow(2,8*n)-1,0);var s=1,a=0;for(this[e]=255&t;++a<n&&(s*=256);)this[e+a]=t/s&255;return e+n},tr.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e>>>=0,n>>>=0,r)||Sr(this,t,e,n,Math.pow(2,8*n)-1,0);var s=n-1,a=1;for(this[e+s]=255&t;--s>=0&&(a*=256);)this[e+s]=t/a&255;return e+n},tr.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,1,255,0),this[e]=255&t,e+1},tr.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},tr.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},tr.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},tr.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},tr.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){var s=Math.pow(2,8*n-1);Sr(this,t,e,n,s-1,-s)}var a=0,i=1,o=0;for(this[e]=255&t;++a<n&&(i*=256);)t<0&&0===o&&0!==this[e+a-1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},tr.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){var s=Math.pow(2,8*n-1);Sr(this,t,e,n,s-1,-s)}var a=n-1,i=1,o=0;for(this[e+a]=255&t;--a>=0&&(i*=256);)t<0&&0===o&&0!==this[e+a+1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},tr.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},tr.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},tr.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},tr.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},tr.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||Sr(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},tr.prototype.writeFloatLE=function(t,e,n){return $r(this,t,e,!0,n)},tr.prototype.writeFloatBE=function(t,e,n){return $r(this,t,e,!1,n)},tr.prototype.writeDoubleLE=function(t,e,n){return Rr(this,t,e,!0,n)},tr.prototype.writeDoubleBE=function(t,e,n){return Rr(this,t,e,!1,n)},tr.prototype.copy=function(t,e,n,r){if(!tr.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var s=r-n;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(e,n,r);else if(this===t&&n<e&&e<r)for(var a=s-1;a>=0;--a)t[a+e]=this[a+n];else Uint8Array.prototype.set.call(t,this.subarray(n,r),e);return s},tr.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!tr.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){var s=t.charCodeAt(0);("utf8"===r&&s<128||"latin1"===r)&&(t=s)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var i=tr.isBuffer(t)?t:tr.from(t,r),o=i.length;if(0===o)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(a=0;a<n-e;++a)this[a+e]=i[a%o]}return this};var Ar=/[^+/0-9A-Za-z-_]/g;function Tr(t,e){var n;e=e||1/0;for(var r=t.length,s=null,a=[],i=0;i<r;++i){if((n=t.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(e-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(e-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Dr(t){return Bn(function(t){if((t=(t=t.split("=")[0]).trim().replace(Ar,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Fr(t,e,n,r){for(var s=0;s<r&&!(s+n>=e.length||s>=t.length);++s)e[s+n]=t[s];return s}function _r(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function Or(t){return t!=t}var Mr=function(){for(var t="0123456789abcdef",e=new Array(256),n=0;n<16;++n)for(var r=16*n,s=0;s<16;++s)e[r+s]=t[n]+t[s];return e}();function Lr(t,e){let n=t;if(_e(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(n)||_e(n)&&"string"!==e;)s.push(n.length),n=n[0];return Array.isArray(t)&&r().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&zr(t,s,[]),s}function zr(t,e,n){if(n=n||[],!Array.isArray(t)&&!_e(t))return void xe(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));xe(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),xe(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)zr(t[e],r,n.concat(e))}function Br(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Pr(t,e,n,r="numeric"){if(t instanceof pn)return Br(r,t.dtype,e,n),t;let s=ze(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Br(r,s,e,n),null==t||!_e(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Lr(t,s);_e(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?Ue(t,s):Ce(t,[],!0);return _n.makeTensor(i,a,s)}function Wr(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,r)=>Pr(t,`${e}[${r}]`,n)),r)}function Ur(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{_n.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),_n.endScope(e),e}catch(t){throw _n.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Vr=Ur({complex_:function(t,e){const n=Pr(t,"real","complex"),r=Pr(e,"imag","complex");we(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return _n.runKernelFunc((t=>t.complex(n,r)),s,null,"Complex")}});function Gr(t,e,n,r){if(null==r&&(r=ze(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!_e(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Xe(e);const t=Ne(e),r=Ne(n);xe(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==Ne(e.slice(t));xe(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return _e(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Ue(t,r):Ce(t,[],!0),_n.makeTensor(t,e,r)}function Hr(t,e,n){return Gr(t,e,Lr(t,n),n)}var jr=Jn;async function qr(t,e){const n=[],r=[],s=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise((async t=>{const e=await o.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)}));r.push(t)}else r.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Kr(await Promise.all(r)),specs:n}}function Kr(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));const r=new Uint8Array(e);let s=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength})),r.buffer}const Xr=void 0!==jr&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Yr(t){return Xr?jr.byteLength(t):new Blob([t]).size}function Jr(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let r=0;return t.forEach((t=>{n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Zr(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Yr(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Yr(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}class Qr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Qr.instance&&(Qr.instance=new Qr),Qr.instance}static registerSaveRouter(t){Qr.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Qr.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Qr.getHandlers(t,"save")}static getLoadHandlers(t,e){return Qr.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Qr.getInstance().loadRouters:Qr.getInstance().saveRouters).forEach((e=>{const s=e(t,n);null!==s&&r.push(s)})),r}}const ts=t=>Qr.getSaveHandlers(t),es="tensorflowjs",ns="models_store",rs="model_info_store";function ss(){if(!r().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function as(t){const e=t.result;e.createObjectStore(ns,{keyPath:"modelPath"}),e.createObjectStore(rs,{keyPath:"modelPath"})}class is{constructor(t){if(this.indexedDB=ss(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(es,1);r.onupgradeneeded=()=>as(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(ns,"readonly"),r=e.objectStore(ns).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Zr(e),a=s.transaction(rs,"readwrite");let i=a.objectStore(rs);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction(ns,"readwrite");const o=l.objectStore(ns).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore(rs);const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)}))}}is.URL_SCHEME="indexeddb://";const os=t=>{return r().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(is.URL_SCHEME)?(e=t.slice(is.URL_SCHEME.length),new is(e)):null;var e};Qr.registerSaveRouter(os),Qr.registerLoadRouter(os);class ls{constructor(){this.indexedDB=ss()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(es,1);n.onupgradeneeded=()=>as(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(rs,"readonly"),a=s.objectStore(rs).getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(is.URL_SCHEME)?e.slice(is.URL_SCHEME.length):e,new Promise(((e,n)=>{const r=this.indexedDB.open(es,1);r.onupgradeneeded=()=>as(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(rs,"readwrite"),i=a.objectStore(rs),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{l=s.transaction(ns,"readwrite");const r=l.objectStore(ns).delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)}))}}const us="/",cs="tensorflowjs_models",hs="info",ps="model_topology",ds="weight_specs",fs="weight_data",ms="model_metadata";function gs(t){return{info:[cs,t,hs].join(us),topology:[cs,t,ps].join(us),weightSpecs:[cs,t,ds].join(us),weightData:[cs,t,fs].join(us),modelMetadata:[cs,t,ms].join(us)}}function ys(t){const e=t.split(us);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(us)}class bs{constructor(t){if(!r().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=gs(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Zr(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Xr)return jr.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Xr){const e=jr.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}bs.URL_SCHEME="localstorage://";const xs=t=>{return r().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(bs.URL_SCHEME)?(e=t.slice(bs.URL_SCHEME.length),new bs(e)):null;var e};Qr.registerSaveRouter(xs),Qr.registerLoadRouter(xs);class ws{constructor(){xe(r().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),xe("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=cs+us,n=us+hs;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[ys(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=gs(t=(e=t).startsWith(bs.URL_SCHEME)?e.slice(bs.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}class vs{constructor(){this.managers={}}static getInstance(){return null==vs.instance&&(vs.instance=new vs),vs.instance}static registerManager(t,e){xe(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),xe(t.length>0,(()=>"scheme must not be an empty string."));const n=vs.getInstance();xe(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class Cs{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(r().get("IS_BROWSER")){r().setPlatform("browser",new Cs);try{vs.registerManager(bs.URL_SCHEME,new ws)}catch(t){}try{vs.registerManager(is.URL_SCHEME,new ls)}catch(t){}}var Ns=!1;function ks(){return Ns||(Ns=!0),{}}const Is=()=>ks();let Ss;class Es{constructor(){this.util=ks(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=r().global.fetch?r().global.fetch(t,e):(null==Ss&&(Ss=Is()),Ss(t,e))}now(){const t=o.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function $s(t,e="float32",n){return e=e||"float32",Xe(t),new ln(t,e,n)}r().get("IS_NODE")&&r().setPlatform("node",new Es);const Rs=Ur({cast_:function(t,e){const n=Pr(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return _n.runKernelFunc((t=>t.cast(n,e)),r,null,B,s)}});const As=Ur({clone_:function(t){const e=Pr(t,"x","clone",null),n={x:e};return _n.runKernelFunc((()=>_n.makeTensorFromDataId(e.dataId,e.shape,e.dtype)),n,null,ot)}});Fn();cn={buffer:$s,cast:Rs,clone:As,print:function(t,e=!1){console.log(t.toString(e))}};function Ts(t){return new Promise((t=>setTimeout(t))).then(t)}class Ds{constructor(t){if(!r().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ds.URL_SCHEME)&&(t=t.slice(Ds.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Ts((()=>a.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Ts((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Zr(t)}}}}Ds.URL_SCHEME="downloads://";function Fs(t,e,n,r){!function(t){xe(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){xe(t>=0&&t<=1,(()=>"Progress fraction must be in range [0, 1], but got startFraction "+t)),xe(e>=0&&e<=1,(()=>"Progress fraction must be in range [0, 1], but got endFraction "+e)),xe(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map((a=>(a.then((a=>{const i=n+ ++s/t.length*(r-n);return e(i),a})),a))))}Qr.registerSaveRouter((t=>r().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ds.URL_SCHEME)?function(t="model"){return new Ds(t)}(t.slice(Ds.URL_SCHEME.length)):null));class _s{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(xe("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=r().platform.fetch,xe(null!=t&&t.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(t)&&xe(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Zr(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=r){const t=await this.loadWeights(r);[l,u]=t}return{modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),a=this.weightPathPrefix||n,i=[];for(const e of t)i.push(...e.weights);const o=[],l=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?l.push(this.weightUrlConverter(t)):o.push(a+t+s);this.weightUrlConverter&&o.push(...await Promise.all(l));return[i,Jr(await async function(t,e){null==e&&(e={});const n=null==e.fetchFunc?r().platform.fetch:e.fetchFunc,s=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),a=(null==e.onProgress?await Promise.all(s):await Fs(s,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(a):await Fs(a,e.onProgress,.5,1)}(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Os(t){return null!=t.match(_s.URL_SCHEME_REGEX)}_s.URL_SCHEME_REGEX=/^https?:\/\//;const Ms=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>Os(t))):Os(t),n)return Ls(t,e)}return null};function Ls(t,e){return new _s(t,e)}Qr.registerSaveRouter(Ms),Qr.registerLoadRouter(Ms);const zs=Ur({reshape_:function(t,e){const n=Pr(t,"x","reshape",null);e=function(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}(e,n.size),xe(n.size===Ne(e),(()=>"new shape and old shape must have the same number of elements."));const r={x:n},s={shape:e};return _n.runKernelFunc(((t,r)=>(r([n]),t.reshape(n,e))),r,null,At,s)}});const Bs=Ur({matMul_:function(t,e,n=!1,r=!1){let s=Pr(t,"a","matMul"),a=Pr(e,"b","matMul");[s,a]=En(s,a),xe(s.rank>=2&&a.rank>=2&&s.rank===a.rank,(()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`));const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?s.shape[s.rank-1]:s.shape[s.rank-2],u=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=Ne(c),d=Ne(h);xe(ke(c,h),(()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match.")),xe(i===o,(()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`));const f=s.shape.slice(0,-2).concat([l,u]),m=zs(s,n?[p,i,l]:[p,l,i]),g=zs(a,r?[d,u,o]:[d,o,u]),y={a:m,b:g},b={transposeA:n,transposeB:r},x=_n.runKernelFunc(((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r))),y,null,M,b);return zs(x,f)}});const Ps=Ur({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const s=Pr(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return _n.runKernelFunc(((t,i)=>(i([s]),zs(t.oneHot(zs(s,[s.size]),e,n,r),a))),i,null,It,o)}});const Ws=Ur({transpose_:function(t,e){const n=Pr(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),xe(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{xe(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return _n.runKernelFunc((t=>t.transpose(n,e)),r,null,Zt,s)}});Ur({confusionMatrix_:function(t,e,n){const r=Pr(t,"labels","confusionMatrix"),s=Pr(e,"predictions","confusionMatrix");xe(null==n||n>0&&Number.isInteger(n),(()=>"If provided, numClasses must be a positive integer, but got "+n)),xe(1===r.rank,(()=>"Expected the rank of labels to be 1, but got "+r.rank)),xe(1===s.rank,(()=>"Expected the rank of predictions to be 1, but got "+s.rank)),xe(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),xe(n>0&&Number.isInteger(n),(()=>"numClasses is required to be a positive integer, but got "+n));const a=Ps(Rs(r,"int32"),n),i=Ps(Rs(s,"int32"),n),o=Ws(a);return Rs(Bs(o,i),"int32")}});let Us;Ur({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=ce(re,_n.backendName)){const n={pixels:t},r={numChannels:e};return _n.runKernel(re,n,r)}const[o,l]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let u,c;if(i?u=t.getContext("2d").getImageData(0,0,o,l).data:r||n?u=t.data:(a||s)&&(null==Us&&(Us=document.createElement("canvas").getContext("2d")),Us.canvas.width=o,Us.canvas.height=l,Us.drawImage(t,0,0,o,l),u=Us.getImageData(0,0,o,l).data),4===e)c=new Int32Array(u);else{const t=o*l;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=u[4*n+t]}return function(t,e,n){if(ve(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Lr(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Gr(t,e,r,n)}(c,[l,o,e],"int32")}});function Vs(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...We(t.shape).map((t=>t/o)),1].slice(0,r);return[i,s,o,l]}function Gs(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}(n,e,t)}function Hs(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:Ne(e.shape)/o,sliceSize:i,strides:[...We(n.slice(0,s)),1],outputSize:Ne(n)}}function js(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function qs(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function Ks(t,e,n){return n<=t?n:n-(e-1)}function Xs(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function Ys(t,e,n,r,s,a,i,o,l){const u=t.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=function(t,e,n,r,s){const a=[...s],i=Xs(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=Ks(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}(i,l,u,r,t),h=function(t,e,n,r,s){const a=[...s],i=Xs(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=Ks(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=ye(0,a[t],s[t])}return a}(o,l,u,s,t),p=function(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}(a,l,u,t)}else for(let e=0;e<u;e++)c[e]=Zs(i,r,a,t,e,l),h[e]=Qs(o,s,a,t,e,l),p[e]=Js(a,e,l);return{begin:c,end:h,strides:p}}function Js(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function Zs(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=ye(0,i,l-1),i}function Qs(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o>0?ye(0,i,l):ye(-1,i,l-1),i}function ta(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function ea(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function na(t,e,n){let r,s;return r="number"==typeof e?[e,...new Array(t.rank-1).fill(0)]:e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e.slice(),r.forEach((t=>{xe(-1!==t,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n,...new Array(t.rank-1).fill(-1)]:n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n,s=s.map(((e,n)=>e>=0?e:(xe(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-r[n]))),[r,s]}class ra{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class sa{constructor(){this.classNameMap={}}static getMap(){return null==sa.instance&&(sa.instance=new sa),sa.instance}static register(t){sa.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function aa(t){xe(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),xe("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),xe(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),sa.register(t)}function ia(t){r().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function oa(){return _n}function la(){return _n.memory()}function ua(t,e){return _n.tidy(t,e)}function ca(t){Rn(t).forEach((t=>t.dispose()))}function ha(t){return _n.keep(t)}function pa(t,e,n=1){return _n.registerBackend(t,e,n)}hn=ia;const da=Ur({add_:function(t,e){let n=Pr(t,"a","add"),r=Pr(e,"b","add");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.add(n,r);return e([n,r]),s}),s,null,I)}});const fa=Ur({floorDiv_:function(t,e){let n=Pr(t,"a","floorDiv"),r=Pr(e,"b","floorDiv");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s}),s,null,rt)}});const ma=Ur({div_:function(t,e){let n=Pr(t,"a","div"),r=Pr(e,"b","div");if([n,r]=En(n,r),"int32"===n.dtype&&"int32"===r.dtype)return fa(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s}),s,null,Q,{})}});const ga=Ur({mul_:function(t,e){let n=Pr(t,"a","mul"),r=Pr(e,"b","mul");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s}),s,null,xt)}});const ya=Ur({abs_:function(t){const e=Pr(t,"x","abs"),n={x:e};return _n.runKernelFunc(((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e))),n,null,"Abs")}});const ba=Ur({acos_:function(t){const e=Pr(t,"x","acos"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.acos(e);return n([e]),r}),n,null,N)}});const xa=Ur({acosh_:function(t){const e=Pr(t,"x","acosh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.acosh(e);return n([e]),r}),n,null,k)}});Ur({addN_:function(t){xe(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),xe(t.length>=1,(()=>"Must pass at least one tensor to tf.addN(), but got "+t.length));const e=t.map(((t,e)=>Pr(t,"tensors"+e,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!ke(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return _n.runKernelFunc(((t,n)=>{const r=t.addN(e);return n(e),r}),r,null,S)}});function wa(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function va(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]}function Ca(t,e){return function(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}(t,e.map((t=>1)),e)}function Na(t,e,n){xe(wa(e,n),(()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`))}function ka(t,e){if(wa(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((t=>n.push(t))),n}function Ia(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function Sa(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Ea=Ur({all_:function(t,e=null,n=!1){let r=Pr(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return _n.runKernelFunc((t=>{const s=Ae(e,r.shape);let a=s;const i=ka(a,r.rank);null!=i&&(r=Ws(r,i),a=Sa(a.length,r.rank));const o=t.all(r,a);if(n){const t=Ca(o.shape,s);return zs(o,t)}return o}),s,null,"All",a)}});const $a=Ur({any_:function(t,e=null,n=!1){let r=Pr(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return _n.runKernelFunc((t=>{const s=Ae(e,r.shape);let a=s;const i=ka(a,r.rank);null!=i&&(r=Ws(r,i),a=Sa(a.length,r.rank));const o=t.any(r,a);if(n){const t=Ca(o.shape,s);return zs(o,t)}return o}),s,null,"Any",a)}});const Ra=Ur({argMax_:function(t,e=0){let n=Pr(t,"x","argMax");const r={x:n},s={axis:e};return _n.runKernelFunc(((t,r)=>{r([n]);let s=Ae(e,n.shape);const a=ka(s,n.rank);return null!=a&&(n=Ws(n,a),s=Sa(s.length,n.rank)),t.argMax(n,s[0])}),r,null,E,s)}});const Aa=Ur({argMin_:function(t,e=0){let n=Pr(t,"x","argMin");const r={x:n},s={axis:e};return _n.runKernelFunc(((t,r)=>{r([n]),null==e&&(e=0);let s=Ae(e,n.shape);const a=ka(s,n.rank);return null!=a&&(n=Ws(n,a),s=Sa(s.length,n.rank)),t.argMin(n,s[0])}),r,null,$,s)}});const Ta=Ur({asin_:function(t){const e=Pr(t,"x","asin"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.asin(e);return n([e]),r}),n,null,R)}});const Da=Ur({asinh_:function(t){const e=Pr(t,"x","asinh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.asinh(e);return n([e]),r}),n,null,A)}});const Fa=Ur({atan_:function(t){const e=Pr(t,"x","atan"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.atan(e);return n([e]),r}),n,null,T)}});const _a=Ur({atan2_:function(t,e){let n=Pr(t,"a","atan2"),r=Pr(e,"b","atan2");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s}),s,null,F)}});const Oa=Ur({atanh_:function(t){const e=Pr(t,"x","atanh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.atanh(e);return n([e]),r}),n,null,D)}});function Ma(t,e,n,r,s="NHWC",a){return Ba(t,[...e,t[3]],n,a,r,null,null,Ka(s))}function La(t,e,n,r,s,a,i="channelsLast"){const[o,l]=Ua(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return Ba(t,u,n,r,s,a,!1,i)}function za(t,e,n,r,s,a,i="NDHWC"){const[o,l,u]=Va(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return Pa(t,c,n,r,s,!1,h,a)}function Ba(t,e,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[p,d,,f]=e,[m,g]=Ua(n),[y,b]=Ua(r),x=Ga(p,y),w=Ga(d,b),{padInfo:v,outHeight:C,outWidth:N}=function(t,e,n,r,s,a,i,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Wa(t,e,n));const a=t[0],i=t[1],o=Ha((a-e+2*r)/n+1,s);xe(Ie(o),(()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`));const l=Ha((i-e+2*r)/n+1,s);return xe(Ie(l),(()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`)),[o,l]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),l=Math.floor(t/2),p=t-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===l?t[1][0]:t[2][0],d="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],m="channelsLast"===l?t[2][1]:t[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ha((e-a+p+d)/r+1,o),h=Ha((n-i+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,x,w,a,o),k=i?f*h:f;let I;return"channelsFirst"===o?I=[l,k,C,N]:"channelsLast"===o&&(I=[l,C,N,k]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:N,outChannels:k,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:I,filterShape:e}}function Pa(t,e,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=t}const[d,f,m,,g]=e,[y,b,x]=Va(n),[w,v,C]=Va(r),N=Ga(d,w),k=Ga(f,v),I=Ga(m,C),{padInfo:S,outDepth:E,outHeight:$,outWidth:R}=function(t,e,n,r,s,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Wa(t,e,r));const i=t[0],o=t[1],l=t[2],u=Ha((i-e+2*s)/r+1,a);xe(Ie(u),(()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`));const c=Ha((o-e+2*s)/r+1,a);xe(Ie(c),(()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`));const h=Ha((l-e+2*s)/r+1,a);return xe(Ie(h),(()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`)),[u,c,h,n]}([e,n,r,1],o,1,s,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const t=(p-1)*s+o-e,c=(d-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,u,c,h,y,b,x,N,k,I,o),A=a?g*p:g;let T;return"channelsFirst"===i?T=[l,A,E,$,R]:"channelsLast"===i&&(T=[l,E,$,R,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:E,outHeight:$,outWidth:R,outChannels:A,padInfo:S,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:k,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:C,inShape:t,outShape:T,filterShape:e}}function Wa(t,e,n,r=1){const s=Ga(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Ua(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Va(t){return"number"==typeof t?[t,t,t]:t}function Ga(t,e){return e<=1?t:t+(t-1)*(e-1)}function Ha(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function ja(t){const[e,n,r]=Ua(t);return 1===e&&1===n&&1===r}function qa(t,e){return ja(t)||ja(e)}function Ka(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const Xa=Ur({avgPool_:function(t,e,n,r,s){const a=Pr(t,"x","avgPool","float32");xe(qa(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),xe(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&xe(Ie(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=_n.runKernelFunc(((t,a)=>{const o=La(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&ke(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)}),l,null,_,u);return c=Rs(c,a.dtype),o?zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ya=Ur({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:ia("dilations is deprecated, this field will be gone in v3.0.0.");const o=Pr(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=zs(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),xe(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),xe("NDHWC"===a,(()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a)),xe(qa(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&xe(Ie(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=_n.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const u=za(l.shape,e,n,i,r,s,a);return o([l]),t.avgPool3d(l,u)}),c,null,O,h);return p=Rs(p,l.dtype),u?zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function Ja(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Za=Ur({concat_:function(t,e=0){xe(t.length>=1,(()=>"Pass at least one tensor to concat"));let n=Wr(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)}));const r=Ae(e,n[0].shape)[0],s=Ja(n.map((t=>t.shape)),r);if(0===Ne(s))return Hr([],s);if(n=n.filter((t=>t.size>0)),1===n.length)return n[0];!function(t,e){const n=t[0].length;t.forEach(((t,e)=>{xe(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),xe(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,s)=>{for(let a=0;a<n;a++)xe(a===e||t[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}(n.map((t=>t.shape)),r);const a=n,i={axis:e};return _n.runKernelFunc(((t,e)=>{const s=t.concat(n,r);return e(n),s}),a,null,U,i)}});const Qa=Ur({sigmoid_:function(t){const e=Pr(t,"x","sigmoid"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.sigmoid(e);return n([r]),r}),n,null,Ut)}});const ti=Ur({slice_:function(t,e,n){const r=Pr(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=na(r,e,n);!function(t,e,n){xe(t.rank===e.length,(()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`)),xe(t.rank===n.length,(()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`));for(let r=0;r<t.rank;++r)xe(e[r]+n[r]<=t.shape[r],(()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`))}(r,s,a);const i={x:r},o={begin:e,size:n};return _n.runKernelFunc(((t,e)=>(e([r]),t.slice(r,s,a))),i,null,Bt,o)}});const ei=Ur({tanh_:function(t){const e=Pr(t,"x","tanh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.tanh(e);return n([r]),r}),n,null,Yt)}});Ur({basicLSTMCell_:function(t,e,n,r,s,a){const i=Pr(t,"forgetBias","basicLSTMCell"),o=Pr(e,"lstmKernel","basicLSTMCell"),l=Pr(n,"lstmBias","basicLSTMCell"),u=Pr(r,"data","basicLSTMCell"),c=Pr(s,"c","basicLSTMCell"),h=Pr(a,"h","basicLSTMCell"),p=Za([u,h],1),d=Bs(p,o),f=da(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=ti(f,[0,0],y),x=ti(f,[0,g],y),w=ti(f,[0,2*g],y),v=ti(f,[0,3*g],y),C=da(ga(Qa(b),ei(x)),ga(c,Qa(da(i,w))));return[C,ga(ei(C),Qa(v))]}});const ni=Ur({batchToSpaceND_:function(t,e,n){const r=Pr(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));xe(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),xe(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),xe(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const a={x:r},i={blockShape:e,crops:n};return _n.runKernelFunc((t=>t.batchToSpaceND(r,e,n)),a,null,L,i)}});function ri(t){return null==t?null:0===t.rank?zs(t,[t.size]):1===t.rank?t:2===t.rank?zs(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const si=Ur({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Pr(t,"x","batchNorm"),o=Pr(e,"mean","batchNorm"),l=Pr(n,"variance","batchNorm");let u,c;null!=s&&(u=Pr(s,"scale","batchNorm")),null!=r&&(c=Pr(r,"offset","batchNorm")),xe(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),xe(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),xe(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(t){let e;return e=0===t.rank||1===t.rank?zs(t,[1,1,1,t.size]):2===t.rank?zs(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=_n.runKernelFunc(((t,e)=>(e([h,o,l,u]),t.batchNorm(h,ri(o),ri(l),ri(c),ri(u),a))),p,null,st,d);return zs(f,i.shape)}});const ai=Ur({batchNorm2d_:function(t,e,n,r,s,a){const i=Pr(t,"x","batchNorm"),o=Pr(e,"mean","batchNorm"),l=Pr(n,"variance","batchNorm");let u,c;return null!=s&&(u=Pr(s,"scale","batchNorm")),null!=r&&(c=Pr(r,"offset","batchNorm")),xe(2===i.rank,(()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+".")),xe(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),xe(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&xe(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&xe(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),si(i,o,l,c,u,a)}});const ii=Ur({batchNorm3d_:function(t,e,n,r,s,a){const i=Pr(t,"x","batchNorm"),o=Pr(e,"mean","batchNorm"),l=Pr(n,"variance","batchNorm");let u,c;return null!=s&&(u=Pr(s,"scale","batchNorm")),null!=r&&(c=Pr(r,"offset","batchNorm")),xe(3===i.rank,(()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+".")),xe(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),xe(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&xe(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&xe(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),si(i,o,l,c,u,a)}});const oi=Ur({batchNorm4d_:function(t,e,n,r,s,a){const i=Pr(t,"x","batchNorm"),o=Pr(e,"mean","batchNorm"),l=Pr(n,"variance","batchNorm");let u,c;return null!=s&&(u=Pr(s,"scale","batchNorm")),null!=r&&(c=Pr(r,"offset","batchNorm")),xe(4===i.rank,(()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+".")),xe(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),xe(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&xe(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&xe(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),si(i,o,l,c,u,a)}});const li=Ur({broadcastTo_:function(t,e){let n=Pr(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=zs(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return As(n);const i={x:n},o={shape:e,inputShape:s};return _n.runKernelFunc((t=>t.tile(n,a)),i,null,z,o)}});const ui=Ur({ceil_:function(t){const e=Pr(t,"x","ceil"),n={x:e};return _n.runKernelFunc((t=>t.ceil(e)),n,null,P)}});const ci=Ur({clipByValue_:function(t,e,n){const r=Pr(t,"x","clipByValue");xe(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:e,clipValueMax:n};return _n.runKernelFunc(((t,s)=>{const a=t.clip(r,e,n);return s([r]),a}),s,null,W,a)}});const hi=Ur({concat1d_:function(t){return Za(t,0)}});const pi=Ur({concat2d_:function(t,e){return Za(t,e)}});const di=Ur({concat3d_:function(t,e){return Za(t,e)}});const fi=Ur({concat4d_:function(t,e){return Za(t,e)}});const mi=Ur({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Pr(t,"x","conv2d"),l=Pr(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),xe(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),xe(4===l.rank,(()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+".")),null!=i&&xe(Ie(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h="NHWC"===s?u.shape[3]:u.shape[1];xe(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),xe(qa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=_n.runKernelFunc(((t,e)=>{const o=Ka(s),c=Ba(u.shape,l.shape,n,a,r,i,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h}),p,null,V,d);return c?zs(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const gi=Ur({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Pr(t,"x","conv1d"),l=Pr(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=zs(o,[1,o.shape[0],o.shape[1]])),xe(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),xe(3===l.rank,(()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+".")),null!=i&&xe(Ie(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),xe(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),xe(qa(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),xe("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=zs(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=zs(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=mi(p,h,[1,n],r,"NHWC",[1,a],i);return zs(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const yi=Ur({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){xe(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),xe(4===o.length,(()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+".")),xe(4===l.rank,(()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank)),xe(4===n.rank,(()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];xe(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),xe(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&xe(Ie(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=_n.runKernelFunc(((t,e)=>{const u=Ka(a),c=Ba(o,n.shape,r,1,s,i,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h}),p,null,G,d);return u?zs(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const bi=Ur({conv2dTranspose_:function(t,e,n,r,s,a){const i=Pr(t,"x","conv2dTranspose"),o=Pr(e,"filter","conv2dTranspose");return yi(n,i,o,r,s,"NHWC",a)}});const xi=Ur({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Pr(t,"x","conv3d"),o=Pr(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=zs(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),xe(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),xe(5===o.rank,(()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+".")),xe(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),xe(qa(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),xe("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=_n.runKernelFunc(((t,e)=>{const s=Pa(l.shape,o.shape,n,a,r),i=t.conv3d(l,o,s);return e([l,o]),i}),c,null,H,h);return u?zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const wi=Ur({conv3DBackpropInput_:function(t,e,n,r,s){xe(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=zs(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];xe(5===a.length,(()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+".")),xe(5===i.rank,(()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank)),xe(5===n.rank,(()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank)),xe(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),xe(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i},h={pad:s},p=_n.runKernelFunc((t=>{const e=Pa(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)}),c,null,"Conv3DBackpropInputV2",h);return o?zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});Ur({conv3dTranspose_:function(t,e,n,r,s){const a=Pr(t,"x","conv3dTranspose"),i=Pr(e,"filter","conv3dTranspose");return wi(n,a,i,r,s)}});const vi=Ur({cos_:function(t){const e=Pr(t,"x","cos"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.cos(e);return n([e]),r}),n,null,j)}});const Ci=Ur({cosh_:function(t){const e=Pr(t,"x","cosh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.cosh(e);return n([e]),r}),n,null,q)}});const Ni=Ur({cumsum_:function(t,e=0,n=!1,r=!1){const s=Pr(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return _n.runKernelFunc(((t,a)=>{const i=ka([e],s.rank);let o=s;null!=i&&(o=Ws(s,i));const l=Sa(1,s.rank)[0];let u=t.cumsum(o,l,n,r);if(a([s]),null!=i){const t=Ia(i);u=Ws(u,t)}return u}),a,null,K,i)}});const ki=Ur({depthToSpace_:function(t,e,n="NHWC"){const r=Pr(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];xe(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),xe(a*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),xe(i%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},l={blockSize:e,dataFormat:n};return _n.runKernelFunc((t=>t.depthToSpace(r,e,n)),o,null,"DepthToSpace",l)}});const Ii=Ur({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Pr(t,"x","depthwiseConv2d"),l=Pr(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),xe(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),xe(4===l.rank,(()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+".")),xe(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&xe(Ie(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:u,filter:l},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=_n.runKernelFunc(((t,e)=>{null==a&&(a=[1,1]),xe(qa(n,a),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const s=Ba(u.shape,l.shape,n,a,r,i,!0),o=t.depthwiseConv2D(u,l,s);return e([u,l]),o}),h,null,X,p);return c?zs(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});Ur({diag_:function(t){const e=Pr(t,"x","diag"),n={x:e};return _n.runKernelFunc((n=>{const r=zs(e,[e.size]),s=n.diag(r),a=[...t.shape,...t.shape];return zs(s,a)}),n,null,"Diag")}});const Si=Ur({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=Pr(t,"x","dilation2d"),o=Pr(e,"filter","dilation2d");xe(3===i.rank||4===i.rank,(()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+".")),xe(3===o.rank,(()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+".")),xe("NHWC"===a,(()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a));let l=i,u=!1;3===i.rank&&(l=zs(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:r,dilations:s},p=_n.runKernel(Y,c,h);return u?zs(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});function Ei(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function $i(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Ri(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const Ai=Ur({equal_:function(t,e){let n=Pr(t,"a","equal"),r=Pr(e,"b","equal");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.equal(n,r)),s,null,"Equal")}});const Ti=Ur({where_:function(t,e,n){const r=Pr(e,"a","where"),s=Pr(n,"b","where"),a=Pr(t,"condition","where","bool"),i=Ri(r.shape,s.shape),o=li(r,i),l=li(s,i);1===a.rank&&xe(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&we(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return _n.runKernelFunc(((t,e)=>{const n=t.select(a,o,l);return e([a]),n}),u,null,Lt)}});const Di=Ur({zerosLike_:function(t){const e=Pr(t,"x","zerosLike"),n={x:e};return _n.runKernelFunc((t=>t.zerosLike(e)),n,null,ee)}});const Fi=Ur({divNoNan_:function(t,e){let n=Pr(t,"a","div"),r=Pr(e,"b","div");[n,r]=En(n,r);const s=ma(n,r),a=Di(s),i=Ai(r,a);return Ti(i,a,s)}});const _i=Ur({dot_:function(t,e){const n=Pr(t,"t1","dot"),r=Pr(e,"t2","dot");xe(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(xe(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const t=zs(n,[1,-1]),e=zs(r,[-1,1]),s=Bs(t,e);return zs(s,[])}if(1===n.rank&&2===r.rank){const t=zs(n,[1,-1]),e=zs(r,[r.shape[0],r.shape[1]]),s=Bs(t,e);return zs(s,[s.size])}if(2===n.rank&&1===r.rank){const t=zs(r,[-1,1]),e=Bs(n,t);return zs(e,[e.size])}{const t=zs(r,[r.shape[0],r.shape[1]]);return Bs(n,t)}}});const Oi=Ur({elu_:function(t){const e=Pr(t,"x","elu"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.elu(e);return n([r]),r}),n,null,"Elu")}});const Mi=Ur({erf_:function(t){let e=Pr(t,"x","erf");xe("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=Rs(e,"float32"));const n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.erf(e);return n([e]),r}),n,null,"Erf")}});const Li=Ur({exp_:function(t){const e=Pr(t,"x","exp"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.exp(e);return n([r]),r}),n,null,"Exp")}});const zi=Ur({expandDims_:function(t,e=0){const n=Pr(t,"x","expandDims",null);xe(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r=n.shape.slice();return e<0&&(xe(-(n.rank+1)<=e,(()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`)),e=n.rank+e+1),r.splice(e,0,1),zs(n,r)}});const Bi=Ur({expm1_:function(t){const e=Pr(t,"x","expm1"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.expm1(e);return n([e]),r}),n,null,tt)}});const Pi=Ur({tile_:function(t,e){const n=Pr(t,"x","tile",null);xe(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r=[n],s={x:n},a={reps:e};return _n.runKernelFunc(((t,r)=>{const s=t.tile(n,e);return r([n]),s}),s,null,Jt,a,r)}});const Wi=Ur({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=$s([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=zs(s.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return Pi(zi(i,0),[n[0],1,1]);if(2===n.length)return Pi(zi(zi(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Pi(zi(zi(zi(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Ui(t,e,n){const r={shape:t,value:e,dtype:n};return _n.runKernelFunc((r=>r.fill(t,e,n)),{},null,"Fill",r)}const Vi=Ur({floor_:function(t){const e=Pr(t,"x","floor"),n={x:e};return _n.runKernelFunc((t=>t.floor(e)),n,null,nt)}});function Gi(t){return t<=30?t:Pe(t,Math.floor(Math.sqrt(t)))}const Hi=Ur({gather_:function(t,e,n=0){const r=Pr(t,"x","gather"),s=Pr(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return _n.runKernelFunc(((t,e)=>{const a=Ae(n,r.shape)[0],i=function(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}(r,s,a),o=t.gather(r,zs(s,[s.size]),a);return e([r,s]),zs(o,i.outputShape)}),a,null,at,i)}});const ji=Ur({greater_:function(t,e){let n=Pr(t,"a","greater"),r=Pr(e,"b","greater");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.greater(n,r)),s,null,"Greater")}});const qi=Ur({greaterEqual_:function(t,e){let n=Pr(t,"a","greaterEqual"),r=Pr(e,"b","greaterEqual");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s}),s,null,it)}});const Ki=Ur({imag_:function(t){const e=Pr(t,"input","imag"),n={input:e};return _n.runKernelFunc((t=>t.imag(e)),n,null,"Imag")}});const Xi=Ur({isFinite_:function(t){const e=Pr(t,"x","isFinite"),n={x:e};return _n.runKernelFunc((t=>t.isFinite(e)),n,null,lt)}});const Yi=Ur({isInf_:function(t){const e=Pr(t,"x","isInf"),n={x:e};return _n.runKernelFunc((t=>t.isInf(e)),n,null,ut)}});const Ji=Ur({isNaN_:function(t){const e=Pr(t,"x","isNaN"),n={x:e};return _n.runKernelFunc((t=>t.isNaN(e)),n,null,ct)}});const Zi=Ur({maximum_:function(t,e){let n=Pr(t,"a","maximum"),r=Pr(e,"b","maximum");[n,r]=En(n,r),"bool"===n.dtype&&(n=Rs(n,"int32"),r=Rs(r,"int32")),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s}),s,null,ft)}});function Qi(t,e){if((_e(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&_e(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Gr(t,[],[],e)}const to=Ur({leakyRelu_:function(t,e=.2){const n=Pr(t,"x","leakyRelu");return Zi(ga(Qi(e),n),n)}});const eo=Ur({less_:function(t,e){let n=Pr(t,"a","less"),r=Pr(e,"b","less");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.less(n,r)),s,null,"Less")}});const no=Ur({lessEqual_:function(t,e){let n=Pr(t,"a","lessEqual"),r=Pr(e,"b","lessEqual");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s}),s,null,"LessEqual")}});const ro=Ur({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Pr(t,"x","localResponseNormalization");xe(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),xe(Ie(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=zs(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:e,bias:n,alpha:r,beta:s},c=_n.runKernelFunc(((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o}),l,null,"LRN",u);return o?zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const so=Ur({log_:function(t){const e=Pr(t,"x","log"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.log(e);return n([e]),r}),n,null,"Log")}});const ao=Ur({log1p_:function(t){const e=Pr(t,"x","log1p"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.log1p(e);return n([e]),r}),n,null,ht)}});function io(t){return _n.customGrad(t)}const oo=Ur({neg_:function(t){const e=Pr(t,"x","neg"),n={x:e};return _n.runKernelFunc((t=>t.neg(e)),n,null,wt)}});const lo=Ur({softplus_:function(t){const e=Pr(t,"x","softplus"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.softplus(e);return n([e]),r}),n,null,Vt)}});const uo=Ur({logSigmoid_:function(t){const e=Pr(t,"x","logSigmoid");return io((t=>({value:oo(lo(oo(t))),gradFunc:e=>ga(e,Qa(oo(t)))})))(e)}});const co=Ur({max_:function(t,e=null,n=!1){const r=Pr(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return _n.runKernelFunc(((t,s)=>{let a=Ae(e,r.shape);const i=ka(a,r.rank);let o=r;null!=i&&(o=Ws(r,i),a=Sa(a.length,o.rank));const l=t.max(o,a);null!=i&&o.dispose();let u=l;if(n){const t=Ca(u.shape,Ae(e,r.shape));u=zs(u,t),l.dispose()}return s([r,u]),u}),s,null,dt,a)}});const ho=Ur({sub_:function(t,e){let n=Pr(t,"a","sub"),r=Pr(e,"b","sub");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s}),s,null,"Sub")}});const po=Ur({sum_:function(t,e=null,n=!1){let r=Pr(t,"x","sum");"bool"===r.dtype&&(r=Rs(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return _n.runKernelFunc(((t,s)=>{s([r]);const a=Ae(e,r.shape),i=ka(a,r.rank);let o=a,l=r;null!=i&&(l=Ws(r,i),o=Sa(o.length,r.rank));let u=t.sum(l,o);if(n){const t=Ca(u.shape,a);u=zs(u,t)}return u}),s,null,"Sum",a)}});const fo=Ur({logSoftmax_:function(t,e=-1){const n=Pr(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return _n.runKernelFunc(((n,r)=>{const s=co(t,e,!0),a=ho(t,s),i=ho(Rs(a,"float32"),so(po(Li(a),e,!0)));return r([i]),i}),r,null,pt,s)}});const mo=Ur({logSumExp_:function(t,e=null,n=!1){const r=Pr(t,"x","logSumExp"),s=Ae(e,r.shape),a=co(r,s,!0),i=ho(r,a),o=Li(i),l=po(o,s),u=so(l),c=da(zs(a,u.shape),u);if(n){const t=Ca(c.shape,s);return zs(c,t)}return c}});const go=Ur({logicalAnd_:function(t,e){const n=Pr(t,"a","logicalAnd","bool"),r=Pr(e,"b","logicalAnd","bool");Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.logicalAnd(n,r)),s,null,"LogicalAnd")}});const yo=Ur({logicalNot_:function(t){const e=Pr(t,"x","logicalNot","bool"),n={x:e};return _n.runKernelFunc((t=>t.logicalNot(e)),n,null,"LogicalNot")}});const bo=Ur({logicalOr_:function(t,e){const n=Pr(t,"a","logicalOr","bool"),r=Pr(e,"b","logicalOr","bool");Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.logicalOr(n,r)),s,null,"LogicalOr")}});const xo=Ur({logicalXor_:function(t,e){const n=Pr(t,"a","logicalXor","bool"),r=Pr(e,"b","logicalXor","bool");return Ri(n.shape,r.shape),go(bo(t,e),yo(go(t,e)))}});const wo=Ur({maxPool_:function(t,e,n,r,s){const a=Pr(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),xe(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),xe(qa(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&xe(Ie(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=_n.runKernelFunc(((t,a)=>{const o=La(i.shape,e,n,1,r,s);let l;return l=1===o.filterWidth&&1===o.filterHeight&&ke(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,l]),l}),l,null,mt,u);return o?zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const vo=Ur({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:ia("dilations is deprecated, this field will be gone in v3.0.0.");const o=Pr(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=zs(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),xe(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),xe("NDHWC"===a,(()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a)),xe(qa(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&xe(Ie(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=_n.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const u=za(l.shape,e,n,i,r,s,a),c=t.maxPool3d(l,u);return o([l,c]),c}),c,null,gt,h);return u?zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});Ur({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Pr(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=_n.runKernel(yt,a,i);return{result:o[0],indexes:o[1]}}});function Co(t,e="float32"){if("complex64"===e){const e=Co(t,"float32"),n=Co(t,"float32");return Vr(e,n)}const n=je(Ne(t),e);return _n.makeTensor(n,t,e)}function No(t,e="float32"){if("complex64"===e){const e=No(t,"float32"),n=Co(t,"float32");return Vr(e,n)}const n=He(Ne(t),e);return _n.makeTensor(n,t,e)}const ko=Ur({mean_:function(t,e=null,n=!1){const r=Pr(t,"x","mean"),s=Ae(e,r.shape),a=Ne(va(r.shape,s)[1]);return io((t=>{const r=Qi(a),i=r.dtype===t.dtype?t:Rs(t,r.dtype),o=ma(i,r);return{value:po(o,e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach((t=>{n[t]=1}));const r=zs(e,n);return ma(ga(r,No(t.shape,"float32")),a)}}}))(r)}});const Io=Ur({min_:function(t,e=null,n=!1){const r=Pr(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return _n.runKernelFunc(((t,s)=>{const a=Ae(e,r.shape);let i=a;const o=ka(i,r.rank);let l=r;null!=o&&(l=Ws(r,o),i=Sa(i.length,r.rank));const u=t.min(l,i);null!=o&&l.dispose();let c=u;if(n){const t=Ca(c.shape,a);c=zs(u,t),u.dispose()}return s([r,c]),c}),s,null,"Min",a)}});const So=Ur({minimum_:function(t,e){let n=Pr(t,"a","minimum"),r=Pr(e,"b","minimum");[n,r]=En(n,r),"bool"===n.dtype&&(n=Rs(n,"int32"),r=Rs(r,"int32")),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s}),s,null,bt)}});const Eo=Ur({mod_:function(t,e){let n=Pr(t,"a","mod"),r=Pr(e,"b","mod");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.mod(n,r);return e([n,r]),s}),s,null,"Mod")}});const $o=Ur({square_:function(t){const e=Pr(t,"x","square"),n=[e];return _n.runKernelFunc(((t,n)=>(n([e]),t.square(e))),{x:e},null,"Square",{},n,[])}});const Ro=Ur({moments_:function(t,e=null,n=!1){const r=Ae(e,(t=Pr(t,"x","moments")).shape),s=ko(t,r,n);let a=s.shape;n||(a=Ca(s.shape,r));const i=$o(ho(Rs(t,"float32"),zs(s,a)));return{mean:s,variance:ko(i,r,n)}}});Ur({multiRNNCell_:function(t,e,n,r){const s=Pr(e,"data","multiRNNCell"),a=Wr(n,"c","multiRNNCell"),i=Wr(r,"h","multiRNNCell");let o=s;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});Ur({multinomial_:function(t,e,n,r=!1){const s=Pr(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?zs(s,[1,-1]):s,l=_n.runKernelFunc((t=>t.multinomial(o,r,e,n)),{logits2D:o});return 1===i?zs(l,[l.size]):l}});const Ao=Ur({notEqual_:function(t,e){let n=Pr(t,"a","notEqual"),r=Pr(e,"b","notEqual");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc((t=>t.notEqual(n,r)),s,null,"NotEqual")}});const To=Ur({real_:function(t){const e=Pr(t,"input","real"),n={input:e};return _n.runKernelFunc((t=>t.real(e)),n,null,"Real")}});const Do=Ur({onesLike_:function(t){const e=Pr(t,"x","onesLike"),n={x:e};return _n.runKernelFunc(((t,n)=>{if("complex64"===e.dtype){const t=Do(To(e)),n=Di(Ki(e));return Vr(t,n)}return t.onesLike(e)}),n,null,kt)}});Ur({outerProduct_:function(t,e){const n=Pr(t,"v1","outerProduct"),r=Pr(e,"v2","outerProduct");xe(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=zs(n,[-1,1]),a=zs(r,[1,-1]);return Bs(s,a)}});const Fo=Ur({pad_:function(t,e,n=0){const r=Pr(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return _n.runKernelFunc(((t,s)=>(s([r]),t.pad(r,e,n))),a,null,St,s)}});Ur({pad1d_:function(t,e,n=0){return xe(2===e.length,(()=>"Invalid number of paddings. Must be length of 2.")),Fo(t,[e],n)}});Ur({pad2d_:function(t,e,n=0){return xe(2===e.length&&2===e[0].length&&2===e[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Fo(t,e,n)}});Ur({pad3d_:function(t,e,n=0){return xe(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Fo(t,e,n)}});Ur({pad4d_:function(t,e,n=0){return xe(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Fo(t,e,n)}});const _o=Ur({spaceToBatchND_:function(t,e,n){const r=Pr(t,"x","spaceToBatchND");xe(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),xe(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),xe(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},a={blockShape:e,paddings:n};return _n.runKernelFunc((t=>t.spaceToBatchND(r,e,n)),s,null,Ht,a)}});const Oo=Ur({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Pr(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=zs(i,[1,i.shape[0],i.shape[1],i.shape[2]])),xe(qa(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const u=La(o.shape,e,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),a=t.concat(r,s),i=e.map(((t,e)=>(t-a[e]%t)%t)),o=s.map(((t,e)=>t+i[e])),l=e.map(((t,e)=>[r[e],o[e]])),u=e.map(((t,e)=>[0,i[e]]));return[l,u]}([u.inHeight,u.inWidth],c,h),m=p?r:"valid",g=p?o:_o(o,c,d),y=("avg"===n?()=>Xa(g,e,a,m):()=>wo(g,e,a,m))(),b=p?y:ni(y,c,f);return l?zs(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const Mo=Ur({pow_:function(t,e){let n=Pr(t,"base","pow"),r=Pr(e,"exp","pow");[n,r]=En(n,r);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s}),s,null,"Pow")}});const Lo=Ur({prelu_:function(t,e){const n=Pr(t,"x","prelu"),r=Pr(e,"alpha","prelu"),s={x:n,alpha:r};return _n.runKernelFunc(((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s}),s,null,Et)}});const zo=Ur({prod_:function(t,e=null,n=!1){let r=Pr(t,"x","prod");const s={x:r},a={axis:e,keepDims:n};return _n.runKernelFunc((t=>{"bool"===r.dtype&&(r=Rs(r,"int32"));const s=Ae(e,r.shape),a=ka(s,r.rank);let i=s,o=r;null!=a&&(o=Ws(r,a),i=Sa(i.length,r.rank));let l=t.prod(o,i);if(n){const t=Ca(l.shape,s);l=zs(l,t)}return l}),s,null,"Prod",a)}});Ur({rand_:function(t,e,n){const r=Ne(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return _n.makeTensor(s,t,n)}});var Bo={},Po=function(){var t={exports:this};return function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Wo=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Uo=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Vo=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Go=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),s=0,a=-32;a<l;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Ho=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),jo={};!function(t,e){var n,r=this,s=256,a=e.pow(s,6),i=e.pow(2,52),o=2*i,l=255;function u(l,u,m){var g=[],y=d(p((u=1==u?{entropy:!0}:u||{}).entropy?[l,f(t)]:null==l?function(){try{var e;return n&&(e=n.randomBytes)?e=e(s):(e=new Uint8Array(s),(r.crypto||r.msCrypto).getRandomValues(e)),f(e)}catch(e){var a=r.navigator,i=a&&a.plugins;return[+new Date,r,i,r.screen,f(t)]}}():l,3),g),b=new c(g),x=function(){for(var t=b.g(6),e=a,n=0;t<i;)t=(t+n)*s,e*=s,n=b.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,d(f(b.S),t),(u.pass||m||function(t,n,r,s){return s&&(s.S&&h(s,b),t.state=function(){return h(b,{})}),r?(e.random=t,n):t})(x,y,"global"in u?u.global:this==e,u.state)}function c(t){var e,n=t.length,r=this,a=0,i=r.i=r.j=0,o=r.S=[];for(n||(t=[n++]);a<s;)o[a]=a++;for(a=0;a<s;a++)o[a]=o[i=l&i+t[a%n]+(e=o[a])],o[i]=e;(r.g=function(t){for(var e,n=0,a=r.i,i=r.j,o=r.S;t--;)e=o[a=l&a+1],n=n*s+o[l&(o[a]=o[i=l&i+e])+(o[i]=e)];return r.i=a,r.j=i,n})(s)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(p(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function d(t,e){for(var n,r=t+"",s=0;s<r.length;)e[l&s]=l&(n^=19*e[l&s])+r.charCodeAt(s++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}if(e.seedrandom=u,d(e.random(),t),jo){jo=u;try{n=ks()}catch(t){}}else 0}([],Math),jo.alea=Po,jo.xor128=Wo,jo.xorwow=Uo,jo.xorshift7=Vo,jo.xor4096=Go,jo.tychei=Ho,Bo=jo;class qo{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Bo.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Ko{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=Bo.alea(s.toString()),this.randn=new qo(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class Xo{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Bo.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}Ur({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Ko(e,n,r,s),i=$s(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Yo=Ur({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new qo(e,n,r,!1,s),i=$s(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Jo=Ur({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=$s(t,r),i=new Xo(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function Zo(t,e){ve(t);const n=Lr(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Gr(t,null,n,e)}function Qo(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return _n.runKernelFunc((()=>{if(t===e||t<e&&n<0||e<t&&n>1)return Co([0],r);const s=je(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return Zo(s,r)}),{},null,"Range",s)}const tl=Ur({reciprocal_:function(t){const e=Pr(t,"x","reciprocal"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.reciprocal(e);return n([e]),r}),n,null,$t)}});const el=Ur({relu_:function(t){const e=Pr(t,"x","relu"),n={x:e};return _n.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?Rs(e,"int32"):t.relu(e))),n,null,Rt)}});const nl=Ur({relu6_:function(t){const e=Pr(t,"x","relu6"),n={x:e};return _n.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?Rs(e,"int32"):t.relu6(e))),n,null,Ft)}});const rl=Ur({reverse_:function(t,e){const n=Pr(t,"x","reverse"),r={x:n},s={dims:e};return _n.runKernelFunc((t=>{const r=Ae(e,n.shape);if(0===n.rank)return As(n);const s=t.reverse(n,r);return zs(s,n.shape)}),r,null,_t,s)}});Ur({reverse1d_:function(t){const e=Pr(t,"x","reverse");return xe(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),rl(e,0)}});Ur({reverse2d_:function(t,e){const n=Pr(t,"x","reverse");return xe(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),rl(n,e)}});Ur({reverse3d_:function(t,e){const n=Pr(t,"x","reverse");return xe(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),rl(n,e)}});Ur({reverse4d_:function(t,e){const n=Pr(t,"x","reverse");return xe(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),rl(n,e)}});const sl=Ur({round_:function(t){const e=Pr(t,"x","round"),n={x:e};return _n.runKernelFunc((t=>t.round(e)),n,null,Ot)}});const al=Ur({rsqrt_:function(t){const e=Pr(t,"x","rsqrt"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.rsqrt(e);return n([e]),r}),n,null,Mt)}});const il=Ur({selu_:function(t){const e=Pr(t,"x","selu"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.selu(e);return n([e]),r}),n,null,zt)}});const ol=Ur({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Pr(t,"x","separableConv2d"),l=Pr(e,"depthwiseFilter","separableConv2d"),u=Pr(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");xe(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),xe(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),xe(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),xe(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),xe(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];xe(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Ii(c,l,r,s,i,a),m=mi(f,u,1,"valid",i);return h?zs(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const ll=Ur({sign_:function(t){const e=Pr(t,"x","sign"),n={x:e};return _n.runKernelFunc((t=>t.sign(e)),n,null,Wt)}});const ul=Ur({sin_:function(t){const e=Pr(t,"x","sin"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.sin(e);return n([e]),r}),n,null,"Sin")}});const cl=Ur({sinh_:function(t){const e=Pr(t,"x","sinh"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.sinh(e);return n([e]),r}),n,null,Pt)}});const hl=Ur({slice1d_:function(t,e,n){const r=Pr(t,"x","slice1d");return xe(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),ti(r,[e],[n])}});const pl=Ur({slice2d_:function(t,e,n){const r=Pr(t,"x","slice2d");return xe(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),ti(r,e,n)}});const dl=Ur({slice3d_:function(t,e,n){const r=Pr(t,"x","slice3d");return xe(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),ti(r,e,n)}});const fl=Ur({slice4d_:function(t,e,n){const r=Pr(t,"x","slice4d");return xe(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),ti(r,e,n)}});const ml=Ur({softmax_:function(t,e=-1){const n=Pr(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return _n.runKernelFunc(((t,r)=>{const s=t.softmax(n,e);return r([s]),s}),r,null,qt,s)}});const gl=Ur({fft_:function(t){xe("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return _n.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)}),e,null,"FFT")}});const yl=Ur({ifft_:function(t){xe("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return _n.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=zs(t,[r,n]),a=e.ifft(s);return zs(a,t.shape)}),e,null,"IFFT")}});const bl=Ur({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=zs(t,[n,e]);r=yl(s)}else{const s=[n,2*(e-1)],a=zs(To(t),[n,e]),i=zs(Ki(t),[n,e]),o=rl(ti(a,[0,1],[n,e-2]),1),l=ga(rl(ti(i,[0,1],[n,e-2]),1),Qi(-1)),u=Za([a,o],1),c=Za([i,l],1),h=zs(Vr(u,c),[s[0],s[1]]);r=yl(h)}if(r=To(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=zs(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const xl=Ur({split_:function(t,e,n=0){const r=Pr(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return _n.runKernelFunc(((t,s)=>{const a=Ae(n,r.shape)[0],i=function(t,e,n=0){let r=[];if("number"==typeof e)xe(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(e).fill(t.shape[n]/e);else{xe(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>"There should be only one negative value in split array."));const s=e.indexOf(-1);if(-1!==s){const r=e.reduce(((t,e)=>e>0?t+e:t));e[s]=t.shape[n]-r}xe(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=e}return r}(r,e,a);return t.split(r,i,a)}),s,null,jt,a)}});const wl=Ur({rfft_:function(t,e){xe("float32"===t.dtype,(()=>"The dtype for rfft() must be real value but got "+t.dtype));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),a=t.shape.map((t=>t));a[t.shape.length-1]=e,s=ti(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=Za([t,Co(r)],t.shape.length-1),n=e}else s=t;const a=Di(s),i=zs(Vr(s,a),[r,n]),o=gl(i),l=Math.floor(n/2)+1,u=To(o),c=Ki(o),h=xl(u,[l,n-l],u.shape.length-1),p=xl(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,zs(Vr(h[0],p[0]),d)}});const vl=Ur({sqrt_:function(t){const e=Pr(t,"x","sqrt"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.sqrt(e);return n([e]),r}),n,null,Gt)}});const Cl=Ur({squaredDifference_:function(t,e){let n=Pr(t,"a","squaredDifference"),r=Pr(e,"b","squaredDifference");[n,r]=En(n,r),Ri(n.shape,r.shape);const s={a:n,b:r};return _n.runKernelFunc(((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s}),s,null,Kt,{})}});const Nl=Ur({squeeze_:function(t,e){const n=Pr(t,"x","squeeze");return zs(n,Te(n.shape,e).newShape)}});const kl=Ur({stack_:function(t,e=0){const n=Wr(t,"tensors","stack");if(xe(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),1===n.length)return zi(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;xe(e<=r,(()=>"Axis must be <= rank of the tensor")),n.forEach((t=>{we(s,t.shape,"All tensors passed to stack must have matching shapes"),xe(a===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=n.map((t=>zi(t,e)));return Za(i,e)}});const Il=Ur({step_:function(t,e=0){const n=Pr(t,"x","step"),r={x:n},s={alpha:e};return _n.runKernelFunc((t=>t.step(n,e)),r,null,ne,s)}});const Sl=Ur({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,l=0){let u=Pr(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return _n.runKernelFunc((t=>{null==r&&(r=new Array(e.length));const c=js(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,p=js(o),d=u.shape.slice();p.forEach((t=>{e[t]=0,n[t]=1,d.splice(t,0,1)})),u=zs(u,d);const{begin:f,end:m,strides:g}=Ys(u.shape,c,h,e,n,r,s,a,i);e=f,n=m,r=g;const y=js(l);y.forEach((t=>{n[t]=e[t]+1,r[t]=1}));const b=qs(e,n,r),x=b.filter(((t,e)=>-1===y.indexOf(e)));if(r.every((t=>1===t)))return zs(ti(u,e,b),x);const w=t.stridedSlice(u,e,n,r);return zs(w,x)}),c,null,"StridedSlice",h)}});const El=Ur({tan_:function(t){const e=Pr(t,"x","tan"),n={x:e};return _n.runKernelFunc(((t,n)=>{const r=t.tan(e);return n([e]),r}),n,null,"Tan")}});function $l(t,e,n){if(ve(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Lr(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Gr(t,e,r,n)}function Rl(t,e,n){if(ve(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Lr(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Gr(t,e,r,n)}const Al=Ur({topk_:function(t,e=1,n=!0){const r=Pr(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const a={x:r},i={k:e,sorted:n},[o,l]=_n.runKernelFunc((t=>t.topk(r,e,n)),a,null,"TopK",i);return{values:o,indices:l}}});const Tl=Ur({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new qo(e,n,r,!0,s),i=$s(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Dl=Ur({unsortedSegmentSum_:function(t,e,n){const r=Pr(t,"x","unsortedSegmentSum"),s=Pr(e,"segmentIds","unsortedSegmentSum","int32");xe(Ie(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return _n.runKernelFunc(((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a}),a,null,te,i)}});const Fl=Ur({unstack_:function(t,e=0){const n=Pr(t,"x","unstack");xe(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`)),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return _n.runKernelFunc((t=>t.unstack(n,e)),r,null,Qt,s)}});function _l(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=$s(t,"int32"),s=$s([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const Ol=Ur({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=zs(e,[1,e.shape[0],e.shape[1],e.shape[2]])),xe(4===o.rank,(()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+".")),xe(4===l.rank,(()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+".")),xe(4===n.length,(()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];xe(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),xe(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&xe(Ie(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:o,dy:l},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return _n.runKernelFunc((t=>{const e=Ka(a),u=Ba(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,l,u)}),h,null,"Conv2DBackpropFilter",p)}});function Ml(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return ga(t,Il(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ll(t,e){let n=e;const r=$i(t.shape,e.shape);return r.length>0&&(n=po(n,r)),zs(n,t.shape)}function zl(t,e,n){if("linear"===e)return t;if("relu"===e)return el(t);if("elu"===e)return Oi(t);if("relu6"===e)return nl(t);if("prelu"===e)return Lo(t,n);throw new Error(`Unknown fused activation ${e}.`)}const Bl=(t,e)=>!(t>0)||"linear"===e;const Pl=Ur({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===Bl(_n.state.gradientDepth,l)){let c=mi(t,e,n,r,s,a,i);return null!=o&&(c=da(c,o)),zl(c,l,u)}const c=Pr(t,"x","conv2d"),h=Pr(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=zs(c,[1,c.shape[0],c.shape[1],c.shape[2]])),xe(4===p.rank,(()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+".")),xe(4===h.rank,(()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+".")),null!=i&&xe(Ie(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),xe(p.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),xe(qa(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),xe("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const f=Ba(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Pr(o,"bias","fused conv2d"),[m]=En(m,c),Ri(f.outShape,m.shape)),null!=u&&(g=Pr(u,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,u]=e,c=Ml(t,o,l);xe(ja(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[yi(i.shape,c,s,n,r),Ol(i,c,s.shape,n,r)];if(null!=u){const t=Ll(u,c);h.push(t)}return h},b=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return io(((t,e,n)=>{let r=_n.runKernelFunc(b,x,null,ie,w);return n([e,t,r]),d&&(r=zs(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h)}return io(((t,e,n,r)=>{let s=_n.runKernelFunc(b,x,null,ie,w);return r([e,t,s,n]),d&&(s=zs(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}});const Wl=Ur({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return _n.runKernelFunc((t=>t.depthwiseConv2DDerFilter(s,a,r)),i,null,"DepthwiseConv2dNativeBackpropFilter")}});const Ul=Ur({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=_n.runKernelFunc((t=>t.depthwiseConv2DDerInput(s,n,r)),i,null,"DepthwiseConv2dNativeBackpropInput");return a?zs(o,[o.shape[1],o.shape[2],o.shape[3]]):o}});Ur({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===Bl(_n.state.gradientDepth,l)){let c=Ii(t,e,n,r,s,a,i);return null!=o&&(c=da(c,o)),zl(c,l,u)}const c=Pr(t,"x","depthwiseConv2d"),h=Pr(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=zs(c,[1,c.shape[0],c.shape[1],c.shape[2]])),xe(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),xe(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),xe(p.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),xe(qa(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&xe(Ie(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const f=Ba(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Pr(o,"bias","fused conv2d"),[m]=En(m,c),Ri(f.outShape,m.shape)),null!=u&&(g=Pr(u,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{xe(ja(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[n,r,s,i]=e,o=Ml(t,s,l),u=Ul(r.shape,o,n,f),c=Wl(r,o,n.shape,f);if(null!=i){return[u,c,Ll(m,o)]}return[u,c]},b=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return io(((t,e,n)=>{let r=_n.runKernelFunc(b,x,null,oe,w);return n([e,t,r]),d&&(r=zs(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h)}return io(((t,e,n,r)=>{let s=_n.runKernelFunc(b,x,null,oe,w);return r([e,t,s,n]),d&&(s=zs(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}});const Vl=Ur({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===Bl(_n.state.gradientDepth,a)){let o=Bs(t,e,n,r);return null!=s&&(o=da(o,s)),zl(o,a,i)}let o=Pr(t,"a","fused matMul"),l=Pr(e,"b","fused matMul");[o,l]=En(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=Ne(d),g=Ne(f);xe(o.rank>=2&&l.rank>=2&&o.rank===l.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`)),xe(ke(d,f),(()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match.")),xe(u===c,(()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const y=o.shape.slice(0,-2).concat([h,p]),b=zs(o,n?[m,u,h]:[m,h,u]),x=zs(l,r?[g,p,c]:[g,c,p]);let w,v;null!=s&&(w=Pr(s,"bias","fused matMul"),[w]=En(w,o),Ri(y,w.shape)),null!=i&&(v=Pr(i,"prelu weights","fused matMul"));const C=(t,e)=>{const[i,o,l,u]=e,c=Ml(zs(t,l.shape),l,a);let h,p;if(n||r?!n&&r?(h=Bs(c,o,!1,!1),p=Bs(c,i,!0,!1)):n&&!r?(h=Bs(o,c,!1,!0),p=Bs(i,c,!1,!1)):(h=Bs(o,c,!0,!0),p=Bs(c,i,!0,!0)):(h=Bs(c,o,!1,!0),p=Bs(i,c,!0,!1)),null!=s){return[h,p,Ll(u,c)]}return[h,p]},N=t=>t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:v}),k={a:b,b:x,bias:w,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a};if(null==s){return io(((t,e,n)=>{const r=_n.runKernelFunc(N,k,null,ae,I);return n([t,e,r]),{value:zs(r,y),gradFunc:C}}))(b,x)}return io(((t,e,n,r)=>{const s=_n.runKernelFunc(N,k,null,ae,I);return r([t,e,s,n]),{value:zs(s,y),gradFunc:C}}))(b,x,w)}});Ur({hammingWindow_:function(t){return wu(t,.54,.46)}});const Gl=Ur({hannWindow_:function(t){return wu(t,.5,.5)}});const Hl=Ur({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(ti(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=Za([ti(t,a,e-r),Ui([r],s)]);i.push(o),a+=n}return 0===i.length?$l([],[0,e]):zs(Za(i),[i.length,e])}});Ur({stft_:function(t,e,n,r,s=Gl){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=Hl(t,e,n),o=ga(i,s(e)),l=[];for(let t=0;t<i.shape[0];t++)l.push(wl(ti(o,[t,0],[1,e]),r));return Za(l)}});Ur({cropAndResize_:function(t,e,n,r,s,a){const i=Pr(t,"image","cropAndResize"),o=Pr(e,"boxes","cropAndResize","float32"),l=Pr(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const u=o.shape[0];xe(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),xe(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),xe(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),xe(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),xe(r[0]>=1&&r[1]>=1,(()=>"cropSize must be atleast [1,1], but was "+r)),xe("bilinear"===s||"nearest"===s,(()=>"method must be bilinear or nearest, but was "+s));const c={image:i,boxes:o,boxInd:l},h={method:s,extrapolationValue:a,cropSize:r};return _n.runKernelFunc((t=>t.cropAndResize(i,o,l,r,s,a)),c,null,"CropAndResize",h)}});Ur({flipLeftRight_:function(t){const e=Pr(t,"image","flipLeftRight","float32");xe(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return _n.runKernel(et,n,{})}});Ur({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Pr(t,"image","rotateWithOffset","float32");xe(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:e,fillValue:n,center:r};return _n.runKernel(se,a,i)}});function jl(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),xe(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),xe(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),xe(4===t.shape[1],(()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1])),xe(1===e.rank,(()=>"scores must be a 1D tensor")),xe(e.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0])),xe(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}Ur({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Pr(t,"boxes","nonMaxSuppression"),i=Pr(e,"scores","nonMaxSuppression"),o=jl(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return _n.runKernelFunc((t=>t.nonMaxSuppression(a,i,n,r,s)),{boxes:a,scores:i},null,vt,l)}});function ql(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||Kl)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Kl(t,e){return t>e?1:t<e?-1:0}function Xl(t,e,n,r,s){return du(t,e,n,r,s,0).selectedIndices}function Yl(t,e,n,r,s,a){return du(t,e,n,r,s,0,!1,a,!0)}function Jl(t,e,n,r,s,a){return du(t,e,n,r,s,a,!0)}const Zl=Ur({equalStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","equalStrict"),r=Pr(e,"b","equalStrict");return we(n.shape,r.shape,"Error in equalStrict: "),Ai(n,r)}}),Ql=Ur({greaterEqualStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","greaterEqualStrict"),r=Pr(e,"b","greaterEqualStrict");return we(n.shape,r.shape,"Error in greaterEqualStrict: "),qi(n,r)}}),tu=Ur({greaterStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","greaterStrict"),r=Pr(e,"b","greaterStrict");return we(n.shape,r.shape,"Error in greaterStrict: "),ji(n,r)}}),eu=Ur({lessEqualStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","lessEqualStrict"),r=Pr(e,"b","lessEqualStrict");return we(n.shape,r.shape,"Error in lessEqualStrict: "),no(n,r)}}),nu=Ur({lessStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","lessStrict"),r=Pr(e,"b","lessStrict");return we(n.shape,r.shape,"Error in lessStrict: "),eo(n,r)}}),ru=Ur({notEqualStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","notEqualStrict"),r=Pr(e,"b","notEqualStrict");return we(n.shape,r.shape,"Error in notEqualStrict: "),Ao(n,r)}});const su=Ur({addStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","addStrict"),r=Pr(e,"b","addStrict");return we(n.shape,r.shape,"Error in addStrict: "),da(n,r)}}),au=Ur({divStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","div"),r=Pr(e,"b","div");return we(n.shape,r.shape,"Error in divideStrict: "),ma(n,r)}}),iu=Ur({maximumStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","maximumStrict"),r=Pr(e,"b","maximumStrict");return we(n.shape,r.shape,"Error in maximumStrict: "),Zi(n,r)}}),ou=Ur({minimumStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","minimumStrict"),r=Pr(e,"b","minimumStrict");return we(n.shape,r.shape,"Error in minimumStrict: "),So(n,r)}}),lu=Ur({modStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","modStrict"),r=Pr(e,"b","modStrict");return we(n.shape,r.shape,"Error in modStrict: "),Eo(n,r)}}),uu=Ur({mulStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","mul"),r=Pr(e,"b","mul");return we(n.shape,r.shape,"Error in multiplyStrict: "),ga(n,r)}}),cu=Ur({powStrict_:function(t,e){return ia("strict variants of ops have been deprecated and will be removed in future"),we(t.shape,e.shape,"Error in powStrict: "),Mo(t,e)}}),hu=Ur({squaredDifferenceStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","squaredDifferenceStrict"),r=Pr(e,"b","squaredDifferenceStrict");return we(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Cl(n,r)}}),pu=Ur({subStrict_:function(t,e){ia("strict variants of ops have been deprecated and will be removed in future");const n=Pr(t,"a","subStrict"),r=Pr(e,"b","subStrict");return we(n.shape,r.shape,"Error in subStrict: "),ho(n,r)}});function du(t,e,n,r,s,a,i=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>s&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(bu);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=fu(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*yu(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&ql(u,e,bu))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:Zo(h,"int32")};return i&&(m.selectedScores=Zo(p,"float32")),l&&(m.validOutputs=Qi(d,"int32")),m}function fu(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function mu(t,e,n=null){if(0===t.rank)return ya(t);if(1!==t.rank&&null===n)return mu(zs(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return po(ya(t),n);if(e===1/0)return co(ya(t),n);if(e===-1/0)return Io(ya(t),n);if("euclidean"===e||2===e)return vl(po(Mo(ya(t),Qi(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(n)&&2===n.length){if(1===e)return co(po(ya(t),n[0]),n[1]-1);if(e===1/0)return co(po(ya(t),n[1]),n[0]);if(e===-1/0)return Io(po(ya(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return vl(po($o(t),n));throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+n)}const gu=Ur({norm_:function(t,e="euclidean",n=null,r=!1){const s=mu(t=Pr(t,"x","norm"),e,n);let a=s.shape;if(r){const e=Ae(n,t.shape);a=Ca(s.shape,e)}return zs(s,a)}});function yu(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}Ur({movingAverage_:function(t,e,n,r,s=!0){const a=Pr(t,"v","movingAverage"),i=Pr(e,"x","movingAverage"),o=Pr(n,"decay","movingAverage");var l,u;u=i,xe((l=a).dtype===u.dtype,(()=>`The dtypes of the first(${l.dtype}) and second(${u.dtype}) input must match`)),xe(ke(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const c=Qi(1),h=ho(c,o);let p=ga(ho(i,a),h);if(s){xe(null!=r,(()=>"When using zeroDebias: true, step is required."));const t=Pr(r,"step","movingAverage");p=ma(p,ho(c,Mo(o,t)))}return da(a,p)}});function bu(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}Ur({scatterND_:function(t,e,n){const r=Pr(t,"indices","scatterND","int32"),s=Pr(e,"updates","scatterND");Gs(s,r,n);const a={indices:r,updates:s},i={shape:n};return _n.runKernelFunc((t=>t.scatterND(r,s,n)),a,null,"ScatterNd",i)}});Ur({sparseToDense_:function(t,e,n,r=0){const s=Pr(t,"sparseIndices","sparseToDense","int32"),a=Pr(e,"sparseValues","sparseToDense"),i=Pr(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},l={outputShape:n};return _n.runKernelFunc((t=>t.sparseToDense(s,a,n,i)),o,null,"SparseToDense",l)}});Ur({gatherND_:function(t,e){const n=Pr(e,"indices","gatherND","int32"),r=Pr(t,"x","gatherND"),s={params:r,indices:n};return _n.runKernelFunc((t=>t.gatherND(r,n)),s,null,"GatherNd")}});const xu=Ur({dropout_:function(t,e,n,r){const s=Pr(t,"x","dropout");if(xe("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),xe(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof pn?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(ke(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=ma(Vi(da(Jo(a,0,1,"float32",r),i)),i);return ga(s,o)}});function wu(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return Zo(s,"float32")}Ur({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Pr(t,"boxes","nonMaxSuppression"),o=Pr(e,"scores","nonMaxSuppression"),l=jl(i,o,n,r,s,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=_n.runKernel(Nt,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});Ur({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Pr(t,"boxes","nonMaxSuppression"),o=Pr(e,"scores","nonMaxSuppression"),l=jl(i,o,n,r,s,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=_n.runKernel(Ct,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const vu=Ur({resizeBilinear_:function(t,e,n=!1){const r=Pr(t,"images","resizeBilinear");xe(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),xe(2===e.length,(()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."));let s=r,a=!1;3===r.rank&&(a=!0,s=zs(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=_n.runKernelFunc(((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n))),l,null,Dt,u);return a?zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Cu=Ur({resizeNearestNeighbor_:function(t,e,n=!1){const r=Pr(t,"images","resizeNearestNeighbor");xe(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),xe(2===e.length,(()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+".")),xe("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype"));let s=r,a=!1;3===r.rank&&(a=!0,s=zs(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=_n.runKernelFunc(((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n))),l,null,Tt,u);return a?zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Nu=Ur({bandPart_:function(t,e,n){xe(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),xe(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Pr(t,"a","bandPart");xe(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=zs(Qo(0,a,1,"int32"),[-1,1]),l=Qo(0,i,1,"int32"),u=ho(o,l),c=go(no(u,Qi(+e,"int32")),qi(u,Qi(-n,"int32"))),h=Co([a,i],r.dtype);return zs(kl(Fl(zs(r,[-1,a,i])).map((t=>Ti(c,t,h)))),s)}});const ku=Ur({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,xe(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)xe(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=xl(t,t.shape[0],0).map((t=>Nl(t,[0])));xe(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(_n.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=ga(po(ga(n[r],t)),n[r]);t=ho(t,e)}return ma(t,gu(t,"euclidean"))})));return e?kl(n,0):n}});function Iu(t,e=!1){return _n.tidy((()=>{xe(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=Wi(n),a=As(t);const i=$l([[1]],[1,1]);let o=As(i);const l=n>=r?r:n;for(let t=0;t<l;++t){const e=a,l=o,u=s;[o,a,s]=_n.tidy((()=>{const e=ti(a,[t,t],[n-t,1]),l=gu(e),u=ti(a,[t,t],[1,1]),c=Ti(ji(u,0),$l([[-1]]),$l([[1]])),h=ho(u,ga(c,l)),p=ma(e,h);o=1===p.shape[0]?As(i):Za([i,ti(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=oo(ma(Bs(c,h),l)),f=ti(a,[t,0],[n-t,r]),m=ga(d,o),g=Ws(o);if(0===t)a=ho(f,Bs(m,Bs(g,f)));else{const e=ho(f,Bs(m,Bs(g,f)));a=Za([ti(a,[0,0],[t,r]),e],0)}const y=Ws(m),b=ti(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=ho(b,Bs(Bs(b,o),y));else{const e=ho(b,Bs(Bs(b,o),y));s=Za([ti(s,[0,0],[n,t]),e],1)}return[o,a,s]})),ca([e,l,u])}return!e&&n>r&&(s=ti(s,[0,0],[n,r]),a=ti(a,[0,0],[r,r])),[s,a]}))}const Su=Ur({qr_:function(t,e=!1){if(xe(t.rank>=2,(()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank)),2===t.rank)return Iu(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=Fl(zs(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach((t=>{const[n,r]=Iu(t,e);s.push(n),a.push(r)}));return[zs(kl(s,0),t.shape),zs(kl(a,0),t.shape)]}}});var Eu,$u;($u=Eu||(Eu={}))[$u.NONE=0]="NONE",$u[$u.MEAN=1]="MEAN",$u[$u.SUM=2]="SUM",$u[$u.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const Ru=Ur({computeWeightedLoss_:function(t,e,n=Eu.SUM_BY_NONZERO_WEIGHTS){const r=Pr(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Pr(e,"weights","computeWeightedLoss"));const a=null==s?r:ga(r,s);if(n===Eu.NONE)return a;if(n===Eu.SUM)return po(a);if(n===Eu.MEAN){if(null==s)return ko(a);{const t=r.size/s.size,e=ma(po(a),po(s));return t>1?ma(e,Qi(t)):e}}if(n===Eu.SUM_BY_NONZERO_WEIGHTS){if(null==s)return ma(po(a),Qi(r.size));{const t=ga(s,No(r.shape)),e=Rs(po(Ao(t,Qi(0))),"float32");return ma(po(a),e)}}throw Error("Unknown reduction: "+n)}});Ur({absoluteDifference_:function(t,e,n,r=Eu.SUM_BY_NONZERO_WEIGHTS){const s=Pr(t,"labels","absoluteDifference"),a=Pr(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Pr(n,"weights","absoluteDifference")),we(s.shape,a.shape,"Error in absoluteDifference: ");const o=ya(ho(s,a));return Ru(o,i,r)}});Ur({cosineDistance_:function(t,e,n,r,s=Eu.SUM_BY_NONZERO_WEIGHTS){const a=Pr(t,"labels","cosineDistance"),i=Pr(e,"predictions","cosineDistance");let o=null;null!=r&&(o=Pr(r,"weights","cosineDistance")),we(a.shape,i.shape,"Error in cosineDistance: ");const l=Qi(1),u=ho(l,po(ga(a,i),n,!0));return Ru(u,o,s)}});Ur({hingeLoss_:function(t,e,n,r=Eu.SUM_BY_NONZERO_WEIGHTS){let s=Pr(t,"labels","hingeLoss");const a=Pr(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Pr(n,"weights","hingeLoss")),we(s.shape,a.shape,"Error in hingeLoss: ");const o=Qi(1);s=ho(ga(Qi(2),s),o);const l=el(ho(o,ga(s,a)));return Ru(l,i,r)}});Ur({huberLoss_:function(t,e,n,r=1,s=Eu.SUM_BY_NONZERO_WEIGHTS){const a=Pr(t,"labels","huberLoss"),i=Pr(e,"predictions","huberLoss");let o=null;null!=n&&(o=Pr(n,"weights","huberLoss")),we(a.shape,i.shape,"Error in huberLoss: ");const l=Qi(r),u=ya(ho(i,a)),c=So(u,l),h=ho(u,c),p=da(ga(Qi(.5),$o(c)),ga(l,h));return Ru(p,o,s)}});Ur({logLoss_:function(t,e,n,r=1e-7,s=Eu.SUM_BY_NONZERO_WEIGHTS){const a=Pr(t,"labels","logLoss"),i=Pr(e,"predictions","logLoss");let o=null;null!=n&&(o=Pr(n,"weights","logLoss")),we(a.shape,i.shape,"Error in logLoss: ");const l=Qi(1),u=Qi(r),c=oo(ga(a,so(da(i,u)))),h=ga(ho(l,a),so(da(ho(l,i),u))),p=ho(c,h);return Ru(p,o,s)}});Ur({meanSquaredError_:function(t,e,n,r=Eu.SUM_BY_NONZERO_WEIGHTS){const s=Pr(t,"labels","meanSquaredError"),a=Pr(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Pr(n,"weights","meanSquaredError")),we(s.shape,a.shape,"Error in meanSquaredError: ");const o=Cl(s,a);return Ru(o,i,r)}});Ur({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Eu.SUM_BY_NONZERO_WEIGHTS){let a=Pr(t,"multiClassLabels","sigmoidCrossEntropy");const i=Pr(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Pr(n,"weights","sigmoidCrossEntropy")),we(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Qi(r),e=Qi(1),n=Qi(.5);a=da(ga(a,ho(e,t)),ga(n,t))}const l=function(t,e){const n=Pr(t,"labels","sigmoidCrossEntropyWithLogits"),r=Pr(e,"logits","sigmoidCrossEntropyWithLogits");we(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=el(r),a=ga(r,n),i=ao(Li(oo(ya(r))));return da(ho(s,a),i)}(a,i);return Ru(l,o,s)}});Ur({softmaxCrossEntropy_:function(t,e,n,r=0,s=Eu.SUM_BY_NONZERO_WEIGHTS){let a=Pr(t,"onehotLabels","softmaxCrossEntropy");const i=Pr(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Pr(n,"weights","softmaxCrossEntropy")),we(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Qi(r),e=Qi(1),n=Qi(a.shape[1]);a=da(ga(a,ho(e,t)),ma(t,n))}const l=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return io(((t,e,r)=>{const s=mo(e,[n],!0),a=ho(Rs(e,"float32"),s);r([t,a]);const i=oo(ga(a,t));return{value:po(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=Ca(t.shape,[n]);return[ga(zs(t,a),ho(Rs(r,"float32"),Li(s))),ga(zs(t,a),ho(Li(s),Rs(r,"float32")))]}}}))(t,e)}(a,i);return Ru(l,o,s)}});const Au={bandPart:Nu,gramSchmidt:ku,qr:Su};class Tu extends ra{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:s[t.name]})));this.applyGradients(t)}else this.applyGradients(s);return ca(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function(t,e){xe(Be(t),(()=>"The f passed in variableGrads(f) must be a function")),xe(null==e||Array.isArray(e)&&e.every((t=>t instanceof dn)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in _n.registeredVariables)e.push(_n.registeredVariables[t])}const r=n?e.filter((t=>!t.trainable)):null,s=e.length;xe((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=_n.gradients(t,e,null,!0);xe(i.some((t=>null!=t)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),xe(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return e.forEach(((t,e)=>{null!=i[e]&&(o[t.name]=i[e])})),null!=r&&r.forEach((t=>o[t.name]=null)),{value:a,grads:o}}(t,e)}dispose(){null!=this.iterations_&&ca(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Qi(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Tu,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Du extends Tu{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=_n.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=_n.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:ua((()=>Di(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:ua((()=>Di(r).variable(false)))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ua((()=>{const t=da(ga(a,this.rho),ga($o(s),1-this.rho)),e=ga(ma(vl(da(i,this.epsilon)),vl(da(a,this.epsilon))),s),n=da(ga(i,this.rho),ga($o(e),1-this.rho));a.assign(t),i.assign(n);const o=da(ga(e,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ca(this.accumulatedGrads.map((t=>t.variable))),ca(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}Du.className="Adadelta",aa(Du);class Fu extends Tu{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=_n.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:ua((()=>Ui(r.shape,this.initialAccumulatorValue).variable(t)))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;ua((()=>{const t=da(a,$o(s));a.assign(t);const e=da(ga(ma(s,vl(da(t,_n.backend.epsilon()))),-this.learningRate),r);r.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ca(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}Fu.className="Adagrad",aa(Fu);class _u extends Tu{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ua((()=>{this.accBeta1=Qi(e).variable(),this.accBeta2=Qi(n).variable()})),null==r&&(this.epsilon=_n.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);ua((()=>{const n=ho(1,this.accBeta1),r=ho(1,this.accBeta2);e.forEach(((e,s)=>{const a=_n.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:ua((()=>Di(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:ua((()=>Di(a).variable(false)))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=da(ga(o,this.beta1),ga(i,1-this.beta1)),c=da(ga(l,this.beta2),ga($o(i),1-this.beta2)),h=ma(u,n),p=ma(c,r);o.assign(u),l.assign(c);const d=da(ga(ma(h,da(vl(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(ga(this.accBeta1,this.beta1)),this.accBeta2.assign(ga(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ca(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&ca(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),ua((()=>{this.accBeta1.assign(Mo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Mo(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}_u.className="Adam",aa(_u);class Ou extends Tu{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ua((()=>{this.iteration=Qi(0).variable(),this.accBeta1=Qi(e).variable()})),null==r&&(this.epsilon=_n.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);ua((()=>{const n=ho(1,this.accBeta1),r=ma(-this.learningRate,da(ga(this.iteration,this.decay),1));e.forEach(((e,s)=>{const a=_n.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Di(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:Di(a).variable(false)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=da(ga(o,this.beta1),ga(i,1-this.beta1)),c=ga(l,this.beta2),h=ya(i),p=Zi(c,h);o.assign(u),l.assign(p);const d=da(ga(ma(r,n),ma(u,da(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(da(this.iteration,1)),this.accBeta1.assign(ga(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ca(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&ca(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Ou.className="Adamax",aa(Ou);class Mu extends Tu{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=_n.registeredVariables[e];ua((()=>{const t=da(ga(this.c,r),s);s.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=ha(Qi(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Mu.className="SGD",aa(Mu);class Lu extends Mu{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Qi(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=_n.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:ua((()=>Di(r).variable(t)))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&ua((()=>{let t;const e=da(ga(this.m,s),a);t=this.useNesterov?da(ga(this.c,da(a,ga(e,this.m))),r):da(ga(this.c,e),r),s.assign(e),r.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ca(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Lu.className="Momentum",aa(Lu);class zu extends Tu{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=_n.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=_n.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:ua((()=>Di(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:ua((()=>Di(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:ua((()=>Di(r).variable(s)))});const a=Array.isArray(t)?t[n].tensor:t[e];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;ua((()=>{const t=da(ga(i,this.decay),ga($o(a),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=da(ga(e,this.decay),ga(a,1-this.decay)),l=ma(ga(a,this.learningRate),vl(ho(t,da($o(s),this.epsilon)))),u=da(ga(o,this.momentum),l);i.assign(t),e.assign(s),o.assign(u);const c=ho(r,u);r.assign(c)}else{const t=da(ga(i,this.decay),ga($o(a),1-this.decay)),e=da(ga(o,this.momentum),ma(ga(a,this.learningRate),vl(da(t,this.epsilon))));i.assign(t),o.assign(e);const n=ho(r,e);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ca(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ca(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&ca(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}zu.className="RMSProp",aa(zu);const Bu="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Pu(){return new Promise((t=>Bu((()=>t()))))}class Wu{static sgd(t){return new Mu(t)}static momentum(t,e,n=!1){return new Lu(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new zu(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new _u(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new Du(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new Ou(t,e,n,r,s)}static adagrad(t,e=.1){return new Fu(t,e)}}const Uu={sgd:Wu.sgd,momentum:Wu.momentum,adadelta:Wu.adadelta,adagrad:Wu.adagrad,rmsprop:Wu.rmsprop,adamax:Wu.adamax,adam:Wu.adam};function Vu(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Gu(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Hu(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function ju(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function qu(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Ku(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Xu=1.7580993408473768,Yu=1.0507009873554805;function Ju(...t){r().getBool("IS_TEST")||console.warn(...t)}function Zu(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Qu(t,e){return{real:t[2*e],imag:t[2*e+1]}}function tc(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function ec(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function nc(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=Co(t.shape),r=Rs(t,"float32"),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(r=t.dtype,"complex64"===(s=e)||"float32"===s&&"complex64"!==r||"int32"===s&&"float32"!==r&&"complex64"!==r||"bool"===s&&"bool"===r)return _n.makeTensorFromDataId(t.dataId,t.shape,e);var r,s;if("complex64"===t.dtype){const r=n.real(t),s=Rs(r,e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=Qi(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function rc(t,e){return _n.makeTensorFromDataId(t.dataId,e,t.dtype)}function sc(t,e,n){const r=(e-t)/(n-1),s=je(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return Zo(s,"float32")}function ac(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map((e=>{const a=[...s];a[n]=e;const i=ti(t,r,a);return r[n]+=e,i}))}function ic(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=$s(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function oc(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],l=De(n,i*r),u=De("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort(((t,e)=>e.value-t.value));const i=e*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[Hr(l,c,n),Hr(u,c,"int32")]}class lc{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class uc{time(t){return cc("time")}read(t){return cc("read")}readSync(t){return cc("readSync")}numDataIds(){return cc("numDataIds")}disposeData(t){return cc("disposeData")}write(t,e,n){return cc("write")}move(t,e,n,r){return cc("move")}memory(){return cc("memory")}floatPrecision(){return cc("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return cc("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return cc("fusedBatchMatMul")}slice(t,e,n){return cc("slice")}stridedSlice(t,e,n,r){return cc("stridedSlice")}unstack(t,e){return cc("unstack")}reverse(t,e){return cc("reverse")}concat(t,e){return cc("concat")}neg(t){return cc("neg")}add(t,e){return cc("add")}addN(t){return cc("addN")}subtract(t,e){return cc("subtract")}multiply(t,e){return cc("multiply")}realDivide(t,e){return cc("realDivide")}floorDiv(t,e){return cc("floorDiv")}sum(t,e){return cc("sum")}prod(t,e){return cc("prod")}unsortedSegmentSum(t,e,n){return cc("unsortedSegmentSum")}argMin(t,e){return cc("argMin")}argMax(t,e){return cc("argMax")}equal(t,e){return cc("equal")}notEqual(t,e){return cc("notEqual")}less(t,e){return cc("less")}lessEqual(t,e){return cc("lessEqual")}greater(t,e){return cc("greater")}greaterEqual(t,e){return cc("greaterEqual")}logicalNot(t){return cc("logicalNot")}logicalAnd(t,e){return cc("logicalAnd")}logicalOr(t,e){return cc("logicalOr")}where(t){return cc("where")}select(t,e,n){return cc("select")}topk(t,e,n){return cc("topk")}min(t,e){return cc("min")}minimum(t,e){return cc("minimum")}mod(t,e){return cc("mod")}max(t,e){return cc("max")}maximum(t,e){return cc("maximum")}all(t,e){return cc("all")}any(t,e){return cc("any")}squaredDifference(t,e){return cc("squaredDifference")}ceil(t){return cc("ceil")}floor(t){return cc("floor")}round(t){return cc("round")}sign(t){return cc("sign")}isNaN(t){return cc("isNaN")}isInf(t){return cc("isInf")}isFinite(t){return cc("isFinite")}pow(t,e){return cc("pow")}exp(t){return cc("exp")}expm1(t){return cc("expm1")}softmax(t,e){return cc("softmax")}log(t){return cc("log")}log1p(t){return cc("log1p")}sqrt(t){return cc("sqrt")}rsqrt(t){return cc("rsqrt")}square(t){return cc("square")}reciprocal(t){return cc("reciprocal")}relu(t){return cc("relu")}relu6(t){return cc("relu6")}prelu(t,e){return cc("prelu")}elu(t){return cc("elu")}eluDer(t,e){return cc("eluDer")}selu(t){return cc("selu")}int(t){return cc("int")}clip(t,e,n){return cc("clip")}abs(t){return cc("abs")}complexAbs(t){return cc("complexAbs")}sigmoid(t){return cc("sigmoid")}softplus(t){return cc("softplus")}sin(t){return cc("sin")}cos(t){return cc("cos")}tan(t){return cc("tan")}asin(t){return cc("asin")}acos(t){return cc("acos")}atan(t){return cc("atan")}atan2(t,e){return cc("atan2")}sinh(t){return cc("sinh")}cosh(t){return cc("cosh")}tanh(t){return cc("tanh")}asinh(t){return cc("asinh")}acosh(t){return cc("acosh")}atanh(t){return cc("atanh")}erf(t){return cc("erf")}step(t,e){return cc("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return cc("fusedConv2d")}conv2d(t,e,n){return cc("conv2d")}conv2dDerInput(t,e,n){return cc("conv2dDerInput")}conv2dDerFilter(t,e,n){return cc("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return cc("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return cc("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return cc("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return cc("depthwiseConv2DDerFilter")}conv3d(t,e,n){return cc("conv3d")}conv3dDerInput(t,e,n){return cc("conv3dDerInput")}conv3dDerFilter(t,e,n){return cc("conv3dDerFilter")}maxPool(t,e){return cc("maxPool")}maxPoolBackprop(t,e,n,r){return cc("maxPoolBackprop")}avgPool(t,e){return cc("avgPool")}avgPoolBackprop(t,e,n){return cc("avgPoolBackprop")}avgPool3d(t,e){return cc("avgPool3d")}avgPool3dBackprop(t,e,n){return cc("avgPool3dBackprop")}maxPool3d(t,e){return cc("maxPool3d")}maxPool3dBackprop(t,e,n,r){return cc("maxPool3dBackprop")}reshape(t,e){return cc("reshape")}cast(t,e){return cc("cast")}tile(t,e){return cc("tile")}pad(t,e,n){return cc("pad")}transpose(t,e){return cc("transpose")}gather(t,e,n){return cc("gather")}gatherND(t,e){return cc("gatherND")}scatterND(t,e,n){return cc("scatterND")}batchToSpaceND(t,e,n){return cc("batchToSpaceND")}spaceToBatchND(t,e,n){return cc("spaceToBatchND")}resizeBilinear(t,e,n,r){return cc("resizeBilinear")}resizeBilinearBackprop(t,e,n){return cc("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return cc("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return cc("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return cc("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return cc("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return cc("LRNGrad")}multinomial(t,e,n,r){return cc("multinomial")}oneHot(t,e,n,r){return cc("oneHot")}cumsum(t,e,n,r){return cc("cumsum")}nonMaxSuppression(t,e,n,r,s){return cc("nonMaxSuppression")}fft(t){return cc("fft")}ifft(t){return cc("ifft")}complex(t,e){return cc("complex")}real(t){return cc("real")}imag(t){return cc("imag")}cropAndResize(t,e,n,r,s,a){return cc("cropAndResize")}depthToSpace(t,e,n){return cc("depthToSpace")}split(t,e,n){return cc("split")}sparseToDense(t,e,n,r){return cc("sparseToDense")}diag(t){return cc("diag")}fill(t,e,n){return cc("fill")}onesLike(t){return cc("onesLike")}zerosLike(t){return cc("zerosLike")}linspace(t,e,n){return cc("linspace")}dispose(){return cc("dispose")}}function cc(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}const hc={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,Il(Rs(n,"float32"),-1))}}},pc={kernelName:N,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=$o(Rs(n,"float32")),r=vl(ho(Qi(1),e));return oo(ma(t,r))}}}},dc={kernelName:k,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=vl(ho($o(Rs(n,"float32")),1));return ma(t,e)}}}},fc={kernelName:I,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{let e=t;const r=$i(n.shape,s);return r.length>0&&(e=po(e,r)),zs(e,n.shape)},b:()=>{let e=t;const n=$i(r.shape,s);return n.length>0&&(e=po(e,n)),zs(e,r.shape)}}}},mc={kernelName:S,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,r)=>{n[r]=()=>t.clone()})),n}},gc={kernelName:E,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Di(n)}}},yc={kernelName:$,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Di(n)}}},bc={kernelName:R,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,vl(ho(Qi(1),$o(Rs(n,"float32")))))}}},xc={kernelName:A,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=vl(da(Qi(1),$o(Rs(n,"float32"))));return ma(t,e)}}}},wc={kernelName:F,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{const e=da($o(n),$o(r));let a=ga(t,ma(r,e));const i=$i(n.shape,s);return i.length>0&&(a=po(a,i)),zs(a,n.shape)},b:()=>{const e=da($o(n),$o(r));let a=oo(ga(t,ma(n,e)));const i=$i(r.shape,s);return i.length>0&&(a=po(a,i)),zs(a,r.shape)}}}},vc={kernelName:T,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,da($o(Rs(n,"float32")),1))}}},Cc={kernelName:D,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,ho(Qi(1),$o(Rs(n,"float32"))))}}};const Nc=Ur({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Pr(t,"dy","avgPool3dBackprop"),l=Pr(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=zs(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=zs(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),xe(5===u.rank,(()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+".")),xe(5===c.rank,(()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+".")),xe(qa(r,s),(()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=i&&xe(Ie(a),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const p={dy:u,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=_n.runKernelFunc((t=>{const e=za(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(u,c,e)}),p,null,"AvgPool3DBackprop",d);return h?zs(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),kc={kernelName:O,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Nc(t,r,s,a,u,o,l)}}};const Ic=Ur({avgPoolBackprop_:function(t,e,n,r,s){const a=Pr(t,"dy","avgPoolBackprop"),i=Pr(e,"input","avgPoolBackprop");xe(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=zs(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),xe(4===l.rank,(()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+".")),xe(4===o.rank,(()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+"."));const c={dy:l,input:o},h={filterSize:n,strides:r,pad:s},p=_n.runKernelFunc((t=>{const e=La(o.shape,n,r,1,s);return t.avgPoolBackprop(l,o,e)}),c,null,"AvgPoolBackprop",h);return u?zs(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Sc={kernelName:_,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Ic(t,r,s,a,i)}}},Ec={kernelName:M,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Bs(t,s,!1,!1),b:()=>Bs(t,r,!0,!1)}:a&&!i?{a:()=>Bs(s,t,!1,!0),b:()=>Bs(r,t,!1,!1)}:{a:()=>Bs(s,t,!0,!0),b:()=>Bs(t,r,!0,!0)}:{a:()=>Bs(t,s,!1,!0),b:()=>Bs(r,t,!0,!1)}}},$c={kernelName:L,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>_o(t,r,s)}}},Rc={kernelName:z,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>po(t,o,!0)}}},Ac={kernelName:B,gradFunc:t=>({x:()=>t.clone()})},Tc={kernelName:P,gradFunc:t=>({x:()=>Di(t)})},Dc={kernelName:W,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Ti(go(qi(r,s),no(r,a)),t,Di(t))}}},Fc={kernelName:U,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map((t=>t.shape)),{axis:s}=n,a=Ae(s,e[0].shape)[0],i=r.map((t=>t[a]));return xl(t,i,a).map((t=>()=>t))}},_c={kernelName:V,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return xe(ja(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>yi(r.shape,t,s,i,o,l),filter:()=>Ol(r,t,s.shape,i,o,l)}}},Oc={kernelName:G,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>mi(t,s,a,i,o,1,l),filter:()=>Ol(t,r,s.shape,a,i,o,l)}}};const Mc=Ur({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=zs(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=zs(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),xe(5===a.rank,(()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+".")),xe(5===i.rank,(()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+".")),xe(5===n.length,(()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+".")),xe(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),xe(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,y:i},l={strides:r,pad:s};return _n.runKernelFunc((t=>{const e=Pa(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)}),o,null,"Conv3DBackpropFilterV2",l)}}),Lc={kernelName:H,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;xe(ja(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=e;return{x:()=>wi(i.shape,t,o,s,a),filter:()=>Mc(i,t,o.shape,s,a)}}},zc={kernelName:j,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(oo(ul(Rs(n,"float32"))),t)}}},Bc={kernelName:q,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(cl(Rs(n,"float32")),t)}}},Pc={kernelName:K,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=ka([s],r.rank);let n=Ni(t,s,a,!i);return null!=e&&(n=Ws(n,e)),n}}}},Wc={kernelName:X,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;xe(ja(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=e;xe(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),xe(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),xe(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),xe(qa(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&xe(Ie(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c=Ba(l.shape,u.shape,s,o,a,i,!0);return{x:()=>Ul(l.shape,t,u,c),filter:()=>Wl(l,t,u.shape,c)}}},Uc={kernelName:Y,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>_n.runKernel(J,a,n),filter:()=>_n.runKernel(Z,i,n)}}},Vc={kernelName:Q,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{const e=ma(t,Rs(r,"float32")),a=$i(n.shape,s);return a.length>0?zs(po(e,a),n.shape):e},b:()=>{let e=ga(t,Rs(n,"float32"));const a=$i(r.shape,s);a.length>0&&(e=zs(po(e,a),r.shape));const i=$o(r);return oo(ma(e,Rs(i,"float32")))}}}},Gc={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>_n.runKernelFunc(r,s,null,"EluGrad")}}},Hc={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=ga(Li(oo($o(n))),2/Math.sqrt(Math.PI));return{x:()=>ga(t,r)}}},jc={kernelName:"Exp",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,n)}}},qc={kernelName:tt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,Li(n))}}},Kc={kernelName:nt,gradFunc:t=>({x:()=>Di(t)})},Xc={kernelName:rt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{const e=ma(t,Rs(r,"float32")),a=$i(n.shape,s);return a.length>0?zs(po(e,a),n.shape):e},b:()=>{let e=ga(t,Rs(n,"float32"));const a=$i(r.shape,s);a.length>0&&(e=zs(po(e,a),r.shape));const i=$o(r);return oo(ma(e,Rs(i,"float32")))}}}},Yc={kernelName:st,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,l=null==o?Qi(1):o,u=$i(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=ho(s,a),p=ga(t,l),d=al(da(i,Qi(r))),f=ga(ga(ga(d,d),d),Qi(-.5));return{x:()=>1===a.rank?zs(ga(ga(t,Pi(zs(d,[1,1,1,a.shape[0]]),c)),l),s.shape):zs(ga(ga(t,d),l),s.shape),mean:()=>{let t=ga(ga(d,Qi(-1)),p);return 1===a.rank&&(t=po(t,u)),zs(t,a.shape)},variance:()=>{let t=ga(ga(f,h),p);return 1===a.rank&&(t=po(t,u)),zs(t,a.shape)},scale:()=>{const e=ga(h,d);let n=ga(t,e);return 1===a.rank&&(n=po(n,u)),zs(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=po(e,u)),zs(e,a.shape)}}}},Jc={kernelName:at,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=Ae(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),l=o.length,u=e.slice(a,e.length).slice(1),c=u.length,h=Zc(0,l),p=Zc(l+1,l+1+c),d=Qc([o,[n],u]),f=zs(t,d),m=zs(s,[n]),g=Qc([[l],h,p]),y=Ws(f,g);let b=Dl(y,m,r.shape[i]);const x=Ia(g);return b=Ws(b,x),b},indices:()=>s}}};function Zc(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Qc(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const th={kernelName:it,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Di(n),b:()=>Di(r)}}},eh={kernelName:ot,gradFunc:t=>({x:()=>Rs(t,"float32")})},nh={kernelName:lt,gradFunc:t=>({x:()=>Di(t)})},rh={kernelName:ut,gradFunc:t=>({x:()=>Di(t)})},sh={kernelName:ct,gradFunc:t=>({x:()=>Di(t)})},ah={kernelName:ht,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,da(n,1))}}},ih={kernelName:"Log",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,Rs(n,"float32"))}}},oh={kernelName:pt,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=Li(r);return ho(t,ga(po(t,s,!0),e))}}}};const lh=Ur({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:i};return _n.runKernelFunc((o=>o.LRNGrad(n,t,e,r,s,a,i)),o,null,"LRNBackprop",l)}}),uh={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>lh(r,s,t,a,i,o,l)}}};function ch(t,e,n,r,s){return e.rank<n.rank&&(e=zs(e,Ca(e.shape,r))),t.rank<n.rank&&(t=zs(t,Ca(t.shape,r))),{x:()=>{const r=ga(t,Rs(Ai(n,e),t.dtype));return null==s?r:Ws(r,s)}}}const hh={kernelName:dt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=Ae(s,a.shape),l=ka(o,a.rank),u=ch(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=Ws(t)),t}}}},ph={kernelName:ft,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>ga(t,Rs(qi(n,r),"float32")),b:()=>ga(t,Rs(eo(n,r),"float32"))}}};const dh=Ur({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const l=Pr(t,"dy","maxPool3dBackprop"),u=Pr(e,"input","maxPool3dBackprop"),c=Pr(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=zs(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=zs(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=zs(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),xe(5===h.rank,(()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+".")),xe(5===p.rank,(()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+".")),xe(5===d.rank,(()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+".")),xe(qa(s,a),(()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=o&&xe(Ie(i),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=_n.runKernelFunc((t=>{const e=za(p.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,p,d,e)}),m,null,"MaxPool3DBackprop",g);return f?zs(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),fh={kernelName:gt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>dh(t,r,s,a,i,c,l,u)}}};const mh=Ur({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Pr(t,"dy","maxPoolBackprop"),l=Pr(e,"input","maxPoolBackprop"),u=Pr(n,"output","maxPoolBackprop");xe(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),xe(4===o.rank,(()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+".")),xe(4===l.rank,(()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+".")),null!=i&&xe(Ie(a),(()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return _n.runKernelFunc((t=>{const e=La(l.shape,r,s,1,a,i);return t.maxPoolBackprop(o,l,u,e)}),c,null,"MaxPoolBackprop",h)}}),gh={kernelName:St,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map((t=>t[0]));return{x:()=>ti(t,a,r.shape)}}},yh={kernelName:Ht,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>ni(t,r,s)}}},bh={kernelName:jt,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>Za(t,r)}}};const xh=[hc,pc,dc,fc,mc,gc,yc,bc,xc,wc,vc,Cc,kc,Sc,Ec,$c,Rc,Ac,Tc,Dc,Fc,Oc,_c,Lc,zc,Bc,Pc,Wc,Uc,Vc,Gc,Hc,jc,qc,Xc,Kc,Yc,Jc,th,eh,nh,rh,sh,ah,ih,oh,uh,hh,hh,ph,fh,{kernelName:mt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>mh(t,r,s,a,i,o)}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=Ae(s,a.shape),l=ka(o,a.rank),u=ch(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=Ws(t)),t}}}},{kernelName:bt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>ga(t,Rs(no(n,r),"float32")),b:()=>ga(t,Rs(ji(n,r),"float32"))}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{const e=$i(n.shape,s);return e.length>0?zs(po(t,e),n.shape):t},b:()=>{const e=ga(t,oo(Vi(ma(n,r)))),a=$i(r.shape,s);return a.length>0?zs(po(e,a),r.shape):e}}}},{kernelName:xt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{const e=ga(t,Rs(r,"float32")),a=$i(n.shape,s);return a.length>0?zs(po(e,a),n.shape):e},b:()=>{const e=ga(t,Rs(n,"float32")),a=$i(r.shape,s);return a.length>0?zs(po(e,a),r.shape):e}}}},{kernelName:wt,gradFunc:t=>({x:()=>oo(t)})},{kernelName:It,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Co(n.shape,"float32")}}},{kernelName:kt,gradFunc:t=>({x:()=>Di(t)})},gh,gh,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=Ri(a.shape,i.shape);return{a:()=>{const e=Rs(i,"float32");let n=ga(t,ga(e,Mo(a,ho(e,Qi(1)))));const r=$i(a.shape,o);return r.length>0&&(n=po(n,r)),zs(n,a.shape)},b:()=>{const e=ji(a,0),n=Ti(e,so(a),Di(a));let r=ga(t,ga(s,n));const l=$i(i.shape,o);return l.length>0&&(r=po(r,l)),zs(r,i.shape)}}}},{kernelName:Et,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=ji(n,0);return{x:()=>Ti(s,t,ga(t,r)),alpha:()=>{let e=Ti(s,Di(t),ga(t,n));const a=$i(r.shape,t.shape);return a.length>0&&(e=po(e,a)),zs(e,r.shape)}}}},{kernelName:$t,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,oo($o(n)))}}},{kernelName:Ft,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=ga(no(n,6),Il(n));return{x:()=>ga(t,Rs(r,"float32"))}}},{kernelName:Rt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,Rs(Il(n),"float32"))}}},{kernelName:At,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>zs(t,n.shape)}}},{kernelName:Dt,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>_n.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},{kernelName:Tt,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>_n.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}},{kernelName:_t,gradFunc:(t,e,n)=>{const{dims:r}=n,s=Ae(r,t.shape);return{x:()=>rl(t,s)}}},{kernelName:Ot,gradFunc:t=>({x:()=>Di(t)})},{kernelName:Mt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>oo(ma(t,ga(Mo(n,1.5),2)))}}},{kernelName:Lt,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Rs(Di(n),"float32"),t:()=>ga(t,Rs(n,t.dtype)),e:()=>ga(t,Rs(yo(n),t.dtype))}}},{kernelName:zt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ji(n,Qi(0)),r=Qi(Xu),s=Qi(Yu),a=ga(t,s),i=ga(ga(t,r),Li(Rs(n,"float32")));return Ti(e,a,i)}}}},{kernelName:Ut,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,ga(n,ho(Qi(1),n)))}}},{kernelName:Wt,gradFunc:t=>({x:()=>Di(t)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(vi(Rs(n,"float32")),t)}}},{kernelName:Pt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(Ci(Rs(n,"float32")),t)}}},{kernelName:Bt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,l]=na(r,s,a),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],i[e]-o[e]-l[e]]);return{x:()=>Fo(t,u)}}},{kernelName:qt,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=ga(t,r);return{logits:()=>ho(a,ga(po(a,[s],true),r))}}},{kernelName:Vt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,Qa(n))}}},yh,yh,bh,bh,{kernelName:Gt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,ga(vl(Rs(n,"float32")),2))}}},{kernelName:Kt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Qi(2);return{a:()=>ga(t,ga(s,ho(n,r))),b:()=>ga(t,ga(s,ho(r,n)))}}},{kernelName:Xt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(t,ga(Rs(n,"float32"),2))}}},{kernelName:ne,gradFunc:t=>({x:()=>Di(t)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ri(n.shape,r.shape);return{a:()=>{let e=t;const r=$i(n.shape,s);return r.length>0&&(e=po(e,r)),zs(e,n.shape)},b:()=>{let e=t;const n=$i(r.shape,s);return n.length>0&&(e=po(e,n)),zs(oo(e),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;Ae(a,r.shape).forEach((t=>{s[t]=1}));const i=zs(t,s),o=ga(i,No(r.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ma(t,$o(vi(n)))}}},{kernelName:Yt,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ga(ho(Qi(1),$o(n)),t)}}},{kernelName:Jt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=Di(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=da(e,ti(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=da(e,ti(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=da(e,ti(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=da(e,ti(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:Zt,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=Ia(s);return{x:()=>Ws(t,a)}}},{kernelName:Qt,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>kl(t,s)}}},{kernelName:te,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Zi(e,Di(e)),r=Hi(t,n);let s=qi(e,Qi(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=zi(s,t+1);s=go(s,No(r.shape,"bool"));const i=Di(r);return Ti(s,r,i)}(t,n)}}},{kernelName:ee,gradFunc:t=>({x:()=>Di(t)})}];for(const t of xh)fe(t);let wh;function vh(){return null==wh&&(wh=_n.backend.epsilon()),wh}pn.prototype.abs=function(){return this.throwIfDisposed(),ya(this)},pn.prototype.acos=function(){return this.throwIfDisposed(),ba(this)},pn.prototype.acosh=function(){return this.throwIfDisposed(),xa(this)},pn.prototype.addStrict=function(t){return this.throwIfDisposed(),su(this,t)},pn.prototype.add=function(t){return this.throwIfDisposed(),da(this,t)},pn.prototype.all=function(t,e){return this.throwIfDisposed(),Ea(this,t,e)},pn.prototype.any=function(t,e){return this.throwIfDisposed(),$a(this,t,e)},pn.prototype.argMax=function(t){return this.throwIfDisposed(),Ra(this,t)},pn.prototype.argMin=function(t){return this.throwIfDisposed(),Aa(this,t)},pn.prototype.asScalar=function(){return this.throwIfDisposed(),xe(1===this.size,(()=>"The array must have only 1 element.")),zs(this,[])},pn.prototype.asType=function(t){return this.throwIfDisposed(),Rs(this,t)},pn.prototype.as1D=function(){return this.throwIfDisposed(),zs(this,[this.size])},pn.prototype.as2D=function(t,e){return this.throwIfDisposed(),zs(this,[t,e])},pn.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),zs(this,[t,e,n])},pn.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),zs(this,[t,e,n,r])},pn.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),zs(this,[t,e,n,r,s])},pn.prototype.asin=function(){return this.throwIfDisposed(),Ta(this)},pn.prototype.asinh=function(){return this.throwIfDisposed(),Da(this)},pn.prototype.atan=function(){return this.throwIfDisposed(),Fa(this)},pn.prototype.atan2=function(t){return this.throwIfDisposed(),_a(this,t)},pn.prototype.atanh=function(){return this.throwIfDisposed(),Oa(this)},pn.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Xa(this,t,e,n,r)},pn.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),ni(this,t,e)},pn.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),si(this,t,e,n,r,s)},pn.prototype.broadcastTo=function(t){return this.throwIfDisposed(),li(this,t)},pn.prototype.cast=function(t){return this.throwIfDisposed(),Rs(this,t)},pn.prototype.ceil=function(){return this.throwIfDisposed(),ui(this)},pn.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),ci(this,t,e)},pn.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof pn&&(t=[t]),Za([this,...t],e)},pn.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),gi(this,t,e,n,r,s,a)},pn.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),bi(this,t,e,n,r,s)},pn.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),mi(this,t,e,n,r,s,a)},pn.prototype.cos=function(){return this.throwIfDisposed(),vi(this)},pn.prototype.cosh=function(){return this.throwIfDisposed(),Ci(this)},pn.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Ni(this,t,e,n)},pn.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),ki(this,t,e)},pn.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return ia("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Ii(this,t,e,n,r,s,a)},pn.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Ii(this,t,e,n,r,s,a)},pn.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),Si(this,t,e,n,r,s)},pn.prototype.divNoNan=function(t){return this.throwIfDisposed(),Fi(this,t)},pn.prototype.divStrict=function(t){return this.throwIfDisposed(),au(this,t)},pn.prototype.div=function(t){return this.throwIfDisposed(),ma(this,t)},pn.prototype.dot=function(t){return this.throwIfDisposed(),_i(this,t)},pn.prototype.elu=function(){return this.throwIfDisposed(),Oi(this)},pn.prototype.equalStrict=function(t){return this.throwIfDisposed(),Zl(this,t)},pn.prototype.equal=function(t){return this.throwIfDisposed(),Ai(this,t)},pn.prototype.erf=function(){return this.throwIfDisposed(),Mi(this)},pn.prototype.exp=function(){return this.throwIfDisposed(),Li(this)},pn.prototype.expandDims=function(t){return this.throwIfDisposed(),zi(this,t)},pn.prototype.expm1=function(){return this.throwIfDisposed(),Bi(this)},pn.prototype.fft=function(){return this.throwIfDisposed(),gl(this)},pn.prototype.flatten=function(){return this.throwIfDisposed(),zs(this,[this.size])},pn.prototype.floor=function(){return this.throwIfDisposed(),Vi(this)},pn.prototype.floorDiv=function(t){return this.throwIfDisposed(),fa(this,t)},pn.prototype.gather=function(t,e){return this.throwIfDisposed(),Hi(this,t,e)},pn.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),Ql(this,t)},pn.prototype.greaterEqual=function(t){return this.throwIfDisposed(),qi(this,t)},pn.prototype.greaterStrict=function(t){return this.throwIfDisposed(),tu(this,t)},pn.prototype.greater=function(t){return this.throwIfDisposed(),ji(this,t)},pn.prototype.ifft=function(){return this.throwIfDisposed(),yl(this)},pn.prototype.irfft=function(){return this.throwIfDisposed(),bl(this)},pn.prototype.isFinite=function(){return this.throwIfDisposed(),Xi(this)},pn.prototype.isInf=function(){return this.throwIfDisposed(),Yi(this)},pn.prototype.isNaN=function(){return this.throwIfDisposed(),Ji(this)},pn.prototype.leakyRelu=function(t){return this.throwIfDisposed(),to(this,t)},pn.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),eu(this,t)},pn.prototype.lessEqual=function(t){return this.throwIfDisposed(),no(this,t)},pn.prototype.lessStrict=function(t){return this.throwIfDisposed(),nu(this,t)},pn.prototype.less=function(t){return this.throwIfDisposed(),eo(this,t)},pn.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),ro(this,t,e,n,r)},pn.prototype.logSigmoid=function(){return this.throwIfDisposed(),uo(this)},pn.prototype.logSoftmax=function(t){return this.throwIfDisposed(),fo(this,t)},pn.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),mo(this,t,e)},pn.prototype.log=function(){return this.throwIfDisposed(),so(this)},pn.prototype.log1p=function(){return this.throwIfDisposed(),ao(this)},pn.prototype.logicalAnd=function(t){return this.throwIfDisposed(),go(this,t)},pn.prototype.logicalNot=function(){return this.throwIfDisposed(),yo(this)},pn.prototype.logicalOr=function(t){return this.throwIfDisposed(),bo(this,t)},pn.prototype.logicalXor=function(t){return this.throwIfDisposed(),xo(this,t)},pn.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Bs(this,t,e,n)},pn.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),wo(this,t,e,n,r)},pn.prototype.max=function(t,e){return this.throwIfDisposed(),co(this,t,e)},pn.prototype.maximumStrict=function(t){return this.throwIfDisposed(),iu(this,t)},pn.prototype.maximum=function(t){return this.throwIfDisposed(),Zi(this,t)},pn.prototype.mean=function(t,e){return this.throwIfDisposed(),ko(this,t,e)},pn.prototype.min=function(t,e){return this.throwIfDisposed(),Io(this,t,e)},pn.prototype.minimumStrict=function(t){return this.throwIfDisposed(),ou(this,t)},pn.prototype.minimum=function(t){return this.throwIfDisposed(),So(this,t)},pn.prototype.modStrict=function(t){return this.throwIfDisposed(),lu(this,t)},pn.prototype.mod=function(t){return this.throwIfDisposed(),Eo(this,t)},pn.prototype.mulStrict=function(t){return this.throwIfDisposed(),uu(this,t)},pn.prototype.mul=function(t){return this.throwIfDisposed(),ga(this,t)},pn.prototype.neg=function(){return this.throwIfDisposed(),oo(this)},pn.prototype.norm=function(t,e,n){return this.throwIfDisposed(),gu(this,t,e,n)},pn.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),ru(this,t)},pn.prototype.notEqual=function(t){return this.throwIfDisposed(),Ao(this,t)},pn.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Ps(this,t,e,n)},pn.prototype.onesLike=function(){return this.throwIfDisposed(),Do(this)},pn.prototype.pad=function(t,e){return this.throwIfDisposed(),Fo(this,t,e)},pn.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),Oo(this,t,e,n,r,s)},pn.prototype.powStrict=function(t){return this.throwIfDisposed(),cu(this,t)},pn.prototype.pow=function(t){return this.throwIfDisposed(),Mo(this,t)},pn.prototype.prelu=function(t){return this.throwIfDisposed(),Lo(this,t)},pn.prototype.prod=function(t,e){return this.throwIfDisposed(),zo(this,t,e)},pn.prototype.reciprocal=function(){return this.throwIfDisposed(),tl(this)},pn.prototype.relu=function(){return this.throwIfDisposed(),el(this)},pn.prototype.relu6=function(){return this.throwIfDisposed(),nl(this)},pn.prototype.reshapeAs=function(t){return this.throwIfDisposed(),zs(this,t.shape)},pn.prototype.reshape=function(t){return this.throwIfDisposed(),zs(this,t)},pn.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),vu(this,t,e)},pn.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Cu(this,t,e)},pn.prototype.reverse=function(t){return this.throwIfDisposed(),rl(this,t)},pn.prototype.rfft=function(){return this.throwIfDisposed(),wl(this)},pn.prototype.round=function(){return this.throwIfDisposed(),sl(this)},pn.prototype.rsqrt=function(){return this.throwIfDisposed(),al(this)},pn.prototype.selu=function(){return this.throwIfDisposed(),il(this)},pn.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ol(this,t,e,n,r,s,a)},pn.prototype.sigmoid=function(){return this.throwIfDisposed(),Qa(this)},pn.prototype.sign=function(){return this.throwIfDisposed(),ll(this)},pn.prototype.sin=function(){return this.throwIfDisposed(),ul(this)},pn.prototype.sinh=function(){return this.throwIfDisposed(),cl(this)},pn.prototype.slice=function(t,e){return this.throwIfDisposed(),ti(this,t,e)},pn.prototype.softmax=function(t){return this.throwIfDisposed(),ml(this,t)},pn.prototype.softplus=function(){return this.throwIfDisposed(),lo(this)},pn.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),_o(this,t,e)},pn.prototype.split=function(t,e){return this.throwIfDisposed(),xl(this,t,e)},pn.prototype.sqrt=function(){return this.throwIfDisposed(),vl(this)},pn.prototype.square=function(){return this.throwIfDisposed(),$o(this)},pn.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Cl(this,t)},pn.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),hu(this,t)},pn.prototype.squeeze=function(t){return this.throwIfDisposed(),Nl(this,t)},pn.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof pn?[this,t]:[this,...t];return kl(n,e)},pn.prototype.step=function(t){return this.throwIfDisposed(),Il(this,t)},pn.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),Sl(this,t,e,n,r,s,a,i,o)},pn.prototype.subStrict=function(t){return this.throwIfDisposed(),pu(this,t)},pn.prototype.sub=function(t){return this.throwIfDisposed(),ho(this,t)},pn.prototype.sum=function(t,e){return this.throwIfDisposed(),po(this,t,e)},pn.prototype.tan=function(){return this.throwIfDisposed(),El(this)},pn.prototype.tanh=function(){return this.throwIfDisposed(),ei(this)},pn.prototype.tile=function(t){return this.throwIfDisposed(),Pi(this,t)},pn.prototype.toBool=function(){return this.throwIfDisposed(),Rs(this,"bool")},pn.prototype.toFloat=function(){return this.throwIfDisposed(),Rs(this,"float32")},pn.prototype.toInt=function(){return this.throwIfDisposed(),Rs(this,"int32")},pn.prototype.topk=function(t,e){return this.throwIfDisposed(),Al(this,t,e)},pn.prototype.transpose=function(t){return this.throwIfDisposed(),Ws(this,t)},pn.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Dl(this,t,e)},pn.prototype.unstack=function(t){return this.throwIfDisposed(),Fl(this,t)},pn.prototype.where=function(t,e){return this.throwIfDisposed(),Ti(t,this,e)},pn.prototype.zerosLike=function(){return this.throwIfDisposed(),Di(this)};class Ch extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ch.prototype)}}class Nh extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Nh.prototype)}}class kh extends Error{constructor(t){super(t),Object.setPrototypeOf(this,kh.prototype)}}class Ih extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ih.prototype)}}class Sh extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Sh.prototype)}}Error;function Eh(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function $h(t,e){if(!t)throw new Sh(e)}function Rh(t,e){let n=0;for(const r of t)r===e&&n++;return n}function Ah(t){return 1===t.length?t[0]:t}function Th(t){return Array.isArray(t)?t:[t]}function Dh(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Fh(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}let _h={};function Oh(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Mh(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((t=>Mh(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?Mh(e):t[n]=e.value)}}}function Lh(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in _h)a=_h[s];else if(a=e[s],null==a)throw new kh(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new kh(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in _h?[o,l]=_h.className:i in e&&([o,l]=e[i]),null==o)throw new kh(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(_h))t[e]=_h[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},_h);for(const t of Object.keys(n))_h[t]=n[t];Mh(a.config);const r=l(o,a.config,n,s);return _h=Object.assign({},e),r}{const t=Object.assign({},_h);for(const t of Object.keys(n))_h[t]=n[t];const e=new o(a.config);return _h=Object.assign({},t),e}}}function zh(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Bh(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Ph(t){if(null==t)throw new kh("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Wh(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new kh(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Uh(t,e,n=0,r=1/0){return $h(n>=0),$h(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((t=>typeof t===e))}function Vh(t,e){Array.isArray(t)?(xe(t.length>0,(()=>e+" is unexpectedly an empty array.")),t.forEach(((t,n)=>Vh(t,`element ${n+1} of ${e}`)))):xe(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got `+Gh(t)+"."))}function Gh(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>Gh(t))).join(",")+"]":"string"==typeof t?`"${t}"`:""+t}function Hh(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function jh(t,e){return ua((()=>vl(po(ga(t,t),e,!0))))}class qh extends ra{getConfig(){return{}}}class Kh extends qh{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ua((()=>{const e=jh(t,this.axis),n=ci(e,0,this.maxValue);return ga(t,ma(n,da(vh(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Kh.className="MaxNorm",aa(Kh);class Xh extends qh{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ua((()=>ma(t,da(vh(),jh(t,this.axis)))))}getConfig(){return{axis:this.axis}}}Xh.className="UnitNorm",aa(Xh);class Yh extends qh{apply(t){return el(t)}}Yh.className="NonNeg",aa(Yh);class Jh extends qh{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ua((()=>{const e=jh(t,this.axis),n=da(ga(this.rate,ci(e,this.minValue,this.maxValue)),ga(1-this.rate,e));return ga(t,ma(n,da(vh(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Jh.className="MinMaxNorm",aa(Jh);const Zh={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Qh(t){return Oh(t)}function tp(t,e={}){return Lh(t,sa.getMap().classNameMap,e,"constraint")}function ep(t){if(null==t)return null;if("string"==typeof t){return tp({className:t in Zh?Zh[t]:t,config:{}})}return t instanceof qh?t:tp(t)}const np=["channelsFirst","channelsLast"],rp=["valid","same","causal"],sp=["max","avg"],ap=["sum","mul","concat","ave"],ip=new Map;function op(t){Wh(np,"DataFormat",t)}function lp(t){Wh(rp,"PaddingMode",t)}function up(t){Wh(sp,"PoolMode",t)}const cp=[];function hp(t,e){cp.push(t);try{const t=e();return cp.pop(),t}catch(t){throw cp.pop(),t}}function pp(t){if(!mp(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===cp.length?"":cp.join("/")+"/")+t}function dp(t){if(!mp(t))throw new Error("Not a valid tensor name: '"+t+"'");ip.has(t)||ip.set(t,0);const e=ip.get(t);if(ip.set(t,ip.get(t)+1),e>0){const n=`${t}_${e}`;return ip.set(n,1),n}return t}const fp=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function mp(t){return!!t.match(fp)}function gp(t){return t===parseInt(t.toString(),10)}function yp(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function bp(t){return Zo(t=Array.isArray(t)?new Float32Array(t):t)}function xp(t){return Io(bp(t)).dataSync()[0]}function wp(t){return co(bp(t)).dataSync()[0]}function vp(t,e){if(e<t)throw new kh(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Cp(t,e){return t.asType(e)}function Np(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function kp(t,e,n){return ua((()=>{switch(t.rank){case 1:return hl(t,e,n);case 2:return pl(t,[e,0],[n,t.shape[1]]);case 3:return dl(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return fl(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return ti(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return ti(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new kh("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}))}function Ip(t,e,n){return ua((()=>{switch(t.rank){case 1:return hl(t,e,n);case 2:return pl(t,[0,e],[t.shape[0],n]);case 3:return dl(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return fl(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new kh("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function Sp(t,e,n,r){return ua((()=>{switch(t.rank){case 1:return hl(t,e,n);case 2:switch(r){case 1:return kp(t,e,n);case 2:return Ip(t,e,n);default:throw new kh("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return kp(t,e,n);case 2:return dl(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Ip(t,e,n);default:throw new kh("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return kp(t,e,n);case 2:return fl(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return fl(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Ip(t,e,n);default:throw new kh("The axis is not within the rank of the tensor "+r)}default:throw new kh("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function Ep(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Za(t,e)}function $p(t,e){switch(t.rank){case 1:return hi([t,e]);case 2:return pi([t,e],0);case 3:return di([t,e],0);case 4:return fi([t,e],0);default:throw new kh("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function Rp(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new kh(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Pi(t,e)}function Ap(t,e=0,n=1,r,s){return Yo(t,e,n,r,s)}function Tp(t,e,n,r){if(t.rank<2||e.rank<2)throw new Ih(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Ih(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return Vl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?_p(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=e.transpose(c).reshape([l,-1]);const h=[...s,...u];return Vl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?_p(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Dp(t,e,n){return ua((()=>(e=Array.isArray(e)?Zo(e,"int32"):e.toInt(),Hi(t,e,n))))}function Fp(t){return ga(t,t)}function _p(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new kh("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new kh("Unsupported input rank by biasAdd: "+e.rank)}function Op(t,e,n){return ua((()=>(null==n&&(n="channelsLast"),op(n),t.add(_p(t.rank,e,n)))))}function Mp(t,e,n,r){return ua((()=>xu(t,e,n,r)))}function Lp(t,e,n=!1){return n?t():e()}const zp=["fanIn","fanOut","fanAvg"],Bp=["normal","uniform","truncatedNormal"];class Pp extends ra{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Wp extends Pp{apply(t,e){return Co(t,e)}}Wp.className="Zeros",aa(Wp);class Up extends Pp{apply(t,e){return No(t,e)}}Up.className="Ones",aa(Up);class Vp extends Pp{constructor(t){if(super(),"object"!=typeof t)throw new kh("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new kh("config must have value set but got "+t);this.value=t.value}apply(t,e){return ua((()=>ga(Qi(this.value),No(t,e))))}getConfig(){return{value:this.value}}}Vp.className="Constant",aa(Vp);class Gp extends Pp{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Jo(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Gp.className="RandomUniform",aa(Gp);class Hp extends Pp{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Ih(`randomNormal does not support dType ${e}.`);return Ap(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Hp.className="RandomNormal",aa(Hp);class jp extends Pp{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Ih(`truncatedNormal does not support dType ${e}.`);return Tl(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}jp.className="TruncatedNormal",aa(jp);class qp extends Pp{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return ua((()=>{if(2!==t.length||t[0]!==t[1])throw new kh("Identity matrix initializer can only be used for 2D square matrices.");return ga(this.gain,Wi(t[0]))}))}getConfig(){return{gain:this.gain}}}qp.className="Identity",aa(qp);class Kp extends Pp{constructor(t){if(super(),t.scale<0)throw new kh("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Wh(zp,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Wh(Bp,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(op(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=yp(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=yp(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=yp(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Ih(`${this.getClassName()} does not support dType ${e}.`);return Tl(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return Jo(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Kp.className="VarianceScaling",aa(Kp);class Xp extends Kp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}Xp.className="GlorotUniform",aa(Xp);class Yp extends Kp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}Yp.className="GlorotNormal",aa(Yp);class Jp extends Kp{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}Jp.className="HeNormal",aa(Jp);class Zp extends Kp{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}Zp.className="HeUniform",aa(Zp);class Qp extends Kp{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}Qp.className="LeCunNormal",aa(Qp);class td extends Kp{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Kp.className}}td.className="LeCunNormal",aa(td);class ed extends Pp{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Ih("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return ua((()=>{if(t.length<2)throw new Ih("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Ap(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=Au.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),ga(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}ed.className="Orthogonal",aa(ed);const nd={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function rd(t,e={}){return Lh(t,sa.getMap().classNameMap,e,"initializer")}function sd(t){return Oh(t)}function ad(t){if("string"==typeof t){const e=t in nd?nd[t]:t;if("GlorotNormal"===e)return new Yp;if("GlorotUniform"===e)return new Xp;if("HeNormal"===e)return new Jp;if("HeUniform"===e)return new Zp;if("LeCunNormal"===e)return new Qp;if("LeCunUniform"===e)return new td;{const t={};return t.className=e,t.config={},rd(t)}}return t instanceof Pp?t:rd(t)}let id=0;function od(){return id++}const ld={};function ud(t=""){return t in ld||(ld[t]=0),ld[t]+=1,t+ld[t].toString()}function cd(t){return Array.isArray(t)&&Array.isArray(t[0])}function hd(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function pd(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new kh("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function dd(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new kh("Expected exactly 1 Shape; got "+t.length)}return t}function fd(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}const md="Variable";class gd{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=od(),n=null==n?md:n,this.originalName=pp(n),this.name=dp(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(t,e=!0,n,r){return _n.makeVariable(t,e,n,r)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function yd(t){return t.map((t=>t.read()))}function bd(t){t.forEach((t=>{t[0].write(t[1])}))}class xd{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class wd{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=od(),null!=a&&(this.originalName=pp(a),this.name=dp(this.originalName)),this.rank=e.length}}let vd=0;class Cd{constructor(t,e){this.callArgs=e,this.id=vd++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Nd=0;class kd extends ra{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Nd++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Dh(t)+"_"+ud(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Nh(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new kh(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Ah(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Ah(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Ch("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new Ch("Layer "+this.name+" is not connected, no input to return.");return Ah(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Ch("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new Ch("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Ah(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Th(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Th(this.inputSpec);if(t.length!==e.length)throw new kh(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new kh(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new kh(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new kh(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new kh(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new kh(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new kh(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Th(t);let r=!0;for(const t of n)if(!(t instanceof wd)){r=!1;break}let s=!0;for(const t of n)if(t instanceof wd){s=!1;break}if(r===s)throw new kh("Arguments to apply() must be all SymbolicTensors or all Tensors");return hp(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Th(t))e.push(n.shape);this.build(Ah(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=Th(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=Ah(a),null!=this.activityRegularizer)throw new Ih("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=Th(t);const e=[];for(const n of t)e.push(n.shape);return Ah(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new wd(a,n,this,Th(t),e,this.name,r))):new wd(a,r,this,Th(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Ih("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Ch(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new Ch(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Nh(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return fd(this.weights)}build(t){this.built=!0}getWeights(t=!1){return yd(t?this.trainableWeights:this.weights)}setWeights(t){ua((()=>{const e=this.weights;if(e.length!==t.length)throw new kh(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=yd(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!ke(a.shape,o.shape))throw new kh(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}bd(n)}))}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new kh(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=ad("zeros"));const o=r.apply(e,n),l=new gd(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Th(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=Th(t);e=Th(e),n=Th(n),r=Th(r),s=hd(s),a=hd(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new Cd({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Id(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=Id(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Sd extends kd{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:ud("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new kh("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new kh("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new kh("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new wd(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Cd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new kh("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}var Ed,$d;async function Rd(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];ca(r)}}function Ad(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}Sd.className="InputLayer",aa(Sd),($d=Ed||(Ed={}))[$d.SILENT=0]="SILENT",$d[$d.VERBOSE=1]="VERBOSE";class Td{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Dd{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Fd extends Td{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=ua((()=>da(this.totals[t],ga(r,n))));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:ua((()=>{const n=ga(ma(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),ha(e[t])})))}}class _d extends Td{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class Od extends Td{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Le(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Ke();return(...s)=>{const a=Ke();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Rd(n),r.push(this.yield(t,e,n))),r.push(Pu()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Rd(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Rd(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Pu()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Rd(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Rd(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Pu()):Le(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Rd(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Rd(t),await this.trainEnd(t))}}function Md(t,e){if(null==t&&(t={}),t instanceof Td)return[t];if(Array.isArray(t)&&t[0]instanceof Td)return t;return Th(t).map((t=>new Od(t,e)))}class Ld{constructor(){}static registerCallbackConstructor(t,e){xe(t>=0&&Number.isInteger(t),(()=>"Verbosity level is expected to be an integer >= 0, but got "+t)),Ld.checkForDuplicate(e),null==Ld.constructors[t]&&(Ld.constructors[t]=[]),Ld.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Ld.constructors){Ld.constructors[+e].forEach((e=>{if(e===t)throw new kh("Duplicate callback constructor.")}))}}static clear(){Ld.constructors={}}static createCallbacks(t){const e=[];for(const n in Ld.constructors){const r=+n;t>=r&&e.push(...Ld.constructors[r])}return e.map((t=>new t))}}function zd(t,e,n,r,s,a,i,o,l){const u=new _d,c=[new Fd,...Ld.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new Dd(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Bd(t,e={},n=!1){return Lh(t,sa.getMap().classNameMap,e,"layer",n)}function Pd(t,e){return ua((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=po(Fp(t),e,!0),r=Ui(n.shape,vh()),s=vl(Zi(n,r));return ma(t,s)}))}function Wd(t,e){return ua((()=>ko(Fp(ho(e,t)),-1)))}function Ud(t,e){return ua((()=>ko(ya(ho(e,t)),-1)))}function Vd(t,e){return ua((()=>{const n=ho(t,e),r=ci(ya(t),vh(),Number.MAX_VALUE),s=ya(ma(n,r));return ga(100,ko(s,-1))}))}function Gd(t,e,n=!1){return ua((()=>{if(n)e=ml(e);else{const t=po(e,e.shape.length-1,!0);e=ma(e,t)}return e=ci(e,vh(),1-vh()),oo(po(ga(t.toFloat(),so(e)),e.shape.length-1))}))}function Hd(t,e,n=!1){return ua((()=>{const r=Vi(function(t){const e=[yp(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=ci(e,vh(),1-vh())).shape;return Gd(Ps(r,s[s.length-1]).reshape(s),e,n)}))}function jd(t,e){return ua((()=>{let n;return n=ci(e,vh(),1-vh()),n=so(ma(n,ho(1,n))),ko(function(t,e){if(!ke(t.shape,e.shape))throw new kh(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return ua((()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())}))}(t,n),-1)}))}function qd(t,e){return ua((()=>{const n=Pd(t,-1),r=Pd(e,-1),s=ga(n,r);return oo(po(s,-1))}))}Ld.constructors={};const Kd={meanSquaredError:Wd,meanAbsoluteError:Ud,meanAbsolutePercentageError:Vd,meanSquaredLogarithmicError:function(t,e){return ua((()=>{const n=ci(e,vh(),Number.MAX_VALUE),r=so(da(1,n)),s=ci(t,vh(),Number.MAX_VALUE),a=so(da(1,s));return ko(Fp(ho(r,a)),-1)}))},squaredHinge:function(t,e){return ua((()=>{const n=Zi(0,ho(1,ga(t,e)));return ko(Fp(n),-1)}))},hinge:function(t,e){return ua((()=>{const n=Zi(0,ho(1,ga(t,e)));return ko(n,-1)}))},categoricalHinge:function(t,e){return ua((()=>{const n=po(ga(t,e),-1),r=co(ga(ho(1,t),e),-1);return Zi(0,da(1,ho(r,n)))}))},logcosh:function(t,e){return ua((()=>{const n=Math.log(2),r=ho(e,t),s=ho(da(r,lo(ga(-2,r))),n);return ko(s,-1)}))},categoricalCrossentropy:Gd,sparseCategoricalCrossentropy:Hd,binaryCrossentropy:jd,kullbackLeiblerDivergence:function(t,e){return ua((()=>{const n=ci(t,vh(),1),r=ci(e,vh(),1);return po(ga(t,so(ma(n,r))),-1)}))},poisson:function(t,e){return ua((()=>{const n=so(da(vh(),e));return ko(ho(e,ga(t,n)),-1)}))},cosineProximity:qd};function Xd(t){if("string"==typeof t){if(t in Kd)return Kd[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new kh(e)}return t}function Yd(t,e){return ua((()=>{const n=ga(.5,Do(e)),r=Cp(ji(e,n),t.dtype);return ko(Ai(t,r),-1)}))}function Jd(t,e){return ua((()=>Cp(Ai(Ra(t,-1),Ra(e,-1)),"float32")))}function Zd(t,e){return jd(t,e)}function Qd(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Ai(t,e).asType("float32")}const tf=Gd,ef=Hd,nf={binaryAccuracy:Yd,categoricalAccuracy:Jd,precision:function(t,e){return ua((()=>{const n=function(t,e){return ua((()=>go(t.equal(1),e.equal(1)).sum().cast("float32")))}(t,e),r=function(t,e){return ua((()=>go(t.equal(0),e.equal(1)).sum().cast("float32")))}(t,e),s=n.add(r);return Ti(ji(s,0),n.div(s),0).cast("float32")}))},categoricalCrossentropy:tf,sparseCategoricalCrossentropy:ef,mse:Wd,MSE:Wd,mae:Ud,MAE:Ud,mape:Vd,MAPE:Vd,cosine:qd};function rf(t){if("string"==typeof t&&t in nf)return nf[t];if("string"!=typeof t&&null!=t)return t;throw new kh("Unknown metric "+t)}function sf(t){if($h(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Kd))if(Kd[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(nf))if(nf[n]===t){e=n;break}return void 0!==e?e:t.name}}const af=1048576;function of(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!lf(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>af&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function lf(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!lf(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!lf(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function uf(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),cf(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?hf(o[t],n,r):pf(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?fd(t.collectedTrainableWeights):fd(t.trainableWeights);return e}(t),u=fd(t.nonTrainableWeights);r("Total params: "+(l+u)),r("Trainable params: "+l),r("Non-trainable params: "+u),r("_".repeat(e))}function cf(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function hf(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}cf([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function pf(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];cf([`${i} (${o})`,s,t.countParams().toString(),l],e,r);for(let t=1;t<a.length;++t)cf(["","","",a[t]],e,r)}function df(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function ff(t,e){if(null===t)return null;if("string"==typeof t)return Fh(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];df(e,s,r)?n.push(r):n.push(ff(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=Fh(n);e[t]=ff(r,t)}}return e}}function mf(t,e){if(null==t)return null;if("string"==typeof t)return Dh(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];df(e,s,r)?n.push(r):n.push(mf(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n],s=Dh(n);e[s]="name"!==n&&"className"!==n||"string"!=typeof r?mf(r,n):r}return e}}class gf{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof gf)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new kh(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Rs(e,t.dtype)}catch(n){throw new kh(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof wd){if(null==this.id2Value[t.id])throw new kh("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new kh("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof wd){if(null==this.id2Value[t.id])throw new kh("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new kh("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&ca(this.id2Mask)}}const yf={},bf={};function xf(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map((t=>t.name)),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==yf[c]){const t=function(t,e){xe(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===t.length){const s=vf(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=vf(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach((e=>r[t].add(e)))}}return{sorted:n,recipientCounts:wf(r)}}(i,e);h=t.sorted,p=t.recipientCounts,yf[c]=h,bf[c]=p}h=yf[c],p={},s||Object.assign(p,bf[c]);const d=new gf(e);for(let t=0;t<h.length;++t){if(null!=r){const t=la().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof Sd)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),r=d.getMask(t);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Th(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Cf(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}s||ca(f)}return d.disposeMasks(),a?l:l[0]}function wf(t){const e={};for(const n in t)e[n]=t[n].size;return e}function vf(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function Cf(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Nf extends kd{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=ud(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Bh(this.inputs).length!==this.inputs.length)throw new kh("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map((t=>t.name)));Bh(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map((t=>t.name))),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;$h(0===n,"input layer has >1 nodes"),$h(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Sd))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new Nh(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(Nf.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const r=u.inputTensors[t],s=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map((t=>parseInt(t,10))).sort(zh);this.layers=[];for(const t of d){const e=p[t];e.sort(((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0}));for(const t of e)t instanceof Nf&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map((t=>parseInt(t,10))).sort(zh);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Nh("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((t=>t.name));for(const t of g){const e=g.filter((e=>e===t)).length;if(1!==e)throw new Nh(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Cd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new kh("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new kh("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new kh("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new kh(`${t.length} of ${r} weights are not set: `+t)}bd(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.4.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=mf(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return ua((()=>{t=Th(t);const n=new gf;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return xf(this.outputs,n,e)}))}computeMask(t,e){return ua((()=>{let n;return t=Th(t),n=null==e?Eh(null,t.length):Th(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=hd(t);if(e.length!==this.inputLayers.length)throw new kh(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(zh);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=hd(e.computeOutputShape(Ah(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];$h(e in n),s.push(n[e])}return Ah(s)}runInternalGraph(t,e){null==e&&(e=Eh(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(zh);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Th(e.call(t,u)),l=Th(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map((t=>t[0])),i=a.map((t=>t[1])),null==u.mask&&(u.mask=i),o=Th(e.call(r,u)),l=Th(e.computeMask(r,i));if(e.activityRegularizer)throw new Ih("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=l[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){$h(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Nf?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=Nf.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new kh(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new kh("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new kh("No such layer: "+t)}calculateLosses(){return ua((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=Nf.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=Nf.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let l=e[Nf.nodeKey(s,a)];null==l&&(l=0),t.push([s.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=Nf.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=Nf.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(Ah(n),r)}function l(t){const n=t.name,a=Bd(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new kh("Corrupted configuration, expected array for nodeData: "+t);i(a,t)}))}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!Ph(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];$h(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];$h(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new kh("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){ua((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function kf(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function If(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=ua((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await e.data());ca(e);const s=[];return r.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])})),Zo(s,"float32")}return null}function Sf(t,e){return ga(t,e)}function Ef(t,e){let n,r;const s=e;n=s.xs,r=s.ys,xe(null!=n&&null!=r,(()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e));const a=$f("input",t.inputNames,n),i=$f("output",t.outputNames,r),o=a[0].shape[0];xe(a.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")")),xe(i.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")"));for(let e=0;e<a.length;e++)xe(a[e].shape[0]===o,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));for(let e=0;e<i.length;e++)xe(i[e].shape[0]===o,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));return{xs:a,ys:i}}function $f(t,e,n){if(n instanceof pn)return[n];if(Array.isArray(n))return xe(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const r=[];for(const s of e){if(null==n[s])throw new kh(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function Rf(t,e,n){const r=null!=n.batchesPerEpoch;if(xe(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),xe(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),xe(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs)),xe(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch)),xe(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Af(n.validationData))xe(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches));else{const t=function(t){if(3===t.length)throw new Ih("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((t=>"val_"+t))):l.slice();const c=Md(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=zd(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,u);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=Ef(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=kf(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await If(s[t],null,e[t]))}const u=r.concat(s).concat(i),d=o(u);ca(u);for(let t=0;t<l.length;++t){const e=l[t],n=d[t];a[e]=n,ha(n)}await p.onBatchEnd(h,a),Ad(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Af(n.validationData)?Th(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Th(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Af(t){return"function"==typeof t.iterator}function Tf(t){xe(t>0&&Number.isInteger(t),(()=>"batchSize is required to be a positive integer, but got "+t))}function Df(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>kp(t,e,n-e))):kp(t,e,n-e)}function Ff(t,e){return ua((()=>null==t?null:Array.isArray(t)?t.map((t=>Ff(t,e))):Dp(t,"int32"===e.dtype?e:e.toInt())))}function _f(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function Of(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;Tf(h);const p=!1,d=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Ih("validationData including sample weights is not supported yet."):new kh("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=Df(s,t,e),s=Df(s,0,t),u=Df(a,t,e),a=Df(a,0,t),f=l.concat(u)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),b=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=b.slice().concat(b.map((t=>"val_"+t)))):(x=null,f=[],w=b.slice());const v=Md(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,l,u,c,h,p,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new kh("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=vp(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=zd(o,i,a,p,g,d,s,m,h);b.setModel(t),t.history=x,await b.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new Ih("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Ih("batch shuffling is not implemneted yet");c&&ge(y);const i=Zo(y),o=_f(g,s);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),ua((()=>{const p=o[c][0],d=o[c][1],f=kp(i,p,d-p);h.batch=c,h.size=d-p;const g=Ff(n,f),y=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,ha(n)}if(c===o.length-1&&m){const e=t.testLoop(l,u,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];ha(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,h),Ad(h),t.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),t.stopTraining_)break}return await b.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,b,h,r.epochs,r.verbose,v,x,f,r.shuffle,w,r.initialEpoch,null,null)}finally{t.isTraining=!1,Lf(s,e),Lf(a,n),Lf(l,i),Lf(u,o),null!=c&&ca(c)}}function Mf(t){const e=[];t instanceof pn&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(Np(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Lf(t,e){if(null==t)return;const n=[];if(e instanceof pn)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof pn)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&r.push(t)}));else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((t=>{t.isDisposed||t.dispose()}))}function zf(t){return Array.isArray(t)}function Bf(t){return!function(t){return t instanceof pn}(t)&&!zf(t)}function Pf(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(zf(t)&&t.length>0)e=!0;else if(Bf(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new kh(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map((t=>null));let a;if(Bf(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new kh(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(zf(t)){if((t=t).length!==e.length)throw new kh(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new kh(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=Mf(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new kh(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new kh(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Wf(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new kh(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new kh(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new kh(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new kh(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Uf extends Nf{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new kh("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");uf(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Uu.adagrad(.01),Adadelta:()=>Uu.adadelta(1,.95,vh()),Adam:()=>Uu.adam(.001,.9,.999,vh()),Adamax:()=>Uu.adamax(.002,.9,.999,vh(),0),RMSProp:()=>Uu.rmsprop(.001,.9,0,vh()),SGD:()=>Uu.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new kh("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Tu))throw new kh("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new kh(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>Xd(t)))}else{const n=Xd(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new kh(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Xd(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],hp("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};hp("metric",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===jd?-1!==["accuracy","acc"].indexOf(i)?r=Yd:-1!==["crossentropy","ce"].indexOf(i)&&(r=Zd):this.lossFunctions[t]===Hd?-1!==["accuracy","acc"].indexOf(i)?r=Qd:-1!==["crossentropy","ce"].indexOf(i)&&(r=ef):-1!==["accuracy","acc"].indexOf(i)?r=Jd:-1!==["crossentropy","ce"].indexOf(i)&&(r=tf),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=rf(i);a=t,n=""+sf(i)}let e;hp(n,(()=>{e=a})),s(t,n,e)}})(r[t])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;Tf(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return Ah(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Lf(s[0],t),Lf(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new Ih("Verbose mode is not implemented yet.");xe(!r||n.batches>0&&Number.isInteger(n.batches),(()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!r||l<n.batches;){const e=await i.next();if(a=ua((()=>{if(e.value){const{xs:n,ys:r}=Ef(t,e.value),i=n.concat(r),u=ua((()=>s(i)));if(ca(i),0===l)for(let t=0;t<u.length;++t)a.push(Qi(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=ua((()=>da(a[t],ga(c,e)))),l>0&&ca(n)}ca(u),o+=c,++l}return a})),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=ma(a[t],o),ca(e)}return Ah(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new kh(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new kh("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new kh("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new gf;if(t instanceof pn&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new kh(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new kh("No value is provided for the model's input "+e.name);a.add(e,n)}const i=xf(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=Eh(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((t=>t.name));for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,r)=>{null==e&&n.push(t[r])})),new kh("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return ua((()=>{const r=this.checkNumSamples(t);if(n)throw new Ih("Verbose predictLoop() is not implemented yet.");const s=_f(r,e),a=this.outputs.map((t=>[]));for(let e=0;e<s.length;++e){ua((()=>{const n=s[e][0],r=s[e][1],a=Df(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new gf(i);return xf(this.outputs,o)})).forEach(((t,e)=>a[e].push(t)))}return Ah(a.map((t=>Za(t,0))))}))}predict(t,e={}){const n=Mf(t);Wf(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return Tf(r),this.predictLoop(n,r)}finally{Lf(n,t)}}predictOnBatch(t){Wf(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new Nh("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Hd?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Bh(t.map((t=>t.shape[0])));r.sort();const s=Bh(e.map((t=>t.shape[0])));if(s.sort(),r.length>1)throw new kh("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map((t=>t.shape))));if(s.length>1)throw new kh("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map((t=>t.shape))));if(r.length>0&&s.length>0&&!ke(r,s))throw new kh(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=Pf(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Pf(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Wd,jd,Gd];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Gd&&1===a.shape[a.shape.length-1])throw new kh(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new kh(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new kh(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const t=kf(r,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await If(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,r=0,s){return ua((()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new Ih("Verbose mode is not implemented yet.");if(null!=s)throw new Ih("steps mode in testLoop() is not implemented yet");{const r=_f(a,n),s=Zo(vp(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=kp(s,a,o-a),u=Ff(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(Qi(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=da(i[t],ga(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=ma(i[t],a)}return i}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(Rh(t,r)>1){s+="_"+Rh(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new gf(t),o=xf(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=Sf(n,s[t]));const a=ko(n);e.push(a),l=0===t?n:da(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=ko(e(r[s],o[s]))}ha(n),a.push(n)}return l=ko(l),this.calculateLosses().forEach((t=>{l=da(l,t)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>ua((()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new gf(a),o=xf(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=ko(r(s[t],o[t]));n=0===t?a:da(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=ko(n(s[r],o[r]));e.push(a)}return e}))}async fit(t,e,n={}){return Of(this,t,e,n)}async fitDataset(t,e){return Rf(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return ca(a),Ah(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=la().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-la().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Dh(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>Dh(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=Dh(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Dh(sf(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>Dh(sf(t))));{const t={};for(const e in this.metrics)t[e]=Dh(sf(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Bd(ff(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Fh(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>Fh(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Fh(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map((t=>Fh(t)));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Fh(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=ts(t);if(0===e.length)throw new kh(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new kh(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new kh("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await qr(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.4.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await qr(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Jr([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;of(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){of(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Uf.className="Model",aa(Uf);class Vf extends Uf{}Vf.className="Functional",aa(Vf);class Gf extends Uf{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:ud("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new kh("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Gf||t instanceof Uf;let n;if(e){if(n=t,1!==n.outputs.length)throw new kh("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new kh("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new kh("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new kh("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new Sd({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new kh(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new kh("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Id(this.outputs[0])}this.inboundNodes=[],new Cd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Eh(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(dd(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Uf({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Nh("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Nh("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Nh("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Nh("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new kh("Legacy serialization format not supported yet.");s=e}else xe(null!=e.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Gf))throw new Ih("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=Bd(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new kh("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new kh("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}Gf.className="Sequential",aa(Gf);class Hf extends ra{getConfig(){return{}}}class jf extends Hf{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Ih(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Oi(t)}(t,e)}}jf.className="elu",aa(jf);class qf extends Hf{apply(t){return il(t)}}qf.className="selu",aa(qf);class Kf extends Hf{apply(t){return el(t)}}Kf.className="relu",aa(Kf);class Xf extends Hf{apply(t){return ua((()=>So(6,el(t))))}}Xf.className="relu6",aa(Xf);class Yf extends Hf{apply(t){return t}}Yf.className="linear",aa(Yf);class Jf extends Hf{apply(t){return Qa(t)}}Jf.className="sigmoid",aa(Jf);class Zf extends Hf{apply(t){return function(t){return ua((()=>{const e=da(.5,ga(.2,t));return ci(e,0,1)}))}(t)}}Zf.className="hardSigmoid",aa(Zf);class Qf extends Hf{apply(t){return lo(t)}}Qf.className="softplus",aa(Qf);class tm extends Hf{apply(t){return function(t){return ua((()=>ma(t,ya(t).add(1))))}(t)}}tm.className="softsign",aa(tm);class em extends Hf{apply(t){return ei(t)}}em.className="tanh",aa(em);class nm extends Hf{apply(t,e=-1){return ml(t,e)}}nm.className="softmax",aa(nm);class rm extends Hf{apply(t,e=-1){return fo(t,e)}}function sm(t){return t.getClassName()}function am(t,e={}){return Lh(t,sa.getMap().classNameMap,e,"activation")}function im(t){if(null==t){const t={className:"linear",config:{}};return am(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},am(e)}return t instanceof Hf?t:am(t)}rm.className="logSoftmax",aa(rm);class om extends ra{}class lm extends om{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return ua((()=>{let e=Co([1]);return this.hasL1&&(e=da(e,po(ga(this.l1,ya(t))))),this.hasL2&&(e=da(e,po(ga(this.l2,Fp(t))))),e.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}lm.className="L1L2",aa(lm);const um={l1l2:"L1L2"};function cm(t){return Oh(t)}function hm(t,e={}){return Lh(t,sa.getMap().classNameMap,e,"regularizer")}function pm(t){if(null==t)return null;if("string"==typeof t){return hm({className:t in um?um[t]:t,config:{}})}return t instanceof om?t:hm(t)}class dm extends kd{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=pd(t);let n=el(t);return null!=this.maxValue&&(n=ci(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}dm.className="ReLU",aa(dm);class fm extends kd{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=pd(t);return to(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}fm.className="LeakyReLU",aa(fm);class mm extends kd{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=ad(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=pm(t.alphaRegularizer),this.alphaConstraint=ep(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new kh("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=dd(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new xd({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=pd(t),Lo(t,this.alpha.read())}getConfig(){const t={alphaInitializer:sd(this.alphaInitializer),alphaRegularizer:cm(this.alphaRegularizer),alphaConstraint:Qh(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}mm.className="PReLU",aa(mm);class gm extends kd{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Ih(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=pd(t);return Oi(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}gm.className="ELU",aa(gm);class ym extends kd{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=pd(t);return n.mul(Cp(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}ym.className="ThresholdedReLU",aa(ym);class bm extends kd{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new nm).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=pd(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function xm(t,e,n){if("number"==typeof t)return Eh(t,e);if(t.length!==e)throw new kh(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let r=0;r<e;++r){const s=t[r];if(!gp(s))throw new kh(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+s)}return t}function wm(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function vm(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+wp([n-e,0]);else{if("same"!==r)throw new kh(`Unsupport padding mode: ${r}.`);t*=e}return t}function Cm(t,e){return ua((()=>(op(e),"channelsFirst"===e?Ws(t,[0,2,3,1]):t)))}function Nm(t,e){return ua((()=>(op(e),"channelsFirst"===e?Ws(t,[0,2,3,4,1]):t)))}function km(t,e,n,r=[1,1],s="valid",a,i,o=null){return ua((()=>{if(null==a&&(a="channelsLast"),op(a),3!==t.rank&&4!==t.rank)throw new kh(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new kh(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=Cm(t,a);if("causal"===s)throw new Ih("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Pl({x:l,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Ws(l,[0,3,1,2])),l}))}bm.className="Softmax",aa(bm);class Im extends kd{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Im.verifyArgs(e),this.rank=t,Vh(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Ih(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=xm(e.kernelSize,t,"kernelSize"),this.strides=xm(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,lp(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,op(this.dataFormat),this.activation=im(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=ad(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=ep(e.biasConstraint),this.biasRegularizer=pm(e.biasRegularizer),this.activityRegularizer=pm(e.activityRegularizer),this.dilationRate=xm(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new kh("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new kh("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new kh("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if($h("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Uh(t.kernelSize,"number",1,3))throw new kh(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:sm(this.activation),useBias:this.useBias,biasInitializer:sd(this.biasInitializer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),biasConstraint:Qh(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Sm extends Im{constructor(t,e){super(t,e),this.kernel=null,Sm.verifyArgs(e),this.filters=e.filters,Vh(this.filters,"filters"),this.kernelInitializer=ad(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=ep(e.kernelConstraint),this.kernelRegularizer=pm(e.kernelRegularizer)}build(t){t=dd(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new kh("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return ua((()=>{let e;t=pd(t);const n=null==this.bias?null:this.bias.read(),r=Hh(this.activation.getClassName());if(null!=r&&2===this.rank)e=km(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return ua((()=>{if(null==a&&(a="channelsLast"),op(a),3!==t.shape.length)throw new kh("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new kh("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new kh("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=Ws(t,[0,2,1])),"causal"===s)throw new Ih("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=gi(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Op(o,n)),o}))}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=km(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Ih("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return ua((()=>{if(null==a&&(a="channelsLast"),op(a),4!==t.rank&&5!==t.rank)throw new kh("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new kh("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=Nm(t,a);if("causal"===s)throw new Ih("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=xi(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Op(o,n)),"channelsFirst"===a&&(o=Ws(o,[0,4,1,2,3])),o}))}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=dd(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=wm(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:sd(this.kernelInitializer),kernelRegularizer:cm(this.kernelRegularizer),kernelConstraint:Qh(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new kh("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class Em extends Sm{constructor(t){super(2,t),Em.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Uh(t.kernelSize,"number",1,2))throw new kh(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Em.className="Conv2D",aa(Em);class $m extends Sm{constructor(t){super(3,t),$m.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new kh(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}$m.className="Conv3D",aa($m);class Rm extends Em{constructor(t){if(super(t),this.inputSpec=[new xd({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new kh("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=dd(t)).length)throw new kh("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new kh("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new xd({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return ua((()=>{let e=pd(t);if(4!==e.shape.length)throw new kh("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,vm(i,c,l,this.padding),vm(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Ws(e,[0,2,3,1]));let d=bi(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Ws(d,[0,3,1,2])),null!=this.bias&&(d=Op(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(t){const e=(t=dd(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[r]=vm(e[r],o,a,this.padding),e[s]=vm(e[s],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}Rm.className="Conv2DTranspose",aa(Rm);class Am extends Sm{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new kh("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new kh("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new kh(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=ad(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=pm(e.depthwiseRegularizer),this.depthwiseConstraint=ep(e.depthwiseConstraint),this.pointwiseInitializer=ad(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=pm(e.pointwiseRegularizer),this.pointwiseConstraint=ep(e.pointwiseConstraint)}build(t){if((t=dd(t)).length<this.rank+2)throw new kh(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new kh("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new xd({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return ua((()=>{let e;if(t=pd(t),1===this.rank)throw new Ih("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Ws(t,[0,2,3,1])),e=ol(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Op(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Ws(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=sd(this.depthwiseInitializer),t.pointwiseInitializer=sd(this.pointwiseInitializer),t.depthwiseRegularizer=cm(this.depthwiseRegularizer),t.pointwiseRegularizer=cm(this.pointwiseRegularizer),t.depthwiseConstraint=Qh(this.depthwiseConstraint),t.pointwiseConstraint=Qh(this.pointwiseConstraint),t}}Am.className="SeparableConv";class Tm extends Am{constructor(t){super(2,t)}}Tm.className="SeparableConv2D",aa(Tm);class Dm extends Sm{constructor(t){super(1,t),Dm.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Uh(t.kernelSize,"number",1,1))throw new kh(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Dm.className="Conv1D",aa(Dm);class Fm extends kd{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return ua((()=>{if(t=pd(t),"channelsLast"===this.dataFormat){const e=Sp(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Sp(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Sp(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Sp(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Fm.className="Cropping2D",aa(Fm);class _m extends kd{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return ua((()=>{let e=pd(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Ws(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return Ws(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}_m.className="UpSampling2D",aa(_m);class Om extends Im{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=ad(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=ep(t.depthwiseConstraint),this.depthwiseRegularizer=pm(t.depthwiseRegularizer)}build(t){if((t=dd(t)).length<4)throw new kh(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new kh(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ua((()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return ua((()=>{null==s&&(s="channelsLast"),op(s);let i=Cm(t,s);if(4!==t.rank)throw new kh("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new kh("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=Ii(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Ws(i,[0,3,1,2])),i}))}(t=pd(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Op(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=dd(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=wm(e,this.kernelSize[0],this.padding,this.strides[0]),a=wm(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=sd(this.depthwiseInitializer),t.depthwiseRegularizer=cm(this.depthwiseRegularizer),t.depthwiseConstraint=Qh(this.depthwiseRegularizer),t}}function Mm(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new kh("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function Lm(t,e,n,r=!1,s,a,i=!1,o=!1){return ua((()=>{const l=e.shape.length;if(l<3)throw new kh(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(vp(2,l));if(e=Ws(e,u),null!=a)throw new Ih("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=zi(s,-1)),s=Ws(s,u)),r&&(e=rl(e,0),null!=s&&(s=rl(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=Fl(e);let m,g;null!=s&&(m=Fl(s));for(let e=0;e<d;++e){const n=f[e],r=ua((()=>t(n,p)));if(null==s)h=r[0],p=r[1];else{const t=ua((()=>{const t=m[e],n=Do(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map(((e,s)=>r[1][s].mul(t).add(e.mul(n))))}}));h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=kl(c,1)}return[h,g,p]}))}Om.className="DepthwiseConv2D",aa(Om);class zm extends kd{constructor(t){let e;if(super(t),null==t.cell)throw new kh("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new jm({cells:t.cell}):t.cell,null==e.stateSize)throw new kh("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new xd({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return vp(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null))}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){cd(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return ua((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Ih("Constants support is not implemented in RNN yet.");cd(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new xd({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ke(this.stateSpec.map((t=>t.shape[t.shape.length-1])),s))throw new kh(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map((t=>new xd({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){ua((()=>{if(!this.stateful)throw new Ch("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new kh("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>Co([n,t]))):this.states_=[Co([n,this.cell.stateSize])];else if(null==t)ca(this.states_),null!=this.keptStates&&(ca(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>Co([n,t]))):this.states_[0]=Co([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new kh(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):ca(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!ke(r.shape,a))throw new kh(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map((t=>ha(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Mm(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new xd({shape:t.shape}));i=i.concat(this.stateSpec)}null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof wd){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ua((()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=pd(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new kh(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Lm(((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]}),t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(t){return ua((()=>{let e=Co(t.shape);return e=po(e,[1,2]),e=Np(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?Rp(e,[1,t]):e)):this.cell.stateSize>1?[Rp(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=Bd(e.cell,n);return new t(Object.assign(e,{cell:r}))}}zm.className="RNN",aa(zm);class Bm extends kd{}class Pm extends Bm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Vh(this.units,"units"),this.activation=im(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=ad(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ad(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ad(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=pm(t.kernelRegularizer),this.recurrentRegularizer=pm(t.recurrentRegularizer),this.biasRegularizer=pm(t.biasRegularizer),this.kernelConstraint=ep(t.kernelConstraint),this.recurrentConstraint=ep(t.recurrentConstraint),this.biasConstraint=ep(t.biasConstraint),this.dropout=xp([1,wp([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=xp([1,wp([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=dd(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ua((()=>{if(2!==(t=t).length)throw new kh(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qm({ones:()=>Do(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qm({ones:()=>Do(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Tp(null!=a?ga(t,a):t,this.kernel.read()),null!=this.bias&&(s=Op(s,this.bias.read())),null!=i&&(n=ga(n,i));let o=da(s,Tp(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const t={units:this.units,activation:sm(this.activation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}Pm.className="SimpleRNNCell",aa(Pm);class Wm extends zm{constructor(t){t.cell=new Pm(t),super(t)}call(t,e){return ua((()=>{null!=this.cell.dropoutMask&&(ca(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ca(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:sm(this.activation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}Wm.className="SimpleRNN",aa(Wm);class Um extends Bm{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new kh("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Vh(this.units,"units"),this.activation=im(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=im(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=ad(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ad(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ad(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=pm(t.kernelRegularizer),this.recurrentRegularizer=pm(t.recurrentRegularizer),this.biasRegularizer=pm(t.biasRegularizer),this.kernelConstraint=ep(t.kernelConstraint),this.recurrentConstraint=ep(t.recurrentConstraint),this.biasConstraint=ep(t.biasConstraint),this.dropout=xp([1,wp([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=xp([1,wp([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=dd(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ua((()=>{if(2!==(t=t).length)throw new kh("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qm({ones:()=>Do(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qm({ones:()=>Do(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=ga(t,s[0]));let u=Tp(t,this.kernel.read());this.useBias&&(u=Op(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ga(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=xl(c,[2*this.units,this.units],c.rank-1),d=Tp(r,h),[f,m,g]=xl(u,3,u.rank-1),[y,b]=xl(d,2,d.rank-1);i=this.recurrentActivation.apply(da(f,y)),o=this.recurrentActivation.apply(da(m,b));const x=Tp(ga(o,r),p);l=this.activation.apply(da(g,x));const w=da(ga(i,r),ga(da(1,oo(i)),l));return[w,w]}))}getConfig(){const t={units:this.units,activation:sm(this.activation),recurrentActivation:sm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}Um.className="GRUCell",aa(Um);class Vm extends zm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Um(t),super(t)}call(t,e){return ua((()=>{null!=this.cell.dropoutMask&&(ca(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ca(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:sm(this.activation),recurrentActivation:sm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Vm.className="GRU",aa(Vm);class Gm extends Bm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Vh(this.units,"units"),this.activation=im(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=im(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=ad(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ad(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ad(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=pm(t.kernelRegularizer),this.recurrentRegularizer=pm(t.recurrentRegularizer),this.biasRegularizer=pm(t.biasRegularizer),this.kernelConstraint=ep(t.kernelConstraint),this.recurrentConstraint=ep(t.recurrentConstraint),this.biasConstraint=ep(t.biasConstraint),this.dropout=xp([1,wp([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=xp([1,wp([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=dd(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Pp{apply(e,r){const s=t.apply([n]),a=(new Up).apply([n]),i=t.apply([2*n]);return $p($p(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return ua((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new kh("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qm({ones:()=>Do(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qm({ones:()=>Do(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=ga(t,a[0]));let h=Tp(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ga(r,i[0])),h=da(h,Tp(r,this.recurrentKernel.read())),this.useBias&&(h=Op(h,this.bias.read()));const[p,d,f,m]=xl(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=da(ga(l,s),ga(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=ga(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const t={units:this.units,activation:sm(this.activation),recurrentActivation:sm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}Gm.className="LSTMCell",aa(Gm);class Hm extends zm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Gm(t),super(t)}call(t,e){return ua((()=>{null!=this.cell.dropoutMask&&(ca(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ca(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:sm(this.activation),recurrentActivation:sm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),recurrentInitializer:sd(this.recurrentInitializer),biasInitializer:sd(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:cm(this.kernelRegularizer),recurrentRegularizer:cm(this.recurrentRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),recurrentConstraint:Qh(this.recurrentConstraint),biasConstraint:Qh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Hm.className="LSTM",aa(Hm);class jm extends Bm{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return ua((()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)}))}build(t){let e;cd(t)&&(t=t[0]),t=t,this.cells.forEach(((n,r)=>{hp("RNNCell_"+r,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(Bd(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return yd(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}bd(e)}}function qm(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,a=()=>Mp(e(),n),i=()=>Lp(a,e,r);if(!s||s<=1)return ha(i().clone());return Array(s).fill(void 0).map(i).map((t=>ha(t.clone())))}jm.className="StackedRNNCells",aa(jm);var Km=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n};class Xm extends zm{constructor(t){if(t.unroll)throw new Ih("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new Ih("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new xd({ndim:5})]}call(t,e){return ua((()=>{if(null!=this.cell.dropoutMask&&(ca(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ca(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new kh("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return ua((()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=Co([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]}))}resetStates(t,e=!1){ua((()=>{if(!this.stateful)throw new Ch("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new kh("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Co(s))):this.states_=[Co(s)];else if(null==t)ca(this.states_),null!=this.keptStates&&(ca(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Co(s))):this.states_[0]=Co(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new kh(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);e?this.keptStates.push(this.states_.slice()):ca(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!ke(n.shape,r))throw new kh(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>ha(t.clone())))}))}getConfig(){const t=super.getConfig(),{cell:e}=t,n=Km(t,["cell"]),r=this.cell.getConfig();return Object.assign({},r,n)}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,l=t[o?3:2],u=t[o?4:3],c=wm(l,r[0],s,a[0],i[0]),h=wm(u,r[1],s,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Xm.className="ConvRNN2D";class Ym extends Gm{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,Vh(this.filters,"filters"),this.kernelSize=xm(n,2,"kernelSize"),this.kernelSize.map((t=>Vh(t,"kernelSize"))),this.strides=xm(r||1,2,"strides"),this.strides.map((t=>Vh(t,"strides"))),this.padding=s||"valid",lp(this.padding),this.dataFormat=a||"channelsLast",op(this.dataFormat),this.dilationRate=xm(i||1,2,"dilationRate"),this.dilationRate.map((t=>Vh(t,"dilationRate")))}build(t){var e;t=dd(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new kh("The channel dimension of the input should be defined. Found "+t[n]);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends Pp{apply(t,e){return Ep([n.apply([r]),No([r]),n.apply([2*r])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return ua((()=>{if(3!==t.length)throw new kh("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");const n=e.training||!1,r=t[0],s=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qm({ones:()=>Do(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?ga(e[n],t):t;let l=o(r,i,0),u=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qm({ones:()=>Do(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=xl(this.kernel.read(),4,3),[v,C,N,k]=this.useBias?xl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,C,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,k,this.padding);const[I,S,E,$]=xl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,S),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const R=this.recurrentActivation.apply(da(l,d)),A=this.recurrentActivation.apply(da(u,f)),T=da(ga(A,a),ga(R,this.activation.apply(da(c,m)))),D=ga(this.recurrentActivation.apply(da(h,g)),this.activation.apply(T));return[D,D,T]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=Km(t,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=mi(t,e,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Op(s,n,this.dataFormat):s}recurrentConv(t,e){return mi(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Ym.className="ConvLSTM2DCell",aa(Ym);class Jm extends Xm{constructor(t){const e=new Ym(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Jm.className="ConvLSTM2D",aa(Jm);class Zm extends kd{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Lp((()=>Mp(n,this.rate,r,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Zm.className="Dropout",aa(Zm);class Qm extends Zm{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Qm.className="SpatialDropout1D",aa(Qm);class tg extends kd{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Vh(this.units,"units"),this.activation=im(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=ad(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=ad(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=ep(t.kernelConstraint),this.biasConstraint=ep(t.biasConstraint),this.kernelRegularizer=pm(t.kernelRegularizer),this.biasRegularizer=pm(t.biasRegularizer),this.activityRegularizer=pm(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=dd(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=dd(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t),r=Hh(this.activation.getClassName());let s;return null!=r?s=Tp(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Tp(n,this.kernel.read()),null!=this.bias&&(s=Op(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const t={units:this.units,activation:sm(this.activation),useBias:this.useBias,kernelInitializer:sd(this.kernelInitializer),biasInitializer:sd(this.biasInitializer),kernelRegularizer:cm(this.kernelRegularizer),biasRegularizer:cm(this.biasRegularizer),activityRegularizer:cm(this.activityRegularizer),kernelConstraint:Qh(this.kernelConstraint),biasConstraint:Qh(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}tg.className="Dense",aa(tg);class eg extends kd{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=dd(t);for(const e of t.slice(1))if(null==e)throw new kh(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],yp(t,1)]}call(t,e){return ua((()=>{this.invokeCallHook(t,e);let n=pd(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new kh(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],yp(t.shape,1)];return t.reshape(e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}eg.className="Flatten",aa(eg);class ng extends kd{constructor(t){super(t),this.supportsMasking=!0,this.activation=im(t.activation)}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t);return this.activation.apply(n)}))}getConfig(){const t={activation:sm(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}ng.className="Activation",aa(ng);class rg extends kd{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return ua((()=>function(t,e){return ua((()=>{if(2!==t.shape.length)throw new kh(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Rp(Np(t,1),[1,e,1])}))}(t=pd(t),this.n)))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}rg.className="RepeatVector",aa(rg);class sg extends kd{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new kh("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=yp(t);if(null!==a){if(0===s||i%s!=0)throw new kh(n);r[a]=i/s}else if(i!==s)throw new kh(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}sg.className="Reshape",aa(sg);class ag extends kd{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=vp(1,t.dims.length+1);if(!ke(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new xd({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=dd(t)).slice();return this.dims.forEach(((n,r)=>{e[r+1]=t[n]})),e}call(t,e){return Ws(pd(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}ag.className="Permute",aa(ag);class ig extends kd{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=pd(t);return $a(Ao(n,this.maskValue),-1)}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t),r=$a(Ao(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}ig.className="Masking",aa(ig);class og extends kd{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Th(t.inputLength))}this.inputDim=t.inputDim,Vh(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Vh(this.outputDim,"outputDim"),this.embeddingsInitializer=ad(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=pm(t.embeddingsRegularizer),this.activityRegularizer=pm(t.activityRegularizer),this.embeddingsConstraint=ep(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return ua((()=>this.maskZero?(t=pd(t),Ao(t,Di(t))):null))}computeOutputShape(t){if(t=dd(t),null==this.inputLength)return[...t,this.outputDim];const e=Th(this.inputLength);if(e.length!==t.length-1)throw new kh(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new kh(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return ua((()=>{this.invokeCallHook(t,e);let n=pd(t);"int32"!==n.dtype&&(n=Cp(n,"int32"));return Dp(this.embeddings.read(),n.as1D()).reshape(dd(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:sd(this.embeddingsInitializer),embeddingsRegularizer:cm(this.embeddingsRegularizer),activityRegularizer:cm(this.activityRegularizer),embeddingsConstraint:Qh(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}og.className="Embedding",aa(og);class lg extends kd{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Ih}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new kh("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[dd(t)]),(t=t).length<2)throw new kh(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Bh(e),e.length>1)throw new kh(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map((t=>t.length));-1===t.indexOf(null)&&1===Bh(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return ua((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const r=wp(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=Np(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(yp(t.slice(1))));i=Ws(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=vp(1,t).concat([0]);e.push(Ws(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Ws(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(vp(0,s-1));r=Ws(r,t)}return r}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Bh(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return ua((()=>{if(null==e)return null;if(!Array.isArray(e))throw new kh("`mask` should be an Array");if(!Array.isArray(t))throw new kh("`inputs` should be an Array");if(e.length!==t.length)throw new kh(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:zi(t,0))))[0];for(let t=1;t<e.length-1;++t)n=go(n,e[t]);return n}))}}class ug extends lg{constructor(t){super(t)}mergeFunction(t){return ua((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=da(e,t[n]);return e}))}}ug.className="Add",aa(ug);class cg extends lg{constructor(t){super(t)}mergeFunction(t){return ua((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=ga(e,t[n]);return e}))}}cg.className="Multiply",aa(cg);class hg extends lg{constructor(t){super(t)}mergeFunction(t){return ua((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=da(e,t[n]);return ga(1/t.length,e)}))}}hg.className="Average",aa(hg);class pg extends lg{constructor(t){super(t)}mergeFunction(t){return ua((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Zi(e,t[n]);return e}))}}pg.className="Maximum",aa(pg);class dg extends lg{constructor(t){super(t)}mergeFunction(t){return ua((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=So(e,t[n]);return e}))}}dg.className="Minimum",aa(dg);class fg extends lg{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new kh("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(ke(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new kh("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return ua((()=>Ep(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new kh("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new kh("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new kh("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new kh(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return ua((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(Do(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(zi(e[n],-1)):r.push(e[n]);const s=Za(r,this.axis);return Ea(s,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function mg(t,e){for(;t<0;)t+=e;return t}fg.className="Concatenate",aa(fg);class gg extends lg{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){xe(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Ih("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new kh(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new kh(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>mg(e,t[n].shape.length))):[mg(this.axes,n.shape.length),mg(this.axes,r.shape.length)],this.normalize&&(n=Pd(n,e[0]),r=Pd(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Ih("batchDot is not implemented for tensors of 4D or higher rank yet");if(xe(t.shape.length>=2,(()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length)),xe(t.shape.length>=2,(()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length)),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Ih("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return ua((()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[mg(this.axes,t.length),mg(this.axes,e.length)],n}computeOutputShape(t){xe(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Ih("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}gg.className="Dot",aa(gg);class yg extends kd{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t);return Lp((()=>Ap(n.shape,0,this.stddev).add(n)),(()=>n),e.training||!1)}))}}yg.className="GaussianNoise",aa(yg);class bg extends kd{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ua((()=>{this.invokeCallHook(t,e);const n=pd(t);if(this.rate>0&&this.rate<1){return Lp((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Ap(n.shape,1,t))}),(()=>n),e.training||!1)}return n}))}}bg.className="GaussianDropout",aa(bg);class xg extends kd{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||pd(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ua((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Lp((()=>{const e=pd(t),r=-1.7580993408473766;let s=qi(Jo(n),this.rate);s=Cp(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)}),(()=>pd(t)),e.training||!1)}return t}))}}function wg(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=ai(t,e,n,r,s,a);else if(3===t.rank)i=ii(t,e,n,r,s,a);else{if(4!==t.rank)throw new Ih(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=oi(t,e,n,r,s,a)}return i}function vg(t,e,n,r,s=.001){return ke(r.slice().sort(),vp(0,t.rank-1))?function(t,e,n,r,s=.001){return ua((()=>{const a=Ro(t,r),i=a.mean,o=a.variance;return[wg(t,i,o,n,e,s),i,o]}))}(t,e,n,r,s):function(t,e,n,r,s=.001){return ua((()=>{const a=Ro(t,r),i=a.mean,o=a.variance,l=[];for(const e of vp(0,t.rank))-1!==r.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),p=null==n?null:n.reshape(l);return[wg(t,u,c,p,h,s),i,o]}))}(t,e,n,r,s)}xg.className="AlphaDropout",aa(xg);class Cg extends kd{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=ad(t.betaInitializer||"zeros"),this.gammaInitializer=ad(t.gammaInitializer||"ones"),this.movingMeanInitializer=ad(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=ad(t.movingVarianceInitializer||"ones"),this.betaConstraint=ep(t.betaConstraint),this.gammaConstraint=ep(t.gammaConstraint),this.betaRegularizer=pm(t.betaRegularizer),this.gammaRegularizer=pm(t.gammaRegularizer)}build(t){t=dd(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new kh(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new xd({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return ua((()=>{const n=null!=e.training&&e.training,r=pd(t),s=r.shape,a=s.length,i=vp(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Eh(1,a);l[o]=s[o];const u=i.slice();u.sort();const c=!ke(u,vp(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,s=this.scale?this.gamma.read().reshape(l):null;return wg(r,t,e,n,s,this.epsilon)}return wg(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=vg(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{ua((()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:sd(this.betaInitializer),gammaInitializer:sd(this.gammaInitializer),movingMeanInitializer:sd(this.movingMeanInitializer),movingVarianceInitializer:sd(this.movingVarianceInitializer),betaRegularizer:cm(this.betaRegularizer),gammaRegularizer:cm(this.gammaRegularizer),betaConstraint:Qh(this.betaConstraint),gammaConstraint:Qh(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Cg.className="BatchNormalization",aa(Cg);class Ng extends kd{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=ad(t.betaInitializer||"zeros"),this.gammaInitializer=ad(t.gammaInitializer||"ones"),this.betaRegularizer=pm(t.betaRegularizer),this.gammaRegularizer=pm(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=dd(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Bh(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(t,e){const n=pd(t),r=n.shape,s=r.length;return ua((()=>{let{mean:t,variance:e}=Ro(n,this.axis,!0);const a=Eh(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(u.push(r[t]),c.push(1)):(u.push(1),c.push(r[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),wg(n,t,e,l,o,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:sd(this.betaInitializer),gammaInitializer:sd(this.gammaInitializer),betaRegularizer:cm(this.betaRegularizer),gammaRegularizer:cm(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Ng.className="LayerNormalization",aa(Ng);class kg extends kd{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new kh(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new kh(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new kh(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new xd({ndim:4})]}computeOutputShape(t){let e,n;return t=dd(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return ua((()=>function(t,e,n){return ua((()=>{if(4!==t.rank)throw new kh("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==e&&(e=[[1,1],[1,1]]),2!==e.length||2!==e[0].length||2!==e[1].length)throw new kh("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new kh(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let r;return r="channelsFirst"===n?[[0,0],[0,0],e[0],e[1]]:[[0,0],e[0],e[1],[0,0]],Fo(t,r)}))}(pd(t),this.padding,this.dataFormat)))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function Ig(t,e,n,r,s,a){return ua((()=>{let i;op(s),up(a),lp(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Cm(t,s);const o="same"===r?"same":"valid";return i="max"===a?wo(t,e,n,o):Xa(t,e,n,o),"channelsFirst"===s&&(i=Ws(i,[0,3,1,2])),i}))}function Sg(t,e,n,r,s,a){return ua((()=>{let i;op(s),up(a),lp(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Nm(t,s);const o="same"===r?"same":"valid";return i="max"===a?vo(t,e,n,o):Ya(t,e,n,o),"channelsFirst"===s&&(i=Ws(i,[0,4,1,2,3])),i}))}kg.className="ZeroPadding2D",aa(kg);class Eg extends kd{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new kh("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(Vh(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new kh("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}Vh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,lp(this.padding),this.inputSpec=[new xd({ndim:3})]}computeOutputShape(t){const e=wm((t=dd(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return ua((()=>{this.invokeCallHook(t,e),t=Np(pd(t),2);const n=this.poolingFunction(pd(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Nl(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class $g extends Eg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Ig(t,e,n,r,s,"max")}}$g.className="MaxPooling1D",aa($g);class Rg extends Eg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Ig(t,e,n,r,s,"avg")}}Rg.className="AveragePooling1D",aa(Rg);class Ag extends kd{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new kh("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];Vh(this.poolSize,"poolSize"),Vh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,op(this.dataFormat),lp(this.padding),this.inputSpec=[new xd({ndim:4})]}computeOutputShape(t){t=dd(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=wm(e,this.poolSize[0],this.padding,this.strides[0]),n=wm(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return ua((()=>(this.invokeCallHook(t,e),this.poolingFunction(pd(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Tg extends Ag{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Ig(t,e,n,r,s,"max")}}Tg.className="MaxPooling2D",aa(Tg);class Dg extends Ag{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Ig(t,e,n,r,s,"avg")}}Dg.className="AveragePooling2D",aa(Dg);class Fg extends kd{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new kh("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Vh(this.poolSize,"poolSize"),Vh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,op(this.dataFormat),lp(this.padding),this.inputSpec=[new xd({ndim:5})]}computeOutputShape(t){t=dd(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=wm(e,this.poolSize[0],this.padding,this.strides[0]),n=wm(n,this.poolSize[1],this.padding,this.strides[1]),r=wm(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return ua((()=>(this.invokeCallHook(t,e),this.poolingFunction(pd(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class _g extends Fg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Sg(t,e,n,r,s,"max")}}_g.className="MaxPooling3D",aa(_g);class Og extends Fg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return op(s),lp(r),Sg(t,e,n,r,s,"avg")}}Og.className="AveragePooling3D",aa(Og);class Mg extends kd{constructor(t){super(t),this.inputSpec=[new xd({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Ih}}class Lg extends Mg{constructor(t){super(t||{})}call(t,e){return ua((()=>{const e=pd(t);return ko(e,1)}))}}Lg.className="GlobalAveragePooling1D",aa(Lg);class zg extends Mg{constructor(t){super(t||{})}call(t,e){return ua((()=>{const e=pd(t);return co(e,1)}))}}zg.className="GlobalMaxPooling1D",aa(zg);class Bg extends kd{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,op(this.dataFormat),this.inputSpec=[new xd({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Ih}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Pg extends Bg{call(t,e){return ua((()=>{const e=pd(t);return"channelsLast"===this.dataFormat?ko(e,[1,2]):ko(e,[2,3])}))}}Pg.className="GlobalAveragePooling2D",aa(Pg);class Wg extends Bg{call(t,e){return ua((()=>{const e=pd(t);return"channelsLast"===this.dataFormat?co(e,[1,2]):co(e,[2,3])}))}}Wg.className="GlobalMaxPooling2D",aa(Wg);class Ug extends kd{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Bd(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Vg extends Ug{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=dd(t)).length<3)throw new kh("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=dd(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return ua((()=>Lm(((t,n)=>[pd(this.layer.call(t,e)),[]]),t=pd(t),[],!1,null,null,!1,!0)[1]))}}Vg.className="TimeDistributed",aa(Vg);class Gg extends Ug{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Bd(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Bd(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Wh(ap,"BidirectionalMergeMode",s),t.weights)throw new Ih("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):Ah(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Mm(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new kh("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map((t=>new xd({shape:t.shape})));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new Ih("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof wd;for(const t of a)if(t instanceof wd!==o)throw new kh("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ua((()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=rl(s,1)),"concat"===this.mergeMode?i=Ep([r,s]):"sum"===this.mergeMode?i=da(r,s):"ave"===this.mergeMode?i=ga(.5,da(r,s)):"mul"===this.mergeMode?i=ga(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){hp(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),hp(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Bd(e.layer);if(delete e.layer,null!=e.numConstants)throw new Ih("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}var Hg,jg,qg;Gg.className="Bidirectional",aa(Gg),(jg=Hg||(Hg={}))[jg.DT_INVALID=0]="DT_INVALID",jg[jg.DT_FLOAT=1]="DT_FLOAT",jg[jg.DT_DOUBLE=2]="DT_DOUBLE",jg[jg.DT_INT32=3]="DT_INT32",jg[jg.DT_UINT8=4]="DT_UINT8",jg[jg.DT_INT16=5]="DT_INT16",jg[jg.DT_INT8=6]="DT_INT8",jg[jg.DT_STRING=7]="DT_STRING",jg[jg.DT_COMPLEX64=8]="DT_COMPLEX64",jg[jg.DT_INT64=9]="DT_INT64",jg[jg.DT_BOOL=10]="DT_BOOL",jg[jg.DT_QINT8=11]="DT_QINT8",jg[jg.DT_QUINT8=12]="DT_QUINT8",jg[jg.DT_QINT32=13]="DT_QINT32",jg[jg.DT_BFLOAT16=14]="DT_BFLOAT16",jg[jg.DT_FLOAT_REF=101]="DT_FLOAT_REF",jg[jg.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",jg[jg.DT_INT32_REF=103]="DT_INT32_REF",jg[jg.DT_UINT8_REF=104]="DT_UINT8_REF",jg[jg.DT_INT16_REF=105]="DT_INT16_REF",jg[jg.DT_INT8_REF=106]="DT_INT8_REF",jg[jg.DT_STRING_REF=107]="DT_STRING_REF",jg[jg.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",jg[jg.DT_INT64_REF=109]="DT_INT64_REF",jg[jg.DT_BOOL_REF=110]="DT_BOOL_REF",jg[jg.DT_QINT8_REF=111]="DT_QINT8_REF",jg[jg.DT_QUINT8_REF=112]="DT_QUINT8_REF",jg[jg.DT_QINT32_REF=113]="DT_QINT32_REF",jg[jg.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(qg||(qg={}));var Kg={};Kg.json=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Xg={};Xg.json=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Yg={};Yg.json=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var Jg={};Jg.json=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var Zg={};Zg.json=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var Qg={};Qg.json=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var ty={};ty.json=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}];var ey={};ey.json=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var ny={};ny.json=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var ry={};ry.json=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var sy={};sy.json=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var ay={};ay.json=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var iy={};iy.json=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var oy={};oy.json=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var ly={};ly.json=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var uy={};uy.json=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];function cy(t,e){return hy(t,e)}function hy(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(my(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=hy(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function py(t,e=fy){return dy(t,e)}function dy(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(my(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=dy(t.map((t=>t[a])),e,n);s[a]=r}return n.delete(r),s}throw new Error("Can't recurse into non-iterable type: "+r)}return s.value}function fy(t){return null===t?null:my(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function my(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof pn))}function gy(t){return t instanceof pn?{value:t.clone(),recurse:!1}:my(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class yy{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class by extends yy{constructor(){super(by.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}by.INITIAL_CAPACITY=32;class xy{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new $y(this,t)}filter(t){return new Sy(this,t)}map(t){return new Ey(this,t)}mapAsync(t){return new Ry(this,t)}serialMapAsync(t){return new Ry(this,t).serial()}flatmap(t){return new Ty(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile((t=>!0===t))}rowMajorBatch(t,e=!0){return new Iy(this,t,e)}columnMajorBatch(t,e=!0,n=fy){return this.rowMajorBatch(t,e).map((t=>py(t,n)))}concatenate(t,e){return new Dy(new wy([this,t]),e)}take(t){return t<0||null==t?this:new ky(this,t)}skip(t){return t<0||null==t?this:new Ny(this,t)}prefetch(t){return new Oy(this,t)}shuffle(t,e){return new My(this,t,e)}serial(){return new Cy(this)}}class wy extends xy{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,cy(e,gy)),done:!1};var e}}class vy extends xy{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class Cy extends xy{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Ny extends xy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;ca(t.value)}return this.upstream.next()}}class ky extends xy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Iy extends xy{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class Sy extends xy{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;ca(t.value)}}}class Ey extends xy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Rn(t.value),n=this.transform(t.value),r=Rn(n);for(const t of e)$n(t,r)||t.dispose();return{value:n,done:!1}}}class $y extends xy{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class Ry extends xy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Rn(t.value),n=await this.transform(t.value),r=Rn(n);for(const t of e)$n(t,r)||t.dispose();return{value:n,done:!1}}}class Ay extends xy{constructor(){super(),this.outputQueue=new by,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Ty extends Ay{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=Rn(t.value),n=this.transform(t.value),r=Rn(n);this.outputQueue.pushAll(n);for(const t of e)$n(t,r)||t.dispose();return!0}}class Dy extends xy{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var Fy,_y;(_y=Fy||(Fy={}))[_y.FAIL=0]="FAIL",_y[_y.SHORTEST=1]="SHORTEST",_y[_y.LONGEST=2]="LONGEST";class Oy extends xy{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new yy(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class My extends Oy{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=Bo.alea(n||Ke().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Ly{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return xe(t>0,(()=>"batchSize needs to be positive, but it is\n      "+t)),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),zy((async()=>(await n.iterator()).columnMajorBatch(t,e,By)),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,zy((async()=>(await e.iterator()).concatenate(await t.iterator())),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,zy((async()=>(await e.iterator()).filter((e=>ua((()=>t(e)))))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return zy((async()=>(await e.iterator()).map((e=>ua((()=>t(e)))))),this.size)}mapAsync(t){const e=this;return zy((async()=>(await e.iterator()).mapAsync(t)),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return zy((async()=>(await e.iterator()).prefetch(t)),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,zy((async()=>{const n=new vy((async()=>({value:await e.iterator(),done:!1})));var r,s;return r=n.take(t),new Dy(r,s)}),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,zy((async()=>(await e.iterator()).skip(t)),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Bo.alea(e||Ke().toString());return zy((async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())}),this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,zy((async()=>(await e.iterator()).take(t)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function zy(t,e=null){return new class extends Ly{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function By(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof pn||_e(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof pn?kl(t):Hr(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}Ly.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Py(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&xe("complex64"!==t.dtype,(()=>e+" does not support complex64 tensors in the CPU backend."))}))}function Wy(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=$s(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),C=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<C;n+=l){const s=m+n*r[1];for(let n=c;n<p;n+=u){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function Uy(t,e,n,r,s=!1,a=!1){const i=$s(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=$s(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+l)}}i.set(v,t,n,o,e)}}return i}const Vy=Xl,Gy=ac,Hy=ic,jy=oc,qy=_l;function Ky(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Xy extends uc{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new lc(this,oa())}write(t,e,n){this.firstUse&&(this.firstUse=!1,r().get("IS_NODE")&&Ju("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:t,dtype:n,refCount:1}),s}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return Zu(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map((t=>Ye(t)))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return $s(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return oa().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Ke();t();return{kernelMs:Ke()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:oa().keep(t.clone()),imag:oa().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){Py(t,"slice");if(ta(t.shape,e,n)){const r=ea(e,t.strides),s=Ne(n);return Hr(this.readSync(t.dataId).subarray(r,r+s),n,t.dtype)}const r=$s(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map(((t,n)=>t+e[n]));r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){Py(t,"stridedSlice");const s=qs(e,n,r);if(s.some((t=>0===t)))return Hr([],s);const a=$s(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=$s([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){Py(t,"reverse");const n=$s(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach((e=>i[e]=t.shape[e]-1-i[e])),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map((t=>To(t))),r=t.map((t=>Ki(t)));return Vr(this.concat(n,e),this.concat(r,e))}const n=t.map((t=>{const n=Ne(t.shape.slice(e));return t.as2D(-1,n)})),r=Ja(n.map((t=>t.shape)),1),s=$s(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach((e=>{s.set(this.readSync(e.dataId),t),t+=e.size}))}else{let t=0;n.forEach((e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]}))}const a=Ja(t.map((t=>t.shape)),e);return Hr(s,a,t[0].dtype)}neg(t){return Py(t,"neg"),this.multiply(Qi(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),((t,e,n,r)=>({real:t+n,imag:e+r}))):this.broadcastedBinaryOp(t,e,In(t.dtype,e.dtype),((t,e)=>t+e))}addN(t){Py(t,"addN");const e=t.map((t=>this.readSync(t.dataId))),n=$s(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=Ae([e],t.shape),r=co(t,n),s=Ca(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return ma(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),((t,e,n,r)=>({real:t-n,imag:e-r}))):this.broadcastedBinaryOp(t,e,In(t.dtype,e.dtype),((t,e)=>t-e))}pow(t,e){return Py([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.pow(t,e)))}batchMatMul(t,e,n,r){Py([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,p]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[d,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=$s([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<y;e++){let n=0;for(let a=r;a<w;a++)n+=l[t*c+s*h+a*p]*u[a*d+e*f+t*m];b[t*g+(s*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=Ky(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n}))):this.broadcastedBinaryOp(t,e,In(t.dtype,e.dtype),((t,e)=>t*e))}floorDiv(t,e){Py([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",((t,e)=>Math.floor(t/e)))}sum(t,e){Py(t,"sum"),Na("sum",e,t.rank);const[n,r]=va(t.shape,e),s=Co(n,In(t.dtype,"int32")),a=Ne(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){Py(t,"sum");const[n,r]=va(t.shape,e),s=Co(n,In(t.dtype,"int32")),a=Ne(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){Py(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=Qi(s,"int32"),a=Ai(n,e).asType("float32").mul(t).sum(0);r.push(a)}return kl(r)}argMin(t,e){Py(t,"argMin");const n=[e];Na("argMin",n,t.rank);const[r,s]=va(t.shape,n),a=Co(r,"int32"),i=Ne(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){Py(t,"argMax");const n=[e];Na("argMax",n,t.rank);const[r,s]=va(t.shape,n),a=Co(r,"int32"),i=Ne(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(Py(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=In(t.dtype,"int32"),a=Co(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=r?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const r=u(t,e);if(0===e)i[r]=n?0:o[r];else{const s=u(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return Py([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t===e?1:0))}notEqual(t,e){return Py([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t!==e?1:0))}less(t,e){return Py([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<e?1:0))}lessEqual(t,e){return Py([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<=e?1:0))}greater(t,e){return Py([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>e?1:0))}greaterEqual(t,e){return Py([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>=e?1:0))}logicalNot(t){Py(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return Py([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t&&e))}logicalOr(t,e){return Py([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t||e))}select(t,e,n){Py([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Co(e.shape,In(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:Ne(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<u;e++)1===r[t]?o[l++]=s[t]:o[l++]=a[t];return i}where(t){Py([t],"where");const e=this.readSync(t.dataId);return qy(t.shape,e)}topk(t,e,n){Py(t,"topk");const r=this.readSync(t.dataId);return jy(r,t.shape,t.dtype,e,n)}min(t,e){Py(t,"min"),Na("min",e,t.rank);const[n,r]=va(t.shape,e),s=Co(n,t.dtype),a=Ne(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return Py([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.min(t,e)))}mod(t,e){return Py([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))}maximum(t,e){return Py([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.max(t,e)))}all(t,e){Py(t,"all"),Na("all",e,t.rank);const[n,r]=va(t.shape,e),s=Co(n,t.dtype),a=Ne(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){Py(t,"any"),Na("any",e,t.rank);const[n,r]=va(t.shape,e),s=Co(n,t.dtype),a=Ne(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return Py([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t-e;return n*n}))}ceil(t){Py(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){Py(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){Py(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){Py(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){Py(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){Py(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){Py(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){Py(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){Py(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){Py(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){Py(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){Py(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){Py(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){Py(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){Py(t,"relu");const e=Co(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){Py(t,"relu");const e=Co(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return Py([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>t<0?e*t:t))}elu(t){Py(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){Py([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){Py(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){Py(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,t.dtype)}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){Py(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){Py(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){Py(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){Py(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){Py(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){Py(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){Py(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){Py(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return Py([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.atan2(t,e)))}sinh(t){Py(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){Py(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){Py(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Se(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){Py(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){Py(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){Py(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){Py(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),s=Math.abs(n[t]),a=1/(1+.3275911*s);e[t]=r*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-s*s))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){Py(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ky(this,i,s,a)),i}conv2d(t,e,n){Py([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=$s(n.outShape,t.dtype),h=t.strides[0],p=u?t.strides[1]:t.strides[2],d=u?t.strides[2]:1,f=u?1:t.strides[1],m=c.strides[0],g=u?c.strides[1]:c.strides[2],y=u?c.strides[2]:1,b=u?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-l;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const l=t*e.strides[0],c=u+r*p;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*d;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,p=$s(n.outShape,t.dtype),d=this.readSync(t.dataId),f=this.readSync(e.dataId),m=p.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*p.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*p.strides[1],w=g*n.strideDepth-u;for(let u=0;u<r;u++){const r=w+u*i;if(r<0||r>=n.inDepth)continue;const g=u*e.strides[0],b=y+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*p.strides[2],u=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=u+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],p=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*l;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=p+a*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=d[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[u+t];u+=n.outChannels}}}}}}}}return p.toTensor()}conv2dDerInput(t,e,n){Py([t,e],"conv2dDerInput");const r=$s(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:p,inChannels:d,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,C=h-1-n.padInfo.top,N=p-1-n.padInfo.left,k="channelsLast"===v,I=r.strides[0],S=k?r.strides[1]:r.strides[2],E=k?r.strides[2]:1,$=k?1:r.strides[1],R=t.strides[0],A=k?t.strides[1]:t.strides[2],T=k?t.strides[2]:1,D=k?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<d;++e)for(let n=0;n<f;++n){const r=n-C,c=Math.max(0,Math.ceil(r/x)),d=Math.min(y,(h+r)/x);for(let f=0;f<m;++f){const m=f-N,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(p+m)/w);let C=0;for(let n=c;n<d;++n){const s=n*x-r;for(let r=y;r<v;++r){const c=R*t+A*n+T*r,d=o*(h-1-s)+l*(p-1-(r*w-m))+u*e;for(let t=0;t<g;++t){C+=a[c+D*t]*i[d+t]}}}s[I*t+S*n+E*f+$*e]=C}}return r.toTensor()}conv3dDerInput(t,e,n){const r=$s(n.inShape,"float32"),s=r.values,[a,i,o,l]=r.strides,u=this.readSync(t.dataId),[c,h,p,d]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:C,inChannels:N,inDepth:k,inHeight:I,inWidth:S,outChannels:E,outDepth:$,outHeight:R,outWidth:A,strideDepth:T,strideHeight:D,strideWidth:F}=n,_=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=C-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<N;++e)for(let n=0;n<k;++n){const r=n-_,x=Math.max(0,Math.ceil(r/T)),N=Math.min($,(w+r)/T);for(let k=0;k<I;++k){const I=k-O,$=Math.max(0,Math.ceil(I/D)),_=Math.min(R,(v+I)/D);for(let R=0;R<S;++R){const S=R-M,O=Math.max(0,Math.ceil(S/F)),L=Math.min(A,(C+S)/F);let z=0;for(let n=x;n<N;++n){const s=n*T-r;for(let r=$;r<_;++r){const a=r*D-I;for(let i=O;i<L;++i){const o=c*t+h*n+p*r+d*i,l=m*(w-1-s)+g*(v-1-a)+y*(C-1-(i*F-S))+b*e;for(let t=0;t<E;++t){z+=u[o+t]*f[l+t]}}}}s[a*t+i*n+o*k+l*R+e]=z}}}return r.toTensor()}conv2dDerFilter(t,e,n){Py([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,l=$s(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((u-d)/s)),f=Math.min(n.outWidth,(n.inWidth+u-d)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=d+t*s-u;y+=o?h.get(l,e,r,m)*p.get(l,n,t,g):h.get(l,m,e,r)*p.get(l,g,n,t)}}l.set(y,t,d,m,g)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=$s(n.filterShape,"float32"),c=u.values,[h,p,d,f]=u.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,C,N,k]=t.strides,I=n.padInfo.front,S=n.padInfo.left,E=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((I-t)/r)),i=Math.min(n.outDepth,(n.inDepth+I-t)/r),u=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((E-h)/s)),$=Math.min(n.outHeight,(n.inHeight+E-h)/s),R=h*p+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((S-u)/a)),p=Math.min(n.outWidth,(n.inWidth+S-u)/a),A=u*d+R;for(let d=0;d<n.inChannels;++d){const R=d*f+A;for(let f=0;f<n.outChannels;++f){let A=0;for(let c=0;c<n.batchSize;++c){const n=c*v,R=c*g;for(let c=e;c<i;++c){const e=(t+c*r-I)*C+n,i=c*y+R;for(let t=o;t<$;++t){const n=(h+t*s-E)*N+e,r=t*b+i;for(let t=l;t<p;++t){const e=t*x+r;A+=w[(u+t*a-S)*k+n+d]*m[e+f]}}}}c[R+f]=A}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ky(this,i,s,a)),i}depthwiseConv2D(t,e,n){Py([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=$s(n.outShape,t.dtype),h=this.readSync(t.dataId),p=this.readSync(e.dataId),d=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-l;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],l=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)d[c+t]+=e*p[m+t];c+=u,m+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){Py([t,e],"depthwiseConv2DDerInput");const r=$s(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,p=this.readSync(e.dataId),[d,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:C,outHeight:N,outWidth:k,strideHeight:I,strideWidth:S}=n,E=y-1-n.padInfo.top,$=b-1-n.padInfo.left,R=C/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-E,g=Math.max(0,Math.ceil(r/I)),x=Math.min(N,(y+r)/I);for(let w=0;w<v;++w){const v=w-$,C=Math.max(0,Math.ceil(v/S)),N=Math.min(k,(b+v)/S);let E=0;for(let n=g;n<x;++n){const s=n*I-r;for(let r=C;r<N;++r){const a=u*t+c*n+h*r,i=d*(y-1-s)+f*(b-1-(r*S-v))+m*e;for(let t=0;t<R;++t){E+=l[a+(e*R+t)]*p[i+t]}}}s[a*t+i*n+o*w+e]=E}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){Py([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=$s(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((u-t)/r)),a=Math.min(n.outHeight,(n.inHeight+u-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((l-d)/s)),f=Math.min(n.outWidth,(n.inWidth+l-d)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-u;for(let t=i;t<f;++t){const r=d+t*s-l;b+=h.get(o,e,r,g)*p.get(o,n,t,m)}}o.set(b,t,d,g,y)}}}return o.toTensor()}tile(t,e){return Py(t,"tile"),Hy(this.bufferSync(t),e)}gather(t,e,n){Py([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=$s(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){Py([t],"batchToSpaceND");const r=e.reduce(((t,e)=>t*e)),s=Gu(t.shape,e,r),a=Hu(s.length,e.length),i=ju(t.shape,e,r),o=qu(n,e.length),l=Ku(i,n,e.length);return Ws(t.reshape(s),a).reshape(i).slice(o,l)}maxPool(t,e){Py(t,"maxPool");return Wy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){Py([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=$s(r.outShape,e.dtype,Uy(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=h-1-r.padInfo.left,d=c-1-r.padInfo.top,f=$s(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-d,y=s-p;let b=0;for(let n=0;n<c;n+=l){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=u){const l=(y+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const u=c*h-1-a.get(t,s,l,e)===n*h+i?1:0;if(0===u)continue;b+=m.get(t,s,l,e)*u}}f.set(b,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){Py([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,l=n.dilationWidth,u=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,p=u-1-n.padInfo.top,d=$s(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-p,y=i-h;let b=0;for(let a=0;a<u;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=l){const a=(y+r)/s;if(a<0||a>=n.outWidth||Math.floor(a)!==a)continue;b+=m.get(t,i,a,e)}}d.set(b*f,t,a,i,e)}return d.toTensor()}pool3d(t,e,n){Py(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=$s(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],C=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,k=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const I=x*r-p;let S=I;for(;S<0;)S+=i;const E=Math.min(e.inDepth,u+I),$=N+x*w;for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+u),w=$+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let u=s;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+s),d=w+r*C;let v=m,N=0,I=0;for(let e=S;e<E;e+=i){const r=k+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=u;e<c;e+=l){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/I:v}}}}return y.toTensor()}avgPool3d(t,e){return Py(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Py([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=$s(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,C=o-y,N=l-g;let k=0;for(let i=0;i<p;i+=u){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(C+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;k+=w.get(t,o,i,s,e)}}}b.set(k*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return Py(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=$s(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+u);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let C=d;for(;C<0;)C+=l;const N=Math.min(e.inWidth,h+d);let k=Number.NEGATIVE_INFINITY,I=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-u;for(let a=C;a<N;a+=l){const i=a-d,o=m.get(t,e,r,a,g);o>=k&&(k=o,I=n*c*h+s*c+i)}}}n.set(I,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){Py([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=$s(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,C=s-g,N=w-m;let k=0;for(let n=0;n<h;n+=l){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=u){const l=(C+a)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(N+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(t,s,l,u,e)===n*p*d+a*d+i?1:0;if(0===c)continue;k+=x.get(t,s,l,u,e)*c}}}y.set(k,t,n,s,w,e)}return y.toTensor()}cast(t,e){return nc(t,e,this)}avgPool(t,e){Py(t,"avgPool"),Py(t,"maxPool");return Wy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){Py(t,"resizeBilinear");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(Ne([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=d*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[d+t],r=e+(l[m+t]-e)*s,a=r+(n+(l[b+t]-n)*s-r)*h;u[p++]=a}}}return Hr(u,[s,e,n,o])}resizeBilinearBackprop(t,e,n){Py([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<l;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,l=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*l,C=b*o,N=y*l,k=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[p+t]+=e*C,u[x+t]+=e*N,u[w+t]+=e*k}}}}return Rl(u,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){Py(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[s+t];u[f++]=e}}}}return Hr(u,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Py([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),C=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+C;if(s<0||s>=l)continue;const o=g+s*t.strides[2],u=s*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return Rl(u,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){Py([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=this.readSync(n.dataId),u=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),p=c.length,d=u.length,f=l.length,m=o.length;let g=0,y=0,b=0,x=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[y++])*u[b++]/Math.sqrt(l[x++]+a),g>=p&&(g=0),y>=m&&(y=0),b>=d&&(b=0),x>=f&&(x=0);return Rl(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){Py(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let l=0;for(;r<=s;r++){const t=o[r];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);u[t]=a}return Rl(u,t.shape)}LRNGrad(t,e,n,r,s,a,i){Py(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(u[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*u[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=l[t],h[e]+=n}}return Rl(h,t.shape)}multinomial(t,e,n,r){Py(t,"multinomial");const s=e?t:ml(t),a=s.shape[0],i=s.shape[1],o=Co([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=u[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+u[e+t];const a=Bo.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,r){Py(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return $l(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){Py(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return Vy(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=$s(t.shape,"float32"),a=$s(t.shape,"float32"),i=To(t).as2D(n,r),o=Ki(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),l=o.slice([t,0],[1,r]),u=Vr(n,l),c=this.readSync(this.fftImpl(u,e).dataId);for(let e=0;e<r;e++){const n=Qu(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return Vr(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=Vr(To(s).div(Qi(r)),Ki(s).div(Qi(r)))),s}{const n=this.readSync(t.dataId),s=function(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(n,r,e));return Vr(s.real,s.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=function(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}(r);let i=Vr(a.real,a.imag).as1D();const o=function(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}(r);let l=Vr(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),l=this.fftRadix2(l,s,n);const u=function(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}(e,n),c=Vr(u.real,u.imag).mul(l),h=i.add(c),p=i.sub(c),d=To(h).concat(To(p)),f=Ki(h).concat(Ki(p));return Vr(d,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=ec(s*r,e,n),l=Qu(t,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),tc(r,a,i,s)}return r}depthToSpace(t,e,n){xe("NHWC"===n,(()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n)),xe(e>1,(()=>"blockSize should be > 1 for depthToSpace, but was: "+e));const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*l*u);let p=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),d=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+d+i*(l+a*(r+s*t));h[p++]=c[n]}}}return Rl(h,[r,o,l,u])}broadcastedBinaryOp(t,e,n,r){const s=Ri(t.shape,e.shape),a=$s(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=Ei(t.shape,s),u=Ei(e.shape,s),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);l.forEach((t=>d[t]=0));const f=n.locToIndex(d),m=p.slice(-e.rank);u.forEach((t=>m[t]=0));const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=Ri(t.shape,e.shape),s=$s(r,"float32"),a=$s(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=Ei(t.shape,r),u=Ei(e.shape,r),c=s.values,h=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let p=0;p<c.length;p++){const d=s.indexToLoc(p),f=d.slice(-t.rank);l.forEach((t=>f[t]=0));const m=r.locToIndex(f),g=d.slice(-e.rank);u.forEach((t=>g[t]=0));const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[p]=b.real,h[p]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return Gy(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,p]=r,d=$s([c,h,p,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,C=p>1?(x-r)*(l-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(l-1)+i*C:.5*(r+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<u;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(l-1)+n*C:.5*(r+x)*(l-1);if(s<0||s>l-1){for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<u;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=Hs(0,t,n);return this.scatter(t,e,n,l,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Vs(t,e);if(0===a)return Hr([],s,t.dtype);const l=new ln([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=u[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[s*i+t]}return l.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Hs(0,t,n),l=Qi(0);return this.scatter(t,e,n,o,a,s,r,i,l,!0)}fill(t,e,n){const r=Fe(n=n||ze(e),Ne(t));return r.fill(e),oa().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=Fe(t.dtype,Ne(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return sc(t,e,n)}scatter(t,e,n,r,s,a,i,o,l,u){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return Hr([],n,e.dtype);const d=new ln(c,e.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=p[t*s+n]:d.values[l*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}function Yy(t,e,n,r){const s=De(r,Ne(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function Jy(t,e,n,r,s){const a=e.length,i=Ne(e),o=We(e),l=We(s),u=De(n,Ne(s));for(let e=0;e<i;++e){const n=Ze(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];u[Je(s,a,l)]=t[e]}return u}pa("cpu",(()=>new Xy),1);const Zy={kernelName:j,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Py(n,"cos");const s=r.data.get(n.dataId).values,a=Ne(n.shape),i=new Float32Array(a);for(let t=0;t<a;++t)i[t]=Math.cos(s[t]);return{dataId:r.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Qy={kernelName:Y,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,l=e,u=l.data.get(r.dataId).values,c=r.shape.length,h=l.data.get(s.dataId).values,p=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:C,filterWidth:N,dilationHeight:k,dilationWidth:I,outShape:S}=Ma(r.shape,s.shape,a,i,"NHWC",o),E=Ne(S),$=S.length,R=Fe(r.dtype,E);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<C;++e){const a=n+e*k;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=i+n*I;if(d>=0&&d<m){const i=Je([t,a,d,o],c,We(r.shape)),f=Je([e,n,o],p,We(s.shape)),m=u[i]+h[f];m>l&&(l=m)}}}R[Je([t,e,a,o],$,We(S))]=l}}}return{dataId:l.write(Ue(R,r.dtype),S,r.dtype),shape:S,dtype:r.dtype}}},tb={kernelName:Z,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=Ge(r.shape,u.data.get(r.dataId).values),h=Ge(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:C,dilationHeight:N,dilationWidth:k,outShape:I}=Ma(r.shape,s.shape,i,o,"NHWC",l);xe(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got `+a.rank));const S=Ge(I,u.data.get(a.dataId).values),E=qe(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=e,l=n)}}}E[o][l][a]+=S[t][e][r][a]}}}return{dataId:u.write(Ue(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},eb={kernelName:J,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=Ge(r.shape,u.data.get(r.dataId).values),h=Ge(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:C,dilationHeight:N,dilationWidth:k,outShape:I}=Ma(r.shape,s.shape,i,o,"NHWC",l);xe(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got `+a.rank));const S=Ge(I,u.data.get(a.dataId).values),E=qe(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=s<0?0:s;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=r,l=u)}}}E[t][o][l][a]+=S[t][e][r][a]}}}return{dataId:u.write(Ue(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function nb(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;Py([s,a],t);const o=i.data.get(s.dataId).values,l=i.data.get(a.dataId).values,[u,c]=e(s.shape,a.shape,o,l,s.dtype);return{dataId:i.write(u,c,s.dtype),shape:c,dtype:s.dtype}}}}function rb(t){return(e,n,r,s,a)=>{const i=Ri(e,n),o=i.length,l=We(i),u=De(a,Ne(i)),c=e.length,h=n.length,p=We(e),d=We(n),f=Ei(e,i),m=Ei(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<u.length;++e){const n=Ze(e,o,l),a=n.slice(-c);f.forEach((t=>a[t]=0));const i=Je(a,c,p),g=n.slice(-h);m.forEach((t=>g[t]=0));const y=Je(g,h,d);u[e]=t(r[i],s[y])}return[u,i]}}const sb=rb(((t,e)=>t/e)),ab=nb(Q,sb),ib={kernelName:et,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,a=De(r.dtype,Ne(r.shape)),[i,o,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<i;t++){const e=t*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let r=0;r<l;r++){const s=r*u;for(let o=0;o<u;o++){const h=[i,t,r,o][2],p=Math.round(l-h),d=e+n+s+o;let f=c[d];if(p>=0&&p<l){f=c[e+n+p*u+o]}a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const ob={kernelName:ot,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}},lb={kernelName:dt,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const l=o.length,u=Ae(s,o);let c=u;const h=ka(c,l);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=Jy(p,o,r.dtype,h,t),c=Sa(c.length,l),o=t}Py(r,"max"),Na("max",c,l);const[d,f]=va(o,c),m=Yy(p,Ne(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;if(a){y=Ca(d,u)}return{dataId:g,shape:y,dtype:r.dtype}}};const ub={kernelName:yt,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;Py(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=La(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=Wy(t,0,n,We(e),s,"max"),i=Uy(t,e,n,s,!0,r);return[a.values,i.values]}(u,r.shape,r.dtype,o,c),d=l.write(h,c.outShape,r.dtype),f=l.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},cb=Yl,hb={kernelName:Ct,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e;Py(r,"NonMaxSuppressionPadded");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=cb(c,h,a,i,o,l);return[p,d]}},pb=Jl,db={kernelName:Nt,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;Py(r,"NonMaxSuppressionWithScore");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=pb(c,h,p,d,f,m);return[g,y]}};const fb={kernelName:St,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,constantValue:i}=r;Py(s,"pad");const o=a.map(((t,e)=>t[0]+s.shape[e]+t[1])),l=a.map((t=>t[0])),u=n.data.get(s.dataId).values,c=Ne(s.shape),h=s.shape.length,p=We(s.shape),d=Ne(o),f=o.length,m=We(o),g=De(s.dtype,d);0!==i&&g.fill(i);for(let t=0;t<c;t++){g[Je(Ze(t,h,p).map(((t,e)=>t+l[e])),f,m)]=u[t]}return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}};function mb(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r;return n.incRef(s.dataId),{dataId:s.dataId,shape:a,dtype:s.dtype}}const gb={kernelName:At,backendName:"cpu",kernelFunc:mb},yb={kernelName:se,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=De(r.dtype,Ne(r.shape)),[u,c,h,p]=r.shape,[d,f]=Vu(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[u,t,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let C=a;if("number"!=typeof a&&(C=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){C=y[e+v*(h*p)+w*p+i]}l[e+n+s+i]=C}}}}return{dataId:o.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function bb(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:a}=n;Py(s,"transpose");const i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[a[t]];const l=Jy(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(l,o,s.dtype),shape:o,dtype:s.dtype}}const xb={kernelName:Zt,backendName:"cpu",kernelFunc:bb};const wb={kernelName:Ht,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:a,paddings:i}=r;Py([s],"spaceToBatchND");const o=Ne(a),l=[[0,0]];l.push(...i);for(let t=1+a.length;t<s.shape.length;++t)l.push([0,0]);const u=fb.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=Gu(u.shape,a,o,!1),h=Hu(c.length,a.length,!1),p=ju(u.shape,a,o,!1),d=mb({inputs:{x:u},backend:n,attrs:{shape:c}}),f=bb({inputs:{x:d},backend:n,attrs:{perm:h}}),m=mb({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},vb={kernelName:Xt,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Py(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Cb=rb(((t,e)=>{const n=t-e;return n*n})),Nb=nb(Kt,Cb),kb=[Zy,Qy,eb,tb,ab,ib,ob,ub,lb,hb,db,fb,gb,yb,wb,vb,Nb,xb];for(const t of kb)de(t);const Ib={},Sb={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Eb(t){t in Ib||(Ib[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",(e=>{e.preventDefault(),delete Ib[t]}),!1),1===t)return e.getContext("webgl",Sb)||e.getContext("experimental-webgl",Sb);return e.getContext("webgl2",Sb)}(t));const e=Ib[t];return e.isContextLost()?(delete Ib[t],Eb(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ib[t])}var $b,Rb,Ab,Tb,Db,Fb;function _b(t,e){return[e,t]}function Ob(t){const e=Ne(t);return Ee(Math.ceil(e/4))}function Mb(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Lb(t,e){const n=t;let s,a,i,o,l,u,c,h,p,d;return 2===r().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,i=n.RGBA16F,o=n.RGBA32F,l=n.RED,c=4,h=1,p=n.HALF_FLOAT,d=n.FLOAT):(s=t.RGBA,a=t.RGBA,i=t.RGBA,o=n.RGBA,l=t.RGBA,c=4,h=4,p=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function zb(t,e){const n=e();return r().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}(Rb=$b||($b={}))[Rb.DENSE=0]="DENSE",Rb[Rb.SHARED_BATCH=1]="SHARED_BATCH",(Tb=Ab||(Ab={}))[Tb.RENDER=0]="RENDER",Tb[Tb.UPLOAD=1]="UPLOAD",Tb[Tb.PIXELS=2]="PIXELS",Tb[Tb.DOWNLOAD=3]="DOWNLOAD",(Fb=Db||(Db={}))[Fb.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",Fb[Fb.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",Fb[Fb.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",Fb[Fb.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",Fb[Fb.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function Bb(t){return!!(r().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Pb(t,e){return Xb(t,(()=>t.getExtension(e)),'Extension "'+e+'" not supported on this browser.')}function Wb(t,e){const n=Xb(t,(()=>t.createShader(t.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(zb(t,(()=>t.shaderSource(n,e))),zb(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=Ub.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map(((t,e)=>$e((e+1).toString(),a)+t));let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+$e(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Ub=/ERROR: [0-9]+:([0-9]+):/g;function Vb(t,e){if(zb(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function Gb(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(zb(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,r))),zb(t,(()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i))),zb(t,(()=>t.enableVertexAttribArray(o))),!0)}function Hb(t,e,n){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,n),zb(t,(()=>t.activeTexture(t.TEXTURE0+n))),zb(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}function jb(t,e,n){zb(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),zb(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function qb(t,e){zb(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),zb(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function Kb(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function Xb(t,e,n){const r=zb(t,(()=>e()));if(null==r)throw new Error(n);return r}function Yb(t,e=2){return Ne(t.slice(0,t.length-e))}function Jb(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Zb(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Yb(t),...Jb(t)]),e}function Qb(t){return t%2==0}function tx(t,e){if(ke(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Qb(n)&&Qb(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Qb(t[0])&&Qb(e[0])}let ex,nx;function rx(t,e){return null!=t.getExtension(e)}function sx(t){try{if(null!=Eb(t))return!0}catch(t){return!1}return!1}function ax(t){if(0===t)return!1;const e=Eb(t);if(1!==t){if(rx(e,"EXT_color_buffer_float"))return ix(e);const t="EXT_color_buffer_half_float";if(rx(e,t)){const n=e.getExtension(t);return function(t,e){const n=Lb(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);const s=1,a=1;t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(i),o}(e,n)}return!1}if(!rx(e,"OES_texture_float"))return!1;if(!rx(e,"WEBGL_color_buffer_float"))return!1;return ix(e)}function ix(t){const e=Lb(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const ox=r();ox.registerFlag("HAS_WEBGL",(()=>ox.getNumber("WEBGL_VERSION")>0)),ox.registerFlag("WEBGL_VERSION",(()=>sx(2)?2:sx(1)?1:0)),ox.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),ox.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===ox.get("WEBGL_VERSION"))),ox.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),ox.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),ox.registerFlag("WEBGL_PACK",(()=>ox.getBool("HAS_WEBGL"))),ox.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_CLIP",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),ox.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_PACK_REDUCE",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_LAZILY_UNPACK",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_CONV_IM2COL",(()=>ox.getBool("WEBGL_PACK"))),ox.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(t){if(null==ex){const e=Eb(t);ex=e.getParameter(e.MAX_TEXTURE_SIZE)}return ex}(ox.getNumber("WEBGL_VERSION")))),ox.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(t){if(null==nx){const e=Eb(t);nx=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,nx)}(ox.getNumber("WEBGL_VERSION")))),ox.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const t=ox.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Eb(t);return e=rx(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:rx(n,"EXT_disjoint_timer_query")?1:0,e}(t)})),ox.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>ox.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Mn())),ox.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(t){if(0===t)return!1;const e=Eb(t);if(1===t){if(!rx(e,"OES_texture_float"))return!1}else if(!rx(e,"EXT_color_buffer_float"))return!1;return ix(e)}(ox.getNumber("WEBGL_VERSION")))),ox.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!ox.getBool("WEBGL_FORCE_F16_TEXTURES")&&ox.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),ox.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>ax(ox.getNumber("WEBGL_VERSION")))),ox.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(t=ox.getNumber("WEBGL_VERSION"))&&null!=Eb(t).fenceSync;var t})),ox.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>ox.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),ox.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}));class lx{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>"T"+e));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>"v"+t)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class ux{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>"T"+e));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>"v"+t)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class cx{constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function hx(t,e){return["x","y","z","w","u","v"].slice(0,e).map((e=>`${t}.${e}`))}function px(t,e){return 1===e?[t]:hx(t,e)}function dx(){let t,e,n,s,a,i,o,l,u,c;return 2===r().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",s="varying",a="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function fx(t,e,n="index"){const r=We(e);return r.map(((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`)).join("")}function mx(t){const e=We(t).map((t=>t.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const gx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function yx(t,e,n,r){const s=[];t.forEach((t=>{const e=Ne(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))}));const a=s.join("\n"),i=t.map((t=>function(t,e,n=!1){let r="";r+=n?xx(t):bx(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Ei(t.shapeInfo.logicalShape,e.logicalShape),l=Ex(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((t=>`coords.${h[t+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>"coords."+h[e+u])).join(", ");let d="return outputValue;";const f=1===Ne(t.shapeInfo.logicalShape),m=1===Ne(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&ke(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Ex(l),c=Ei(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((t=>`coords.${d[t+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>"coords."+d[e+h])).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r))).join("\n"),o=e.texShape,l=dx(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${wx}\n    ${vx}\n    ${Cx}\n  `}(l);e.isPacked?(c=function(t,e){switch(t.length){case 0:return kx();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(ke(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return kx();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(ke(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=fx(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=fx(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=fx(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=fx(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(p+=Nx);return[p,u,h,a,c,i,n].join("\n")}function bx(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Ix(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Sx(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Ix(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&ke(e,s)){const t=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=Te(e),o=a;if(o.length<e.length){const e=["row","col"];return`\n      ${bx($x(t,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${Rx(e,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Sx(t)}\n      }\n    `;const l=s[0],u=s[1],c=Ix(n);if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=Te(e),l=i;if(l.length<e.length){const e=["row","col","depth"];return`\n        ${bx($x(t,l))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Rx(e,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Sx(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=Ix(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:l}=Te(e);if(o.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${bx($x(t,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Rx(e,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Sx(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=Ix(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=Te(e);if(l.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${bx($x(t,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Rx(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Sx(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Ix(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=Te(e);if(s.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${bx($x(t,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Rx(e,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Sx(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Ix(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function xx(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=dx();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=dx();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=dx();if(null!=s&&ke(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=[1,2],s=["b","row","col"];return`\n        ${xx($x(t,e.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Rx(s,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=dx();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=dx();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(t)}}const wx="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",vx="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Cx="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Nx="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function kx(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Ix(t){return"offset"+t}function Sx(t){const e=t.name,n=Ne(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Ex(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function $x(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Rx(t,e){return e.map((e=>t[e])).join(", ")}class Ax{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,xe(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=Ex(o),u=px("coords",o);let c,h;if(1===a){h=o+1;const t=Ex(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((t=>"int "+t)),m=px("sourceLocR",h-1).concat("inIdx.r"),g=px("sourceLocG",h-1).concat("inIdx.g"),y=px("sourceLocB",h-1).concat("inIdx.b"),b=px("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,C=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Tx{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dx{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Fx{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ri(t,e),Ri(t,n);let i="0.0";null!=r&&(Ri(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(Ri(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class _x{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ri(t,e),Ri(t,n);let i="vec4(0.0)";null!=r&&(Ri(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(Ri(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Ox="return areal * breal - aimag * bimag;",Mx="return areal * bimag + aimag * breal;";class Lx{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ri(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const zx="return a + b;",Bx="return a - b;",Px="return a * b;",Wx="return (a < 0.) ? b * a : a;";class Ux{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=Ri(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Vx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Gx{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ri(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===Ne(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Ex(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=px("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class Hx{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class jx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class qx{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Kx{constructor(t){this.outputShape=[],this.outputShape=Ja(t,1),this.variableNames=t.map(((t,e)=>"T"+e));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Xx{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ja(t,e);const n=this.outputShape,r=n.length,s=Ex(r),a=px("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map(((t,e)=>"T"+e));const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${Yx(i,l,e)}),\n            vec2(${Yx(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${Yx(i,l,d)}),\n          vec2(${Yx(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((t=>"int "+t))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Yx(t,e,n){const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}class Jx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zx{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Qx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ew{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rw{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class sw{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class aw{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class iw{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?be(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class ow{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class lw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${uw(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Ex(r)} coords = getOutputCoords();\n        int end = ${cw(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${cw(r,"coords")} = idx;\n          val += getX(${uw(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function uw(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function cw(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class hw{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=$b.DENSE;const e=Ob(t),n=dx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fx(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class pw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=$b.DENSE;const e=Ob(t),n=dx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fx(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class dw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class fw{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class mw{constructor(t){this.variableNames=["A"],this.outTexUsage=Ab.DOWNLOAD;const e=dx();this.outputShape=t,this.userCode=`\n      ${gx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class gw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ab.DOWNLOAD;const e=dx();this.outputShape=t,this.userCode=`\n      ${gx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class yw{constructor(t,e,n=!1){this.variableNames=["A"];const r=dx(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${mx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class bw{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=dx(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${mx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const xw="return real * expR - imag * expI;",ww="return real * expI + imag * expR;";class vw{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Cw{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Nw{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Ex(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class kw{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Ex(e.length),s=Ex(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Iw(t){const e=dx();return function(t,e){const n=Xb(t,(()=>t.createShader(t.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(zb(t,(()=>t.shaderSource(n,e))),zb(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Sw(t){return function(t,e){const n=Xb(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return zb(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),zb(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Ew(t){return function(t,e){const n=Xb(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return zb(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),zb(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}function $w(t,e,n,s,a,i){!function(t,e){const n=r().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const o=function(t){return Xb(t,(()=>t.createTexture()),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return zb(t,(()=>t.bindTexture(l,o))),zb(t,(()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),zb(t,(()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),zb(t,(()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST))),zb(t,(()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST))),zb(t,(()=>t.texImage2D(l,0,s,e,n,0,a,i,null))),zb(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),o}function Rw(t){return t.internalFormatFloat}function Aw(t){return t.internalFormatHalfFloat}function Tw(t){return t.downloadTextureFormat}function Dw(t){return t.internalFormatPackedFloat}function Fw(t){return t.internalFormatPackedHalfFloat}function _w(t,e,n,r,s,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,r]=Mb(t,e);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class Ow{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=r().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Ib[t]=e}(e,t)):this.gl=Eb(e);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===r().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Pb(this.gl,t),rx(this.gl,e))this.textureHalfFloatExtension=Pb(this.gl,e);else if(r().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),rx(this.gl,s))this.colorBufferHalfFloatExtension=Pb(this.gl,s);else if(r().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",rx(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!rx(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=Sw(this.gl),this.indexBuffer=Ew(this.gl),this.framebuffer=function(t){return Xb(t,(()=>t.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Lb(this.gl,this.textureHalfFloatExtension)}get debug(){return r().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;zb(t,(()=>t.finish())),zb(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),zb(t,(()=>t.deleteFramebuffer(this.framebuffer))),zb(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),zb(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),zb(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=_b(e,n);return $w(t,s,a,Rw(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=_b(e,n);return $w(t,s,a,Aw(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=_b(e,n);return $w(t,s,a,Tw(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){zb(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?zb(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):zb(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),zb(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,l;zb(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,l=a.internalFormatPackedFloat),i.set(s),zb(t,(()=>t.texImage2D(t.TEXTURE_2D,0,l,n,r,0,t.RGBA,o,i))),zb(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Mb(e,n);return $w(t,s,a,Fw(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Mb(e,n);return $w(t,s,a,Dw(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(qb(this.gl,this.framebuffer),this.outputTexture=null),zb(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,r){const[s,a]=_b(e,n),i=new Uint8Array(e*n*4);return zb(t,(()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return _w(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();zb(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s)));const a=16*e*n;return zb(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ))),zb(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),zb(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(r().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const r=new Float32Array(e*n*4);return zb(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r))),r}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=Wb(e,t),r=Iw(e),s=function(t){return Xb(t,(()=>t.createProgram()),"Unable to create WebGLProgram.")}(e);return zb(e,(()=>e.attachShader(s,r))),zb(e,(()=>e.attachShader(s,n))),function(t,e){if(zb(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&Vb(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return zb(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),Gb(t,e,"clipSpacePos",n,3,20,0)&&Gb(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&zb(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Vb(this.gl,this.program),zb(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return Xb(t,(()=>t.getUniformLocation(e,n)),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),zb(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r){zb(t,(()=>Hb(t,e,r))),zb(t,(()=>t.uniform1i(n,r)))}(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=Mb(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Vb(this.gl,this.program),Kb(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),zb(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),zb(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Pb(this.gl,2===r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await Re((()=>this.disposed||this.isQueryAvailable(t,r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||Re((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),jb(this.gl,t,this.framebuffer),this.debug&&Kb(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(jb(this.gl,this.outputTexture,this.framebuffer),this.debug&&Kb(this.gl)):qb(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;jb(r,t,this.framebuffer),this.debug&&Kb(r),this.outputTexture=t,zb(r,(()=>r.viewport(0,0,e,n))),zb(r,(()=>r.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),zb(this.gl,(()=>this.gl.scissor(t,e,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Mw(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!ke(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!ke(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}class Lw{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=dx(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class zw{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class Bw{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Pw{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class Ww{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uw{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,p=u-1-t.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vw{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",f="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${p[0]});\n          result += (${h[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Gw{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Hw{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class jw{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=px("rc",e),r=Ex(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class qw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=Ex(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Kw{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=Ex(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=px("rc",r),l=px("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class Xw{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Yw{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),C=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Jw{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class Zw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${fx(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${mx(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Qw{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class tv{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ev{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class nv{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class rv{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class sv{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map(((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=Ex(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class av{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=px("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Ex(n);function o(n){const r=t.map(((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class iv{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Ex(s.length),l=Ex(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class ov{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class lv{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Ex(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class uv{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Ex(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return cv.slice(0,t).map((t=>"sourceLoc."+t)).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map(((t,e)=>`sourceLoc.${cv[e]} = start[${e}] + coords.${cv[e]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const cv=["x","y","z","w","u","v"];class hv{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Ex(this.rank),n=px("coords",this.rank),r=px("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class pv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Ex(n.length),a=Ex(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map(((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class dv{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=mv(e,n),s=gv(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=fv(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===Db.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===Db.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===Db.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===Db.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===Db.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,s){if(null==this.freeTextures)return;const a=mv(n,s),i=gv(e,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=fv(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=r().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=o):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function fv(t,e,n,r,s){const a=function(t,e){switch(t){case Db.PACKED_2X2_FLOAT32:return Dw(e);case Db.PACKED_2X2_FLOAT16:return Fw(e);case Db.UNPACKED_FLOAT32:return Rw(e);case Db.UNPACKED_FLOAT16:return Aw(e);case Db.PACKED_4X1_UNSIGNED_BYTE:return Tw(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(s){const[e,n]=Mb(t[0],t[1]);i=e*n}else{const[e,n]=_b(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function mv(t,e){if(t===Ab.UPLOAD)return Db.PACKED_2X2_FLOAT32;if(t===Ab.RENDER||null==t)return function(t){return r().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Db.PACKED_2X2_FLOAT32:Db.UNPACKED_FLOAT32:t?Db.PACKED_2X2_FLOAT16:Db.UNPACKED_FLOAT16}(e);if(t===Ab.DOWNLOAD||t===Ab.PIXELS)return Db.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function gv(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class yv{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Ex(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class bv{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const xv="return abs(x);",wv="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",vv="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Cv="return (x >= 0.0) ? x : (exp(x) - 1.0);";const Nv="return -x;",kv="return ceil(x);",Iv="return floor(x);",Sv="return exp(x);",Ev="return exp(x) - 1.0;",$v="return x;",Rv="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Av="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Tv="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Dv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Fv{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=px("rc",e),r=Ex(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const _v=ac,Ov=ic,Mv=oc,Lv=_l,zv={};function Bv(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?Rv:wv;if("elu"===t)return e?Tv:Cv;if("relu6"===t)return e?Av:vv;if("prelu"===t)return e?Vx:Wx;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class Pv extends uc{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!r().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Eb(r().getNumber("WEBGL_VERSION"));this.binaryCache=((e=r().getNumber("WEBGL_VERSION"))in zv||(zv[e]={}),zv[e]),this.gpgpu=new Ow(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new dv(this.gpgpu),this.numMBBeforeWarning=null==r().global.screen?1024:r().global.screen.height*r().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new lc(this,oa())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((r().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||r().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:n,values:t,usage:Ab.UPLOAD}),s}move(t,e,n,s){if(r().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:s,values:e,usage:Ab.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new Dv(i,$v):new bv(i,$v);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Ke()),"complex64"===r){c=Zu(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=Ke()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:s,slice:a,dtype:i,complexTensors:o,isPacked:l}=e;if(null!=a){let e;e=l?new Dv(s,$v):new bv(s,$v);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=n)return this.convertAndCacheOnCPU(t);if(!r().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===r().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&r().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Ob(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=Zu(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=Ne(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeData(u.dataId);const p=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach((t=>t(p))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),p}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!Bb(n)){if(r().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:s}=this.texData.get(t),a=Ne(e);if(r().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Ob(e)).subarray(0,a);return this.disposeData(n.dataId),s}const i=r().getBool("WEBGL_PACK")&&!0===s,o=i?Zb(e):e,l=i?new gw(o):new mw(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeData(u.dataId),h}async time(t){const e=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,t();const a=Ce(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),i=Ce(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(a);o.kernelMs=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}(t),o.getExtraProfileInfo=()=>t.map(((t,e)=>({name:i[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ke(),endMs:null}}endTimer(t){return r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Ke(),t)}async getQueryTime(t){if(r().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return r().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=oa().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||r().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every((t=>null==this.texData.get(t.dataId).texture&&Ne(t.shape)<e))}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:oa().keep(t.clone()),imag:oa().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===Ne(n))return Hr([],n,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),a=ta(t.shape,e,n);if(s||!a){const s=r().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hv(n):new uv(n),a=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=ea(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=qs(e,n,r);if(s.some((t=>0===t)))return Hr([],s);const a=new pv(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=r().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new av(t.shape,e):new sv(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map((t=>To(t))),r=t.map((t=>Ki(t)));return Vr(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>r().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(r().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new Xx(t.map((t=>t.shape)),e);return this.compileAndRun(n,t)}const n=Ja(t.map((t=>t.shape)),e),s=t.map((t=>t.as2D(-1,Ne(t.shape.slice(e))))),a=new Kx(s.map((t=>t.shape)));return this.compileAndRun(a,s).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Nv,t.dtype);const e=new bv(t.shape,Nv);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Ws(t,[0,2,1])),r&&(e=Ws(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return this.multiply(s,u).sum(l,!0)}const l=In(t.dtype,e.dtype),u=new Vw(t.shape,[o,s,a],n,r);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=r?e.shape[1]:e.shape[2],[u,,]=t.shape,c=In(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?Bv(a,!0):null,f=new Vw(t.shape,[u,o,l],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new Lx(Ox,t.shape,e.shape),a=new Lx(Mx,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),l=this.compileAndRun(a,i),u=this.complex(o,l);return o.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Px,t.dtype);const n=new Ux(Px,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNorm(t,e,n,s,a,i){const o=[t,e,n];let l=null;null!=s&&(l=s.shape,o.push(s));let u=null;if(null!=a&&(u=a.shape,o.push(a)),r().getBool("WEBGL_PACK_NORMALIZATION")){const r=new _x(t.shape,e.shape,n.shape,l,u,i);return this.compileAndRun(r,o)}const c=new Fx(t.shape,e.shape,n.shape,l,u,i);return this.compileAndRun(c,o)}localResponseNormalization4D(t,e,n,s,a){const i=r().getBool("WEBGL_PACK_NORMALIZATION")?new Pw(t.shape,e,n,s,a):new zw(t.shape,e,n,s,a);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new Bw(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map((t=>Ye(t))),r=$s(t.shape,t.dtype,n);return Ov(r,e)}const n=new yv(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const s=r().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kw(t.shape,e,n):new qw(t.shape,e,n);return this.compileAndRun(s,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Nw(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){xe(t.rank<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=Gu(t.shape,e,r),a=Hu(s.length,e.length),i=ju(t.shape,e,r),o=qu(n,e.length),l=Ku(i,n,e.length);return Ws(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){xe(t.rank<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Gu(a.shape,e,r,!1),o=Hu(i.length,e.length,!1),l=ju(a.shape,e,r,!1),u=Ws(a.reshape(i),o);return zs(u,l)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=Gi(s),i=Math.ceil(s/a),o=new Jw({windowSize:a,inSize:s,batchSize:r,outSize:i},e),l=this.compileAndRun(o,[t],n);return 1===l.shape[1]?l:this.reduce(l,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=Gi(s),i={windowSize:a,inSize:s,batchSize:r,outSize:Math.ceil(s/a)},o=new cx(i,e,null==n),l=[t];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=Gi(r[r.length-1]),a=new Ax(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){Na("sum",e,t.rank);const[n,r]=va(t.shape,e),s=Ne(r),a=t.as2D(-1,s),i=Sn(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=va(t.shape,e),s=Ne(r),a=t.as2D(-1,s),i=Sn(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=ka([r],t.rank);let a=t;null!=s&&(a=Ws(t,s),r=Sa(1,t.rank)[0]);const i=function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),o=Ne([a.shape[r]]),l=a.as2D(-1,o),u=Sn(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=s&&(c=Ws(c,Ia(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=Pe(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Pe(t,n+1);return n}(i,s),l=new ov({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),u=this.compileAndRun(l,[t,n],r);return u.shape[1]===s?u:(n=Qo(0,s).tile([i/o]),this.segOpCompute(u,e,n,r,s))}argMinMaxReduce(t,e,n){const s=[e];if(Na("arg"+n.charAt(0).toUpperCase()+n.slice(1),s,t.rank),!r().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,r]=va(t.shape,s),a=Ne(r),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new lw(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new lw(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Ux("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Ux("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Ux("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Ux("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Ux("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Ux("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new bv(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Ux("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Ux("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new lv(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],In(e.dtype,n.dtype))}where(t){Ju("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return Lv(t.shape,e)}topk(t,e,n){const r=t.dataSync();return Mv(r,t.shape,t.dtype,e,n)}min(t,e){Na("min",e,t.rank);const[n,r]=va(t.shape,e),s=Ne(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ux("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ux("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ux("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){Na("all",e,t.rank);const[n,r]=va(t.shape,e),s=Ne(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){Na("any",e,t.rank);const[n,r]=va(t.shape,e),s=Ne(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){const n="int32";if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const s=new Ux("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,zx);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=In(t.dtype,e.dtype);if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,zx,n);const s=new Ux(zx,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}packedUnaryOp(t,e,n){const r=new Dv(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new Gx(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map((r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),l=new Ux(n,t.shape,e.shape);return this.compileAndRun(l,[i,o],In(s.dtype,a.dtype))})),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>r().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map((t=>t.dtype)).reduce(((t,e)=>In(t,e))),n=t.map((t=>t.shape)),s=r().getBool("WEBGL_PACK")?new ux(t[0].shape,n):new lx(t[0].shape,n);return this.compileAndRun(s,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Bx);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=In(t.dtype,e.dtype);if(r().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Bx,t.dtype);const s=new Ux(Bx,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}pow(t,e){const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ux("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=In(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,kv,t.dtype);const e=new bv(t.shape,kv);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Iv,t.dtype);const e=new bv(t.shape,Iv);return this.compileAndRun(e,[t])}sign(t){const e=new bv(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new bv(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new bv(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new bv(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new bv(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Sv,t.dtype);const e=new bv(t.shape,Sv);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ev,t.dtype);const e=new bv(t.shape,Ev);return this.compileAndRun(e,[t])}softmax(t,e){const n=Ae([e],t.shape),r=co(t,n),s=Ca(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return ma(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new bv(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new bv(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new bv(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new bv(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new bv(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=r().getBool("WEBGL_PACK")?new Dv(t.shape,Rv):new bv(t.shape,wv),this.compileAndRun(e,[t])}relu6(t){let e;return e=r().getBool("WEBGL_PACK")?new Dv(t.shape,Av):new bv(t.shape,vv),this.compileAndRun(e,[t])}prelu(t,e){const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx(Vx,t.shape,e.shape):new Ux(Wx,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Tv,t.dtype);const e=new bv(t.shape,Cv);return this.compileAndRun(e,[t])}eluDer(t,e){const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Ux("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new bv(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])}int(t){const e=new bv(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let s;s=r().getBool("WEBGL_PACK_CLIP")?new jx(t.shape):new Hx(t.shape);const a=s.getCustomSetupFunc(e,n);return this.compileAndRun(s,[t],null,a)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(r().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,xv,t.dtype);const e=new bv(t.shape,xv);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new qx(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new bv(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new bv(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new bv(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ux("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new bv(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new bv(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new bv(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new bv(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new bv(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new bv(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new bv(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,s,a,i){const o=t.shape,l=this.texData.get(t.dataId),u=n.inChannels,c=o[0]*o[1]*o[2],h=n.outChannels,p="channelsLast"===n.dataFormat,d=(1===c||1===h)&&u>1e3,f=o[2]%2!=0&&!!l.isPacked;if(d||!r().getBool("WEBGL_LAZILY_UNPACK")||!r().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const r=p?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],l=this.reshape(t,[1,r,n.inChannels]),u=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:l,b:u,transposeA:false,transposeB:false,bias:s,activation:a,preluActivationWeights:i}),n.outShape)}const m=p?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),g={dataId:t.dataId,shape:[1,m,n.inChannels],dtype:t.dtype},y=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,xe(tx(l.shape,g.shape),(()=>`packed reshape ${l.shape} to ${g.shape} isn't free`));const b=this.reshape(e,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:g,b:b,transposeA:false,transposeB:false,bias:s,activation:a,preluActivationWeights:i}),w=this.texData.get(x.dataId);return xe(w.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=y,w.shape=n.outShape,oa().makeTensorFromDataId(x.dataId,n.outShape,x.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new Lw(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,C=s?Bv(s,!0):null,N=new Vw(x.shape,[1,f,n.outChannels],!0,!1,w,C,v),k=[x,y];r&&k.push(r),v&&k.push(a);const I=this.compileAndRun(N,k);return p?I.reshape([1,c,u,n.outChannels]):I.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:a,preluActivationWeights:i}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,s,a,i);if(r().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,s,a,i);const o=null!=s,l=null!=i,u=a?Bv(a,!1):null,c=new rw(n,o,u,l),h=[t,e];return s&&h.push(s),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(r().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const s=new rw(n);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const r=new Zx(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new Jx(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:a,preluActivationWeights:i}){const o=r().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,l=a?Bv(a,o):null,u=[t,e],c=null!=s,h=null!=i;let p;return c&&u.push(s),h&&u.push(i),o?(p=new iw(n,c,l,h),this.compileAndRun(p,u)):(p=new aw(n,c,l,h),this.compileAndRun(p,u))}depthwiseConv2D(t,e,n){let s;return r().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(s=new iw(n),this.compileAndRun(s,[t,e])):(s=new aw(n),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new nw(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new ew(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new sw(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new tw(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new Qx(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new Xw(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new Xw(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new Xw(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Ww(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new Tx(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return nc(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new Yw(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new Dx(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Yw(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new Yw(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Uw(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!tx(t.shape,e)&&(null===n.texture||!tx(n.shape,e))){const n=this.packedReshape(t,e);return oa().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return rc(t,e)}resizeBilinear(t,e,n,s){const a=r().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ev(t.shape,e,n,s):new tv(t.shape,e,n,s);return this.compileAndRun(a,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Qw(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new rv(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new nv(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:ml(t),a=s.shape[0],i=s.shape[1],o=new Gw(a,i,n),l=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",l)}oneHot(t,e,n,r){const s=new Hw(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new fw(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new ow(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){xe(e>1,(()=>"blockSize should be > 1 for depthToSpace, but was: "+e));const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,l=a*e,u=i/(e*e),c=new dw("NHWC"===n?[r,o,l,u]:[r,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return _v(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Hs(0,t,n),l=[o/a,a],u=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return rc(Hr([]),n);const h=Qi(0),p=new iv(s,r,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=Hs(0,t,n),l=new iv(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new vw(xw,t.shape,e),s=new vw(ww,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),l=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Vs(t,e),l=e.reshape([a,r]),u=t.reshape([t.size/i,i]),c=new kw(r,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(s)}fill(t,e,n){if("string"===(n=n||ze(e))){const r=Fe(n,Ne(t));return r.fill(e),oa().makeTensor(r,t,n,this)}{const r=new Cw(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return sc(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return oa().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new Fv(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new jw(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[Yb(t.shape),...Jb(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[Yb(e),...Jb(e)],a=new Zw(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=Zb(r);let i;i=n?new pw(a):new hw(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,s,a=!1){const i=this.makeTensorInfo(t.outputShape,n),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===$b.DENSE){const e=Ob(t.outputShape);o.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===Ne(i.shape))return o.values=De(i.dtype,0),i;const l=[],u=e.map((e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&Ne(e.shape)<=r().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!tx(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),l.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach((t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`}));const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,c),p=this.getAndSaveBinary(h,(()=>function(t,e,n,s){const a=e.userCode,i=n.map(((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),o=i.map((t=>t.shapeInfo)),l={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=yx(i,l,a,e.packedInputs),c=t.createProgram(u);let h=null;const p=t.getUniformLocation(c,"NAN",!1);1===r().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:p}}(this.gpgpu,t,u,c))),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,n,s,a){Mw(e.inShapeInfos,n),Mw([e.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===r().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(Ne(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=a&&a(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((t=>this.disposeData(t.dataId))),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!r().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return oa().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!r().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ua((()=>{if(!r().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=r().getBool("DEBUG");r().set("DEBUG",!1);const e=this.abs(Qi(1e-8)).dataSync()[0];if(r().set("DEBUG",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=Ke());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=r().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?be(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=Te(t);t=e.newShape}let s=Ne(t);if(t.length<=1&&s<=n)return[1,s];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=Yb(t);let n=2,r=2;return t.length&&([n,r]=Jb(t)),s=e*(n/2)*(r/2),Ee(s).map((t=>2*t))}return Ee(s)}(n,l),e.texShape=h),null!=a){const t=Zb(n);let r,i=h[1],o=h[0];const p=a instanceof Uint8Array;l?([i,o]=Mb(h[0],h[1]),r=new bw(t,[o,i],p)):r=new yw(t,[o,i],p);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=p?Ab.PIXELS:Ab.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,a);const f=!0,m=this.runWebGLProgram(r,[d],s,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(d.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=Ke()-c)}else{const t=this.acquireTexture(h,o,s,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*Oe(e)}}Ln()&&pa("webgl",(()=>new Pv),2);const Wv={kernelName:Q,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:s}=t;return function(t,e,n){let s=new Ux("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return r().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(s=new Gx("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(s,[t,e],"float32")}(n,s,e)}};class Uv{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Vv={kernelName:et,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new Uv(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class Gv{constructor(t){this.variableNames=["A"];const e=dx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Hv{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=dx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const jv={kernelName:re,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t;let{pixels:a}=e;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,u],p=[c,u,i];(l||o)&&(null==qv&&(qv=document.createElement("canvas").getContext("2d")),qv.canvas.width=u,qv.canvas.height=c,qv.drawImage(a,0,0,u,c),a=qv.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=Ab.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const f=r().getBool("WEBGL_PACK")?new Hv(p):new Gv(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let qv;function Kv(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=Gi(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let a=t;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:l,outSize:u}=s[i],c=new Jw({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=a;a=r.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&r.disposeData(h.dataId)}return a}function Xv(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||tx(t.shape,e)||null!==r.texture&&tx(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[Yb(t.shape),...Jb(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[Yb(e),...Jb(e)],i=new Zw(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}class Yv{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Ex(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class Jv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Ex(this.rank),s=hx("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Zv(t,e,n){const s=r().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Jv(t.shape,e):new Yv(t.shape,e);return n.runWebGLProgram(s,[t],t.dtype)}const Qv={kernelName:dt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,l=Ae(s,r.shape);let u=l;const c=ka(u,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=Jy(t,r.shape,r.dtype,c,e);d=i.makeTensorInfo(e,r.dtype);i.texData.get(d.dataId).values=n}else d=Zv(r,c,i);u=Sa(u.length,o)}Na("max",u,o);const[f,m]=va(d.shape,u);let g,y=f;if(a&&(y=Ca(f,l)),p){const t=Yy(i.texData.get(d.dataId).values,Ne(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype);i.texData.get(g.dataId).values=t}else g=function(t,e,n,r){const s=Ne(e),a=Xv(t,[Ne(t.shape)/s,s],r),i=Kv(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),Xv(i,n,r)}(d,m,y,i);return h&&i.disposeData(d.dataId),g}};const tC={kernelName:yt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;xe(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];xe(qa(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=La(r.shape,s,a,u,i),[h,p]=function(t,e,n,r){let s=new Xw(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new Xw(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,l);return[h,p]}},eC={kernelName:vt,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ju("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=e;return Xl(l.readSync(r.dataId),l.readSync(s.dataId),a,i,o)}},nC=Yl,rC={kernelName:Ct,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ju("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=nC(c,h,a,i,o,l);return[p,d]}},sC=Jl,aC={kernelName:Nt,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ju("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=sC(c,h,p,d,f,m);return[g,y]}};class iC{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=Vu(r,s,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const oC=[Qv,Vv,jv,Wv,tC,eC,rC,aC,{kernelName:se,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=new iC(r.shape,s,a,i);return o.runWebGLProgram(l,[r],r.dtype)}},{kernelName:Xt,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new bv(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:Kt,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:s}=t,a="return (a - b) * (a - b);",i=e,o=r().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gx(a,n.shape,s.shape):new Ux(a,n.shape,s.shape);return i.compileAndRun(o,[n,s])}},{kernelName:Zt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let l;if(a.shouldExecuteOnCPU([r])){const t=Jy(a.texData.get(r.dataId).values,r.shape,r.dtype,s,o);l=a.makeTensorInfo(o,r.dtype);a.texData.get(l.dataId).values=t}else l=Zv(r,s,a);return l}}];for(const t of oC)de(t);var lC;(lC=10,Ui([lC],.9).pow(Qo(0,lC,1,"int32"))).print();console.log(new Array(40).fill(0).map((function(t,e){return function(t){return Math.pow(.9,t)}(e)})));var uC=function(t){var e=[];return function n(r){return r<0?0:e.length>r?e[r]:e[r]=0==r?t(r):1.8*Math.cos(Math.PI/16)*n(r-1)-.81*n(r-2)+t(r)+.5*t(r-1)}}((function(t){return 0==t?1:0}));console.log(new Array(100).fill(0).map((function(t,e){return uC(e)})));var cC=document.createElement("canvas");cC.width=400,cC.height=200;cC.getContext("2d");var hC=function(t,e,n){if(1==e[0]){var r=function(t){return function(e){return null!=t[e]?t[e]:0}},s=r(t),a=r(e),i=r(n),o=[];return function t(e){if(e<0)return 0;if(o.length>e)return o[e];for(var n=0,r=0;r<=e;r++)n+=i(e-r)*s(r)-t(e-(r+1))*a(r+1);return o[e]=n,n}}console.error("a[0] must equal 1")}([1,.5],[1,-1.8*Math.cos(Math.PI/16),.81],[1]);console.log(new Array(40).fill(0).map((function(t,e){return hC(e)})))}();
//# sourceMappingURL=index.ee528b11.js.map
