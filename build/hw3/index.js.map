{
  "version": 3,
  "sources": ["../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/mat4.js", "../../dev/hw3/shader.ts", "../../dev/hw3/gl-unit.ts", "../../dev/hw3/gltf.ts", "../../dev/hw3/gltf-skeleton.ts", "../../dev/hw3/index.ts"],
  "sourcesContent": ["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;", "export const createProgram = (gl: WebGL2RenderingContext, vsSource: string, fsSource: string) => {\r\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vsSource)\r\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fsSource)\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram()\r\n    gl.attachShader(shaderProgram, vertexShader)\r\n    gl.attachShader(shaderProgram, fragmentShader)\r\n    gl.linkProgram(shaderProgram)\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        console.log(\r\n            \"Unable to initialize the shader program: \" + gl.getProgramInfoLog(shaderProgram)\r\n        )\r\n        return null\r\n    }\r\n\r\n    return shaderProgram\r\n}\r\n\r\n//\r\n// creates a shader of the given type, uploads the source and\r\n// compiles it.\r\n//\r\nexport const compileShader = (gl: WebGL2RenderingContext, type: number, source: string) => {\r\n    const shader = gl.createShader(type)\r\n\r\n    // Send the source to the shader object\r\n\r\n    gl.shaderSource(shader, source)\r\n\r\n    // Compile the shader program\r\n\r\n    gl.compileShader(shader)\r\n\r\n    // See if it compiled successfully\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.log(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader))\r\n        gl.deleteShader(shader)\r\n        return null\r\n    }\r\n\r\n    return shader\r\n}\r\n", "import * as gltf from \"./gltf\"\r\nimport * as shader from \"./shader\"\r\nimport * as glm from \"gl-matrix\"\r\n\r\nclass Primitive {\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        primitiveInfo: gltf.Primitive,\r\n        doc: gltf.Doc,\r\n        bin: Uint8Array,\r\n        textures: WebGLTexture[],\r\n        bones?: number\r\n    ) {\r\n        const vao = gl.createVertexArray()\r\n        gl.bindVertexArray(vao)\r\n        let shader_info = Object.keys(primitiveInfo.attributes).map((attribute, loc) => {\r\n            const accessor = doc.accessors[primitiveInfo.attributes[attribute]]\r\n            const bufferView = doc.bufferViews[accessor.bufferView]\r\n\r\n            gl.enableVertexAttribArray(loc)\r\n            const vbo = gl.createBuffer()\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, vbo)\r\n            gl.bufferData(\r\n                gl.ARRAY_BUFFER,\r\n                bin.slice(bufferView.byteOffset, bufferView.byteOffset + bufferView.byteLength)\r\n                    .buffer,\r\n                gl.STATIC_DRAW\r\n            )\r\n            let size = (() => {\r\n                switch (accessor.type) {\r\n                    case \"SCALAR\":\r\n                        return 1\r\n                    case \"VEC2\":\r\n                        return 2\r\n                    case \"VEC3\":\r\n                        return 3\r\n                    case \"VEC4\":\r\n                        return 4\r\n                }\r\n            })()\r\n            gl.vertexAttribPointer(\r\n                loc,\r\n                size,\r\n                accessor.componentType,\r\n                false,\r\n                bufferView[\"byteStride\"] || 0,\r\n                accessor[\"byteOffset\"] || 0\r\n            )\r\n            return {\r\n                loc,\r\n                type: accessor.type.toLowerCase(),\r\n                attribute: attribute.toLowerCase(),\r\n                vbo,\r\n            }\r\n        })\r\n        if (primitiveInfo.indices != undefined) {\r\n            const accessor = doc.accessors[primitiveInfo.indices]\r\n            const bufferView = doc.bufferViews[accessor.bufferView]\r\n            const ebo = gl.createBuffer()\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo)\r\n            gl.bufferData(\r\n                gl.ELEMENT_ARRAY_BUFFER,\r\n                bin.slice(bufferView.byteOffset, bufferView.byteOffset + bufferView.byteLength)\r\n                    .buffer,\r\n                gl.STATIC_DRAW\r\n            )\r\n\r\n            this.count = accessor.count\r\n            this.type = accessor.componentType\r\n        } else {\r\n            const accessor = doc.accessors[primitiveInfo.attributes.POSITION]\r\n            this.count = accessor.count\r\n        }\r\n\r\n        {\r\n            this.gl = gl\r\n            this.vao = vao\r\n            this.mode = primitiveInfo[\"mode\"] || gl.TRIANGLES\r\n            const baseColorTexture =\r\n                doc.materials[primitiveInfo.material].pbrMetallicRoughness[\"baseColorTexture\"]\r\n            if (baseColorTexture != undefined) {\r\n                this.baseColorTexture = textures[baseColorTexture.index]\r\n            }\r\n            const baseColorFactor =\r\n                doc.materials[primitiveInfo.material].pbrMetallicRoughness[\"baseColorFactor\"]\r\n            if (baseColorFactor != undefined) {\r\n                this.baseColorFactor = baseColorFactor\r\n            } else {\r\n                this.baseColorFactor = [0, 0, 0, 0]\r\n            }\r\n        }\r\n\r\n        let vs_in = shader_info.map(({ loc, type, attribute }) => {\r\n            return `layout (location = ${loc}) in ${type} a_${attribute};\\n`\r\n        })\r\n        let vs_out = shader_info.map(({ loc, type, attribute }) => {\r\n            return `out ${type} v_${attribute};\\n`\r\n        })\r\n        let vs_assign = shader_info.map(({ loc, type, attribute }) => {\r\n            return `v_${attribute} = a_${attribute};\\n`\r\n        })\r\n        let vs_source =\r\n            `#version 300 es\\n` +\r\n            `uniform mat4 u_mvp;\\n` +\r\n            `uniform mat4[${bones ?? 1}] u_jointMatrix;\\n` +\r\n            vs_in.reduce((prev, curr) => prev + curr, ``) +\r\n            vs_out.reduce((prev, curr) => prev + curr, ``) +\r\n            `void main(void) {\\n` +\r\n            vs_assign.reduce((prev, curr) => prev + `   ` + curr, ``) +\r\n            `   mat4 skinMatrix =` +\r\n            `   v_weights_0.x * u_jointMatrix[int(v_joints_0.x)] +` +\r\n            `   v_weights_0.y * u_jointMatrix[int(v_joints_0.y)] +` +\r\n            `   v_weights_0.z * u_jointMatrix[int(v_joints_0.z)] +` +\r\n            `   v_weights_0.w * u_jointMatrix[int(v_joints_0.w)];` +\r\n            `   gl_Position = u_mvp * skinMatrix * vec4(a_position, 1.0);\\n` +\r\n            `}\\n`\r\n        console.log(vs_source)\r\n        let fs_in = shader_info.map(({ loc, type, attribute }) => {\r\n            return `in ${type} v_${attribute};\\n`\r\n        })\r\n        let fs_source =\r\n            `#version 300 es\\n` +\r\n            `precision mediump float;\\n` +\r\n            fs_in.reduce((prev, curr) => prev + curr, ``) +\r\n            `out vec4 f_color;\\n` +\r\n            `uniform sampler2D u_texture;\\n` +\r\n            `uniform vec4 u_basecolor;\\n` +\r\n            // `uniform int u_useTexture;\\n` +\r\n            `void main(void) {\\n` +\r\n            (() => {\r\n                let s = \"\"\r\n                if (this.baseColorTexture != undefined) {\r\n                    s =\r\n                        `   vec4 texcolor = texture(u_texture, v_texcoord_0);\\n` +\r\n                        `   f_color.a = texcolor.a + u_basecolor.a * (1.0 - texcolor.a);\\n` +\r\n                        `   if (f_color.a == 0.) { f_color.rgb = vec3(0., 0., 0.); }\\n` +\r\n                        `   else { f_color.rgb = texcolor.rgb * texcolor.a + u_basecolor.rgb * u_basecolor.a * (1. - texcolor.a); };\\n`\r\n                } else {\r\n                    s = `   f_color = u_basecolor;\\n`\r\n                }\r\n                return s\r\n            })() +\r\n            `}\\n`\r\n        console.log(fs_source)\r\n\r\n        {\r\n            this.program = shader.createProgram(gl, vs_source, fs_source)\r\n        }\r\n    }\r\n    draw(mvp: glm.mat4) {\r\n        const gl = this.gl\r\n        gl.useProgram(this.program)\r\n\r\n        // let u_useTextureLocation = gl.getUniformLocation(this.program, \"u_useTexture\");\r\n        // if (this.baseColorTexture == undefined) {\r\n        //     gl.uniform1i(u_useTextureLocation, 0)\r\n        // } else {\r\n        //     gl.uniform1i(u_useTextureLocation, 1)\r\n        // }\r\n\r\n        let u_basecolorLocation = gl.getUniformLocation(this.program, \"u_basecolor\")\r\n        gl.uniform4fv(u_basecolorLocation, this.baseColorFactor)\r\n\r\n        let u_textureLocation = gl.getUniformLocation(this.program, \"u_texture\")\r\n        gl.uniform1i(u_textureLocation, 0)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        gl.bindTexture(gl.TEXTURE_2D, this.baseColorTexture)\r\n        gl.bindVertexArray(this.vao)\r\n\r\n        let u_mvp_loc = gl.getUniformLocation(this.program, \"u_mvp\")\r\n        gl.uniformMatrix4fv(u_mvp_loc, false, mvp)\r\n\r\n        if (this.type != undefined) gl.drawElements(this.mode, this.count, this.type, 0)\r\n        else gl.drawArrays(this.mode, 0, this.count)\r\n        gl.bindVertexArray(null)\r\n    }\r\n    drawAnim(mvp: glm.mat4, bones: glm.mat4[]) {\r\n        const gl = this.gl\r\n        gl.useProgram(this.program)\r\n\r\n        let u_basecolorLocation = gl.getUniformLocation(this.program, \"u_basecolor\")\r\n        gl.uniform4fv(u_basecolorLocation, this.baseColorFactor)\r\n\r\n        let u_textureLocation = gl.getUniformLocation(this.program, \"u_texture\")\r\n        gl.uniform1i(u_textureLocation, 0)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        gl.bindTexture(gl.TEXTURE_2D, this.baseColorTexture)\r\n        gl.bindVertexArray(this.vao)\r\n\r\n        let u_mvp_loc = gl.getUniformLocation(this.program, \"u_mvp\")\r\n        gl.uniformMatrix4fv(u_mvp_loc, false, mvp)\r\n\r\n        bones.forEach((bone, idx) => {\r\n            let u_jointMatrix_loc = gl.getUniformLocation(this.program, `u_jointMatrix[${idx}]`)\r\n            gl.uniformMatrix4fv(u_jointMatrix_loc, false, bone)\r\n        })\r\n\r\n        if (this.type != undefined) gl.drawElements(this.mode, this.count, this.type, 0)\r\n        else gl.drawArrays(this.mode, 0, this.count)\r\n        gl.bindVertexArray(null)\r\n    }\r\n\r\n    gl: WebGL2RenderingContext\r\n    vao: WebGLVertexArrayObject\r\n    program: WebGLProgram\r\n    count: number\r\n    mode: number\r\n    type?: number\r\n    baseColorTexture: WebGLTexture\r\n    baseColorFactor: [number, number, number, number]\r\n}\r\n\r\nclass Mesh {\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        meshInfo: gltf.Mesh,\r\n        doc: gltf.Doc,\r\n        bin: Uint8Array,\r\n        textures: WebGLTexture[]\r\n    ) {\r\n        this.primitives = meshInfo.primitives.map((primitiveInfo) => {\r\n            return new Primitive(gl, primitiveInfo, doc, bin, textures)\r\n        })\r\n    }\r\n\r\n    draw(mvp: glm.mat4) {\r\n        this.primitives.forEach((primitive) => primitive.draw(mvp))\r\n    }\r\n    primitives: Primitive[]\r\n}\r\n\r\nclass Node {\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        nodeInfo: gltf.Node,\r\n        doc: gltf.Doc,\r\n        bin: Uint8Array,\r\n        textures: WebGLTexture[]\r\n    ) {\r\n        this.mat = glm.mat4.fromRotationTranslationScale(\r\n            glm.mat4.create(),\r\n            nodeInfo[\"rotation\"] || [0, 0, 0, 0],\r\n            nodeInfo[\"translation\"] || [0, 0, 0],\r\n            nodeInfo[\"scale\"] || [1, 1, 1]\r\n        )\r\n        if (nodeInfo[\"mesh\"] != undefined) {\r\n            this.mesh = new Mesh(gl, doc.meshes[nodeInfo[\"mesh\"]], doc, bin, textures)\r\n        }\r\n        this.children = (nodeInfo[\"children\"] || []).map((childIdx) => {\r\n            return new Node(gl, doc.nodes[childIdx], doc, bin, textures)\r\n        })\r\n    }\r\n\r\n    draw(p: glm.mat4) {\r\n        let mvp = glm.mat4.multiply(glm.mat4.create(), p, this.mat)\r\n        if (this.mesh != undefined) {\r\n            this.mesh.draw(mvp)\r\n        }\r\n        this.children.forEach((child) => child.draw(mvp))\r\n    }\r\n\r\n    children: Node[]\r\n    mesh: Mesh\r\n    mat: glm.mat4\r\n}\r\n\r\nclass Scene {\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        sceneInfo: gltf.Scene,\r\n        doc: gltf.Doc,\r\n        bin: Uint8Array,\r\n        textures: WebGLTexture[]\r\n    ) {\r\n        this.nodes = sceneInfo.nodes.map((nodeIdx) => {\r\n            return new Node(gl, doc.nodes[nodeIdx], doc, bin, textures)\r\n        })\r\n    }\r\n    draw(p: glm.mat4) {\r\n        this.nodes.forEach((node) => node.draw(p))\r\n    }\r\n\r\n    nodes: Node[]\r\n}\r\n\r\nclass _Skeleton {}\r\n\r\nclass Skeleton {\r\n    constructor(skin: gltf.Skin, doc: gltf.Doc, bin: Uint8Array) {\r\n        const accessor = doc.accessors[skin.inverseBindMatrices]\r\n        const bv = doc.bufferViews[accessor.bufferView]\r\n        const buf = bin.slice(\r\n            bv.byteOffset + (accessor?.byteOffset ?? 0),\r\n            bv.byteOffset + bv.byteLength\r\n        )\r\n        const f32arr = new Float32Array(buf.buffer)\r\n        this.inverseBindMatrices = new Array(accessor.count).fill(0).map((_, idx) => {\r\n            return f32arr.slice(idx * 16, (idx + 1) * 16)\r\n        })\r\n        this.bones = new Array(accessor.count).fill(0).map((_, idx) => {\r\n            return glm.mat4.create()\r\n        })\r\n        this.boneNum = accessor.count\r\n        this.skele = doc.nodes\r\n    }\r\n\r\n    boneMats() {}\r\n    skele: gltf.Node[]\r\n    boneNum: number\r\n    inverseBindMatrices: glm.mat4[]\r\n    bones: glm.mat4[]\r\n}\r\n\r\nexport const primitive = (\r\n    gl: WebGL2RenderingContext,\r\n    primitiveInfo: gltf.Primitive,\r\n    doc: gltf.Doc,\r\n    bin: Uint8Array,\r\n    textures: WebGLTexture[],\r\n    bones?: number\r\n) => new Primitive(gl, primitiveInfo, doc, bin, textures, bones)\r\n\r\nexport const mesh = (\r\n    gl: WebGL2RenderingContext,\r\n    meshInfo: gltf.Mesh,\r\n    doc: gltf.Doc,\r\n    bin: Uint8Array,\r\n    textures: WebGLTexture[]\r\n) => new Mesh(gl, meshInfo, doc, bin, textures)\r\n\r\nexport const node = (\r\n    gl: WebGL2RenderingContext,\r\n    nodeInfo: gltf.Node,\r\n    doc: gltf.Doc,\r\n    bin: Uint8Array,\r\n    textures: WebGLTexture[]\r\n) => new Node(gl, nodeInfo, doc, bin, textures)\r\n\r\nexport const scene = (\r\n    gl: WebGL2RenderingContext,\r\n    sceneInfo: gltf.Scene,\r\n    doc: gltf.Doc,\r\n    bin: Uint8Array,\r\n    textures: WebGLTexture[]\r\n) => new Scene(gl, sceneInfo, doc, bin, textures)\r\n\r\nexport const skeleton = (skin: gltf.Skin, doc: gltf.Doc, bin: Uint8Array) =>\r\n    new Skeleton(skin, doc, bin)\r\n", "const asModel = async (glbBytes) => {\r\n    let doc: Doc = null\r\n    let bin: Uint8Array = null\r\n    let offset = 12\r\n\r\n    for (let i = 0; offset < glbBytes.length; i++) {\r\n        const len = glbBytes.slice(offset, offset + 4).reduce((prev, curr, idx) => {\r\n            return prev + curr * 256 ** idx\r\n        }, 0)\r\n        const type = String.fromCharCode(...glbBytes.slice(offset + 4, offset + 8))\r\n        const data = glbBytes.slice(offset + 8, offset + 8 + len)\r\n        switch (type) {\r\n            case \"BIN\\u0000\": {\r\n                bin = data\r\n                break\r\n            }\r\n            case \"JSON\": {\r\n                doc = JSON.parse(String.fromCharCode(...data))\r\n                break\r\n            }\r\n            default: {\r\n                console.error(`chunk type : ${type} is not defined`)\r\n            }\r\n        }\r\n        offset += 8 + len\r\n    }\r\n    let imgs: HTMLImageElement[] = []\r\n    const images = doc.images || []\r\n    for (let image of images) {\r\n        let img: HTMLImageElement = await new Promise((resolve, reject) => {\r\n            const bufferView = doc.bufferViews[image.bufferView]\r\n\r\n            let imgBlob = new Blob(\r\n                [\r\n                    bin.slice(\r\n                        bufferView.byteOffset || 0,\r\n                        (bufferView.byteOffset || 0) + bufferView.byteLength\r\n                    ),\r\n                ],\r\n                { type: image.mimeType }\r\n            )\r\n            let imgUrl = URL.createObjectURL(imgBlob)\r\n            let img = new Image()\r\n            img.onload = () => resolve(img)\r\n            img.src = imgUrl\r\n        })\r\n        imgs.push(img)\r\n    }\r\n    return { doc, bin, imgs }\r\n}\r\n\r\nexport const importFromArrayBuffer = (bytes: ArrayBuffer) => {\r\n    console.log(String.fromCharCode(...new Uint8Array(bytes.slice(0, 4))))\r\n    console.log(`ver.${new Uint32Array(bytes.slice(4, 8))[0]}`)\r\n    console.log(`Bytes : ${new Uint32Array(bytes.slice(8, 12))[0]}`)\r\n\r\n    return asModel(new Uint8Array(bytes))\r\n}\r\n\r\nexport const createTexture = (gl: WebGL2RenderingContext, doc: Doc, imgs: HTMLImageElement[]) => {\r\n    return <WebGLTexture[]>(doc.textures || []).map((texInfo) => {\r\n        const texture = gl.createTexture()\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        if (texInfo[\"sampler\"] != undefined) {\r\n            const sampler = doc.samplers[texInfo.sampler]\r\n            if (sampler[\"magFilter\"] != undefined) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, sampler[\"magFilter\"])\r\n            }\r\n            if (sampler[\"minFilter\"] != undefined) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, sampler[\"minFilter\"])\r\n            }\r\n            if (sampler[\"wrapS\"] != undefined) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, sampler[\"wrapS\"])\r\n            }\r\n            if (sampler[\"wrapT\"] != undefined) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, sampler[\"wrapT\"])\r\n            }\r\n        }\r\n        const img = imgs[texInfo.source]\r\n\r\n        gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB8, img.width, img.height)\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, img)\r\n        gl.generateMipmap(gl.TEXTURE_2D)\r\n        return texture\r\n    })\r\n}\r\n\r\nexport class Doc {\r\n    accessors: Accessor[]\r\n    asset: Asset\r\n    bufferViews: BufferView[]\r\n    buffers: Buffer[]\r\n    images: GltfImage[]\r\n    materials: Material[]\r\n    meshes: Mesh[]\r\n    nodes: Node[]\r\n    samplers: Sampler[]\r\n    scene: number\r\n    scenes: Scene[]\r\n    skins: Skin[]\r\n    textures: Texture[]\r\n    animations: Animation[]\r\n}\r\n\r\nexport class Asset {\r\n    generator: string\r\n    version: string\r\n}\r\n\r\nexport class Accessor {\r\n    bufferView: number\r\n    componentType: number\r\n    count: number\r\n    max: number[]\r\n    min: number[]\r\n    type: \"SCALAR\" | \"VEC2\" | \"VEC3\" | \"VEC4\" | \"MAT2\" | \"MAT3\" | \"MAT4\"\r\n    byteOffset?: number\r\n}\r\n\r\nexport class BufferView {\r\n    buffer: number\r\n    byteLength: number\r\n    byteOffset: number\r\n    byteStride: number\r\n}\r\n\r\nexport class Buffer {\r\n    byteLength: number\r\n}\r\n\r\nexport class GltfImage {\r\n    bufferView: number\r\n    mimeType: string\r\n    name: string\r\n}\r\n\r\nexport class Material {\r\n    doubleSided: boolean\r\n    name: string\r\n    pbrMetallicRoughness: PbrMetallicRoughness\r\n}\r\nexport class PbrMetallicRoughness {\r\n    baseColorTexture: BaseColorTexture\r\n    metallicFactor: number\r\n    roughnessFactor: number\r\n}\r\nexport class BaseColorTexture {\r\n    index: number\r\n    texCoord: number\r\n}\r\n\r\nexport class Mesh {\r\n    name: string\r\n    primitives: Primitive[]\r\n}\r\nexport class Primitive {\r\n    attributes: { [attribute: string]: number }\r\n    indices: number\r\n    material: number\r\n}\r\n\r\nexport class Node {\r\n    children: number[]\r\n    name: string\r\n    rotation: [number, number, number, number]\r\n    scale: [number, number, number]\r\n    translation: [number, number, number]\r\n}\r\n\r\nexport class Sampler {\r\n    magFilter: number\r\n    minFilter: number\r\n    wrapS: number\r\n    wrapT: number\r\n}\r\n\r\nexport class Scene {\r\n    name: string\r\n    nodes: number[]\r\n}\r\n\r\nexport class Skin {\r\n    inverseBindMatrices: number\r\n    joints: number[]\r\n    name: string\r\n}\r\n\r\nexport class Texture {\r\n    sampler: number\r\n    source: number\r\n}\r\n\r\nexport class Animation {\r\n    name: string\r\n    samplers: { input: number; output: number }[]\r\n    channels: {\r\n        sampler: number\r\n        target: { node: number; path: \"rotation\" | \"scale\" | \"translation\" }\r\n    }[]\r\n}\r\n", "import * as gltf from \"./gltf\"\r\nimport * as shader from \"./shader\"\r\nimport * as glm from \"gl-matrix\"\r\n\r\nexport const getGlobalJointTransforms = (\r\n    idx: number,\r\n    nodes: gltf.Node[],\r\n    gMat: glm.mat4,\r\n    jointMats: { [idx: number]: glm.mat4 }\r\n) => {\r\n    jointMats[idx] = glm.mat4.mul(\r\n        glm.mat4.create(),\r\n        gMat,\r\n        glm.mat4.fromRotationTranslationScale(\r\n            glm.mat4.create(),\r\n            nodes[idx][\"rotation\"] || [0, 0, 0, 0],\r\n            nodes[idx][\"translation\"] || [0, 0, 0],\r\n            nodes[idx][\"scale\"] || [1, 1, 1]\r\n        )\r\n    )\r\n    return (\r\n        nodes[idx].children?.reduce((jointMats, child) => {\r\n            return getGlobalJointTransforms(\r\n                child,\r\n                nodes,\r\n                jointMats[idx],\r\n                Object.assign({}, jointMats)\r\n            )\r\n        }, jointMats) ?? jointMats\r\n    )\r\n}\r\nconst getAccessorBuff = (accessorIdx: number, doc: gltf.Doc, bin: Uint8Array) => {\r\n    const accessor = doc.accessors[accessorIdx]\r\n    const bv = doc.bufferViews[accessor.bufferView]\r\n    const buf = bin.slice(\r\n        bv.byteOffset + (accessor?.byteOffset ?? 0),\r\n        bv.byteOffset + bv.byteLength\r\n    )\r\n    const size = (() => {\r\n        switch (accessor.type) {\r\n            case \"SCALAR\":\r\n                return 1\r\n            case \"VEC2\":\r\n                return 2\r\n            case \"VEC3\":\r\n                return 3\r\n            case \"VEC4\":\r\n                return 4\r\n            case \"MAT2\":\r\n                return 4\r\n            case \"MAT3\":\r\n                return 9\r\n            case \"MAT4\":\r\n                return 16\r\n        }\r\n    })()\r\n    const stride = bv.byteStride\r\n    return new Array(accessor.count).fill(0).map((_, idx) => {\r\n        if (stride == undefined)\r\n            return new Float32Array(buf.slice(4 * idx * size, 4 * (idx + 1) * size).buffer)\r\n        else\r\n            return new Float32Array(\r\n                buf.slice(idx * stride, (idx + 1) * stride).slice(0, 4 * size).buffer\r\n            )\r\n    })\r\n    // const f32arr = new Float32Array(buf.buffer)\r\n    // const size = f32arr.length / accessor.count\r\n    //\r\n    // console.log(accessor.type)\r\n    // console.log(accessor.count)\r\n    // console.log(accessorIdx)\r\n\r\n    // return new Array(accessor.count).fill(0).map((_, idx) => {\r\n    //     return f32arr.slice(idx * size, (idx + 1) * size)\r\n    // })\r\n}\r\nexport const getInverseBindMats = (skin: gltf.Skin, doc: gltf.Doc, bin: Uint8Array) => {\r\n    return getAccessorBuff(skin.inverseBindMatrices, doc, bin)\r\n}\r\n\r\ninterface AnimUnit {\r\n    input: number[]\r\n    output: Float32Array[]\r\n    node: number\r\n    path: \"rotation\" | \"scale\" | \"translation\"\r\n}\r\n\r\nexport const getAnimStruct = (anim: gltf.Animation, doc: gltf.Doc, bin: Uint8Array) => {\r\n    return anim.channels.map((ch) => {\r\n        const { input, output } = anim.samplers[ch.sampler]\r\n        return {\r\n            ...ch.target,\r\n            input: getAccessorBuff(input, doc, bin).reduce(\r\n                (prev, curr) => [...prev, ...curr],\r\n                <number[]>[]\r\n            ),\r\n            output: getAccessorBuff(output, doc, bin),\r\n        }\r\n    })\r\n}\r\n\r\nexport const getAnimNodes = (animStruct: AnimUnit[], time: number) => {\r\n    let nodes = {}\r\n    animStruct.map((animUnit) => {\r\n        const idx = animUnit.input.findIndex((t) => t >= time)\r\n        let total = animUnit.input[idx] - (animUnit.input[idx - 1] ?? 0)\r\n        let a = (animUnit.input[idx] - time) / total\r\n        let b = (time - (animUnit.input[idx - 1] ?? 0)) / total\r\n        let vec_len = animUnit.path == \"rotation\" ? 4 : animUnit.path == \"scale\" ? 3 : 4\r\n        let vec = new Array(vec_len).fill(0).map((_, j) => {\r\n            return animUnit.output[idx - 1]?.[j] * a + animUnit.output[idx]?.[j] * b\r\n        })\r\n        if (nodes[animUnit.node] == undefined) {\r\n            nodes[animUnit.node] = {}\r\n        }\r\n        nodes[animUnit.node][animUnit.path] = <any>vec\r\n    })\r\n    return nodes\r\n}\r\n\r\nexport const getAnimGlobalJointTransforms = (\r\n    idx: number,\r\n    nodes: gltf.Node[],\r\n    animNodes: gltf.Node[],\r\n    gMat: glm.mat4,\r\n    jointMats: { [idx: number]: glm.mat4 }\r\n) => {\r\n    // jointMats[idx] = glm.mat4.mul(\r\n    //     glm.mat4.create(),\r\n    //     gMat,\r\n    //     glm.mat4.fromRotationTranslationScale(\r\n    //         glm.mat4.create(),\r\n    //         nodes[idx][\"rotation\"] || [0, 0, 0, 0],\r\n    //         nodes[idx][\"translation\"] || [0, 0, 0],\r\n    //         nodes[idx][\"scale\"] || [1, 1, 1]\r\n    //     )\r\n    // )\r\n    jointMats[idx] = glm.mat4.mul(\r\n        glm.mat4.create(),\r\n        gMat,\r\n        glm.mat4.fromRotationTranslationScale(\r\n            glm.mat4.create(),\r\n            animNodes[idx]?.[\"rotation\"] ?? nodes[idx][\"rotation\"] ?? [0, 0, 0, 0],\r\n            animNodes[idx]?.[\"translation\"] ?? nodes[idx][\"translation\"] ?? [0, 0, 0],\r\n            animNodes[idx]?.[\"scale\"] ?? nodes[idx][\"scale\"] ?? [1, 1, 1]\r\n        )\r\n    )\r\n    return (\r\n        nodes[idx].children?.reduce((jointMats, child) => {\r\n            return getAnimGlobalJointTransforms(\r\n                child,\r\n                nodes,\r\n                animNodes,\r\n                jointMats[idx],\r\n                Object.assign({}, jointMats)\r\n            )\r\n        }, jointMats) ?? jointMats\r\n    )\r\n}\r\n", "import * as glm from \"gl-matrix\"\r\nimport * as glUnit from \"./gl-unit\"\r\nimport * as gltf from \"./gltf\"\r\nimport {\r\n    getGlobalJointTransforms,\r\n    getInverseBindMats,\r\n    getAnimStruct,\r\n    getAnimNodes,\r\n    getAnimGlobalJointTransforms,\r\n} from \"./gltf-skeleton\"\r\n// @ts-ignore\r\nimport uint8array from \"./assets/Fox.glb\"\r\ngltf.importFromArrayBuffer(uint8array).then(({ doc, bin, imgs }) => {\r\n    console.log({ doc, bin, imgs })\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = 600\r\n    canvas.height = 400\r\n    document.body.append(canvas)\r\n\r\n    const gl = canvas.getContext(\"webgl2\", { preserveDrawingBuffer: true })\r\n    gl.clearColor(0, 0, 0, 1)\r\n    gl.clearDepth(1)\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n    gl.enable(gl.CULL_FACE)\r\n    gl.enable(gl.DEPTH_TEST)\r\n    gl.depthMask(true)\r\n    gl.depthFunc(gl.LEQUAL)\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n    const fieldOfView = (60 * Math.PI) / 180 // in radians\r\n    const aspect = gl.canvas.width / gl.canvas.height\r\n    const zNear = 0.01\r\n    const zFar = 1000\r\n    const projectionMatrix = glm.mat4.perspective(\r\n        glm.mat4.create(),\r\n        fieldOfView,\r\n        aspect,\r\n        zNear,\r\n        zFar\r\n    )\r\n    let v = glm.mat4.lookAt(glm.mat4.create(), [200, 20, 0], [0, 20, 0], [0, 1, 0])\r\n    let mvp = glm.mat4.multiply(glm.mat4.create(), projectionMatrix, v)\r\n    const textures = gltf.createTexture(gl, doc, imgs)\r\n    const primitive = glUnit.primitive(\r\n        gl,\r\n        doc.meshes[0].primitives[0],\r\n        doc,\r\n        bin,\r\n        textures,\r\n        doc.skins[0].joints.length\r\n    )\r\n    let nodes = <gltf.Node[]>JSON.parse(JSON.stringify(doc.nodes))\r\n    console.log(nodes)\r\n    const animStruct = getAnimStruct(doc.animations[1], doc, bin)\r\n    console.log(animStruct)\r\n    let t = 0.00001\r\n    const loop = () => {\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n        const animNodes = getAnimNodes(animStruct, t)\r\n\r\n        const globalJointTransforms = getAnimGlobalJointTransforms(\r\n            2,\r\n            nodes,\r\n            <gltf.Node[]>animNodes,\r\n            glm.mat4.create(),\r\n            {}\r\n        )\r\n        const inverseBindMatrices = getInverseBindMats(doc.skins[0], doc, bin)\r\n        let jointMats = doc.skins[0].joints.map((jointIdx, invIdx) => {\r\n            return glm.mat4.mul(\r\n                glm.mat4.create(),\r\n                globalJointTransforms[jointIdx],\r\n                inverseBindMatrices[invIdx]\r\n            )\r\n        })\r\n        primitive.drawAnim(mvp, jointMats)\r\n        if (t > 0.7) {\r\n            t = 0.00001\r\n        } else {\r\n            t += 0.0166\r\n        }\r\n        requestAnimationFrame(loop)\r\n    }\r\n    loop()\r\n})\r\n"],
  "mappings": "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",
  "names": []
}
